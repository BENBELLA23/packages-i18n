# This file was automatically generated
msgid ""
msgstr ""
"Project-Id-Version: opensuse-i 18n\n"
"POT-Creation-Date: 2016-11-08 18:34:07\n"
"PO-Revision-Date: 2017-02-09 03:16+0000\n"
"Last-Translator: Yasuhiko Kamata <belphegor@belbel.or.jp>\n"
"Language-Team: Japanese <https://l10n.opensuse.org/projects/packages-i18n"
"/perl-master/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 2.6\n"

#. tumbleweed/perl-Net-Pcap/pcapdump/summary
#. leap/perl-Net-Pcap/pcapdump/summary
msgid "Dump packets from the network"
msgstr "ネットワークからのパケットのダンプ"

#. tumbleweed/perl-Net-Pcap/pcapdump/description
#. leap/perl-Net-Pcap/pcapdump/description
msgid ""
"Command line tool to dump packets from the network.\n"
"\n"
"pcapdump mimics the very basic features of tcpdump(1) and provides a good "
"example of how to use Net::Pcap."
msgstr ""
"ネットワークからパケットのダンプを行なうことができるコマンドラインツールです。\n"
"\n"
"pcapdump は tcpdump(1) のごく基本的な機能をまねているほか、 Net::Pcap の使い方についてわかりやすい例を示しています。"

#. tumbleweed/perl-Net-Pcap/pcapinfo/summary
#. leap/perl-Net-Pcap/pcapinfo/summary
msgid "Prints detailed information about the network devices"
msgstr "ネットワークデバイスに対する詳細情報の表示"

#. tumbleweed/perl-Net-Pcap/pcapinfo/description
#. leap/perl-Net-Pcap/pcapinfo/description
msgid ""
"pcapinfo prints detailed information about the network devices and Pcap "
"library available on the current host."
msgstr "pcapinfo は、現在のホスト上にあるネットワークデバイスや、 Pcap ライブラリに対する詳細な情報を出力します。"

#. tumbleweed/perl/summary
#. tumbleweed/perl/perl-base/summary
#. tumbleweed/perl/perl-32bit/summary
#. tumbleweed/perl/perl-base-32bit/summary
#. leap/perl/perl-32bit/summary
#. leap/perl/summary
#. leap/perl/perl-base-32bit/summary
#. leap/perl/perl-base/summary
msgid "The Perl interpreter"
msgstr "Perl インタプリタ"

#. tumbleweed/perl/description
#. tumbleweed/perl/perl-32bit/description
#. leap/perl/perl-32bit/description
#. leap/perl/description
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks. Perl is intended to be "
"practical (easy to use, efficient, and complete) rather than beautiful "
"(tiny, elegant, and minimal).\n"
"\n"
"Some of the modules available on CPAN can be found in the \"perl\" series."
msgstr ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl は任意のテキストファイルを読み出してこれらのテキストから 必要な情報を取"
"り出し、これらの情報に基づく何らかのレポートを表示することに 長けています。ま"
"た、多くのシステム管理作業にも便利に使用することができます。\n"
"\n"
"Perl は美しさ (簡易性、美観、コンパクト性) よりも現実 (使いやすさ、便利さ、完"
"全性) を追求しています。\n"
"\n"
" \"perl\" で始まるパッケージ名で、 CPAN 提供のモジュールがいくつか提供されて"
"います。"

#. tumbleweed/perl-Algorithm-Combinatorics/summary
#. leap/perl-Algorithm-Combinatorics/summary
msgid "Efficient generation of combinatorial sequences"
msgstr "組み合わせ数学の順列の効果的な生成"

#. tumbleweed/perl-Algorithm-Combinatorics/description
#. leap/perl-Algorithm-Combinatorics/description
msgid ""
"Algorithm::Combinatorics is an efficient generator of combinatorial "
"sequences. Algorithms are selected from the literature (work in progress, "
"see the /REFERENCES manpage). Iterators do not use recursion, nor stacks, "
"and are written in C.\n"
"\n"
"Tuples are generated in lexicographic order, except in 'subsets()'."
msgstr ""
"Algorithm::Combinatorics は組み合わせ数学における順列を効果的に生成するための仕組みです。アルゴリズムは選択することができます "
"(現在作業中です。詳しくは /REFERENCES マニュアルページをお読みください) 。列挙子では再帰化やスタックを使用しておらず、 C "
"言語で記述されています。\n"
"\n"
"組は 'subsets()' を除いて、辞書順に生成されます。"

#. tumbleweed/perl-Alien-SDL/summary
#. leap/perl-Alien-SDL/summary
msgid "Building, Finding and Using Sdl Binaries"
msgstr "SDL バイナリの構築と検出、および使用"

#. tumbleweed/perl-Alien-SDL/description
#. leap/perl-Alien-SDL/description
msgid ""
"Please see the Alien manpage for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::SDL' can be used to detect and get configuration settings "
"from an installed SDL and related libraries. Based on your platform it "
"offers the possibility to download and install prebuilt binaries or to build "
"SDL & co. from source codes.\n"
"\n"
"The important facts:\n"
"\n"
"* * The module does not modify in any way the already existing SDL   "
"installation on your system.\n"
"\n"
"* * If you reinstall SDL libs on your system you do not need to   reinstall "
"Alien::SDL (providing that you use the same directory for   the new "
"installation).\n"
"\n"
"* * The prebuild binaries and/or binaries built from sources are always   "
"installed into perl module's 'share' directory.\n"
"\n"
"* * If you use prebuild binaries and/or binaries built from sources   it "
"happens that some of the dynamic libraries (*.so, *.dll) will not   "
"automaticly loadable as they will be stored somewhere under perl module's   "
"'share' directory. To handle this scenario Alien::SDL offers some special   "
"functionality (see below)."
msgstr ""
"Alien ネームスペースのマニフェストについて、詳しくは Alien のマニュアルページ"
"をお読みください。\n"
"\n"
"端的にいうと 'Alien::SDL' は、インストール済みの SDL および関連ライブラリから"
"設定情報を検出し、それらを取り出すために使用します。お使いのプラットフォーム"
"をベースにして、構築済みのバイナリをダウンロードしてインストールしたり、SDL "
"やその他のライブラリをソースコードから構築したりすることができます。\n"
"\n"
"主に下記のような特徴があります:\n"
"\n"
"* * お使いのシステムにインストールされた SDL ライブラリは、本システムで一切修"
"正されることがありません。\n"
"\n"
"* * お使いのシステムで SDL ライブラリを再インストールした場合も、 Alien::SDL "
"を再インストールする必要はありません (新しくインストールしたライブラリも、同"
"じディレクトリにインストールする必要があります) 。\n"
"\n"
"* * 構築済みのバイナリやソースコードから構築したバイナリは、常に Perl モ"
"ジュールの 'share' ディレクトリ内にインストールされます。\n"
"\n"
"* * 構築済みのバイナリやソースコードから構築したバイナリを使用する場合、Perl "
"モジュールの 'share' ディレクトリ内に存在していることから、いくつかの動的なラ"
"イブラリ (*.so, *.dll) が自動的に読み込まれない場合があります。このような場合"
"に対応するため、 Alien::SDL ではいくつかの特殊機能を用意しています (詳しくは"
"下記をお読みください) 。"

#. tumbleweed/perl-Alien-wxWidgets/summary
#. leap/perl-Alien-wxWidgets/summary
msgid "Building, Finding and Using Wxwidgets Binaries"
msgstr "Wxwidgets バイナリの構築／検出／使用"

#. tumbleweed/perl-Alien-wxWidgets/description
#. leap/perl-Alien-wxWidgets/description
msgid ""
"Please see the Alien manpage for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::wxWidgets' can be used to detect and get configuration "
"settings from an installed wxWidgets."
msgstr ""
"Alien ネームスペースのマニフェストについて、詳しくは Alien マニュアルページをお読みください。\n"
"\n"
"'Alian::wxWidgets' を端的に言うと、インストールされている wxWidgets を検出して設定情報を取得する機能を提供します。"

#. tumbleweed/perl-AnyEvent/summary
#. leap/perl-AnyEvent/summary
msgid "The Dbi of Event Loop Programming"
msgstr "イベントループプログラミングの Dbi"

#. tumbleweed/perl-AnyEvent/description
msgid ""
"AnyEvent provides a uniform interface to various event loops. This allows "
"module authors to use event loop functionality without forcing module users "
"to use a specific event loop implementation (since more than one event loop "
"cannot coexist peacefully).\n"
"\n"
"The interface itself is vaguely similar, but not identical to the Event "
"module.\n"
"\n"
"During the first call of any watcher-creation method, the module tries to "
"detect the currently loaded event loop by probing whether one of the "
"following modules is already loaded: EV, AnyEvent::Loop, Event, Glib, Tk, "
"Event::Lib, Qt, POE. The first one found is used. If none are detected, the "
"module tries to load the first four modules in the order given; but note "
"that if EV is not available, the pure-perl AnyEvent::Loop should always "
"work, so the other two are not normally tried.\n"
"\n"
"Because AnyEvent first checks for modules that are already loaded, loading "
"an event model explicitly before first using AnyEvent will likely make that "
"model the default. For example:\n"
"\n"
"   use Tk;    use AnyEvent;\n"
"\n"
"   \n"
"\n"
"The _likely_ means that, if any module loads another event model and starts "
"using it, all bets are off - this case should be very rare though, as very "
"few modules hardcode event loops without announcing this very loudly.\n"
"\n"
"The pure-perl implementation of AnyEvent is called 'AnyEvent::Loop'. Like "
"other event modules you can load it explicitly and enjoy the high "
"availability of that event loop :)"
msgstr ""
"AnyEvent は様々なイベントループに対する統一的なインターフェイスを提供する仕組みです。これにより、モジュールを作成する際に、特定のイベントループの"
"実装を強制することなく、その機能を利用できるようになります (もちろん複数のイベントループが共存してしまうようなこともありません) 。\n"
"\n"
"インターフェイスそれ自身はイベントモジュールと非常に似通った仕組みになっていますが、全く同一というわけではありません。\n"
"\n"
"任意の watcher-creation "
"メソッドが最初に呼び出されると、モジュールは下記のモジュールの読み込み状況を確認して、現在読み込まれているイベントループを検出しようとします: EV, "
"AnyEvent::Loop, Event, Glib, Tk, Event::Lib, Qt, POE "
"。このうち、最初に見つかったものを使用しようとします。いずれも検出されない場合、モジュールは上記の順序で最初の 4 つのモジュールを読み込みます。なお、 "
"EV が利用できない場合は、純粋な Perl モジュールとして作成された AnyEvent::Loop が使用されることになり、その他の 2 "
"つは通常使われません。\n"
"\n"
"AnyEvent は最初に読み込まれているモジュールを確認するため、 AnyEvent "
"を利用するよりも前にイベントモデルが明示的に読み込まれると、それが既定値として使用されるようになります。たとえば下記のようになります:\n"
"\n"
"   use Tk;     use AnyEvent;\n"
"\n"
"このような仕組みから、いずれかのモジュールで他のイベントモデルを読み込んでいて、それを使用し始めている場合、 AnyEvent の仕組みは意味がなくなって"
"しまいます。このような事態は非常に稀なものではありますが、モジュールによっては特にアナウンスされることなく、イベントループが使用されている場合もあります。"
"\n"
"\n"
"AnyEvent の純粋 Perl 実装は 'AnyEvent::Loop' と呼ばれています。その他のイベントモジュールと同様に、"
"明示的に読み込んでイベントループの高可用性を用いることもできます :)"

#. tumbleweed/perl-Apache-Filter/summary
#. leap/perl-Apache-Filter/summary
msgid "Alter the output of previous handlers"
msgstr "以前のハンドラ出力の修正"

#. tumbleweed/perl-Apache-Filter/description
#. leap/perl-Apache-Filter/description
msgid ""
"In basic operation, each of the handlers Filter1, Filter2, and Filter3 will "
"make a call to $r->filter_input(), which will return a filehandle.  For "
"Filter1, the filehandle points to the requested file. For Filter2, the "
"filehandle contains whatever Filter1 wrote to STDOUT. For Filter3, it "
"contains whatever Filter3 wrote to STDOUT. The output of Filter3 goes "
"directly to the browser.\n"
"\n"
"Note that the modules Filter1, Filter2, and Filter3 are listed in forward "
"order, in contrast to the reverse-order listing of Apache::OutputChain.\n"
"\n"
"When you've got this module, you can use the same handler both as a stand-"
"alone handler, and as an element in a chain. Just make sure that whenever "
"you're chaining, all the handlers in the chain are \"Filter- aware,\" i.e. "
"they each call $r->filter_register() exactly once, before they start "
"printing to STDOUT. There should be almost no overhead for doing this when "
"there's only one element in the chain."
msgstr ""
"基本操作では、 Filter1, Filter2, Filter3 の各ハンドラは $r->filter_input() "
"を呼び出し、ファイルハンドルを返します。 Filter1 の場合、ファイルハンドルは要求されたファイルを示します。 Filter2 の場合、 "
"Filter1 が標準出力に書き込んだ内容を含むファイルハンドルを返します。また、 Filter3 の場合、 Filter3 "
"が標準出力に書き込んだ内容を含むファイルハンドルを返します。 Filter3 の出力はブラウザに直接届きます。\n"
"\n"
"なお、 Filter1, Filter2, Filter3 の各モジュールは、 Apache::OutputChain "
"のような逆順ではなく、正順に並べられます。\n"
"\n"
"また、このモジュールを使用する際には、単独のハンドラとして使用するだけでなく、チェイン内の要素として同じハンドラを使用することができます。また、チェイン処"
"理であることを明らかにするため、チェイン内のすべてのハンドラを \"フィルタ対応\" にします。つまり、それぞれのハンドラでは、 STDOUT "
"に出力する前に $r->filter_register() を確実に一度だけ呼び出してください。チェイン内に 1 "
"つの要素しか存在しない場合は、ほとんどオーバーヘッドになりません。"

#. tumbleweed/perl-Apache-SessionX/summary
#. leap/perl-Apache-SessionX/summary
msgid "Persistent Storage for Arbitrary Data (for Embperl)"
msgstr "任意のデータ向け永続ストレージ (Embperl 向け)"

#. tumbleweed/perl-Apache-SessionX/description
#. leap/perl-Apache-SessionX/description
msgid ""
"Apache::SessionX extends Apache::Session. It was initially written to use "
"Apache::Session from inside of HTML::Embperl, but is seems to be useful "
"outside of Embperl as well, so here is it as standalone module."
msgstr ""
"Apache::SessionX は Apache::Session の拡張形です。当初は HTML::EmbPerl の内側"
"で Apache::Session を使用していましたが、 Embperl の外側のほうが便利であるこ"
"とが分かり、単独のモジュールとなりました。"

#. tumbleweed/perl-Authen-DecHpwd/summary
#. leap/perl-Authen-DecHpwd/summary
msgid "DEC VMS password hashing"
msgstr "DEC VMS パスワードハッシュ"

#. tumbleweed/perl-Authen-DecHpwd/description
#. leap/perl-Authen-DecHpwd/description
msgid ""
"This module implements the 'SYS$HASH_PASSWORD' password hashing function "
"from VMS (also known as 'LGI$HPWD'), and some associated VMS username and "
"password handling functions.\n"
"\n"
"The password hashing function is implemented in XS, with a hideously slow "
"pure Perl backup version for systems that can't handle XS."
msgstr ""
"このモジュールは、 VMS のバスワードハッシュ機能である 'SYSHASH_PASSWORD' パスワードハッシュ機能 ('LGI$HPWD' "
"としても知られています) を実装しているほか、関連する VMS のユーザ名およびパスワードの処理関数も含まれています。\n"
"\n"
"パスワードハッシュ機能は XS 内で実装されているほか、 XS を処理できないシステム向けに、非常に遅いながらも純粋な Perl "
"で実装されたバックアップバージョンも用意されています。"

#. tumbleweed/perl-Authen-SASL-Cyrus/summary
#. leap/perl-Authen-SASL-Cyrus/summary
msgid "SASL Authentication Framework - Cyrus Plugin"
msgstr "SASL 認証フレームワーク - Cyrus プラグイン"

#. tumbleweed/perl-Authen-SASL-Cyrus/description
#. leap/perl-Authen-SASL-Cyrus/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols.\n"
"\n"
"Authen::SASL::Cyrus is a plug-in for the Authen::SASL module and provides an "
"implementation framework that all protocols should be able to share.\n"
"\n"
"The XS framework makes calls to the existing libsasl.so shared library to "
"perform SASL client connection functionality, including loading existing "
"shared library mechanisms."
msgstr ""
"SASL はいくつかのネットワークプロトコルで使用される認証メカニズムです。\n"
"\n"
"Authen::SASL は全てのプロトコルで共有できるような実装フレームワークを 提供し"
"ます。\n"
"\n"
"XS フレームワークは既存の libsasl.so 共有ライブラリを呼び出し、 SASL クライア"
"ント接続の機能を提供します。もちろん既存の共有ライブラリを 読み込む仕組みもあ"
"ります。"

#. tumbleweed/perl-B-Hooks-OP-Annotation/summary
#. leap/perl-B-Hooks-OP-Annotation/summary
msgid "annotate and delegate hooked OPs"
msgstr "フックされた OP の注釈と代理処理"

#. tumbleweed/perl-B-Hooks-OP-Annotation/description
#. leap/perl-B-Hooks-OP-Annotation/description
msgid ""
"This module provides a way for XS code that hijacks OP 'op_ppaddr' functions "
"to delegate to (or restore) the previous functions, whether assigned by perl "
"or by another module. Typically this should be used in conjunction with B::"
"Hooks::OP::Check.\n"
"\n"
"'B::Hooks::OP::Annotation' makes its types and functions available to XS "
"code by means of ExtUtils::Depends. Modules that wish to use these exports "
"in their XS code should 'use B::OP::Hooks::Annotation' in the Perl module "
"that loads the XS, and include something like the following in their "
"Makefile.PL:\n"
"\n"
"    use ExtUtils::MakeMaker;     use ExtUtils::Depends;\n"
"\n"
"    our %XS_PREREQUISITES = (         'B::Hooks::OP::Annotation' => "
"'0.44',         'B::Hooks::OP::Check'      => '0.15',     );\n"
"\n"
"    our %XS_DEPENDENCIES = ExtUtils::Depends->new(         'Your::XS::"
"Module',          keys(%XS_PREREQUISITES)     )->get_makefile_vars();\n"
"\n"
"    WriteMakefile(         NAME          => 'Your::XS::Module',         "
"VERSION_FROM  => 'lib/Your/XS/Module.pm',         PREREQ_PM => "
"{             'B::Hooks::EndOfScope' => '0.07',             "
"%XS_PREREQUISITES         },         ($ExtUtils::MakeMaker::VERSION >= "
"6.46 ?             (META_MERGE => {                 configure_requires => "
"{                     'ExtUtils::Depends' => '0.301',                     "
"%XS_PREREQUISITES                 }})             : ()         ),         "
"%XS_DEPENDENCIES,              );"
msgstr ""
"このモジュールは XS コード向けに作られたもので、 OP 'op_ppaddr' 関数を乗っ取っることで、 Perl "
"やその他のモジュールが割り当てた以前の関数の代理機能を提供したり、それを復元したりする機能を提供します。一般的に、このモジュールは "
"B::Hooks::OP::Check と共に使用されます。\n"
"\n"
"'B::Hooks::OP::Annotation' は ExtUtils::Depends を利用して XS コードに型と関数を提供します。 XS "
"コードに対してこれらを提供したい Perl モジュールは、 'use B::OP::Hooks::Annotation' を追加して、 "
"Makefile.PL 内に下記のような記述を追加します:\n"
"\n"
"    use ExtUtils::MakeMaker;     use ExtUtils::Depends;\n"
"\n"
"    our %XS_PREREQUISITES = (         'B::Hooks::OP::Annotation' => "
"'0.44',         'B::Hooks::OP::Check'      => '0.15',     );\n"
"\n"
"    our %XS_DEPENDENCIES = ExtUtils::Depends->new(         'Your::XS::"
"Module',          keys(%XS_PREREQUISITES)     )->get_makefile_vars();\n"
"\n"
"    WriteMakefile(         NAME          => 'Your::XS::Module',         "
"VERSION_FROM  => 'lib/Your/XS/Module.pm',         PREREQ_PM => {             "
"'B::Hooks::EndOfScope' => '0.07',             %XS_PREREQUISITES         }"
",         ($ExtUtils::MakeMaker::VERSION >= 6.46 ?             (META_MERGE =>"
" {                 configure_requires => {                     'ExtUtils::"
"Depends' => '0.301',                     %XS_PREREQUISITES                 "
"}})             : ()         ),         %XS_DEPENDENCIES,              );"

#. tumbleweed/perl-B-Hooks-OP-Check/summary
#. leap/perl-B-Hooks-OP-Check/summary
msgid "Wrap OP check callbacks"
msgstr "OP チェックコールバックのラッピング"

#. tumbleweed/perl-B-Hooks-OP-Check/description
#. leap/perl-B-Hooks-OP-Check/description
msgid ""
"This module provides a c api for XS modules to hook into the callbacks of "
"'PL_check'.\n"
"\n"
"the ExtUtils::Depends manpage is used to export all functions for other XS "
"modules to use. Include the following in your Makefile.PL:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"Check');     WriteMakefile(         ... # your normal makefile flags         "
"$pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_check.h'."
msgstr ""
"このモジュールは、 'PL_check' のコールバック内にフックを設置するため、 XS モジュール向けに C API を提供する仕組みです。\n"
"\n"
"ExtUtils::Depends では、他の XS モジュールに対して使用するすべての関数を公開する際に使用しています。下記のような記述を "
"Makefile.PL に追加してください:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', "
"'B::Hooks::OP::Check');     WriteMakefile(         ... # your normal "
"makefile flags         $pkg->get_makefile_vars,     );\n"
"\n"
"これにより、 XS モジュールから 'hook_op_check.h' を含めることができるようになります。"

#. tumbleweed/perl-B-Hooks-OP-PPAddr/summary
#. leap/perl-B-Hooks-OP-PPAddr/summary
msgid "Hook into opcode execution"
msgstr "opcode 実行内に対するフック"

#. tumbleweed/perl-B-Hooks-OP-PPAddr/description
msgid ""
"This module provides a C API for XS modules to hook into the execution of "
"perl opcodes.\n"
"\n"
"ExtUtils::Depends is used to export all functions for other XS modules to "
"use. Include the following in your _Makefile.PL_:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"PPAddr');     WriteMakefile(         ... # your normal makefile "
"flags         $pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_ppaddr.h'."
msgstr ""
"このモジュールは、 Perl の opcode 内にフックを設置するため、 XS モジュール向けに C API を提供する仕組みです。\n"
"\n"
"ExtUtils::Depends では、他の XS モジュールに対して使用するすべての関数を公開する際に使用しています。下記のような記述を "
"Makefile.PL に追加してください:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', "
"'B::Hooks::OP::PPAddr');     WriteMakefile(         ... # your normal "
"makefile flags         $pkg->get_makefile_vars,     );\n"
"\n"
"これにより、 XS モジュールから 'hook_op_ppaddr.h' を含めることができるようになります。"

#. tumbleweed/perl-B-Utils/summary
#. tumbleweed/perl-B-Utils/description
#. leap/perl-B-Utils/summary
#. leap/perl-B-Utils/description
msgid "Helper functions for op tree manipulation"
msgstr "op tree 操作に対するヘルパー関数"

#. tumbleweed/perl-BIND-Conf_Parser/summary
#. leap/perl-BIND-Conf_Parser/summary
msgid "Parser class for BIND configuration files"
msgstr "BIND 設定ファイルを処理するクラス"

#. tumbleweed/perl-BIND-Conf_Parser/description
#. leap/perl-BIND-Conf_Parser/description
msgid ""
"This module implements a virtual base class for parsing BIND server version "
"8 configuration files (named.conf)."
msgstr ""
"このモジュールは、 BIND サーババージョン 8 の設定ファイル (named.conf) を処理"
"する 仮想ベースクラスを実装しています。"

#. tumbleweed/perl-BSD-Resource/summary
#. tumbleweed/perl-BSD-Resource/description
#. leap/perl-BSD-Resource/summary
#. leap/perl-BSD-Resource/description
msgid "BSD process resource limit and priority functions"
msgstr "BSD 形式のリソース制限と優先度機能"

#. tumbleweed/perl-BerkeleyDB/summary
#. leap/perl-BerkeleyDB/summary
msgid "Perl extension for Berkeley DB version 2, 3, 4 or 5"
msgstr "Berkeley DB バージョン 2, 3, 4, 5 向け Perl 拡張"

#. tumbleweed/perl-BerkeleyDB/description
#. leap/perl-BerkeleyDB/description
msgid ""
"*NOTE: This document is still under construction. Expect it to be incomplete "
"in places.*\n"
"\n"
"This Perl module provides an interface to most of the functionality "
"available in Berkeley DB versions 2, 3, 5 and 6. In general it is safe to "
"assume that the interface provided here to be identical to the Berkeley DB "
"interface. The main changes have been to make the Berkeley DB API work in a "
"Perl way. Note that if you are using Berkeley DB 2.x, the new features "
"available in Berkeley DB 3.x or later are not available via this module.\n"
"\n"
"The reader is expected to be familiar with the Berkeley DB documentation. "
"Where the interface provided here is identical to the Berkeley DB library "
"and the... TODO\n"
"\n"
"The *db_appinit*, *db_cursor*, *db_open* and *db_txn* man pages are "
"particularly relevant.\n"
"\n"
"The interface to Berkeley DB is implemented with a number of Perl classes."
msgstr ""
"*注意: このドキュメントは現在作成中です。さまざまな個所で不完全ではありますが"
"ご了承ください。\n"
"\n"
"この Perl モジュールは、 Berkeley DB バージョン 2, 3, 5,6  で提供されているほ"
"とんどの機能にアクセスするための、インターフェイスを提供しています。一般的に"
"言って、ここで提供されているインターフェイスは Berkeley DB のものと同等のもの"
"であると安全に判断できるものです。主な違いは、 Berkeley DB API の Perl のやり"
"方でアクセスすることによるものです。なお、 Berkeley DB 2.x をお使いの場合、"
"Berkeley DB 3.x やそれ以降のバージョンで利用できる新機能は、このモジュールで"
"は利用できません。\n"
"reader 側の機能は Berkeley DB のドキュメンテーションに沿った仕組みになってい"
"て、Berkeley DB ライブラリに書かれたインターフェイスとほぼ同等になっていま"
"す... TODO\n"
"\n"
"*db_appinit*, *db_cursor*, *db_open*, *db_txn* がそれぞれ関係しています。\n"
"\n"
"Berkeley DB に対するインターフェイスは、様々な Perl クラスで実装されていま"
"す。"

#. tumbleweed/perl-Bit-Vector/summary
#. tumbleweed/perl-Bit-Vector/description
#. leap/perl-Bit-Vector/summary
#. leap/perl-Bit-Vector/description
msgid "Bit::Vector Perl module"
msgstr "Bit::Vector Perl モジュール"

#. tumbleweed/perl-Boost-Geometry-Utils/summary
#. tumbleweed/perl-Boost-Geometry-Utils/description
#. leap/perl-Boost-Geometry-Utils/summary
#. leap/perl-Boost-Geometry-Utils/description
msgid "Bindings for the Boost Geometry library"
msgstr "Boost ジオメトリライブラリ向けバインディング"

#. tumbleweed/perl-Bootloader/summary
#. leap/perl-Bootloader/summary
msgid "Library for Configuring Boot Loaders"
msgstr "ブートローダを設定するためのライブラリ"

#. tumbleweed/perl-Bootloader/description
#. leap/perl-Bootloader/description
msgid "Perl modules for configuring various boot loaders."
msgstr "様々なブートローダを設定するための Perl モジュールです。"

#. tumbleweed/perl-Bootloader/perl-Bootloader-YAML/summary
#. leap/perl-Bootloader/perl-Bootloader-YAML/summary
msgid "YAML interface for perl-Bootloader"
msgstr "perl-Bootloader 向け YAML インターフェイス"

#. tumbleweed/perl-Bootloader/perl-Bootloader-YAML/description
#. leap/perl-Bootloader/perl-Bootloader-YAML/description
msgid ""
"A command line interface to perl-Bootloader using YAML files for input and "
"output."
msgstr ""
"YAML ファイルを入出力に使用する、 perl-Bootloader に対するコマンドラインイン"
"ターフェイスです。"

#. tumbleweed/perl-CSS-Minifier-XS/summary
#. leap/perl-CSS-Minifier-XS/summary
msgid "XS based CSS minifier"
msgstr "XS ベースの CSS 小型化モジュール"

#. tumbleweed/perl-CSS-Minifier-XS/description
#. leap/perl-CSS-Minifier-XS/description
msgid ""
"'CSS::Minifier::XS' is a CSS \"minifier\"; its designed to remove un-"
"necessary whitespace and comments from CSS files, while also *not* breaking "
"the CSS.\n"
"\n"
"'CSS::Minifier::XS' is similar in function to 'CSS::Minifier', but is "
"substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'CSS::Minifier::XS' は CSS の小型化モジュールです。不要なホワイトスペースや CSS "
"ファイル内のコメントを削除するように作られていますが、 CSS 自身を壊してしまったりすることはありません。\n"
"\n"
"'CSS::Minifier::XS' は 'CSS::Minifier' に似た機能を提供しますが、純粋な Perl ではなく XS "
"で作られた仕組みであるため、比較的高速に動作します。"

#. tumbleweed/perl-Cairo/summary
#. tumbleweed/perl-Cairo/description
#. leap/perl-Cairo/summary
#. leap/perl-Cairo/description
msgid "Perl interface to the cairo 2d vector graphics library"
msgstr "cairo 2d ベクトルグラフィックライブラリへの Perl インターフェイス"

#. tumbleweed/perl-Class-Accessor/summary
#. leap/perl-Class-Accessor/summary
msgid "Automated accessor generation"
msgstr "自動アクセサ生成"

#. tumbleweed/perl-Class-Accessor/description
#. leap/perl-Class-Accessor/description
msgid ""
"This module automatically generates accessor/mutators for your class. Most "
"of the time, writing accessors is an exercise in cutting and pasting.\n"
"\n"
"If you make your module a subclass of Class::Accessor and declare your "
"accessor fields with mk_accessors() then you'll find yourself with a set of "
"automatically generated accessors which can even be customized!"
msgstr ""
"このモジュールは、お使いのクラスに対して自動的にアクセサやミューテータを作成"
"することができます。アクセサの作成はカット＆ペーストを多用する面倒な作業であ"
"るためです。\n"
"\n"
"Class::Accessor に対するサブクラスのモジュールを作成し、 mk_accessors() でア"
"クセサフィールドを定義すると、自動的に生成されるアクセサに対してカスタマイズ"
"を行なうことができます。"

#. tumbleweed/perl-Class-Accessor-Chained/summary
#. leap/perl-Class-Accessor-Chained/summary
msgid "Make chained accessors"
msgstr "チェイン化されたアクセサの作成"

#. tumbleweed/perl-Class-Autouse/summary
#. leap/perl-Class-Autouse/summary
msgid "Run-time class loading on first method call"
msgstr "最初のメソッド呼び出し時に読み込まれるランタイムクラス"

#. tumbleweed/perl-Class-Autouse/description
#. leap/perl-Class-Autouse/description
msgid ""
"Class::Autouse allows you to specify a class the will only load when a "
"method of that class is called. For large classes that might not be used "
"during the running of a program, such as Date::Manip, this can save you "
"large amounts of memory, and decrease the script load time."
msgstr ""
"Class::Autouse は、それらのクラス内のメソッドが呼び出されたときにのみ 読み込"
"むクラスを指定することができます。プログラムの起動時には使用されないような巨"
"大なクラス クラスの場合 (たとえば Date::Manip など) 、本モジュールを使用する"
"ことで 大きなメモリを消費せずに済むほか、スクリプトの読み込み時間も削減するこ"
"とができます。"

#. tumbleweed/perl-Class-C3-XS/summary
#. leap/perl-Class-C3-XS/summary
msgid "XS speedups for Class::C3"
msgstr "Class::C3 向け XS 高速化"

#. tumbleweed/perl-Class-C3-XS/description
msgid ""
"This contains XS performance enhancers for Class::C3 version 0.16 and "
"higher. The main Class::C3 package will use this package automatically if it "
"can find it. Do not use this package directly, use Class::C3 instead.\n"
"\n"
"The test suite here is not complete, although it does verify a few basic "
"things. The best testing comes from running the Class::C3 test suite\n"
"*after* this module is installed.\n"
"\n"
"This module won't do anything for you if you're running a version of Class::"
"C3 older than 0.16. (It's not a dependency because it would be circular with "
"the optional dependency from that package to this one)."
msgstr ""
"このモジュールは Class::C3 バージョン 0.16 およびそれ以降に対して、 XS の性能を上げるための仕組みを提供するものです。メインの "
"Class::C3 パッケージは、このパッケージが見つかればそれを自動的に使用します。ただし、このパッケージは直接使用せず、 Class::C3 "
"をお使いください。\n"
"\n"
"なお、ここで提供されているテストスイートは不完全なものですが、非常に基本的な機能をチェックすることができます。 Class::C3 "
"テストスイートを実行する場合は、このモジュールをインストールした *後に* 実施してください。\n"
"\n"
"このモジュールは Class::C3 のバージョン 0.16 以前をお使いの場合は、何も動作しません "
"(そのようなパッケージから任意の依存関係が指定されている場合、それが循環してしまうことがありうるためです) 。"

#. tumbleweed/perl-Class-Date/summary
#. leap/perl-Class-Date/summary
msgid "Class for easy date and time manipulation"
msgstr "簡単に日時を取り扱うことができるクラス"

#. tumbleweed/perl-Class-Date/description
#. leap/perl-Class-Date/description
msgid ""
"This module is intended to provide a general-purpose date and datetime type "
"for perl. You have a Class::Date class for absolute date and datetime, and "
"have a Class::Date::Rel class for relative dates.\n"
"\n"
"You can use \"+\", \"-\", \"<\" and \">\" operators as with native perl data "
"types."
msgstr ""
"このモジュールは、 Perl に対して汎用目的の日付／日時型を提供するためのもので"
"す。絶対日付および日時については Class::Date クラスを、相対日付については "
"Class::Date::Rel クラスをお使いください。\n"
"\n"
"また、ネイティブな Perl データ型として \"+\", \"-\", \"<\", \">\" の演算子を"
"利用することができます。"

#. tumbleweed/perl-Class-Load-XS/summary
#. leap/perl-Class-Load-XS/summary
msgid "XS implementation of parts of Class::Load"
msgstr "Class::Load コマンドの XS 実装"

#. tumbleweed/perl-Class-Load-XS/description
#. leap/perl-Class-Load-XS/description
msgid ""
"This module provides an XS implementation for portions of the Class::Load "
"manpage. See the Class::Load manpage for API details."
msgstr ""
"このモジュールは、 Class::Load の一部分を XS 実装したものです。API の詳細につ"
"いて、詳しくは Class::Load のマニュアルページをお読みください。"

#. tumbleweed/perl-Class-MethodMaker/summary
#. leap/perl-Class-MethodMaker/summary
msgid "Create generic methods for OO Perl"
msgstr "OO Perl 向け汎用メソッド作成"

#. tumbleweed/perl-Class-MethodMaker/description
#. leap/perl-Class-MethodMaker/description
msgid ""
"This module solves the problem of having to continually write accessor "
"methods for your objects that perform standard tasks.\n"
"\n"
"The argument to 'use' is an *arrayref*, as pairs whose \"keys\" are the "
"names of types of generic methods generated by MethodMaker and whose \"values"
"\" tell method maker what methods to make.\n"
"\n"
"To override any generated methods, it is sufficient to ensure that the "
"overriding method is defined when Class::MethodMaker is called. Note that "
"the 'use' keyword introduces a 'BEGIN' block, so you may need to define (or "
"at least declare) your overriding method in a 'BEGIN' block."
msgstr ""
"このモジュールは、お使いのオブジェクトに対するアクセサを作成する手間を省くこ"
"とができるものです。\n"
"\n"
"'use' に対するパラメータは *arrayref* 形式で、 \"キー\" には MethodMaker で生"
"成する汎用メソッドのタイプ名を、 \"値\" には MethodMaker に対して何を生成させ"
"るのかを指定します。\n"
"\n"
"生成されたメソッドに対してオーバーライドするには、オーバーライトしたメソッド"
"がClass::MethodMaker を呼び出したときに定義されていることを確かめる必要があり"
"ます。また、 'use' キーワードは 'BEGIN' ブロックを含むため、 'BEGIN' ブロック"
"内でオーバーライドするメソッドを定義 (少なくとも宣言) する必要があります。"

#. tumbleweed/perl-Class-Multimethods/summary
#. leap/perl-Class-Multimethods/summary
msgid "This Package Supports Multimethods and Subroutine Overloading in Perl."
msgstr "Perl でのマルチメソッド／サブルーチンオーバライド対応パッケージ"

#. tumbleweed/perl-Class-Multimethods/description
#. leap/perl-Class-Multimethods/description
msgid ""
"Class::Multimethods -- Supports multimethods and subroutine overloading in "
"Perl."
msgstr ""
"Class::Multimethods -- Perl でマルチメソッドやサブルーチンオーバーライドに対"
"応することができます。"

#. tumbleweed/perl-Class-WhiteHole/summary
#. leap/perl-Class-WhiteHole/summary
msgid "Base class to treat unhandled method calls as errors"
msgstr "未処理のメソッド呼び出しをエラーとして扱うベースクラス"

#. tumbleweed/perl-Class-WhiteHole/description
#. leap/perl-Class-WhiteHole/description
msgid ""
"It's possible to accidentally inherit an AUTOLOAD method. Often this will "
"happen if a class somewhere in the chain uses AutoLoader or defines one of "
"their own. This can lead to confusing error messages when method lookups "
"fail.\n"
"\n"
"Sometimes you want to avoid this accidental inheritance.  In that case, "
"inherit from Class::WhiteHole. All unhandled methods will produce normal "
"Perl error messages."
msgstr ""
"AUTOLOAD メソッドを不用意に継承してしまうようなことがよくあります。 しばしば"
"このトラブルは、どこかのチェイン内のクラスで AutoLoader を使っていたり、 自分"
"自身の定時を行なっていたりする場合にある話です。このことでメソッドの参照が 失"
"敗して、混乱させるエラーメッセージを表示してしまうことにもつながります。\n"
"\n"
"これを解決するには、不用意な継承を避けるという方法があります。 この場合は "
"Class::WhiteHole から継承してみてください。全ての未処理メソッドは 通常の "
"Perl エラーメッセージを生成するようになります。"

#. tumbleweed/perl-Class-XSAccessor/summary
#. leap/perl-Class-XSAccessor/summary
msgid "Generate fast XS accessors without runtime compilation"
msgstr "実行時にコンパイルすることなく XS のアクセサを生成するモジュール"

#. tumbleweed/perl-Class-XSAccessor/description
#. leap/perl-Class-XSAccessor/description
msgid ""
"Class::XSAccessor implements fast read, write and read/write accessors in "
"XS. Additionally, it can provide predicates such as 'has_foo()' for testing "
"whether the attribute 'foo' exists in the object (which is different from "
"\"is defined within the object\"). It only works with objects that are "
"implemented as ordinary hashes. the Class::XSAccessor::Array manpage "
"implements the same interface for objects that use arrays for their internal "
"representation.\n"
"\n"
"Since version 0.10, the module can also generate simple constructors "
"(implemented in XS). Simply supply the 'constructor => 'constructor_name'' "
"option or the 'constructors => ['new', 'create', 'spawn']' option. These "
"constructors do the equivalent of the following Perl code:\n"
"\n"
"  sub new {     my $class = shift;     return bless { @_ }, ref($class)||"
"$class;   }\n"
"\n"
"That means they can be called on objects and classes but will not clone "
"objects entirely. Parameters to 'new()' are added to the object.\n"
"\n"
"The XS accessor methods are between 3 and 4 times faster than typical pure-"
"Perl accessors in some simple benchmarking. The lower factor applies to the "
"potentially slightly obscure 'sub set_foo_pp {$_[0]->{foo} = $_[1]}', so if "
"you usually write clear code, a factor of 3.5 speed-up is a good estimate. "
"If in doubt, do your own benchmarking!\n"
"\n"
"The method names may be fully qualified. The example in the synopsis could "
"have been written as 'MyClass::get_foo' instead of 'get_foo'. This way, "
"methods can be installed in classes other than the current class. See also: "
"the 'class' option below.\n"
"\n"
"By default, the setters return the new value that was set, and the accessors "
"(mutators) do the same. This behaviour can be changed with the 'chained' "
"option - see below. The predicates return a boolean.\n"
"\n"
"Since version 1.01, 'Class::XSAccessor' can generate extremely simple "
"methods which just return true or false (and always do so). If that seems "
"like a really superfluous thing to you, then consider a large class "
"hierarchy with interfaces such as the PPI manpage. These methods are "
"provided by the 'true' and 'false' options - see the synopsis.\n"
"\n"
"'defined_predicates' check whether a given object attribute is defined. "
"'predicates' is an alias for 'defined_predicates' for compatibility with "
"older versions of 'Class::XSAccessor'. 'exists_predicates' checks whether "
"the given attribute exists in the object using 'exists'."
msgstr ""
"Class::XSAccessor は XS の読み書きに対するアクセサを高速に生成する機能を提供します。これに加えて、オブジェクト内に 'foo' "
"属性が存在するかどうか ('オブジェクト内で定義されているかどうか' とは異なります) をテストするための 'has_foo()' のような "
"predicate も提供します。なお、通常のハッシュとして実装されているオブジェクトに対してのみ動作します。また、 "
"Class::XSAccessor::Array では、内部表現向けに配列を利用するオブジェクトに対する同インターフェイスを提供します。\n"
"\n"
"バージョン 0.10 より、このモジュールはシンプルなコンストラクタ (XS 内で実装されているもの) を生成することもできるようになっています。単純に "
"'constructor => 'コンストラクタ名'' オプション、もしくは 'constructors => ['new', 'create', "
"'spawn']' オプションを指定してください。これらのコンストラクタは下記の Perl コードと同じ動作をします:\n"
"\n"
"  sub new {     my $class = shift;     return bless { @_ }, "
"ref($class)||$class;   }\n"
"\n"
"つまり、オブジェクトやクラスに対してこれらを呼び出しても、オブジェクト全体をコピーしたりはしません。 'new()' "
"に対するパラメータはオブジェクトに追加されます。\n"
"\n"
"また、 XS アクセサメソッドは、シンプルなベンチマークテストで一般的な純粋 Perl 実装より 3 倍から 4 倍程度高速に動作します。"
"比較的わかりにくい 'sub set_foo_pp {$_[0]->{foo} = $_{1}}' "
"と比較する限りではそれほど高速ではありませんが、わかりやすいコードを記述している場合は、おおよそ 3.5 "
"倍程度の高速化をはかることができます。どれだけ高速に動作するのかを確かめるには、ご自身のモジュールでテストすることをお勧めします。\n"
"\n"
"メソッド名は完全修飾型で提供されます。概要に示されている例では、 'get_foo' ではなく 'MyClass::get_foo' "
"として記述されています。このような仕組みにより、現在のクラス以外のクラス内にメソッドをインストールすることができるようになっています。\n"
"\n"
"既定では setter は設定された新しい値を返すほか、アクセサ (ミューテータ) も同様の動作をします。この動作は 'chained' "
"オプションで変更することができます (詳しくは下記をお読みください) 。また、断定メソッドでは boolean を返します。\n"
"\n"
"バージョン 1.01 より、 'Class::XSAccessor' は true や false "
"を返すだけの非常にシンプルなメソッドを生成することもできます。無駄な機能のようにも思えてしまいますが、 PPI "
"のような巨大なクラス構造の場合に便利な仕組みです。これらのメソッドは 'true' または 'false' のオプションを設定することができます。\n"
"\n"
"'defined_predicates' チェックは、指定したオブジェクトの属性が定義済みであるかどうかをチェックします。 'predicates' は "
"'defined_predicates' の別名で、古いバージョンの 'Class::XSAccessor' "
"との互換性確保のために用意されています。また、 'exists_predicates' は、 'exists' "
"を利用するオブジェクト内に指定した属性が存在するかどうかをチェックします。"

#. tumbleweed/perl-Clipboard/summary
#. leap/perl-Clipboard/summary
msgid "Copy and Paste with any OS"
msgstr "任意の OS で動作するコピー＆ペースト"

#. tumbleweed/perl-Clipboard/description
#. leap/perl-Clipboard/description
msgid ""
"Who doesn't remember the first time they learned to copy and paste, and "
"generated an exponentially growing text document? Yes, that's right, "
"clipboards are magical.\n"
"\n"
"With Clipboard.pm, this magic is now trivial to access, in a cross-platform-"
"consistent API, from your Perl code."
msgstr ""
"初めてコピー＆ペーストを学んだ時の記憶がありますか？コピー＆ペーストによって、テキストは指数関数的に増えていきます。そう、クリップボードは魔法のような仕組"
"みです。\n"
"\n"
"Clipboard.pm を利用することで、お使いの Perl コードからプラットフォームに依存することなく、この魔法にアクセスする機能が提供されます。"

#. tumbleweed/perl-Clone/summary
#. leap/perl-Clone/summary
msgid "Recursively Copy Perl Datatypes"
msgstr "Perl データタイプの再帰的な複製"

#. tumbleweed/perl-Clone/description
#. leap/perl-Clone/description
msgid ""
"This module provides a 'clone()' method which makes recursive copies of "
"nested hash, array, scalar and reference types, including tied variables and "
"objects.\n"
"\n"
"'clone()' takes a scalar argument and duplicates it. To duplicate lists, "
"arrays or hashes, pass them in by reference, e.g.\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %;"
msgstr ""
"このモジュールは 'clone()' メソッドを提供します。このメソッドはネストされた"
"ハッシュや配列、スカラー値やタイハッシュやオブジェクトなどの参照タイプを、再"
"帰的に複製することができます。\n"
"\n"
"clone() はスカラー型のパラメータを受け付けて、それを複製します。リスト型や配"
"列、ハッシュなどを複製したい場合は、それらを参照で渡してください。具体的に"
"は、下記のようになります\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %;"

#. tumbleweed/perl-Compress-Bzip2/summary
#. leap/perl-Compress-Bzip2/summary
msgid "Interface to Bzip2 compression library"
msgstr "Bzip2 圧縮ライブラリに対するインターフェイス"

#. tumbleweed/perl-Compress-Bzip2/description
#. leap/perl-Compress-Bzip2/description
msgid ""
"The _Compress::Bzip2_ module provides a Perl interface to the *bzip2* "
"compression library (see AUTHOR for details about where to get _Bzip2_). A "
"relevant subset of the functionality provided by _bzip2_ is available in "
"_Compress::Bzip2_.\n"
"\n"
"All string parameters can either be a scalar or a scalar reference.\n"
"\n"
"The module can be split into two general areas of functionality, namely in-"
"memory compression/decompression and read/write access to _bzip2_ files. "
"Each of these areas will be discussed separately below.\n"
"\n"
"*NOTE*\n"
"\n"
"_Compress::Bzip2_ is just a simple _bzip2_ binding, comparable to the old "
"Compress::Zlib library. It is not well integrated into PerlIO, use the "
"preferred IO::Compress::Bzip2 instead."
msgstr ""
"_Compress::Bzip2_ モジュールは、 *bzip2* 圧縮ライブラリに対する Perl のインターフェイスを提供します (_Bzip2_ "
"の取得方法について、詳しくは AUTHOR をご覧ください) 。 _bzip2_ で提供されている機能の一部を _Compress::Bzip2_ "
"で利用することができます。\n"
"\n"
"すべての文字列パラメータは、スカラー値またはスカラー値の参照として指定することができます。\n"
"\n"
"このモジュールは、大きく分けると 2 種類の機能に分類することができます。 1 つはメモリ内の圧縮と展開の機能、もう 1 つは _bzip2_ "
"ファイルに対する読み書きの機能です。それぞれの領域に対する詳細は、対応する文書をお読みください。\n"
"\n"
"*注意*\n"
"\n"
"_Compress::Bzip2_ は _bzip2_ に対するシンプルなバインディングであり、 Compress:Zlib "
"ライブラリと同程度の機能を提供するものです。 PerlIO との統合はまだ不十分な状態であるため、 PerlIO をお使いの場合は "
"IO::Compress:Bzip2 をお使いください。"

#. tumbleweed/perl-Config-General/summary
#. leap/perl-Config-General/summary
msgid "Generic Config Module"
msgstr "汎用設定モジュール"

#. tumbleweed/perl-Config-General/description
#. leap/perl-Config-General/description
msgid ""
"This module opens a config file and parses its contents for you. The *new* "
"method requires one parameter which needs to be a filename. The method\n"
"*getall* returns a hash which contains all options and its associated values "
"of your config file.\n"
"\n"
"The format of config files supported by *Config::General* is inspired by the "
"well known Apache config format, in fact, this module is 100% compatible to "
"Apache configs, but you can also just use simple name/value pairs in your "
"config files.\n"
"\n"
"In addition to the capabilities of an Apache config file it supports some "
"enhancements such as here-documents, C-style comments or multiline options."
msgstr ""
"このモジュールは設定ファイルを開いて中身を解析する機能を提供します。 *new*メ"
"ソッドはファイル名として 1 つのパラメータを指定するだけですし、 *getall*は全"
"てのオプションに対するハッシュ変数を提供し、そこから設定ファイル内の値を取得"
"することができます。\n"
"\n"
"*Config::General* で対応している設定ファイルの書式は、 Apache の設定ファイル"
"の書式を踏襲するもので、実際にこのモジュールは Apache の設定ファイルと 100%の"
"互換性が確保されています。ただし、単純な名前/値の組み合わせから成る設定ファイ"
"ルにも対応しています。\n"
"\n"
"Apache の設定ファイルに対応しているほか、ヒアドキュメントや C 形式のコメン"
"ト、複数行オプションなどにも対応しています。"

#. tumbleweed/perl-Config-Simple/summary
#. leap/perl-Config-Simple/summary
msgid "Simple configuration file class"
msgstr "シンプルな設定ファイルクラス"

#. tumbleweed/perl-Config-Simple/description
#. leap/perl-Config-Simple/description
msgid ""
"Reading and writing configuration files is one of the most frequent tasks of "
"any software design. Config::Simple is the library that helps you with it.\n"
"\n"
"Config::Simple is a class representing configuration file object. It "
"supports several configuration file syntax and tries to identify the file "
"syntax automatically. Library supports parsing, updating and creating "
"configuration files."
msgstr ""
"ソフトウエアの設計作業では、設定ファイルの読み書きが重要な要素を占めます。 Config::Simple はこのような機能を支援するためのライブラリです。"
"\n"
"\n"
"Config::Simple は、設定ファイルをオブジェクトとして表わすクラスです。いくつかの設定ファイルの書式に対応しているほか、ファイルの文法を自動的"
"に判別する機能も用意されています。ライブラリでは設定ファイルの処理のほか、更新や作成にも対応しています。"

#. tumbleweed/perl-Convert-BER/summary
#. leap/perl-Convert-BER/summary
msgid "ASN.1 Basic Encoding Rules"
msgstr "ASN.1 基本エンコーディングルール"

#. tumbleweed/perl-Convert-BER/description
#. leap/perl-Convert-BER/description
msgid ""
"Convert::BER is a Perl object class implementation for encoding and decoding "
"objects as described by ITU-T standard X.209 (ASN.1) using Basic Encoding "
"Rules (BER).\n"
"\n"
"WARNING this module is no longer supported, See Convert::ASN1"
msgstr ""
"Convert::BER は Basic Encoding Rules (BER) を用いた ITU-T 標準 X.209 (ASN.1) "
"をオブジェクトとしてエンコードおよびデコードすることのできる、 Perl オブジェクトのクラス実装です。\n"
"\n"
"警告: このモジュールに対するサポートは終了しています。 Convert::ASN1 をご覧ください。"

#. tumbleweed/perl-Convert-UUlib/summary
#. leap/perl-Convert-UUlib/summary
msgid "Perl interface to the uulib library"
msgstr "uulib ライブラリへの Perl インターフェイス"

#. tumbleweed/perl-Convert-UUlib/description
#. leap/perl-Convert-UUlib/description
msgid "A Perl interface to the uulib library"
msgstr "uulib ライブラリへの Perl インターフェイス"

#. tumbleweed/perl-Crypt-Blowfish/summary
#. leap/perl-Crypt-Blowfish/summary
msgid "Perl Blowfish encryption module"
msgstr "Perl Blowfish 暗号化モジュール"

#. tumbleweed/perl-Crypt-Blowfish/description
#. leap/perl-Crypt-Blowfish/description
msgid ""
"Blowfish is capable of strong encryption and can use key sizes up to 56 "
"bytes (a 448 bit key). You're encouraged to take advantage of the full key "
"size to ensure the strongest encryption possible from this module."
msgstr ""
"Blowfish は強力な暗号化を提供する仕組みで、最大で 56 バイト (448 ビット) の鍵"
"を使用することができます。このモジュールでもっとも強い暗号化を使用するため、"
"完全な長さ (つまり 56 バイト) の鍵を設定することをお勧めします。"

#. tumbleweed/perl-Crypt-DES/summary
#. leap/perl-Crypt-DES/summary
msgid "Perl DES encryption module"
msgstr "Perl DES 暗号化モジュール"

#. tumbleweed/perl-Crypt-DES/description
#. leap/perl-Crypt-DES/description
msgid ""
"The module implements the Crypt::CBC interface, which has the following "
"methods\n"
"\n"
"* blocksize   =item keysize   =item encrypt   =item decrypt"
msgstr ""
"このモジュールは Crypt::CBC インターフェイスを実装するもので、下記のメソッド"
"が用意されています:\n"
"\n"
"* blocksize   =item keysize   =item encrypt   =item decrypt"

#. tumbleweed/perl-Crypt-DH-GMP/summary
#. leap/perl-Crypt-DH-GMP/summary
msgid "Crypt::DH Using GMP Directly"
msgstr "GMP を直接利用した Crypt::DH"

#. tumbleweed/perl-Crypt-DH-GMP/description
#. leap/perl-Crypt-DH-GMP/description
msgid ""
"Crypt::DH::GMP is a (somewhat) portable replacement to Crypt::DH, "
"implemented mostly in C."
msgstr "Crypt::DH::GMP は Crypt::DH に対する代替モジュールで、幾分か可搬性に優れ、主に C 言語で実装されています。"

#. tumbleweed/perl-Crypt-Eksblowfish/summary
#. leap/perl-Crypt-Eksblowfish/summary
msgid "The Eksblowfish Block Cipher"
msgstr "Eksblowfish ブロック暗号"

#. tumbleweed/perl-Crypt-Eksblowfish/description
#. leap/perl-Crypt-Eksblowfish/description
msgid ""
"An object of this type encapsulates a keyed instance of the Eksblowfish "
"block cipher, ready to encrypt and decrypt.\n"
"\n"
"Eksblowfish is a variant of the Blowfish cipher, modified to make the key "
"setup very expensive. (\"Eks\" stands for \"expensive key schedule\".) This "
"doesn't make it significantly cryptographically stronger, but is intended to "
"hinder brute-force attacks. It also makes it unsuitable for any application "
"requiring key agility. It was designed by Niels Provos and David Mazieres "
"for password hashing in OpenBSD. See the Crypt::Eksblowfish::Bcrypt manpage "
"for the hash algorithm. See the Crypt::Eksblowfish::Blowfish manpage for the "
"unmodified Blowfish cipher.\n"
"\n"
"Eksblowfish is a parameterised (family-keyed) cipher. It takes a cost "
"parameter that controls how expensive the key scheduling is. It also takes a "
"family key, known as the \"salt\". Cost and salt parameters together define "
"a cipher family. Within each family, a key determines an encryption function "
"in the usual way. See the Crypt::Eksblowfish::Family manpage for a way to "
"encapsulate an Eksblowfish cipher family."
msgstr ""
"この型のオブジェクトは、 Eksblowfish ブロック暗号に対してキーを指定したインスタンスを提供します。暗号化や復号化を行なうことができます。\n"
"\n"
"Eksblowfish は Blowfish 暗号の派生型で、キーの設定を非常に高度化した仕組みです (\"Eks\" は \"expensive "
"key schedule\" の略です) 。これは暗号の強度を有意に高めるような仕組みではありませんが、よりブルートフォース攻撃に強くなるような仕組みです"
"。また、暗号化の可搬性を高める必要のあるアプリケーションには不適切です。 なお、 Niels Provos 氏および David Mazieres 氏が "
"OpenBSD におけるパスワードハッシュを生成するために作られた仕組みです。ハッシュアルゴリズムについて、詳しくは "
"Crypt::Eksblowfish::Bcrypt のマニュアルページをお読みください。また、未修正の Blowfish について、詳しくは "
"Crypt::Eksblowfish::Blowfish のマニュアルページをお読みください。\n"
"\n"
"Eksblowfish はパラメータ化された (ファミリキー型の) 暗号です。キーのスケジューリングのコストを制御するパラメータを指定するほか、"
"ファミリキー (\"salt\" としても知られています) も指定します。コストと salt "
"パラメータは両方で暗号ファミリを規定します。それぞれのファミリ内では、キーは通常の方法で暗号関数を定義することになります。 Eksblowfish "
"暗号ファミリのカプセル化について、詳しくは Crypt::Eksblowfish::Family をお読みください。"

#. tumbleweed/perl-Crypt-MySQL/summary
#. leap/perl-Crypt-MySQL/summary
msgid "Emulate the MySQL PASSWORD() function"
msgstr "MySQL PASSWORD() 関数の疑似"

#. tumbleweed/perl-Crypt-MySQL/description
#. leap/perl-Crypt-MySQL/description
msgid ""
"Crypt::MySQL emulates MySQL PASSWORD() SQL function, without libmysqlclient. "
"You can compare encrypted passwords, without real MySQL environment."
msgstr ""
"Crypt::MySQL は libmysqlclient 無しで MySQL の PASSWORD() SQL "
"関数を疑似する仕組みです。暗号化されたパスワードを、実際の MySQL 環境を用意することなく比較することができます。"

#. tumbleweed/perl-Crypt-OpenSSL-Bignum/summary
#. leap/perl-Crypt-OpenSSL-Bignum/summary
msgid "OpenSSL's multiprecision integer arithmetic"
msgstr "OpenSSL の多精度整数演算"

#. tumbleweed/perl-Crypt-OpenSSL-Bignum/description
#. leap/perl-Crypt-OpenSSL-Bignum/description
msgid ""
"Crypt::OpenSSL::Bignum provides access to OpenSSL multiprecision integer "
"arithmetic libraries. Presently, many though not all of the arithmetic "
"operations that OpenSSL provides are exposed to perl. In addition, this "
"module can be used to provide access to bignum values produced by other "
"OpenSSL modules, such as key parameters from Crypt::OpenSSL::RSA.\n"
"\n"
"_NOTE_: Many of the methods in this package can croak, so use eval, or Error."
"pm's try/catch mechanism to capture errors."
msgstr ""
"Crypt::OpenSSL::Bignum は、 OpenSSL の多精度整数演算ライブラリにアクセスする機能を提供します。現時点では OpenSSL "
"が提供する多数の算術演算機能を Perl に提供していますが、すべての機能までは提供できていません。また、このモジュールでは "
"Crypt::OpenSSL:RSA のキーパラメータなど、他の OpenSSL モジュールが生成した巨大整数にもアクセスすることができます。\n"
"\n"
"_注意_: このパッケージ内の多くのメソッドは croak することができます。そのため、 eval または Error.pm の try/catch "
"機構を利用してエラーを捕捉してください。"

#. tumbleweed/perl-Crypt-OpenSSL-RSA/summary
#. leap/perl-Crypt-OpenSSL-RSA/summary
msgid "RSA encoding and decoding, using the openSSL libraries"
msgstr "OpenSSL ライブラリを使用した RSA エンコード／デコード"

#. tumbleweed/perl-Crypt-OpenSSL-RSA/description
#. leap/perl-Crypt-OpenSSL-RSA/description
msgid ""
"Crypt::OpenSSL::RSA is an XS perl module designed to provide basic RSA "
"functionality.  It does this by providing a glue to the RSA functions in the "
"OpenSSL library."
msgstr ""
"Crypt::OpenSSL::RSA は基本的な RSA 機能を提供するよう設計された XS Perlモ"
"ジュールです。 OpenSSL ライブラリ内に用意されている RSA 機能を利用する形に"
"なっています。"

#. tumbleweed/perl-Crypt-OpenSSL-Random/summary
#. leap/perl-Crypt-OpenSSL-Random/summary
msgid "Routines for accessing the OpenSSL pseudo-random number generator"
msgstr "OpenSSL の疑似乱数生成器へのアクセスルーチン"

#. tumbleweed/perl-Crypt-OpenSSL-Random/description
#. leap/perl-Crypt-OpenSSL-Random/description
msgid ""
"Crypt::OpenSSL::Random provides the ability to seed and query the OpenSSL "
"library's pseudo-random number generator."
msgstr ""
"Crypt::OpenSSL::Random は OpenSSL ライブラリにある擬似乱数生成機能を利用し、"
"乱数のシード設定と問い合わせを行なう機能を提供します。"

#. tumbleweed/perl-Crypt-RC4/summary
#. leap/perl-Crypt-RC4/summary
msgid "Perl implementation of the RC4 encryption algorithm"
msgstr "RC4 暗号化アルゴリズムの Perl 実装"

#. tumbleweed/perl-Crypt-RC4/description
#. leap/perl-Crypt-RC4/description
msgid ""
"A simple implementation of the RC4 algorithm, developed by RSA Security, "
"Inc. Here is the description from RSA's website:\n"
"\n"
"RC4 is a stream cipher designed by Rivest for RSA Data Security (now RSA "
"Security). It is a variable key-size stream cipher with byte-oriented "
"operations. The algorithm is based on the use of a random permutation. "
"Analysis shows that the period of the cipher is overwhelmingly likely to be "
"greater than 10100. Eight to sixteen machine operations are required per "
"output byte, and the cipher can be expected to run very quickly in software. "
"Independent analysts have scrutinized the algorithm and it is considered "
"secure."
msgstr ""
"RSA Security, Inc. が開発した RC4 アルゴリズムのシンプルな実装です。 RSA の Web サイトに書かれている内容を転載します:"
"\n"
"\n"
"RC4 は RSA Data Security (現 RSA Security) 向けに Rivest 氏が設計したストリーム暗号です。これはバイト志向の"
"操作で可変のキーサイズを扱うことができるストリーム暗号で、アルゴリズムはランダム置換をベースにしています。分析によると、暗号の周期は 10100 "
"よりもずっと大きく、出力 1 バイトに対して 8 から 16 種類のマシン操作が必要で、ソフトウエア内で暗号化は非常に高速に動作するものとされています。独"
"立した分析でアルゴリズムは精査され、安全であるものと判断されています。"

#. tumbleweed/perl-Crypt-Rijndael/summary
#. leap/perl-Crypt-Rijndael/summary
msgid "Crypt::CBC compliant Rijndael encryption module"
msgstr "Crypt::CBC 互換の Rijndael 暗号化モジュール"

#. tumbleweed/perl-Crypt-Rijndael/description
#. leap/perl-Crypt-Rijndael/description
msgid ""
"This module implements the Rijndael cipher, which has just been selected as "
"the Advanced Encryption Standard.\n"
"\n"
"* keysize\n"
"\n"
"  Returns the keysize, which is 32 (bytes). The Rijndael cipher actually   "
"supports keylengths of 16, 24 or 32 bytes, but there is no way to   "
"communicate this to 'Crypt::CBC'.\n"
"\n"
"* blocksize\n"
"\n"
"  The blocksize for Rijndael is 16 bytes (128 bits), although the "
"algorithm   actually supports any blocksize that is any multiple of our "
"bytes. 128   bits, is however, the AES-specified block size, so this is all "
"we   support.\n"
"\n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  Create a new 'Crypt::Rijndael' cipher object with the given key (which   "
"must be 128, 192 or 256 bits long). The additional '$mode' argument is   the "
"encryption mode, either 'MODE_ECB' (electronic codebook mode, the   "
"default), 'MODE_CBC' (cipher block chaining, the same that 'Crypt::CBC'   "
"does), 'MODE_CFB' (128-bit cipher feedback), 'MODE_OFB' (128-bit output   "
"feedback), or 'MODE_CTR' (counter mode).\n"
"\n"
"  ECB mode is very insecure (read a book on cryptography if you don't know   "
"why!), so you should probably use CBC mode.\n"
"\n"
"* $cipher->set_iv($iv)\n"
"\n"
"  This allows you to change the initial value vector used by the chaining   "
"modes. It is not relevant for ECB mode.\n"
"\n"
"* $cipher->encrypt($data)\n"
"\n"
"  Encrypt data. The size of '$data' must be a multiple of 'blocksize' (16   "
"bytes), otherwise this function will croak. Apart from that, it can be of   "
"(almost) any length.\n"
"\n"
"* $cipher->decrypt($data)\n"
"\n"
"  Decrypts '$data'."
msgstr ""
"このモジュールは Advanced Encryption Standard に選択された Rijndael 暗号を実"
"装しています。\n"
"\n"
"* 鍵のサイズについて\n"
"\n"
"  鍵のサイズは 32 (バイト) です。 Rijndael 暗号では 16, 24, 32 バイトの鍵に対"
"応していますが、 'Crypt::CBC' にそのような機能はありません。\n"
"\n"
"* ブロックサイズについて\n"
"\n"
"  Rijndael におけるブロックサイズは 16 バイト (128 ビット) です。本来のアルゴ"
"リズムでは任意のバイトサイズに対応しているはずですが、 AES ではブロックサイズ"
"を規定しているため、本モジュールでもそのように設定しています。\n"
"\n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  指定した鍵 (128, 192, 256 ビットの長さ) で新しい 'Crypt::Rijndael' 暗号オブ"
"ジェクトを作成します。追加の '$mode' パラメータは暗号モードの指定"
"で、'MODE_ECB' (電子コードブックモード; 既定値), 'MODE_CBC' (暗号ブロック連"
"鎖; 'Crypt::CBC' と同じ動作) 'MODE_CFB' (128 ビット暗号フィードバック), "
"'MODE_OFB' (128 ビット出力フィードバック), 'MODE_CTR' (カウンタモード) のいず"
"れかを指定します。\n"
"\n"
"  ECB モードは非常に危険な仕組み (詳しく知りたい場合は、暗号化に関する書籍を"
"お読みください！) であり、通常は CBC モードを指定します。\n"
"\n"
"* $cipher->set_iv($iv)\n"
"\n"
"  上記は、連鎖モードで使用される初期値ベクトルを変更します。 ECB モードの場合"
"は無関係です。\n"
"\n"
"* $cipher->encrypt($data)\n"
"\n"
"  データを暗号化します。 '$data' のサイズは 'ブロックサイズ' (16 バイト) の整"
"数倍でなければならず、そうでない場合は croak で警告が表示されます。ただし、警"
"告が表示されるものの、 (ほぼ) 任意の長さを指定することができます。\n"
"\n"
"* $cipher->decrypt($data)\n"
"\n"
"  '$data' の暗号を解読します。"

#. tumbleweed/perl-Crypt-SSLeay/summary
#. leap/perl-Crypt-SSLeay/summary
msgid "OpenSSL support for LWP"
msgstr "SWP 向け OpenSSL サポート"

#. tumbleweed/perl-Crypt-SSLeay/description
#. leap/perl-Crypt-SSLeay/description
msgid ""
"This Perl module provides support for the HTTPS protocol under the LWP "
"manpage, to allow an the LWP::UserAgent manpage object to perform GET, HEAD, "
"and POST requests over encrypted socket connections. Please see the LWP "
"manpage for more information on POST requests.\n"
"\n"
"The 'Crypt::SSLeay' package provides 'Net::SSL', which, if requested, is "
"loaded by 'LWP::Protocol::https' for https requests and provides the "
"necessary SSL glue."
msgstr ""
"この Perl モジュールは、 LWP を利用した https プロトコルへの対応を提供しま"
"す。 これにより、 LWP::UserAgent が https による GET, HEAD, POST の各リクエス"
"トを生成することができるようになります。 POST リクエストについての詳細は "
"Perldoc LWP をご覧ください。\n"
"\n"
"'Crypt::SSLeay' パッケージには 'Net::SSL' が含まれています。これは https リク"
"エストを 行なおうとした際に 'LWP::Protocol::https' から読み込まれ、必要な "
"SSL グルーを提供します。"

#. tumbleweed/perl-Crypt-SmbHash/summary
#. leap/perl-Crypt-SmbHash/summary
msgid "perl module Crypt::SmbHash"
msgstr "Crypt::SmbHash Perl モジュール"

#. tumbleweed/perl-Crypt-SmbHash/description
#. leap/perl-Crypt-SmbHash/description
msgid ""
"This module provides functions to generate LM/NT hashes as used by Samba"
msgstr ""
"このモジュールは、 Samba で利用される LM/NT ハッシュを生成する関数を提供して"
"います。"

#. tumbleweed/perl-Crypt-UnixCrypt_XS/summary
#. leap/perl-Crypt-UnixCrypt_XS/summary
msgid "Perl XS interface for a portable traditional crypt function"
msgstr "可搬性のある従来型 crypt 関数に対する Perl XS インターフェイス"

#. tumbleweed/perl-Crypt-UnixCrypt_XS/description
#. leap/perl-Crypt-UnixCrypt_XS/description
msgid ""
"This module implements the DES-based Unix _crypt_ function. For those who "
"need to construct non-standard variants of _crypt_, the various building "
"blocks used in _crypt_ are also supplied separately."
msgstr ""
"このモジュールは、 DES ベースの Unix _crypt_ 関数を実装しています。非標準となっている _crypt_ の異形や、 _crypt_ "
"内で使用されている様々な構築ブロックについては、それぞれ別々に提供されています。"

#. tumbleweed/perl-Curses/summary
#. leap/perl-Curses/summary
msgid "Terminal screen handling and optimization"
msgstr "端末画面の処理と最適化"

#. tumbleweed/perl-Curses/description
#. leap/perl-Curses/description
msgid ""
"Curses is the interface between Perl and your system's curses(3) library. "
"For descriptions on the usage of a given function, variable, or constant, "
"consult your system's documentation, as such information invariably varies "
"(:-) between different curses(3) libraries and operating systems. This "
"document describes the interface itself, and assumes that you already know "
"how your system's curses(3) library works."
msgstr ""
"Curses は Perl とシステム向けに提供されている curses(3) "
"ライブラリとの間のインターフェイスです。それぞれ関数や変数、定数などの使い方について、詳しくはシステムのドキュメンテーションをお読みください。これは、"
"それぞれの curses(3) "
"ライブラリやオペレーティングシステムで仕様が異なることによるものです。なお、本文書ではインターフェイスそれ自身に関する説明のみで、すでに "
"curses(3) ライブラリの動作については知っていることを前提にして作られています。"

#. tumbleweed/perl-DBD-ODBC/summary
#. tumbleweed/perl-DBD-ODBC/description
#. leap/perl-DBD-ODBC/summary
msgid "ODBC Driver for DBI"
msgstr "DBI 向け ODBC ドライバ"

#. tumbleweed/perl-DBD-Pg/summary
#. leap/perl-DBD-Pg/summary
msgid "PostgreSQL database driver for the DBI module"
msgstr "DBI モジュール向け PostgreSQL データベースドライバ"

#. tumbleweed/perl-DBD-Pg/description
#. leap/perl-DBD-Pg/description
msgid ""
"DBD::Pg is a Perl module that works with the DBI module to provide access to "
"PostgreSQL databases."
msgstr ""
"DBD::Pg は PostgreSQL データベースにアクセスする機能を提供する、DBI モジュー"
"ル向け Perl モジュールです。"

#. tumbleweed/perl-DBD-SQLite/summary
#. leap/perl-DBD-SQLite/summary
msgid "Self-contained RDBMS in a DBI Driver"
msgstr "DBI ドライバ内蔵型 RDBMS"

#. tumbleweed/perl-DBD-SQLite/description
#. leap/perl-DBD-SQLite/description
msgid ""
"SQLite is a public domain file-based relational database engine that you can "
"find at http://www.sqlite.org/.\n"
"\n"
"*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
"thing in the distribution. So in order to get a fast transaction capable "
"RDBMS working for your perl project you simply have to install this module, "
"and *nothing* else.\n"
"\n"
"SQLite supports the following features:\n"
"\n"
"* Implements a large subset of SQL92\n"
"\n"
"See http://www.sqlite.org/lang.html for details.\n"
"\n"
"* A complete DB in a single disk file\n"
"\n"
"Everything for your database is stored in a single disk file, making it "
"easier to move things around than with DBD::CSV.\n"
"\n"
"* Atomic commit and rollback\n"
"\n"
"Yes, *DBD::SQLite* is small and light, but it supports full transactions!\n"
"\n"
"* Extensible\n"
"\n"
"User-defined aggregate or regular functions can be registered with the SQL "
"parser.\n"
"\n"
"There's lots more to it, so please refer to the docs on the SQLite web page, "
"listed above, for SQL details. Also refer to DBI for details on how to use "
"DBI itself. The API works like every DBI module does. However, currently "
"many statement attributes are not implemented or are limited by the typeless "
"nature of the SQLite database."
msgstr ""
"SQLite (http://www.sqlite.org/) "
"はパブリックドメインで公開されているファイルベースのリレーショナルデータベースエンジンです。\n"
"\n"
"*DBD::SQLite* は SQLite 向けの Perl DBI "
"ドライバで、配布物のすべてが含まれていますので、このモジュールをインストールするだけで、お使いの Perl "
"プロジェクトを高速でトランザクションにも対応する RDBMS を利用できるようになります。\n"
"\n"
"SQLIte には下記のような機能があります:\n"
"\n"
"* SQL92 のラージサブセットに対応\n"
"\n"
"  詳しくは http://www.sqlite.org/lang.html をお読みください。\n"
"\n"
"* 単一のディスクファイルによる完全な DB\n"
"\n"
"  データベースに必要な情報すべてが単一のディスクファイルに記録されます。これにより、 DBD::CSV などよりも簡単に扱うことができるようになります。"
"\n"
"\n"
"* アトミックなコミットとロールバック\n"
"\n"
"  *DBD::SQLite* は小さくて軽量ですが、トランザクションに完全対応しています！\n"
"\n"
"* 拡張可能性\n"
"\n"
"  ユーザ定義の集計関数または通常関数を SQL パーサに登録することができます。\n"
"\n"
"上記以外にも SQLite には様々な機能が用意されています。 SQL の詳細について、詳しくは上述の SQLite の Web "
"ページをご覧ください。また、 DBI の使用方法については、 DBI のマニュアルページをお読みください。 API は DBI "
"が提供する機能それぞれに対応していますが、多くのステートメント属性は未実装のままであるほか、 SQLite "
"が型を持たない仕組みであることによる制限もあることにご注意ください。"

#. tumbleweed/perl-DBD-mysql/summary
#. leap/perl-DBD-mysql/summary
msgid "MySQL driver for the Perl5 Database Interface (DBI)"
msgstr "Perl5 データベースインターフェイス (DBI) 向け MySQL ドライバ"

#. tumbleweed/perl-DBD-mysql/description
msgid ""
"*DBD::mysql* is the Perl5 Database Interface driver for the MySQL database. "
"In other words: DBD::mysql is an interface between the Perl programming "
"language and the MySQL programming API that comes with the MySQL relational "
"database management system. Most functions provided by this programming API "
"are supported. Some rarely used functions are missing, mainly because no-one "
"ever requested them. :-)"
msgstr ""
"*DBD::mysql* は、 MySQL データベース向けの Perl5 データベースインターフェイス"
"ドライバです。言い換えれば、 DBD::mysql は Perl プログラミング言語と MySQL リ"
"レーショナルデータベース管理システムのプログラミング API の間に立って、仲介を"
"行なうインターフェイスです。 MySQL 側の API で提供されているほとんどの機能に"
"対応してますが、ごく少数の未対応機能があります。これは主に必要とする人がいな"
"かったことによるものです :-)"

#. tumbleweed/perl-DBI/summary
#. leap/perl-DBI/summary
msgid "Database independent interface for Perl"
msgstr "Perl 向けデータベース独立インターフェイス"

#. tumbleweed/perl-DBI/description
msgid ""
"The DBI is a database access module for the Perl programming language. It "
"defines a set of methods, variables, and conventions that provide a "
"consistent database interface, independent of the actual database being "
"used.\n"
"\n"
"It is important to remember that the DBI is just an interface. The DBI is a "
"layer of \"glue\" between an application and one or more database _driver_ "
"modules. It is the driver modules which do most of the real work. The DBI "
"provides a standard interface and framework for the drivers to operate "
"within.\n"
"\n"
"This document often uses terms like _references_, _objects_, _methods_. If "
"you're not familiar with those terms then it would be a good idea to read at "
"least the following perl manuals first: perlreftut, perldsc, perllol, and "
"perlboot."
msgstr ""
"DBI は Perl プログラミング言語向けのデータベースアクセスモジュールです。複数のメソッドや変数、決まり事などを定義して、実際に使用するデータベース"
"システムとは別に一貫したインターフェイスを提供します。\n"
"\n"
"DBI は単なるインターフェイスであることにご注意ください。 DBI はアプリケーションと複数のデータベース _ドライバ_ "
"モジュールとの間を仲介するものであり、実際の処理のほとんどはドライバモジュール側で行ないます。 DBI "
"は、ドライバに対して標準インターフェイスとフレームワークを提供し、内部処理を規定しています。\n"
"\n"
"本文書では、 _参照_, _オブジェクト_, _メソッド_ などの用語をしばしば使用しています。これらの用語に詳しくない場合は、まず下記に示す Perl "
"マニュアルをお読みになることをお勧めします: perlreftut マニュアルページ, perldsc マニュアルページ, perllol "
"マニュアルページ, perlboot マニュアルページ"

#. tumbleweed/perl-DBIx-Transaction/summary
#. leap/perl-DBIx-Transaction/summary
msgid "Allow transactions to be nested in DBI"
msgstr "DBI 内で入れ子になったトランザクションを実行するモジュール"

#. tumbleweed/perl-DBIx-Transaction/description
#. leap/perl-DBIx-Transaction/description
msgid ""
"DBIx::Transaction is a wrapper around DBI that helps you manage your "
"database transactions."
msgstr ""
"DBIx::Transaction は、お使いのデータベーストランザクションの管理を支援する "
"DBI まわりのラッパーです。"

#. tumbleweed/perl-Data-Clone/summary
#. leap/perl-Data-Clone/summary
msgid "Polymorphic data cloning"
msgstr "多型データ複製"

#. tumbleweed/perl-Data-Clone/description
#. leap/perl-Data-Clone/description
msgid ""
"'Data::Clone' does data cloning, i.e. copies things recursively. This is "
"smart so that it works with not only non-blessed references, but also with "
"blessed references (i.e. objects). When 'clone()' finds an object, it calls "
"a 'clone' method of the object if the object has a 'clone', otherwise it "
"makes a surface copy of the object. That is, this module does polymorphic "
"data cloning.\n"
"\n"
"Although there are several modules on CPAN which can clone data, this module "
"has a different cloning policy from almost all of them. See the /Cloning "
"policy manpage and the /Comparison to other cloning modules manpage for "
"details."
msgstr ""
"'Data::Clone' はデータを再帰的に複製するためのモジュールです。非 bless 型の参照で動作するだけでなく、 bless 型の参照 "
"(つまりオブジェクト) でも賢く動作します。 'clone()' がオブジェクトを検出すると、オブジェクトに 'clone' メソッドが存在する場合はその"
"メソッドを呼び出し、存在しない場合はオブジェクトの面コピーを作成します。このような仕組みにより、多型データ複製を実現しています。\n"
"\n"
"CPAN "
"にはデータを複製するためのいくつかのモジュールが提供されていますが、このモジュールはそれらのほぼすべてとは異なるポリシーでデータを複製しています。"
"詳しくは /Cloning policy のマニュアルページ、もしくは /Comparison のマニュアルページをお読みください。"

#. tumbleweed/perl-Data-Dump-Streamer/summary
msgid "Accurately serialize a data structure as Perl code"
msgstr "Perl コードとしてのデータ構造の正確なシリアライズ"

#. tumbleweed/perl-Data-Dump-Streamer/description
#. leap/perl-Data-Dump-Streamer/description
msgid ""
"Given a list of scalars or reference variables, writes out their contents in "
"perl syntax. The references can also be objects. The contents of each "
"variable is output using the least number of Perl statements as convenient, "
"usually only one. Self-referential structures, closures, and objects are "
"output correctly.\n"
"\n"
"The return value can be evaled to get back an identical copy of the original "
"reference structure. In some cases this may require the use of utility subs "
"that Data::Dump::Streamer will optionally export.\n"
"\n"
"This module is very similar in concept to the core module Data::Dumper, with "
"the major differences being that this module is designed to output to a "
"stream instead of constructing its output in memory (trading speed for "
"memory), and that the traversal over the data structure is effectively "
"breadth first versus the depth first traversal done by the others.\n"
"\n"
"In fact the data structure is scanned twice, first in breadth first mode to "
"perform structural analysis, and then in depth first mode to actually "
"produce the output, but obeying the depth relationships of the first pass."
msgstr ""
"スカラー値のリストや参照変数に対して、 Perl の文法を利用しその内容を出力します。参照はオブジェクトでもかまいません。各変数の内容は Perl "
"のステートメントを最小限に利用して (通常は 1 つだけを利用して) "
"出力します。自己参照型の構造体やクロージャ、オブジェクトに対しても、正しく出力することができます。\n"
"\n"
"返される値は eval を利用することで、元の参照構造に対する同一なコピーに戻すことができるようになっています。なお、場合によっては "
"Data::Dump::Streamer がオプションで公開しているユーティリティサブルーチンを利用する必要があるかもしれません。\n"
"\n"
"このモジュールは、コアモジュールである Data::Dumper と考え方が非常に似ていますが、 Data::Dumper のようにメモリ内に構造を出力す"
"るのではなく、ストリームに出力する点が大きく異なります。また、データ構造の展開も深さの展開を優先するのではなく、配列の展開を優先する点が異なります。\n"
"\n"
"実際に、データ構造は 2 回スキャンされますが、最初に構造体の分析を行なうために配列を優先して展開し、その後実際の出力を行なうために深さを優先して展開しま"
"す。ただし、最初のパスで深さの関連性があった場合は、それに従います。"

#. tumbleweed/perl-Data-Peek/summary
#. leap/perl-Data-Peek/summary
msgid "A collection of low-level debug facilities"
msgstr "低レベルなデバッグ機能集"

#. tumbleweed/perl-Data-Peek/description
#. leap/perl-Data-Peek/description
msgid ""
"Data::Peek started off as 'DDumper' being a wrapper module over the Data::"
"Dumper manpage, but grew out to be a set of low-level data introspection "
"utilities that no other module provided yet, using the lowest level of the "
"perl internals API as possible."
msgstr ""
"Data::Peek は当初 'Data::Dumper' のラッパーモジュール 'DDumper' "
"として開発が始まりましたが、低レベルのデータに対するイントロスペクションユーティリティとして成長し、現在は他のモジュールが提供していない独自の機能を、 "
"Perl の内部 API のできる限り低レベルな部分を利用して提供しています。"

#. tumbleweed/perl-Data-Util/summary
#. leap/perl-Data-Util/summary
msgid "A selection of utilities for data and data types"
msgstr "データやデータ型に対する様々なユーティリティ集"

#. tumbleweed/perl-Data-Util/description
#. leap/perl-Data-Util/description
msgid ""
"This module provides utility functions for data and data types, including "
"functions for subroutines and symbol table hashes (stashes).\n"
"\n"
"The implementation of this module is both Pure Perl and XS, so if you have a "
"C compiler, all the functions this module provides are really faster.\n"
"\n"
"There are many benchmarks in the _DIST-DIR/benchmark/_ directory."
msgstr ""
"このモジュールはデータやデータ型に対するユーティリティ関数を提供するモジュールで、サブルーチンやシンボルテーブルハッシュ (stash) "
"向けの関数を提供しています。\n"
"\n"
"このモジュールの実装には純粋 Perl と XS の両方が用意されていて、 C "
"コンパイラが存在していれば、このモジュールのすべての機能が高速に動作するようになっています。\n"
"\n"
"_DIST-DIR/benchmark/_ ディレクトリには、多数のベンチマーク結果が記録されています。"

#. tumbleweed/perl-Date-Simple/summary
#. leap/perl-Date-Simple/summary
msgid "a simple date object"
msgstr "シンプルな日付オブジェクト"

#. tumbleweed/perl-Date-Simple/description
#. leap/perl-Date-Simple/description
msgid ""
"Dates are complex enough without times and timezones. This module may be "
"used to create simple date objects. It handles:\n"
"\n"
"* Validation.\n"
"\n"
"  Reject 1999-02-29 but accept 2000-02-29.\n"
"\n"
"* Interval arithmetic.\n"
"\n"
"  How many days were between two given dates? What date comes N days after   "
"today?\n"
"\n"
"* Day-of-week calculation.\n"
"\n"
"  What day of the week is a given date?\n"
"\n"
"* Transparent date formatting.\n"
"\n"
"  How should a date object be formatted.\n"
"\n"
"It does *not* deal with hours, minutes, seconds, and time zones.\n"
"\n"
"A date is uniquely identified by year, month, and day integers within valid "
"ranges. This module will not allow the creation of objects for invalid "
"dates. Attempting to create an invalid date will return undef. Month "
"numbering starts at 1 for January, unlike in C and Java. Years are 4-digit.\n"
"\n"
"Gregorian dates up to year 9999 are handled correctly, but we rely on Perl's "
"builtin 'localtime' function when the current date is requested. On some "
"platforms, 'localtime' may be vulnerable to rollovers such as the Unix "
"'time_t' wraparound of 18 January 2038.\n"
"\n"
"Overloading is used so you can compare or subtract two dates using standard "
"numeric operators such as '==', and the sum of a date object and an integer "
"is another date object.\n"
"\n"
"Date::Simple objects are immutable. After assigning '$date1' to '$date2', no "
"change to '$date1' can affect '$date2'. This means, for example, that there "
"is nothing like a 'set_year' operation, and '$date++' assigns a new object "
"to '$date'.\n"
"\n"
"This module contains various undocumented functions. They may not be "
"available on all platforms and are likely to change or disappear in future "
"releases. Please let the author know if you think any of them should be "
"public."
msgstr ""
"日付は時刻やタイムゾーン情報が無い場合、複雑な存在です。このモジュールは、シンプルな日付オブジェクトを作成する際に使用します。たとえば下記のような機能があ"
"ります:\n"
"\n"
"* 検証機能\n"
"\n"
"  1999-02-29 は拒否しますが、 2000-02-29 は受け入れます。\n"
"\n"
"* 加減算機能\n"
"\n"
"  2 つの日付間の日数や N 日後の日付などを計算することができます。\n"
"\n"
"* 曜日計算機能\n"
"\n"
"  指定した日付の曜日を算出することができます。\n"
"\n"
"* 透過的な日付の書式化\n"
"\n"
"  日付をどのように表現するかを指定することができます。\n"
"\n"
"なお、時・分・秒の処理や、タイムゾーンの処理は用意されて *いません* 。\n"
"\n"
"日付は年月日を正しく設定することで入力することができます。正しくない日付を指定した場合、このモジュールは受け入れを拒否し、 undef を返します。また、"
"月は C や Java とは異なり、 1 (1 月) から始まります。年は 4 桁を使用します。\n"
"\n"
"グレゴリオ暦は 9999 年までを正常に処理することができますが、現在の日時を取得する際には Perl の 'localtime' "
"関数を使用しています。そのため、プラットフォームによっては 2038 年 1 月 18 日以降 (つまり Unix 時間である 'time_t' "
"の桁あふれ) の日付を処理できないことがあります。\n"
"\n"
"また、 2 つの日付の比較や減算には標準の演算子 ('==' など) "
"を使用することができるほか、日付オブジェクトに加算演算した場合も、日付オブジェクトを返すことができます。\n"
"\n"
"なお、 Date::Simple オブジェクトは値が不変であり、 '$date1' を '$date2' に代入したあと '$date1' を変更しても、"
" '$date2' には影響を与えません。また、たとえば 'set_year' のような操作が存在しませんし、 '$date++' "
"のような処理を行なった場合は、 '$date' に新しいオブジェクトが割り当てられます。\n"
"\n"
"このモジュールには様々な文書化されていない関数が含まれていますが、これらはすべてのプラットフォームで利用可能なものであるとは限りませんし、また将来的に変更"
"されたり廃止されたりする可能性もあります。文書化されていない関数のうち、公開すべきであるとお考えのものがあれば、著者までご連絡ください。"

#. tumbleweed/perl-DateTime/summary
msgid "Date and Time Object for Perl"
msgstr "Perl 向け日時オブジェクト"

#. tumbleweed/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project. For details on this project please see "
"http://datetime.perl.org/. The DateTime site has a FAQ which may help answer "
"many \"how do I do X?\" questions. The FAQ is at http://datetime.perl.org/"
"wiki/datetime/page/FAQ.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""
"DateTime は日付と時刻の組み合わせを表現するためのクラスで、 Perl の DateTime "
"プロジェクトの一部です。このプロジェクトの詳細については、 http://datetime.perl.org/ をご覧ください。 DateTime "
"のサイトには、 \"これをやるにはどうすれば？\" のような質問を含む FAQ が公開されています。 FAQ は "
"http://datetime.perl.org/wiki/datetime/page/FAQ にあります。\n"
"\n"
"このクラスはグレゴリオ暦を表しているものですが、その暦が作られる (1582 年) よりも前の日時も表現することができます。これは \""
"先発グレゴリオ暦\" としても知られています。この暦では、カレンダーの最初の日は西暦 1 年の最初の日となり、これはイエスキリストの誕生日として "
"(間違って) 信じられてきた日にあたります。\n"
"\n"
"なお、この暦には西暦 0 年も規定されていますが、 \"BCE/CE\" や \"BC/AD\" を利用した日付形式とは異なるものになります。\n"
"\n"
"無制限の日付表現については DateTime::Infinite モジュールをご覧ください。"

#. tumbleweed/perl-DateTime-Calendar-Mayan/summary
#. leap/perl-DateTime-Calendar-Mayan/summary
msgid "The Mayan Long Count, Haab, and Tzolkin calendars"
msgstr "マヤ長期暦／ハアブ暦／ツォルキンカレンダー"

#. tumbleweed/perl-DateTime-Calendar-Mayan/description
#. leap/perl-DateTime-Calendar-Mayan/description
msgid ""
"An implementation of the Mayan Long Count, Haab, and Tzolkin calendars as "
"defined in \"Calendrical Calculations The Millennium Edition\". Supplemented "
"by \"Frequently Asked Questions about Calendars\".\n"
"\n"
"Author:\n"
"-------     Joshua Hoblitt <jhoblitt@cpan.org>"
msgstr ""
"\"Calendrical Calculations The Millennium Edition\" "
"で定義されているマヤ長期暦／ハアブ暦／ツォルキンカレンダーの実装です。詳しくは \"Frequently Asked Questions about "
"Calendars\" をお読みください。\n"
"\n"
"作者:\n"
"-------     Joshua Hoblitt <jhoblitt@cpan.org>"

#. tumbleweed/perl-Devel-Caller/summary
#. leap/perl-Devel-Caller/summary
msgid "meatier versions of C<caller>"
msgstr "C<caller> の強化版"

#. tumbleweed/perl-Devel-Caller/description
#. leap/perl-Devel-Caller/description
msgid ""
"* caller_cv($level)\n"
"\n"
"  'caller_cv' gives you the coderef of the subroutine being invoked at the   "
"call frame indicated by the value of $level\n"
"\n"
"* caller_args($level)\n"
"\n"
"  Returns the arguments passed into the caller at level $level\n"
"\n"
"* caller_vars( $level, $names )   =item called_with($level, $names)\n"
"\n"
"  'called_with' returns a list of references to the original arguments to   "
"the subroutine at $level. if $names is true, the names of the variables   "
"will be returned instead\n"
"\n"
"  constants are returned as 'undef' in both cases\n"
"\n"
"* called_as_method($level)\n"
"\n"
"  'called_as_method' returns true if the subroutine at $level was called "
"as   a method."
msgstr ""
"* caller_cv($level)\n"
"\n"
"  'caller_cv' は、指定した値で示されるコールフレームに対して、そこで実行され"
"るサブルーチンのコード参照を返します。\n"
"\n"
"* caller_args($level)\n"
"\n"
"  $level で指定したレベルの呼び出しに対して、渡されるパラメータを返します。\n"
"\n"
"* caller_vars( $level, $names )   =item called_with($level, $names)\n"
"\n"
"  'called_with' は、 $level で指定されたサブルーチンに対して、その元のパラ"
"メータに対する参照リストを返します。 $names が true の場合は、変数名の一覧が"
"返されます。\n"
"\n"
"  いずれの場合も、定数の場合は 'undef' が返ります。\n"
"\n"
"* called_as_method($level)\n"
"\n"
"  'called_as_method' は、 $level で指定されたサブルーチンがメソッドとして呼び"
"出される場合、 true を返します。"

#. tumbleweed/perl-Devel-CheckLib/summary
#. leap/perl-Devel-CheckLib/summary
msgid "Check That a Library Is Available"
msgstr "ライブラリが利用可能かどうかのチェック"

#. tumbleweed/perl-Devel-CheckLib/description
#. leap/perl-Devel-CheckLib/description
msgid ""
"Devel::CheckLib is a perl module that checks whether a particular C library "
"and its headers are available."
msgstr "Devel::CheckLib は、特定の C ライブラリとそのヘッダが存在するかどうかをチェックするための Perl モジュールです。"

#. tumbleweed/perl-Devel-CoreStack/summary
#. leap/perl-Devel-CoreStack/summary
msgid "try to generate a stack dump from a core file"
msgstr "コアファイルからスタックダンプを生成する試み"

#. tumbleweed/perl-Devel-CoreStack/description
#. leap/perl-Devel-CoreStack/description
msgid ""
"This module attempts to generate a stack dump from a core file by locating "
"the best available debugger (if any) and running it with the appropriate "
"arguments and command script."
msgstr ""
"このモジュールは、コアファイルからスタックダンプを生成しようとするもので、 "
"(もし存在すれば) 利用可能なもののうちで最も便利なデバッガを検出し、 適切なパ"
"ラメータとコマンドスクリプトを設定して実行します。"

#. tumbleweed/perl-Devel-Cover/summary
#. leap/perl-Devel-Cover/summary
msgid "Code coverage metrics for Perl"
msgstr "Perl 向けコードカバレッジ計測"

#. tumbleweed/perl-Devel-Cover/description
#. leap/perl-Devel-Cover/description
msgid ""
"This module provides code coverage metrics for Perl. Code coverage metrics "
"describe how thoroughly tests exercise code. By using Devel::Cover you can "
"discover areas of code not exercised by your tests and determine which tests "
"to create to increase coverage. Code coverage can be considered an indirect "
"measure of quality.\n"
"\n"
"Although it is still being developed, Devel::Cover is now quite stable and "
"provides many of the features to be expected in a useful coverage tool.\n"
"\n"
"Statement, branch, condition, subroutine, and pod coverage information is "
"reported. Statement and subroutine coverage data should be accurate. Branch "
"and condition coverage data should be mostly accurate too, although not "
"always what one might initially expect. Pod coverage comes from Pod::"
"Coverage. If Pod::Coverage::CountParents is available it will be used "
"instead. Coverage data for other criteria are not yet collected.\n"
"\n"
"The _cover_ program can be used to generate coverage reports. Devel::Cover "
"ships with a number of different reports including various types of HTML "
"output, textual reports, a report to display missing coverage in the same "
"format as compilation errors and a report to display coverage information "
"within the Vim editor.\n"
"\n"
"It is possible to add annotations to reports, for example you can add a "
"column to an HTML report showing who last changed a line, as determined by "
"git blame. Some annotation modules are shipped with Devel::Cover and you can "
"easily create your own.\n"
"\n"
"The _gcov2perl_ program can be used to convert gcov files to 'Devel::Cover' "
"databases. This allows you to display your C or XS code coverage together "
"with your Perl coverage, or to use any of the Devel::Cover reports to "
"display your C coverage data.\n"
"\n"
"Code coverage data are collected by replacing perl ops with functions which "
"count how many times the ops are executed. These data are then mapped back "
"to reality using the B compiler modules. There is also a statement profiling "
"facility which should not be relied on. For proper profiling use Devel::"
"NYTProf. Previous versions of Devel::Cover collected coverage data by "
"replacing perl's runops function. It is still possible to switch to that "
"mode of operation, but this now gets little testing and will probably be "
"removed soon. You probably don't care about any of this.\n"
"\n"
"The most appropriate mailing list on which to discuss this module would be "
"perl-qa. See http://lists.perl.org/list/perl-qa.html.\n"
"\n"
"The Devel::Cover repository can be found at http://github.com/pjcj/Devel--"
"Cover. This is also where problems should be reported."
msgstr ""
"このモジュールは、 Perl に対するコードカバレッジ測定の機能を提供します。コードカバレッジとはテストがどれだけコードをカバーしているのかを示すもので、"
" Devel::Cover を利用すると、テストで実行されていないコード領域を検出して、どのようなテストが不足しているのかを確認することができます。コード"
"カバレッジは、間接的ながら品質としても利用することができます。\n"
"\n"
"なお、本モジュールは現在も開発中ですが、安定していて、便利なカバレッジツールで必要な多数の機能を提供しています。\n"
"\n"
"ステートメントや分岐、条件、サブルーチン、 Pod の各カバレッジ情報が報告されます。ステートメントとサブルーチンのカバレッジは正確に表示されますが、分岐"
"や条件のカバレッジについては正確には測定できない箇所があり、場合によっては不完全になる場合もあります。また、 Pod のカバレッジは Pod::"
"Coverage を利用して測定されます。また、 Pod::Coverage::CountParents "
"が利用できる場合は、そちらを利用します。その他のカバレッジについては、原人では収集することができません。\n"
"\n"
"_cover_ プログラムはカバレッジレポートを作成する際に使用するプログラムで、 Devel::Cover では HTML "
"やテキストなどの様々な形式に対応し、コンパイルエラーと同じ書式でカバレッジの指摘を表示したり、 Vim "
"エディタ内にカバレッジ情報を表示したりすることもできます。\n"
"\n"
"このほか、 HTML のレポート内に列を追加して、 git blame で設定された行の最終変更者を表示したりするなどの注釈機能も用意されています。 "
"Devel::Cover にはいくつかの注釈モジュールが含まれていて、ここから独自に作成することもできます。\n"
"\n"
"_gcov2perl_ プログラムは gcov ファイルを 'Devel::Cover' データベースに変換する際に使用するプログラムで、これにより C "
"言語や XS のコードカバレッジを Perl のカバレッジと共に表示することができるほか、 Devel::Cover のレポートをお使いの C "
"言語のカバレッジデータに表示することもできます。\n"
"\n"
"コードカバレッジのデータは Perl op を実行回数を数える関数で置き換えることで収集しています。これらのデータは B コンパイラモジュールを利用して元"
"のコードにマッピングされます。また、ステートメントのプロファイル収集機能も用意されていますが、これらに依存すべきではありません。正しいプロファイル機能を利"
"用したい場合は、 Devel::NYTProf をお使いください。以前のバージョンの Devel::Cover では Perl の runops 関数を置"
"き換えることで収集を行なっていましたが、本バージョンでもこのように置き換えて収集することもできます。ただし、ほとんどテストが行なわれておらず、近いうちに削"
"除される予定です。こちらはおそらく使用する必要がないでしょう。\n"
"\n"
"本モジュールに関して議論を行ないたい場合に、もっとも適切なメーリングリストは perl-qa です。詳しくは "
"http://lists.perl.org/list/perl-qa.html をご覧ください。\n"
"\n"
"Devel::Cover のリポジトリは http://github.com/pjcj/Devel--Cover "
"にあります。問題の報告もこちらから行なってください。"

#. tumbleweed/perl-Devel-Declare/summary
#. leap/perl-Devel-Declare/summary
msgid "Adding keywords to perl, in perl"
msgstr "Perl に対して、および Perl 内でのキーワードの追加"

#. tumbleweed/perl-Devel-Declare/description
#. leap/perl-Devel-Declare/description
msgid ""
"the Devel::Declare manpage can install subroutines called declarators which "
"locally take over Perl's parser, allowing the creation of new syntax.\n"
"\n"
"This document describes how to create a simple declarator."
msgstr ""
"Devel::Declare はローカルで Perl "
"のパーサを乗っ取ることのできるデコレータと呼ばれるサブルーチンをインストールすることで、新しい文法の作成を行なうことができるものです。\n"
"\n"
"この文書では、シンプルなデコレータについて作成方法を説明しています。"

#. tumbleweed/perl-Devel-Leak/summary
#. leap/perl-Devel-Leak/summary
msgid "Utility for looking for perl objects that are not reclaimed"
msgstr "reclaim されていない Perl オブジェクトを探すためのユーティリティ"

#. tumbleweed/perl-Devel-LexAlias/summary
#. leap/perl-Devel-LexAlias/summary
msgid "alias lexical variables"
msgstr "別名 lexical 変数"

#. tumbleweed/perl-Devel-LexAlias/description
#. leap/perl-Devel-LexAlias/description
msgid ""
"Devel::LexAlias provides the ability to alias a lexical variable in a "
"subroutines scope to one of your choosing.\n"
"\n"
"If you don't know why you'd want to do this, I'd suggest that you skip this "
"module. If you think you have a use for it, I'd insist on it.\n"
"\n"
"Still here?\n"
"\n"
"* lexalias( $where, $name, $variable )\n"
"\n"
"  '$where' refers to the subroutine in which to alias the lexical, it can   "
"be a coderef or a call level such that you'd give to 'caller'\n"
"\n"
"  '$name' is the name of the lexical within that subroutine\n"
"\n"
"  '$variable' is a reference to the variable to install at that location"
msgstr ""
"Devel::LexAlias はサブルーチンスコープ内の lexical 変数を別のスコープで別名化"
"できる機能を提供します。\n"
"\n"
"このモジュールがなぜ必要なのかがわからない場合は、まず本モジュールを読み飛ば"
"しておくことをお勧めします。これを使用したい場合にのみお使いください。\n"
"\n"
"いかがでしょうか？\n"
"\n"
"* lexalias( $where, $name, $variable )\n"
"\n"
"  '$where' には lexical 変数を利用するサブルーチンの参照を指定します。コード"
"参照のほか、 'caller' に指定する呼び出しレベルでもかまいません。\n"
"\n"
"  '$name' には、そのサブルーチン内での lexical 変数名を指定します。\n"
"  '$variable' には、その場所にインストールする変数への参照を指定します。"

#. tumbleweed/perl-Devel-NYTProf/summary
#. leap/perl-Devel-NYTProf/summary
msgid "Powerful fast feature-rich Perl source code profiler"
msgstr "パワフルで高速、かつ機能の豊富な Perl ソースコードプロファイラ"

#. tumbleweed/perl-Devel-NYTProf/description
#. leap/perl-Devel-NYTProf/description
msgid ""
"Devel::NYTProf is a powerful, fast, feature-rich perl source code profiler.\n"
"\n"
"  * Performs per-line statement profiling for fine detail\n"
"\n"
"  * Performs per-subroutine statement profiling for overview\n"
"\n"
"  * Performs per-opcode profiling for slow perl builtins\n"
"\n"
"  * Performs per-block statement profiling (the first profiler to do so)\n"
"\n"
"  * Accounts correctly for time spent after calls return\n"
"\n"
"  * Performs inclusive and exclusive timing of subroutines\n"
"\n"
"  * Subroutine times are per calling location (a powerful feature)\n"
"\n"
"  * Can profile compile-time activity, just run-time, or just END time\n"
"\n"
"  * Uses novel techniques for efficient profiling\n"
"\n"
"  * Sub-microsecond (100ns) resolution on supported systems\n"
"\n"
"  * Very fast - the fastest statement and subroutine profilers for perl\n"
"\n"
"  * Handles applications that fork, with no performance cost\n"
"\n"
"  * Immune from noise caused by profiling overheads and I/O\n"
"\n"
"  * Program being profiled can stop/start the profiler\n"
"\n"
"  * Generates richly annotated and cross-linked html reports\n"
"\n"
"  * Captures source code, including string evals, for stable results\n"
"\n"
"  * Trivial to use with mod_perl - add one line to httpd.conf\n"
"\n"
"  * Includes an extensive test suite\n"
"\n"
"  * Tested on very large codebases\n"
"\n"
"NYTProf is effectively two profilers in one: a statement profiler, and a "
"subroutine profiler."
msgstr ""
"Devel::NYTProf はパワフルで機能の豊富な Perl ソースコードプロファイラです。\n"
"\n"
"  * より詳しい情報をつかむための行ごとのステートメントプロファイル機能\n"
"\n"
"  * 概要をつかむためのサブルーチンごとのステートメントプロファイル機能\n"
"\n"
"  * Perl 内部が遅いかどうかを確認するための opcode ごとのプロファイル機能\n"
"\n"
"  * ブロックごとのステートメントプロファイル機能 (一般にプロファイラが実施するものです)\n"
"\n"
"  * 呼び出しからの復帰時に消費された時間の正確な積算\n"
"\n"
"  * サブルーチンの包括的／排他的タイミング計算\n"
"\n"
"  * 呼び出し位置ごとのサブルーチン時間計算 (パワフルとされる機能)\n"
"\n"
"  * コンパイル時、実行時、終了時における各プロファイルが可能\n"
"\n"
"  * 効果的なプロファイリングのための独創的な技法\n"
"\n"
"  * 対応するシステムではマイクロ秒未満 (100 ナノ秒単位) の精度による測定に対応\n"
"\n"
"  * 非常に高速 - Perl ではステートメントやサブルーチンのプロファイルがもっとも高速に動作します\n"
"\n"
"  * fork を実施するアプリケーションでも問題なく動作します - 性能面のコストもありません\n"
"\n"
"  * プロファイル処理そのものや I/O によるノイズの除去に対応\n"
"\n"
"  * プロファイル先のプログラムでもプロファイルの開始や停止に対応\n"
"\n"
"  * 豊かな注釈機能とクロスリンクされた HTML レポートを生成\n"
"\n"
"  * 安定した結果をもたらすための文字列の eval など、ソースコードを正確に捉える機能\n"
"\n"
"  * mod_perl でも利用可能 - httpd.conf に設定を追加します\n"
"\n"
"  * 広範囲に対応するテストスイートを同梱\n"
"\n"
"  * 非常に広範囲のコードベースでテスト済み\n"
"\n"
"NYTProf は 2 種類のプロファイラ (ステートメントプロファイラおよびサブルーチンプロファイラ) を 1 つにまとめたものです。"

#. tumbleweed/perl-Devel-PPPort/summary
#. leap/perl-Devel-PPPort/summary
msgid "Perl/Pollution/Portability"
msgstr "Perl/Pollution/Portability"

#. tumbleweed/perl-Devel-PPPort/description
#. leap/perl-Devel-PPPort/description
msgid ""
"Perl's API has changed over time, gaining new features, new functions, "
"increasing its flexibility, and reducing the impact on the C namespace "
"environment (reduced pollution). The header file written by this module, "
"typically _ppport.h_, attempts to bring some of the newer Perl API features "
"to older versions of Perl, so that you can worry less about keeping track of "
"old releases, but users can still reap the benefit.\n"
"\n"
"'Devel::PPPort' contains two functions, 'WriteFile' and 'GetFileContents'. "
"'WriteFile''s only purpose is to write the _ppport.h_ C header file. This "
"file contains a series of macros and, if explicitly requested, functions "
"that allow XS modules to be built using older versions of Perl. Currently, "
"Perl versions from 5.003 to 5.20 are supported.\n"
"\n"
"'GetFileContents' can be used to retrieve the file contents rather than "
"writing it out.\n"
"\n"
"This module is used by 'h2xs' to write the file _ppport.h_."
msgstr ""
"Perl の API は時代を追うごとに変化していき、新しい機能や関数が追加され、柔軟性が高まって C ネームスペース環境によるインパクト (悪影響) "
"も減ってきています。このモジュールによって書かれたヘッダファイル (一般に _ppport.h_) は、新しい Perl API 機能を古いバージョンの "
"Perl にもたらそうという試みで、古いリリースで動作するかどうかを心配することなく、ユーザに利便性を提供しようとする試みです。\n"
"\n"
"'Devel::PPPort' には 2 つの関数 ('WriteFile', 'GetFileContents') が含まれています。  "
"'WriteFile' は _ppport.h_ C "
"ヘッダファイルに書き込むだけのために用意されたものです。このファイルにはマクロ集のほか、明示的に指定していれば、古いバージョンの Perl を利用して "
"XS モジュールを構築できる機能が含まれています。現時点では Perl のバージョン 5.003 から 5.20 までに対応しています。\n"
"\n"
"'GetFileContents' では、ファイルに出力せず、その内容を取得する際に使用します。\n"
"\n"
"このモジュールは、 _ppport.h_ に書き込むにあたって 'h2xs' が使用しています。"

#. tumbleweed/perl-Devel-PatchPerl/summary
#. leap/perl-Devel-PatchPerl/summary
msgid "Patch perl source a la Devel::PPPort's buildperl.pl"
msgstr "Perl のソースコードに対するパッチ: Devel::PPorts の buildperl.pl"

#. tumbleweed/perl-Devel-PatchPerl/description
#. leap/perl-Devel-PatchPerl/description
msgid ""
"Devel::PatchPerl is a modularisation of the patching code contained in "
"Devel::PPPort's 'buildperl.pl'.\n"
"\n"
"It does not build perls, it merely provides an interface to the source "
"patching functionality."
msgstr ""
"Devel::PatchPerl は Devel::PPPorts の 'buildperl.pl' "
"内に含まれているコードパッチをモジュール化したものです。\n"
"\n"
"Perl をコンパイルするわけではなく、ソースコードのパッチ機能に対してインターフェイスを提供します。"

#. tumbleweed/perl-Device-SerialPort/summary
#. leap/perl-Device-SerialPort/summary
msgid "Linux/POSIX emulation of Win32::SerialPort functions"
msgstr "Win32::SerialPort の機能の Linux/POSIX エミュレーション"

#. tumbleweed/perl-Device-SerialPort/description
#. leap/perl-Device-SerialPort/description
msgid ""
"This module provides an object-based user interface essentially identical to "
"the one provided by the Win32::SerialPort module."
msgstr ""
"このモジュールは、 Win32::SerialPort モジュールが提供するものと本質的に同一のオブジェクトベースのユーザインターフェイスを提供します。"

#. tumbleweed/perl-Digest-CRC/summary
#. leap/perl-Digest-CRC/summary
msgid "Generic CRC functions"
msgstr "汎用 CRC 関数"

#. tumbleweed/perl-Digest-CRC/description
#. leap/perl-Digest-CRC/description
msgid ""
"The *Digest::CRC* module calculates CRC sums of all sorts. It contains "
"wrapper functions with the correct parameters for CRC-CCITT, CRC-16, CRC-32 "
"and CRC-64, as well as the CRC used in OpenPGP's ASCII-armored checksum."
msgstr ""
"*Digest::CRC* モジュールは全ての種類に対応した CRC 計算モジュールです。 CRC-CCITT, CRC-16, CRC-32, CRC-"
"64 に対して、適切なパラメータを提供するラッパー関数のほか、 OpenPGP の ASCII アーマーチェックサムにも対応しています。"

#. tumbleweed/perl-Digest-JHash/summary
#. leap/perl-Digest-JHash/summary
msgid "Perl extension for 32 bit Jenkins Hashing Algorithm"
msgstr "32 ビット Jenkins ハッシュアルゴリズムに対する Perl の拡張"

#. tumbleweed/perl-Digest-JHash/description
#. leap/perl-Digest-JHash/description
msgid ""
"The 'Digest::JHash' module allows you to use the fast JHash hashing "
"algorithm developed by Bob Jenkins from within Perl programs. The algorithm "
"takes as input a message of arbitrary length and produces as output a 32-bit "
"\"message digest\" of the input in the form of an unsigned long integer.\n"
"\n"
"Call it a low calorie version of MD5 if you like.\n"
"\n"
"See http://burtleburtle.net/bob/hash/doobs.html for more information."
msgstr ""
"'Digest::JHash' モジュールは、 Bob Jenkins 氏が開発したモジュールで、 Perl プログラム内で高速な JHash "
"ハッシュアルゴリズムを利用することのできる仕組みです。任意の長さのメッセージを入力として受け付け、入力された値に対して 32 ビットの \""
"メッセージダイジェスト\" を計算し、それを unsigned long integer で出力します。\n"
"\n"
"言い換えれば、 MD5 の低カロリー版ともいえます。\n"
"\n"
"詳しくは http://burtleburtle.net/bob/hash/doobs.html をお読みください。"

#. tumbleweed/perl-Digest-MD4/summary
#. leap/perl-Digest-MD4/summary
msgid "Perl interface to the MD4 Algorithm"
msgstr "MD4 アルゴリズムに対する Perl インターフェイス"

#. tumbleweed/perl-Digest-MD4/description
#. leap/perl-Digest-MD4/description
msgid ""
"The 'Digest::MD4' module allows you to use the RSA Data Security Inc. MD4 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"The 'Digest::MD4' module provides a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""
"'Digest::MD4' モジュールは、 RSA Data Security Inc. が提供する MD4 メッセージ"
"ダイジェストアルゴリズムに対して、 Perl プログラムからアクセスする手段を提供"
"します。このアルゴリズムは任意の長さの入力メッセージを受け付け、その結果を"
"128 ビットの \"指紋\" または \"メッセージダイジェスト\" として出力します。\n"
"\n"
"'Digest::MD4' モジュールは使いやすい手続き型のインターフェイスを提供している"
"ほか、オブジェクト指向のインターフェイスを利用して、任意の長さのメッセージを"
"直接読み込んだり、ファイルを直接読み込んだりすることができる仕組みも用意され"
"ています。"

#. tumbleweed/perl-Digest-MD5/summary
#. leap/perl-Digest-MD5/summary
msgid "Perl interface to the MD5 Algorithm"
msgstr "MD5 アルゴリズムに対する Perl インターフェイス"

#. tumbleweed/perl-Digest-MD5/description
#. leap/perl-Digest-MD5/description
msgid ""
"The 'Digest::MD5' module allows you to use the RSA Data Security Inc. MD5 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"Note that the MD5 algorithm is not as strong as it used to be. It has since "
"2005 been easy to generate different messages that produce the same MD5 "
"digest. It still seems hard to generate messages that produce a given "
"digest, but it is probably wise to move to stronger algorithms for "
"applications that depend on the digest to uniquely identify a message.\n"
"\n"
"The 'Digest::MD5' module provide a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""
"'Digest::MD5' モジュールは、 Perl のプログラム内から RSA Data Security Inc. の MD5 "
"メッセージダイジェストアルゴリズムを利用するための仕組みです。任意の長さのメッセージを入力として受け付け、入力された値に対して 128 ビットの \""
"フィンガープリント\" (指紋) もしくは \"メッセージダイジェスト\" を計算して出力します。\n"
"\n"
"なお、 MD5 アルゴリズムは以前に考えられていたよりも強固な仕組みではなくなったことに注意してください。 2005 年の時点で、"
"異なるメッセージから同じ MD5 ダイジェストを生成できることが判明しています。もちろん現時点でも容易に生成できてしまうようなものではありませんが、メッセ"
"ージが唯一のものであると識別する必要があるアプリケーションは、より強固なアルゴリズムに移行したほうが賢明です。\n"
"\n"
"'Digest::MD5' モジュールは、使いやすいプロシージャ型のインターフェイスのほか、任意の長さのメッセージを処理したり、ファイルから直接読み込んだ"
"りするためのオブジェクト指向のインターフェイスも提供しています。"

#. tumbleweed/perl-Digest-SHA1/summary
#. leap/perl-Digest-SHA1/summary
msgid "Perl Interface to the SHA-1 Algorithm"
msgstr "SHA-1 アルゴリズムに対する Perl インターフェイス"

#. tumbleweed/perl-Encode-Detect/summary
#. leap/perl-Encode-Detect/summary
msgid "An Encode::Encoding subclass that detects the encoding of data"
msgstr "データのエンコーディングを検出するための Encode::Encoding サブクラス"

#. tumbleweed/perl-Encode-Detect/description
#. leap/perl-Encode-Detect/description
msgid ""
"This Perl module is an Encode::Encoding subclass that uses Encode::Detect::"
"Detector to determine the charset of the input data and then decodes it "
"using the encoder of the detected charset.\n"
"\n"
"It is similar to Encode::Guess, but does not require the configuration of a "
"set of expected encodings. Like Encode::Guess, it only supports decoding--it "
"cannot encode."
msgstr ""
"この Perl モジュールは Encode::Encoding サブクラスと呼ばれ、 Encode::Detect::"
"Detector を利用して入力データの文字コードセットを判別し、検出した文字セットで"
"デコード処理を行ないます。\n"
"\n"
"このモジュールは Encode::Guess に似た仕組みですが、期待するエンコーディングを"
"設定する必要がない点が異なります。また、 Encode::Guess のようにデコードのみに"
"対応しています。そのため、エンコード処理は用意されていません。"

#. tumbleweed/perl-Encode-EUCJPASCII/summary
#. leap/perl-Encode-EUCJPASCII/summary
msgid "An eucJP-open mapping"
msgstr "eucJP-open マッピング"

#. tumbleweed/perl-Encode-EUCJPASCII/description
#. leap/perl-Encode-EUCJPASCII/description
msgid ""
"This module provides eucJP-ascii, one of eucJP-open mappings, and its "
"derivative. Following encodings are supported.\n"
"\n"
"  Canonical    Alias                           Description   "
"--------------------------------------------------------------   eucJP-"
"ascii                                  eucJP-ascii                qr/\\beuc-?"
"jp(-?open)?(-?19970715)?-?ascii$/i   x-iso2022jp-"
"ascii                            7-bit counterpart                qr/\\b(x-)?"
"iso-?2022-?jp-?ascii$/i   "
"--------------------------------------------------------------\n"
"\n"
"*Note*: 'x-iso2022jp-ascii' is unofficial encoding name: It had never been "
"registered by any standards bodies."
msgstr ""
"このモジュールは eucJP-ascii と呼ばれる eucJP-open マッピングのうちの 1 "
"つと、その派生系を提供します。下記のエンコーディングに対応しています。\n"
"\n"
"  Canonical    Alias                           Description   "
"--------------------------------------------------------------   eucJP-"
"ascii                                  eucJP-ascii                qr/\\"
"beuc-?jp(-?open)?(-?19970715)?-?ascii$/i   x-iso2022jp-"
"ascii                            7-bit counterpart                qr/\\"
"b(x-)?iso-?2022-?jp-?ascii$/i   "
"--------------------------------------------------------------\n"
"\n"
"*注意*: 'x-iso2022jp-ascii' は非公式のエンコーディング名です。標準化機関に登録されているものではありません。"

#. tumbleweed/perl-Encode-HanExtra/summary
#. leap/perl-Encode-HanExtra/summary
msgid "Extra sets of Chinese encodings"
msgstr "中国語エンコード向けの拡張セット"

#. tumbleweed/perl-Encode-HanExtra/description
#. leap/perl-Encode-HanExtra/description
msgid ""
"Perl 5.7.3 and later ships with an adequate set of Chinese encodings, "
"including the most used CP950, CP936 (also known as GBK), Big5, Big5-HKSCS, "
"EUC-CN, HZ, and ISO-IR-165.\n"
"\n"
"However, the numbers of Chinese encodings are staggering, and a complete "
"coverage will easily increase the size of perl distribution by several "
"megabytes; hence, this CPAN module tries to provide the rest of them."
msgstr ""
"Perl 5.7.3 以降のバージョンでは、広く使われている CP950, CP936 (GBK としても"
"知られています), Big5, Big5-HKSCS, EUC-CN, HZ, ISO-IR-165 など、中国語エン"
"コードに対する適切な機能セットが 含まれています。 \n"
"\n"
"しかしながら、多くの中国語エンコードは完全なものではなく、 完全にカバーしよう"
"とすると Perl ディストリビューションの配布物がメガバイト単位で 肥大化してしま"
"うという問題があります; そのため、この CPAN モジュールで残りの部分を 提供して"
"います。"

#. tumbleweed/perl-Encode-JIS2K/summary
#. leap/perl-Encode-JIS2K/summary
msgid "JIS X 0212 (aka JIS 2000) Encodings"
msgstr "JIS X 0212 (別名 JIS 2000) エンコード"

#. tumbleweed/perl-Encode-JIS2K/description
#. leap/perl-Encode-JIS2K/description
msgid ""
"This module implements encodings that covers JIS X 0213 charset (AKA JIS "
"2000, hence the module name)."
msgstr ""
"このモジュールは JIS X 0213 文字セット (これは JIS 2000 とも呼ばれ、モジュー"
"ル名にもなっています) をカバーするエンコードを実装しています。"

#. tumbleweed/perl-Event/summary
#. leap/perl-Event/summary
msgid "Event loop processing"
msgstr "イベントループ処理"

#. tumbleweed/perl-Event/description
#. leap/perl-Event/description
msgid ""
"ALERT: Marc Lehmann may have taken over the future of event loops in Perl. "
"Check out his libev library and EV Perl module. 25 Aug 2009\n"
"\n"
"The Event module provide a central facility to watch for various types of "
"events and invoke a callback when these events occur. The idea is to delay "
"the handling of events so that they may be dispatched in priority order when "
"it is safe for callbacks to execute.\n"
"\n"
"Events (in the ordinary sense of the word) are detected by *watchers*, which "
"reify them as *events* (in the special Event module sense). For clarity, the "
"former type of events may be called \"source events\", and the latter "
"\"target events\". Source events, such as signals arriving, happen whether "
"or not they are being watched. If a source event occurs which a watcher is "
"actively watching then the watcher generates a corresponding target event. "
"Target events are only created by watchers. If several watchers are "
"interested in the same source event then each will generate their own target "
"event. Hence, any particular source event may result in zero, one, two, or "
"any number of target events: the same as the number of watchers which were "
"actively watching for it.\n"
"\n"
"Target events are queued to be processed in priority order (priority being "
"determined by the creating watcher) and in FIFO order among events of the "
"same priority. Queued (\"pending\") events can, in some cases, be cancelled "
"before being processed. A queued event is processed by being passed to the "
"callback function (or method on a particular object or class) which was "
"specified to the watcher.\n"
"\n"
"A watcher, once created, operates autonomously without the Event user having "
"to retain any reference to it. However, keeping a reference makes it "
"possible to modify most of the watcher's characteristics. A watcher can be "
"switched between active and inactive states. When inactive, it does not "
"generate target events.\n"
"\n"
"Some types of source event are not reified as target events immediately. "
"Signals received, for example, are counted initially. The counted signals "
"are reified at certain execution points. Hence, signal events may be "
"processed out of order, and if handled carelessly, on the wrong side of a "
"state change in event handling. A useful way to view this is that occurrence "
"of the source event is not actually the arrival of the signal but is "
"triggered by the counting of the signal.\n"
"\n"
"Reification can be forced when necessary. The schedule on which some other "
"events are created is non-obvious. This is especially the case with watchers "
"that watch for a condition rather than an event. In some cases, target "
"events are generated on a schedule that depends on the operation of the "
"event loop."
msgstr ""
"警告: Marc Lehmann 氏が Perl におけるイベントループ機能を引き継いで開発する可能性があります。詳しくは libev ライブラリと "
"EV Perl モジュールをご覧ください (2009年8月25日)\n"
"\n"
"Event モジュールは様々なタイプのイベントを監視し、イベント発生時には必要なコールバックを呼び出す仕組みを提供します。イベントの処理を遅らせることで、"
"優先順位を元に実行したり、実行時に安全にコールバックを呼び出したりする機能を提供します。\n"
"\n"
"一般に、イベントは *watcher* (監視するもの) が検出し、それを (Event モジュールで言うところの) *イベント* "
"に組み替えます。以降の説明では、前者のイベントを \"ソースイベント\" 、後者のイベントを \"ターゲットイベント\" "
"と称します。プロセスに対するシグナルなど、ソースイベントが発生した場合は、まずそれが監視対象であるかどうかを判断します。 watcher "
"が監視している対象のものであれば、 watcher は関連するターゲットイベントを生成します。ターゲットイベントは watcher だけが生成します。"
"複数の watcher が同じソースイベントを監視していた場合は、それぞれでターゲットイベントを生成します。そのため、ソースイベントは watcher "
"が監視対象にしているかどうかに従って、 0 個以上のターゲットイベントに変換されることになります。\n"
"\n"
"ターゲットイベントは watcher の判断によって優先順位順に並べ替えられます。優先順位が同じであれば、それは FIFO (早いもの順) "
"に並べられます。このように並べられた (\"ペンディング状態の\") イベントは、場合によっては処理前にキャンセルされる場合もあります。並べられた後は "
"watcher 側で指定したとおり、それぞれのコールバック関数 (または特定のオブジェクトやクラスに結びつけられたメソッド) を呼び出します。\n"
"\n"
"watcher は作成されると自律的に動作します。イベントのユーザ側が参照を保持する必要もありません。しかしながら、参照を保持しておくことで、 "
"watcher の振る舞いの多くを修正することができるようになります。また、 watcher "
"は有効／無効の状態を切り替えることができます。無効化された場合は、ターゲットイベントは生成されません。\n"
"\n"
"ソースイベントの種類によっては、即時にターゲットイベントが作成されないものもあります。たとえばシグナルなどの場合、最初はそれを数えるだけの処理が行なわれ、"
"その後対応する処理が実行されます。そのため、シグナルのイベントは順序通りには処理されない場合があるほか、不用意に処理してしまうと、正しい状態を認識できない"
"場合もあります。これを正しく認識するには、ソースイベントの発生は実際のシグナルを示すものではなく、シグナルを数えて処理していることに留意する必要があります"
"。\n"
"\n"
"また、必要であれば組み替えを強制的に実施することもできます。その他のイベントのスケジュールの作成については自明ではありません。これは特に watcher "
"がイベントではなく条件を監視しているような場合に当てはまります。また場合によってはターゲットイベントの生成はイベントループ内の操作に従って生成されます。"

#. tumbleweed/perl-ExtUtils-CppGuess/summary
#. leap/perl-ExtUtils-CppGuess/summary
msgid "Guess C++ Compiler and Flags"
msgstr "C++ コンパイラとフラグの推測"

#. tumbleweed/perl-ExtUtils-CppGuess/description
#. leap/perl-ExtUtils-CppGuess/description
msgid ""
"'ExtUtils::CppGuess' attempts to guess the system's C++ compiler that is "
"compatible with the C compiler that your perl was built with.\n"
"\n"
"It can generate the necessary options to the the Module::Build manpage "
"constructor or to the ExtUtils::MakeMaker manpage's 'WriteMakefile' function."
msgstr ""
"'ExtUtils::CppGuess' はシステムの C++ コンパイラを推測し、 Perl をコンパイルしたときの C "
"コンパイラと互換性があるかどうかを確認します。\n"
"\n"
"Module::Build コンストラクタや ExtUtils::MakeMaker の 'WriteMakefile' "
"関数で、必要なオプションを生成するのに必要となります。"

#. tumbleweed/perl-ExtUtils-F77/summary
#. leap/perl-ExtUtils-F77/summary
msgid "Simple interface to F77 libs"
msgstr "F77 ライブラリ向けのシンプルインターフェイス"

#. tumbleweed/perl-ExtUtils-F77/description
#. leap/perl-ExtUtils-F77/description
msgid ""
"This module tries to figure out how to link C programs with Fortran "
"subroutines on your system. Basically one must add a list of Fortran runtime "
"libraries. The problem is their location and name varies with each OS/"
"compiler combination!"
msgstr ""
"このモジュールは、お使いのシステムで C プログラムと Fortran サブルーチンをリ"
"ンクする方法を示すものです。基本的に Fortran のランタイムライブラリの一覧に追"
"加しなければなりません。また、それぞれの OS やコンパイラの組み合わせで場所と"
"名前が変わってしまう問題があります。"

#. tumbleweed/perl-ExtUtils-XSpp/summary
#. leap/perl-ExtUtils-XSpp/summary
msgid "XS for C++"
msgstr "C++ 向け XS"

#. tumbleweed/perl-ExtUtils-XSpp/description
#. leap/perl-ExtUtils-XSpp/description
msgid ""
"Anything that does not look like a XS++ directive or a class declaration is "
"passed verbatim to XS. If you want XS++ to ignore code that looks like a XS+"
"+ directive or class declaration, simply surround it with a raw block "
"delimiter like this:\n"
"\n"
"  %{   XS++ won't interpret this   %}"
msgstr ""
"XS++ のディレクティブやクラスの定義には見えないようなものを XS に渡すことができます。 XS++ に対して、 XS++ "
"のディレクティブやクラス定義に見えないものを無視させたい場合は、下記のようにしてブロックを括ってください:\n"
"\n"
"  %{   XS++ won't interpret this   %}"

#. tumbleweed/perl-File-Basename-Object/summary
#. leap/perl-File-Basename-Object/summary
msgid "Object-oriented syntax sugar for File::Basename"
msgstr "File::Basename 向けオブジェクト指向文法 Sugar"

#. tumbleweed/perl-File-Basename-Object/description
#. leap/perl-File-Basename-Object/description
msgid ""
"File::Basename::Object is an object-oriented wrapper around File::Basename. "
"The goal is to allow pathnames to be presented and manipulated easily."
msgstr ""
"File::Basename::Object は File::Basename まわりのオブジェクト指向のラッパーで"
"す。 パス名を簡単に表示したり操作したりすることを目的にしています。"

#. tumbleweed/perl-File-Comments/summary
#. leap/perl-File-Comments/summary
msgid "Recognizes file formats and extracts format-specific comments"
msgstr "ファイル形式の認識と形式固有のコメントの抽出"

#. tumbleweed/perl-File-Comments/description
#. leap/perl-File-Comments/description
msgid ""
"File::Comments guesses the type of a given file, determines the format used "
"for comments, extracts all comments, and returns them as a reference to an "
"array of chunks. Alternatively, it strips all comments from a file.\n"
"\n"
"Currently supported are Perl scripts, C/C++ programs, Java, makefiles, "
"JavaScript, Python and PHP.\n"
"\n"
"The plugin architecture used by File::Comments makes it easy to add new "
"formats. To support a new format, a new plugin module has to be installed. "
"No modifications to the File::Comments codebase are necessary, new plugins "
"will be picked up automatically.\n"
"\n"
"File::Comments can also be used to simply guess a file's type. It it "
"somewhat more flexible than File::MMagic and File::Type. File types in File::"
"Comments are typically based on file name suffixes (*.c, *.pl, etc.). If no "
"suffix is available, or a given suffix is ambiguous (e.g. if several plugins "
"have registered a handler for the same suffix), then the file's content is "
"used to narrow down the possibilities and arrive at a decision.\n"
"\n"
"WARNING: THIS MODULE IS UNDER DEVELOPMENT, QUALITY IS ALPHA. IF YOU FIND "
"BUGS, OR WANT TO CONTRIBUTE PLUGINS, PLEASE SEND THEM MY WAY."
msgstr ""
"File::Comments は指定したファイルの種類を推測し、その種類で用いられるコメント箇所を判断して抽出し、それらをチャンクの配列への参照として返し"
"ます。このほか、ファイルからすべてのコメントを抽出することもできます。\n"
"\n"
"現時点では Perl スクリプトのほか、 C/C++ 言語のプログラムや Java, Makefile, JavaScript, Pytho, PHP "
"にそれぞれ対応しています。\n"
"\n"
"File::Comments はプラグイン形式の仕組みを採用しているため、新しいコメント書式を追加するのも用意です。新しい形式に対応させたい場合は、新しい"
"プラグインモジュールをインストールする必要があります。なお、 File::Comments "
"のコードベース自身を変更する必要はありません。新しいプラグインは自動的に検出され、使用されるためです。\n"
"\n"
"File::Comments ではファイルの種類のみを判断することもできます。 File::MMagic や File::Type "
"よりもさらに柔軟な仕組みです。 File::Comments 内でのファイルタイプは、一般にファイル名の接尾辞 (*.c, *.pl など) "
"をベースにして行なわれます。接尾辞がない場合や、接尾辞だけでは不十分な場合 (同じ接尾辞で複数のプラグインが登録されているような場合) "
"は、ファイルの中身を読み込んで候補を絞り込み、最終的に判断に至ります。\n"
"\n"
"警告: このモジュールは現在開発中のもので、アルファ版の状態です。バグを発見した場合や、プラグインを貢献したい場合は、指定の方法でお送りください。"

#. tumbleweed/perl-File-FcntlLock/summary
#. leap/perl-File-FcntlLock/summary
msgid "File locking with L<fcntl(2)>"
msgstr "L<fcntl(2)> を利用したファイルロック (施錠)"

#. tumbleweed/perl-File-FcntlLock/description
#. leap/perl-File-FcntlLock/description
msgid ""
"File locking in Perl is usually done using the 'flock' function. "
"Unfortunately, this only allows locks on whole files and is often "
"implemented in terms of the the flock(2) manpage system function which has "
"some shortcomings (especially concerning locks on remotely mounted file "
"systems) and slightly different behaviour than the fcntl(2) manpage.\n"
"\n"
"Using this module file locking via the fcntl(2) manpage can be done "
"(obviously, this restricts the use of the module to systems that have a the "
"fcntl(2) manpage system call). Before a file (or parts of a file) can be "
"locked, an object simulating a flock structure, containing information in a "
"binary format to be passed to the fcntl(2) manpage for locking requests, "
"must be created and its properties set. Afterwards, by calling the the "
"lock() manpage method a lock can be set and removed or it can be determined "
"if and which process currently holds the lock.\n"
"\n"
"File::FcntlLock (or its alias File::FcntlLock::XS) uses a shared library, "
"build during installation, to call the the fcntl(2) manpage system function "
"directly. If this is unsuitable there are two alternatives, File::FcntlLock::"
"Pure and File::FcntlLock::Inline. Both call the Perl 'fcntl' function "
"instead and use Perl code to assemble and disassemble the structure. For "
"this at some time the (system-dependent) binary layout of the flock "
"structure must have been determined via a program written in C. The "
"difference between File::FcntlLock::Pure and File::FcntlLock::Inline is that "
"for the former this happened when the package is installed while for the "
"latter it is done each time the package is loaded (e.g., with 'use'). Thus, "
"for File::FcntlLock::Inline to work a C compiler must be available. There "
"are some minor differences in the functionality and the behaviour on passing "
"the method for locking invalid arguments to be described below."
msgstr ""
"Perl におけるファイルロック (施錠) は、 'flock' "
"関数を利用して行ないますが、不幸にもこの関数はファイル全体をロックするだけの機能しか持ち合わせていないばかりか、しばしば flock(2) "
"システム関数を利用して実装されている仕組みであることから、それに伴う欠点も存在します (特にリモートのファイルシステムをマウントしているような場合など) "
"。また、少しだけではありますが fcntl(2) と動作も異なります。\n"
"\n"
"このモジュールを利用することで、 fcntl(2) を利用してファイルロックを行なうことができるようになります (そのため、 fcntl(2) "
"システムコールが存在するシステムのみで動作します) 。なお、ファイル (またはファイルの一部) をロックする前に、 fcntl(2) "
"に渡されるバイナリ形式の情報を含む flock "
"の構造体を疑似するオブジェクトを作成し、関連するプロパティを設定しなければなりません。作成および設定した後は、 lock() "
"メソッドでロックを設定または解除することができるほか、ロックされているかどうかやロックしているプロセスなども判断することができます。\n"
"\n"
"File::FcntlLock (もしくはその別名 File::FcntlLock::XS) では共有ライブラリを使用しているため、"
"インストール時のビルド処理や実際の呼び出しでは fcntl(2) "
"システム関数を直接呼び出すことができます。このような仕組みでは不便になってしまうような環境であれば、 File::FcntlLock::Pure や "
"File::FcntlLock::Inline などの代替品を使用することもできます。いずれのオブジェクトとも、代わりに Perl の 'fcntl' "
"関数を呼び出して、 Perl コード内で構造を組み立てたりそれを読み込んだりしています。このような仕組みにより、場合によってはシステムに依存する "
"flock バイナリ構造体を、 C 言語で記述したプログラム経由で判断しなければならない場合があります。 FIle::FcntlLock::Pure "
"では、その処理はパッケージのインストール時に行ない、 File::FcntlLock::Inline はパッケージを読み込んだ ('use') "
"際に行ないます。そのため、 File::FcntlLock::Inline を利用するには、動作する C コンパイラが存在していなければなりません。それ以"
"外にも機能面で少し異なる面があるほか、不正なパラメータを指定してメソッドを実行した際の動作についても、違いが存在します。"

#. tumbleweed/perl-File-Next/summary
#. tumbleweed/perl-File-Next/description
#. leap/perl-File-Next/summary
#. leap/perl-File-Next/description
msgid "File-finding iterator"
msgstr "ファイル検出列挙器"

#. tumbleweed/perl-File-ReadBackwards/summary
#. leap/perl-File-ReadBackwards/summary
msgid "Read a file backwards by lines"
msgstr "逆方向にファイルを 1 行ずつ読み込むモジュール"

#. tumbleweed/perl-File-ReadBackwards/description
#. leap/perl-File-ReadBackwards/description
msgid ""
"This module reads a file backwards line by line. It is simple to use, memory "
"efficient and fast. It supports both an object and a tied handle interface.\n"
"\n"
"It is intended for processing log and other similar text files which "
"typically have their newest entries appended to them. By default files are "
"assumed to be plain text and have a line ending appropriate to the OS. But "
"you can set the input record separator string on a per file basis."
msgstr ""
"このモジュールは、ファイルを逆順に 1 行ずつ読み込む処理を行ないます。使いやすく、メモリ面での効率化が図られ、高速に動作します。また、オブジェクト形式の"
"利用のほか、タイハンドルを利用したインターフェイスにも対応しています。\n"
"\n"
"このモジュールはログファイルやその他のテキストを処理する用途で作られたもので、もっとも新しい行から順に出力したいような場合に便利な仕組みです。既定ではファ"
"イルが純粋なテキストファイルであり、 OS "
"ごとの既定の改行コードで区切られているものとして扱われます。なお、必要であればファイルごとに区切り文字を指定して読み込むこともできます。"

#. tumbleweed/perl-File-Sync/summary
#. leap/perl-File-Sync/summary
msgid "Perl access to fsync() and sync() function calls"
msgstr "Perl からの fsync(), sync() 関数呼び出し"

#. tumbleweed/perl-File-Sync/description
#. leap/perl-File-Sync/description
msgid ""
"The fsync() function takes a Perl file handle as its only argument, and "
"passes its fileno() to the C function fsync(). It returns _undef_ on "
"failure, or _true_ on success.\n"
"\n"
"The fsync_fd() function is used internally by fsync(); it takes a file "
"descriptor as its only argument.\n"
"\n"
"The sync() function is identical to the C function sync().\n"
"\n"
"This module does *not* export any methods by default, but fsync() is made "
"available as a method of the _FileHandle_ and _IO::Handle_ classes."
msgstr ""
"fsync() 関数は唯一のパラメータとして Perl のファイルハンドルを取り、 fileno() を介して C 関数 fsync() を呼び出します。"
"失敗した場合は _undef_ が返り、成功した場合は _true_ が帰ります。\n"
"\n"
"fsync_fd() 関数は fsync() の内部で使用されている関数で、ファイルディスクリプタを唯一のパラメータとして設定します。\n"
"\n"
"sync() 関数は C 関数 sync() と同一です。\n"
"\n"
"このモジュールは、既定ではどのメソッドも公開して *いません* が、 _FileHandle_ や _IO::Handle_ クラスのメソッドとして "
"fsync() を利用することは可能です。"

#. tumbleweed/perl-File-Type/summary
#. leap/perl-File-Type/summary
msgid "determine file type using magic"
msgstr "マジックナンバーを使用するファイル種類判別"

#. tumbleweed/perl-File-Type/description
#. leap/perl-File-Type/description
msgid ""
"File::Type uses magic numbers (typically at the start of a file) to "
"determine the MIME type of that file."
msgstr ""
"File::Type はマジックナンバー (一般にファイルの冒頭にあるもの) を使用し、この"
"ファイルの MIME 種類を判別するモジュールです。"

#. tumbleweed/perl-Filesys-Df/summary
#. leap/perl-Filesys-Df/summary
msgid "Perl extension for filesystem disk space information"
msgstr "ファイルシステムのディスク領域情報を利用するための Perl 拡張"

#. tumbleweed/perl-Filesys-Df/description
#. leap/perl-Filesys-Df/description
msgid ""
"This module provides a way to obtain filesystem disk space information. This "
"is a Unix only distribution. If you want to gather this information for Unix "
"and Windows, use Filesys::DfPortable. The only major benefit of using "
"Filesys::Df over Filesys::DfPortable, is that Filesys::Df supports the use "
"of open filehandles as arguments.\n"
"\n"
"Authors:     Ian Guthrie <IGuthrie@aol.com>"
msgstr ""
"このモジュールは、ファイルシステム上でのディスク領域情報を取得することができます。 Unix のみに対応しています。 Unix と Windows "
"の両方で動作するモジュールをご希望の場合は、 Filesys::DfPortable をお使いください。 FileSys::Df "
"では、ファイルハンドルをパラメータとして使用することができる点が異なります。\n"
"\n"
"Authors:     Ian Guthrie <IGuthrie@aol.com>"

#. tumbleweed/perl-Font-AFM/summary
#. leap/perl-Font-AFM/summary
msgid "Interface to Adobe Font Metrics Files"
msgstr "Adobe フォントメトリックファイルへのインターフェイス"

#. tumbleweed/perl-Font-AFM/description
#. leap/perl-Font-AFM/description
msgid ""
"This module implements the Font::AFM class. Objects of this class are "
"initialized from an AFM file and allow you to obtain information about the "
"font and the metrics of the various glyphs in the font."
msgstr ""
"このモジュールは Font::AFM クラスを実装しています。 このクラスのオブジェクト"
"は AFM ファイルによって初期化され、フォントに関する情報やフォント内の様々なグ"
"リフのメトリックを取得することができます。"

#. tumbleweed/perl-Font-FreeType/summary
#. leap/perl-Font-FreeType/summary
msgid "Read Font Files and Render Glyphs From Perl Using Freetype2"
msgstr "Freetype2 を利用して Perl からフォントファイルを読み込んだり、グリフを描画したりするモジュール"

#. tumbleweed/perl-Font-FreeType/description
#. leap/perl-Font-FreeType/description
msgid ""
"This module allows Perl programs to conveniently read information from font "
"files. All the font access is done through the FreeType2 library, which "
"supports many formats. It can render images of characters with high-quality "
"hinting and antialiasing, extract metrics information, and extract the "
"outlines of characters in scalable formats like TrueType.\n"
"\n"
"Warning: this module is currently in 'beta' stage. It'll be another release "
"or two before it stabilizes. The API may change in ways that break programs "
"based on it, but I don't think it will change much. Some of the values "
"returned may be wrong, or not scaled correctly. See the _TODO_ file to get a "
"handle on how far along this work is. Contributions welcome, particularly if "
"you know more than I do (which isn't much) about fonts and the FreeType2 "
"library."
msgstr ""
"このモジュールは、 Perl のプログラムからフォントファイルの情報を便利に読み込む機能を提供します。すべてのフォントへのアクセスは、"
"多数の形式に対応している FreeType2 "
"ライブラリを介して行ないます。このほか、高品質なヒンティングやアンチエイリアス処理を利用して、文字を画像として描画することもできるほか、"
"メトリック情報の取得や TrueType のようなスケーラブル形式で輪郭を抽出することもできます。\n"
"\n"
"警告: このモジュールは現時点では 'ベータ' 版です。安定版がリリースされるまでに 1 回もしくは複数回のリリースが行なわれる予定です。また、 API "
"の仕様も変更されて互換性が失われることもありますが、大幅には変更されない予定です。また、返される値が間違っていたり、正しくスケールされていない場合もありま"
"す。現在作業中の項目について、詳しくは _TODO_ ファイルをお読みください。フォントや FreeType2 "
"ライブラリに詳しい方で、手伝っていだたける方の貢献をお待ちしております。"

#. tumbleweed/perl-FreezeThaw/summary
#. leap/perl-FreezeThaw/summary
msgid "Converting Perl structures to strings and back"
msgstr "Perl の構造体と文字列との間を相互変換するモジュール"

#. tumbleweed/perl-FreezeThaw/description
#. leap/perl-FreezeThaw/description
msgid ""
"Converts data to/from stringified form, appropriate for saving-to/reading-"
"from permanent storage.\n"
"\n"
"Deals with objects, circular lists, repeated appearence of the same refence. "
"Does not deal with overloaded stringify operator yet.\n"
"\n"
"  Author:\tIlya Zakharevich"
msgstr ""
"データと文字列形式との間を相互に変換するためのモジュールです。ストレージへの保存やストレージからの読み出しに便利な仕組みです。\n"
"\n"
"オブジェクトや循環リスト、同一参照の繰り返し出現にも対応しています。なお、 stringify オペレータのオーバーロードには対応していません。\n"
"\n"
"  Author:\tIlya Zakharevich"

#. tumbleweed/perl-GD/summary
#. leap/perl-GD/summary
msgid "Interface to Gd Graphics Library"
msgstr "Gd グラフィックライブラリ向けインターフェイス"

#. tumbleweed/perl-GD/description
#. leap/perl-GD/description
msgid ""
"*GD.pm* is a Perl interface to Thomas Boutell's gd graphics library (version "
"2.01 or higher; see below). GD allows you to create color drawings using a "
"large number of graphics primitives, and emit the drawings as PNG files."
msgstr ""
"*GD.pm* は Thomas Boutell 氏による GD グラフィックライブラリ (バージョン "
"2.01 またはそれ以降) に対する Perl インターフェイスです。 GD は多数のグラ"
"フィックプリミティブを利用して描画を行なうことができるもので、 PNG ファイルと"
"して結果を出力することができます。"

#. tumbleweed/perl-GD-Graph3d/summary
#. leap/perl-GD-Graph3d/summary
msgid "3d extension for perl-GDGraph"
msgstr "perl-GDGraph 向け三次元拡張"

#. tumbleweed/perl-GD-Graph3d/description
#. leap/perl-GD-Graph3d/description
msgid ""
"This is the GD::Graph3d extensions module. It provides 3D graphs for the GD::"
"Graph module by Martien Verbruggen, which in turn generates graph using "
"Lincoln Stein's GD.pm."
msgstr ""
"これは GD::Graph3d 拡張モジュールです。 Martien Verbruggen 氏による GD::"
"Graph モジュール向けの三次元グラフィックを提供し、 その代わりに Lincoln "
"Stein 氏による GD.pm を使用したグラフィックを生成します。"

#. tumbleweed/perl-GStreamer1/summary
#. leap/perl-GStreamer1/summary
msgid "Perl interface to the GStreamer library"
msgstr "GStreamer ライブラリへの Perl インターフェイス"

#. tumbleweed/perl-GStreamer1/description
#. leap/perl-GStreamer1/description
msgid ""
"This package provides perl bindings for GStreamer 1.x. GStreamer is a "
"library for constructing graphs of media-handling components. The "
"applications it supports range from simple OGG Vorbis playback, audio/video "
"streaming to complex audio (mixing) and video (non-linear editing) "
"processing."
msgstr ""
"このパッケージは、 GStreamer 1.x に対する Perl のバインディングを作成します。 GStreamer "
"はメディア処理コンポーネントのフレームワークで、シンプルな OGG Vorbis オーディオ／ビデオストリーミングから、複雑なオーディオ (ミキシング) "
"処理およびビデオ (ノンリニア編集) 処理に対応したライブラリです。"

#. tumbleweed/perl-Getopt-ArgvFile/summary
#. leap/perl-Getopt-ArgvFile/summary
msgid "Perl Module to interpolate Script Options from Files into @ARGV"
msgstr "ファイルから @ARGV に対してスクリプトのオプションを補完する Perl モジュール"

#. tumbleweed/perl-Getopt-ArgvFile/description
#. leap/perl-Getopt-ArgvFile/description
msgid ""
"This module simply interpolates option file hints in @ARGV by the contents "
"of the pointed files. This enables option reading from files instead of or "
"additional to the usual reading from the command line.\n"
"\n"
"Alternatively, you can process any array instead of @ARGV which is used by "
"default and mentioned mostly in this manual.\n"
"\n"
"The interpolated @ARGV could be subsequently processed by the usual option "
"handling, e.g. by a Getopt::xxx module. Getopt::ArgvFile does not perform "
"any option handling itself, it only prepares the array @ARGV."
msgstr ""
"このモジュールは、指定されたファイルの内容を元にして @ARGV 内のオプションを補完する仕組みです。これにより、通常のコマンドラインからの読み込みの代わ"
"りに、もしくはコマンドラインからの読み込みに加えて、ファイルの内容をオプションとして取り込むことができるようになります。\n"
"\n"
"それ以外にも、このマニュアルに記述されている機能のほとんどに対して、 @ARGV を処理する代わりに配列を利用することもできます。\n"
"\n"
"@ARGV を補完したあとは、 Getopt::xxx モジュールなどで通常通りオプションの処理を行なうことができます。なお、 Getopt::"
"ArgvFile 自身はオプションを処理せず、 @ARGV 配列の準備のみを行ないます。"

#. tumbleweed/perl-Glib/summary
#. leap/perl-Glib/summary
msgid "Perl wrappers for the GLib utility and Object libraries"
msgstr "Glib ユーティリティとオブジェクトライブラリ向けの Perl ラッパー"

#. tumbleweed/perl-Glib/description
#. leap/perl-Glib/description
msgid ""
"This wrapper attempts to provide a perlish interface while remaining as true "
"as possible to the underlying C API, so that any reference materials you can "
"find on using GLib may still apply to using the libraries from perl. This "
"module also provides facilities for creating wrappers for other GObject-"
"based libraries. The the SEE ALSO manpage section contains pointers to all "
"sorts of good information."
msgstr ""
"このラッパーは、裏側に存在する C 言語 API を維持したまま、できるかぎり Perl "
"形式のインターフェイスを提供するように目指したものです。これにより、 glib 内"
"に存在する様々な要素を、 Perl から利用できるようにしています。このモジュール"
"には、他の GOBject ベースのライブラリに対するラッパー作成機構も用意されていま"
"す。詳しい情報へのポインタは、マニュアルページの SEE ALSO をお読みください。"

#. tumbleweed/perl-Glib-Object-Introspection/summary
#. leap/perl-Glib-Object-Introspection/summary
msgid "GObject Introspection bindings for Perl"
msgstr "Perl 向け GObject イントロスペクションバインディング"

#. tumbleweed/perl-Glib-Object-Introspection/description
#. leap/perl-Glib-Object-Introspection/description
msgid ""
"This package provides perl bindings for GObject Introspection. Glib::Object::"
"Introspection uses the gobject-introspection and libffi projects to "
"dynamically create Perl bindings for a wide variety of libraries. Examples "
"include GTK+, WebKit, libsoup and many more."
msgstr ""
"このパッケージは GObject イントロスペクション向けの Perl バインディングです。 Glib::Object::Introspection は "
"gobject-introspection と libffi プロジェクトを利用して、様々なライブラリに対する Perl "
"のバインディングを動的に作成します。たとえば GTK+, WebKit, libsoup などがあります。"

#. tumbleweed/perl-Gnome2/summary
#. leap/perl-Gnome2/summary
msgid "Perl interface to the 2.x series of the GNOME libraries"
msgstr "GNOME ライブラリのバージョン 2.x シリーズに対する Perl インターフェイス"

#. tumbleweed/perl-Gnome2/description
#. leap/perl-Gnome2/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  http://developer.gnome.org/libgnome\n"
"\n"
"and\n"
"\n"
"  http://developer.gnome.org/libgnomeui\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: the Gnome2::index manpage(3pm).\n"
"\n"
"The mapping described in the Gtk2::api manpage(3pm) also applies to this "
"module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""
"このモジュールは C 言語の API に非常に似通った構造になるように作られています。そのため、一般的なリファレンスをお求めの場合は、下記をご覧ください:"
"\n"
"\n"
"  http://developer.gnome.org/libgnome\n"
"  http://developer.gnome.org/libgnomeui\n"
"\n"
"これに加えて、自動で生成された API ドキュメンテーションも用意されています: Gnome2::index マニュアルページ (3pm).\n"
"\n"
"このモジュールでは、 Gtk2::api マニュアルページ(3pm) で説明されているマッピングにも対応しています。\n"
"\n"
"このモジュールに関する議論や質問、著者に対するクレームや賞賛は gtk-perl-list@gnome.org (lists.gnome.org) "
"にお送りください。"

#. tumbleweed/perl-Gnome2-Canvas/summary
#. leap/perl-Gnome2-Canvas/summary
msgid "Gnome2-Canvas Perl module"
msgstr "Gnome2-Canvas Perl モジュール"

#. tumbleweed/perl-Gnome2-Canvas/description
#. leap/perl-Gnome2-Canvas/description
msgid ""
"The Gnome2::Canvas module allows a perl developer to use the GnomeCanvas "
"widget with Gtk2-Perl.  Find out more about Gnome+ at http://www.gnome.org.\n"
"\n"
"Like the Gtk2 module on which it depends, Gnome2::Canvas follows the C API "
"of libgnomecanvas-2.0 as closely as possible while still being perlish. "
"Thus, the C API reference remains the canonical documentation.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""
"Gnome2::Canvas モジュールは、 Perl の開発者に対して、 Gtk2-Perl 経由での GnomeCanvas "
"ウイジェットの機能を提供するためのものです。 Gnome+ について、詳しくは http://www.gnome.org をお読みください。\n"
"\n"
"本モジュールの依存先である Gtk2 モジュールと同様に、 Gnome2::Canvas でも、 Perl の体裁を守りながら "
"libgnomecanvas-2.0 の C 言語 API にできる限り近くなるように作られています。そのため、正式なドキュメンテーションとして C "
"言語の API リファレンスをお使いいただくことができます。\n"
"\n"
"gtk2-perl について議論したい場合、および質問やクレーム、賞賛を送りたい場合は、 gtk-perl-list@gnome.org "
"(lists.gnome.org) のメーリングリストにご参加ください。\n"
"\n"
"なお、 gtk2-perl について、詳しくは gtk2-perl の Web サイト、もしくは sourceforge のプロジェクトページ "
"(http://gtk2-perl.sourceforge.net) をお読みください。"

#. tumbleweed/perl-Gnome2-GConf/summary
#. leap/perl-Gnome2-GConf/summary
msgid "Perl wrappers for the GConf configuration engine"
msgstr "GConf 設定エンジンに対する Perl ラッパー"

#. tumbleweed/perl-Gnome2-GConf/description
#. leap/perl-Gnome2-GConf/description
msgid ""
"Perl bindings to the 2.x series of the Gnome widget set.  This module allows "
"you to write graphical user interfaces in a perlish and object-oriented way, "
"freeing you from the casting and memory management in C, yet remaining very "
"close in spirit to original API."
msgstr ""
"Gnome ウイジェットセットのバージョン 2.x 系に対する Perl バインディングです。このモジュールを利用することで、 Perl "
"からオブジェクト指向の方法でグラフィカルなユーザインターフェイスを作成できるようになるほか、 C "
"言語のキャスト処理やメモリの管理などの手間を省くことができます。また、オリジナルの API の考え方を非常に強く継承しています。"

#. tumbleweed/perl-Gnome2-VFS/summary
#. leap/perl-Gnome2-VFS/summary
msgid "Perl interface to the 2.x series of the GNOME VFS library"
msgstr "GNOME VFS ライブラリのバージョン 2.x に対する Perl インターフェイス"

#. tumbleweed/perl-Gnome2-VFS/description
#. leap/perl-Gnome2-VFS/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  L<http://developer.gnome.org/doc/API/2.0/gnome-vfs-2.0/>\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: the Gnome2::VFS::index manpage.\n"
"\n"
"The mapping described in the Gtk2::api manpage also applies to this module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""
"このモジュールは C 言語の API に非常に似通った構造になっていますので、下記のドキュメンテーションを正式のものとしてお使いいただくことができます:"
"\n"
"\n"
" L<http://developer.gnome.org/doc/API/2.0/gnome-vfs-2.0/>\n"
"\n"
"これに加えて、自動で生成された API ドキュメンテーションもご利用いただくことができます: Gnome2::VFS::index\n"
"\n"
"Gtk2::api マニュアルページで説明されているマッピングについても、本モジュールでお使いいただくことができます。\n"
"\n"
"このモジュールに関する議論や質問、著者へのクレームや賞賛については、  gtk-perl-list@gnome.org (lists.gnome.org)"
" のメーリングリストにお送りください。"

#. tumbleweed/perl-Gnome2-Wnck/summary
#. leap/perl-Gnome2-Wnck/summary
msgid "Perl interface to the Window Navigator Construction Kit"
msgstr "Window Navigator Construction Kit に対する Perl インターフェイス"

#. tumbleweed/perl-Gnome2-Wnck/description
#. leap/perl-Gnome2-Wnck/description
msgid ""
"This module allows you to use the Window Navigator Construction Kit library "
"(libwnck for short) from Perl.\n"
"\n"
"The index of the automatically generated API documentation can be accessed "
"with:\n"
"\n"
"  perldoc Gnome2::Wnck::index"
msgstr ""
"このモジュールは、 Perl から Window Navigator Construction Kit ライブラリ (略して libwnck) "
"を利用できるようにするための仕組みです。\n"
"\n"
"自動生成された API ドキュメンテーションについては、下記をお読みください:\n"
"\n"
" perldoc Gnome2::Wnck::index"

#. tumbleweed/perl-Goo-Canvas/summary
#. tumbleweed/perl-Goo-Canvas/description
msgid "Goo::Canvas Perl module"
msgstr "Goo::Canvas Perl モジュール"

#. tumbleweed/perl-Gtk2/summary
#. leap/perl-Gtk2/summary
msgid "Perl interface to the 2.x series of the GTK+ library"
msgstr "GTK+ ライブラリのバージョン 2.x に対する Perl インターフェイス"

#. tumbleweed/perl-Gtk2/description
#. leap/perl-Gtk2/description
msgid ""
"The Gtk2 module allows a Perl developer to use the GTK+ graphical user "
"interface library. Find out more about Gtk+ at http://gtk.org/.\n"
"\n"
"The GTK+ Reference Manual is also a handy companion when writing Gtk "
"applications in any language. The Perl bindings follow the C API very "
"closely, and the C reference documentation should be considered the "
"canonical source.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""
"Gtk2 モジュールは、 Perl の開発者に対して GTK+ グラフィカルユーザインターフェイスライブラリを提供する仕組みです。 Gtk+ について、"
"詳しくは http://gtk.org/ をお読みください。\n"
"\n"
"Gtk アプリケーションを開発したい場合は、言語にかかわらず GTK+ リファレンスマニュアルをお読みになるのが適切でしょう。 Perl "
"のバインディングは C 言語の API に非常に似通った構造になるように作られていて、 C "
"言語のリファレンス文書を正式なものとしてお使いいただくことができます。\n"
"\n"
"このモジュールに関する議論や質問、著者へのクレームや賞賛については、  gtk-perl-list@gnome.org (lists.gnome.org)"
" のメーリングリストにお送りください。\n"
"\n"
"また、 gtk2-perl の Web サイトや sourceforge のプロジェクトページ "
"(http://gtk2-perl.sourceforge.net) もご覧ください。"

#. tumbleweed/perl-Gtk2-AppIndicator/summary
#. leap/perl-Gtk2-AppIndicator/summary
msgid "Perl interface to the libappindicator"
msgstr "libappindicator に対する Perl インターフェイス"

#. tumbleweed/perl-Gtk2-AppIndicator/description
#. leap/perl-Gtk2-AppIndicator/description
msgid ""
"This package provides perl bindings for libappindicator. libappindicator is "
"a library which provides a tray icon in desktop environments via "
"StatusNotifierItem implementation."
msgstr ""
"このパッケージは、 libappindicator に対する Perl バインディングを提供します。 libappindicator は、 "
"StatusNotifierItem の実装を通してデスクトップ環境内にトレイアイコンを設置する機能を提供します。"

#. tumbleweed/perl-Gtk2-ImageView/summary
#. leap/perl-Gtk2-ImageView/summary
msgid "Perl bindings to the GtkImageView image viewer widget"
msgstr "GtkImageView イメージビューアウイジェットに対する Perl バインディング"

#. tumbleweed/perl-Gtk2-ImageView/description
#. leap/perl-Gtk2-ImageView/description
msgid ""
"The Gtk2::ImageView module allows a Perl developer to use the GtkImageView "
"image viewer widget. Find out more about GtkImageView at http://trac.bjourne."
"webfactional.com/.\n"
"\n"
"To discuss Gtk2::ImageView or gtk2-perl, ask questions and flame/praise the "
"authors, join gtk-perl-list@gnome.org at lists.gnome.org."
msgstr ""
"Gtk2::ImageView は Perl の開発者に対して、 GtkImageView イメージビューアウイジェットの機能を提供します。 "
"GtkImageView について、詳しくは http://trac.bjourne.webfactional.com/ をお読みください。\n"
"\n"
"Gtk2::ImageView や gtk2-perl に関する議論、著者への質問やクレーム、賞賛については、 gtk-perl-list@"
"gnome.org (lists.gnome.org) のメーリングリストにお送りください。"

#. tumbleweed/perl-Gtk2-Unique/summary
#. leap/perl-Gtk2-Unique/summary
msgid "Perl bindings for the C library \"libunique\""
msgstr "\"libunique\" C ライブラリ向け Perl バインディング"

#. tumbleweed/perl-Gtk2-Unique/description
#. leap/perl-Gtk2-Unique/description
msgid ""
"Perl bindings for the C library \"libunique\" that provides a mechanism for "
"writing single instance applications. If you launch a single instance "
"application twice, the second instance will either just quit or will send a "
"message to the running instance."
msgstr ""
"\"libunique\" は単一インスタンスのアプリケーションを記述するためのライブラリで、このバインディングはそのライブラリに対する Perl "
"のバインディングです。単一インスタンスのアプリケーションを二重に起動すると、 2 "
"つめのインスタンスは単に終了するか、起動済みのインスタンスにメッセージを送信します。"

#. tumbleweed/perl-Guard/summary
#. leap/perl-Guard/summary
msgid "Safe Cleanup Blocks"
msgstr "安全なクリーンアップブロック"

#. tumbleweed/perl-Guard/description
#. leap/perl-Guard/description
msgid ""
"This module implements so-called \"guards\". A guard is something (usually "
"an object) that \"guards\" a resource, ensuring that it is cleaned up when "
"expected.\n"
"\n"
"Specifically, this module supports two different types of guards: guard "
"objects, which execute a given code block when destroyed, and scoped guards, "
"which are tied to the scope exit."
msgstr ""
"このモジュールは \"guard\" (ガード) と呼ばれる仕組みを実装するものです。 \"guard\" "
"とは、必要になったときにクリーンアップされるよう、何らかのもの (一般的にはオブジェクト) がリソースを \"保護\" するものです。\n"
"\n"
"具体的に言うと、このモジュールには 2 種類のガードが用意されています: 1 "
"つはガードオブジェクトと呼ばれ、オブジェクトの破壊時に指定したブロックを実行する機能で、もう 1 "
"つはスコープガードと呼ばれ、スコープの終了時に結びつけられる仕組みです。"

#. tumbleweed/perl-HTML-Clean/summary
#. leap/perl-HTML-Clean/summary
msgid "Cleans up HTML code for web browsers, not humans"
msgstr "人間向けではなく Web ブラウザ向けの HTML クリーンアップ"

#. tumbleweed/perl-HTML-Clean/description
#. leap/perl-HTML-Clean/description
msgid ""
"The majority of the web pages of the internet today are much larger than "
"they need to be.  The reason for this is that HTML tends to be stored in a "
"human readable format, with indenting, newlines and comments.\n"
"\n"
"However, all of these comments, whitespace etc. are ignored by the browser, "
"and needlessly lengthen download times.\n"
"\n"
"Second, many people are using WYSIWYG HTML editors these days. This makes "
"creating content easy.  However these editors can cause a number of "
"compatibility problems by tying themselves to a particular browser or "
"operating system."
msgstr ""
"インターネット上にある多くの Web ページはその要件よりも ずっと大きなサイズに"
"なってしまっています。このようなことが起こるのは HTML を人間にとって読みやす"
"い書式で書いて保存しているためで、 インデントや改行、コメントなどが含まれてい"
"ます。\n"
"\n"
" しかしながら、これらのコメントや空白の全ては ブラウザが無視するものであり、"
"不用意にダウンロード時間を伸ばす結果になっています。\n"
"\n"
" また、多くの人々は WYSIWYG (実際にユーザが閲覧するイメージを直接編集できる) "
"の HTML エディタを使用しているというのも一つの理由です。これによってコンテン"
"ツを作りやすいものに していますが、これらのエディタは特定のブラウザやオペレー"
"ティングシステムで 数多くの互換性問題を引き起こすものにもなっています。"

#. tumbleweed/perl-HTML-Encoding/summary
#. leap/perl-HTML-Encoding/summary
msgid "Determine the encoding of HTML/XML/XHTML documents"
msgstr "HTML/XML/XHTML ドキュメントのエンコーディングの判別"

#. tumbleweed/perl-HTML-Encoding/description
#. leap/perl-HTML-Encoding/description
msgid ""
"HTML::Encoding helps to determine the encoding of HTML and XML/XHTML "
"documents."
msgstr "HTML::Encoding は、 HTML, XML, XHTML の各文書に対して、そのエンコーディングを判別を支援する機能を提供します。"

#. tumbleweed/perl-HTML-Parser/summary
#. leap/perl-HTML-Parser/summary
msgid "HTML parser class"
msgstr "HTML パーサークラス"

#. tumbleweed/perl-HTML-Parser/description
msgid ""
"Objects of the 'HTML::Parser' class will recognize markup and separate it "
"from plain text (alias data content) in HTML documents. As different kinds "
"of markup and text are recognized, the corresponding event handlers are "
"invoked.\n"
"\n"
"'HTML::Parser' is not a generic SGML parser. We have tried to make it able "
"to deal with the HTML that is actually \"out there\", and it normally parses "
"as closely as possible to the way the popular web browsers do it instead of "
"strictly following one of the many HTML specifications from W3C. Where there "
"is disagreement, there is often an option that you can enable to get the "
"official behaviour.\n"
"\n"
"The document to be parsed may be supplied in arbitrary chunks. This makes on-"
"the-fly parsing as documents are received from the network possible.\n"
"\n"
"If event driven parsing does not feel right for your application, you might "
"want to use 'HTML::PullParser'. This is an 'HTML::Parser' subclass that "
"allows a more conventional program structure."
msgstr ""
"'HTML::Parser' のクラスオブジェクトは、 HTML ドキュメント内に書かれているマー"
"クアップを認識して、それらを純粋なテキストデータに分割することができます。複"
"数種類のマークアップとテキストを解釈できるようにするため、それぞれ関連付けら"
"れたイベントハンドラを呼び出す形式になっています。\n"
"\n"
"'HTML::Parser' は汎用の SGML パーサーではありません。まさに \"向こう側\" の存"
"在である HTML を取り扱うことができるようにするために努力を重ね、 W3C が提供す"
"る多数の HTML 仕様に厳密に準拠するのではなく、有名な Webブラウザが行なう方法"
"にできる限り近い結果を出すようにしてあります。そのため各種の不適合性が存在し"
"ますが、それは本来の動作を行なうようにするオプションで提供しています。\n"
"\n"
"ドキュメントは任意の長さのブロックに分割されます。これにより、ネットワークか"
"ら受信してその場でドキュメントを解釈することもできる仕組みになっています。\n"
"\n"
"イベント駆動型の仕組みがお使いのアプリケーションには合わないとお感じの場合"
"は、 'HTML::PullParser' をお使いください。これは 'HTML::Parser' のサブクラス"
"で、より便利なプログラム構造を提供しています。"

#. tumbleweed/perl-HTML-SimpleParse/summary
#. leap/perl-HTML-SimpleParse/summary
msgid "a bare-bones HTML parser"
msgstr "骨組みだけの HTML 処理"

#. tumbleweed/perl-HTML-SimpleParse/description
#. leap/perl-HTML-SimpleParse/description
msgid ""
"This is the HTML::SimpleParse module.  It is a bare-bones HTML parser, "
"similar to HTML::Parser, but with a couple important distinctions:\n"
"\n"
"First, HTML::Parser knows which tags can contain other tags, which start "
"tags have corresponding end tags, which tags can exist only in the <HEAD> "
"portion of the document, and so forth.  HTML::SimpleParse does not know any "
"of these things.  It just finds tags and text in the HTML you give it, it "
"does not care about the specific content of these tags (though it does "
"distiguish between different _types_ of tags, such as comments, starting "
"tags like <b>, ending tags like </b>, and so on).\n"
"\n"
"Second, HTML::SimpleParse does not create a hierarchical tree of HTML "
"content, but rather a simple linear list.  It does not pay any attention to "
"balancing start tags with corresponding end tags, or which pairs of tags are "
"inside other pairs of tags.\n"
"\n"
"Because of these characteristics, you can make a very effective HTML filter "
"by sub-classing HTML::SimpleParse."
msgstr ""
"このパッケージは HTML::SimpleParse モジュールです。骨組みだけが用意された"
"HTML パーサーで、 HTML::Parser に似た仕組みですが、 2 つの点が大きく異なりま"
"す:\n"
"\n"
"第一に HTML::Parser は、他のタグを包含できるタグを知っているため、始まりのタ"
"グと終わりのタグを検知することができます。たとえば文書内の <HEAD> タグ内にど"
"のようなタグが存在しうるのかを知っています。 HTML::SimpleParse にはこのような"
"情報はありません。単純に HTML タグを解析し、その中のテキストを取り出すだけ"
"で、それらのタグの構造には関与しません (ただし異なる _タイプ_ のタグ、たとえ"
"ばコメントタグや <b> のような開始タグ、 </b> のような終了タグについては識別し"
"ます) 。\n"
"\n"
"第二に HTML::SimpleParse は、 HTML コンテンツに対するツリー構造を生成せず、単"
"純にシンプルな一覧のみを保持します。開始タグと終了タグについてもバランスが取"
"られていることを確認しないほか、タグ内にさらなるタグ対が存在することについて"
"も、確認を行ないません。\n"
"\n"
"このような成立から、 HTML::SimpleParse のサブクラスを作成することで、とても効"
"率的な HTML フィルタを作成することができるようになっています。"

#. tumbleweed/perl-HTML-Tidy/summary
#. leap/perl-HTML-Tidy/summary
msgid "(X)HTML validation in a Perl object"
msgstr "Perl オブジェクト内での (X)HTML 検証"

#. tumbleweed/perl-HTML-Tidy/description
#. leap/perl-HTML-Tidy/description
msgid ""
"'HTML::Tidy' is an HTML checker in a handy dandy object. It's meant as a "
"replacement for HTML::Lint. If you're currently an HTML::Lint user looking "
"to migrate, see the section the /Converting from HTML::Lint manpage."
msgstr ""
"'HTML::Tidy' は使いやすい HTML チェッカーです。 HTML::Lint の代替として利用す"
"ることができるようになっています。現時点で HTML::Lint をお使いで、代替品をお"
"探しの場合は、 HTML::Lint のマニュアルページ内にある /Converting セクションを"
"お読みください。"

#. tumbleweed/perl-HTTP-Parser-XS/summary
#. leap/perl-HTTP-Parser-XS/summary
msgid "a fast, primitive HTTP request parser"
msgstr "高速で原始的な HTTP リクエストパーサー"

#. tumbleweed/perl-HTTP-Parser-XS/description
#. leap/perl-HTTP-Parser-XS/description
msgid ""
"HTTP::Parser::XS is a fast, primitive HTTP request/response parser.\n"
"\n"
"The request parser can be used either for writing a synchronous HTTP server "
"or a event-driven server.\n"
"\n"
"The response parser can be used for writing HTTP clients.\n"
"\n"
"Note that even if this distribution name ends '::XS', *pure Perl* "
"implementation is supported, so you can use this module on compiler-less "
"environments."
msgstr ""
"HTTP::Parser::XS は高速で原始的な HTTP リクエスト／レスポンスパーサーです。\n"
"\n"
"リクエストパーサーは、同期型もしくはイベント駆動型の HTTP サーバを作成する際に利用することができます。\n"
"\n"
"レスポンスパーサーは HTTP クライアントを作成する際に利用することができます。\n"
"\n"
"なお、ディストリビューション名が '::XS' で終わっていますが、　*Perl のみでの* "
"実装にも対応しています。そのため、このモジュールをコンパイラ無しの環境で利用することも可能です。"

#. tumbleweed/perl-HTTPS-Daemon/summary
#. leap/perl-HTTPS-Daemon/summary
msgid "a simple http server class with SSL support"
msgstr "SSL 対応のシンプルな http サーバクラス"

#. tumbleweed/perl-HTTPS-Daemon/description
#. leap/perl-HTTPS-Daemon/description
msgid ""
"HTTP::Daemon::SSL is a descendant of HTTP::Daemon that uses SSL sockets (via "
"IO::Socket::SSL) instead of cleartext sockets.  It also handles SSL-specific "
"problems, such as dealing with HTTP clients that attempt to connect to it "
"without using SSL."
msgstr ""
"HTTP::Daemon::SSL は、 SSL ソケット (IO::Socket::SSL 経由) による暗号化を使用"
"する  HTTP::Daemon の子クラスです。 このクラスは、 SSL 固有の問題も処理しま"
"す。たとえば SSL を使用しないで 接続しようとするクライアントへの対応などがあ"
"ります。"

#. tumbleweed/perl-IO-Interface/summary
#. leap/perl-IO-Interface/summary
msgid "Perl extension for access to network card configuration information"
msgstr "ネットワークカードの設定情報にアクセスするための Perl 拡張"

#. tumbleweed/perl-IO-Interface/description
#. leap/perl-IO-Interface/description
msgid ""
"IO::Interface adds methods to IO::Socket objects that allows them to be used "
"to retrieve and change information about the network interfaces on your "
"system. In addition to the object-oriented access methods, you can use a "
"function-oriented style.\n"
"\n"
"THIS API IS DEPRECATED. Please see IO::Interface::Simple for the preferred "
"way to get and set interface configuration information."
msgstr ""
"IO::Interface は IO::Socket "
"オブジェクトにメソッドを追加するもので、お使いのシステムにあるネットワークインターフェイスに対して、情報を取得したり変更したりする機能を提供します。\n"
"\n"
"この API は廃止される予定です。インターフェイスの設定情報の取得と設定について、好ましい方法は IO::Interface::Simple "
"をご覧ください。"

#. tumbleweed/perl-IO-Socket-Multicast/summary
#. leap/perl-IO-Socket-Multicast/summary
msgid "Send and receive multicast messages"
msgstr "マルチキャストメッセージの送信と受信"

#. tumbleweed/perl-IO-Socket-Multicast/description
#. leap/perl-IO-Socket-Multicast/description
msgid ""
"The IO::Socket::Multicast module subclasses IO::Socket::INET to enable you "
"to manipulate multicast groups. With this module (and an operating system "
"that supports multicasting), you will be able to receive incoming multicast "
"transmissions and generate your own outgoing multicast packets."
msgstr ""
"IO::Socket::Multicast モジュールは IO::Socket::INET のサブクラスで、マルチ"
"キャストグループを処理することができます。このモジュール (とマルチキャストに"
"対応するオペレーティングシステム) を使用することで、マルチキャスト伝送を受信"
"することができるほか、マルチキャストパケットを生成することもできます。"

#. tumbleweed/perl-IO-String/summary
#. leap/perl-IO-String/summary
msgid "Perl IO/String interface"
msgstr "Perl IO/String インターフェイス"

#. tumbleweed/perl-IO-String/description
#. leap/perl-IO-String/description
msgid ""
"IO::String is an IO::File (and IO::Handle) compatible class that reads or "
"writes data from in-core strings."
msgstr ""
"IO::String は IO::File (と IO::Handle) の互換クラスで、 Perl 内蔵の文字列から"
"データを読んだり書いたりすることができます。"

#. tumbleweed/perl-IO-Tty/summary
#. leap/perl-IO-Tty/summary
msgid "Low-level allocate a pseudo-Tty, import constants."
msgstr "擬似端末の低レベル割り当てと定数インポート"

#. tumbleweed/perl-IO-Tty/description
#. leap/perl-IO-Tty/description
msgid ""
"'IO::Tty' is used internally by 'IO::Pty' to create a pseudo-tty. You "
"wouldn't want to use it directly except to import constants, use 'IO::Pty'. "
"For a list of importable constants, see the IO::Tty::Constant manpage.\n"
"\n"
"Windows is now supported, but ONLY under the Cygwin environment, see the "
"http://sources.redhat.com/cygwin/ manpage.\n"
"\n"
"Please note that pty creation is very system-dependend. From my experience, "
"any modern POSIX system should be fine. Find below a list of systems that "
"'IO::Tty' should work on. A more detailed table (which is slowly getting out-"
"of-date) is available from the project pages document manager at SourceForge "
"the http://sourceforge.net/projects/expectperl/ manpage.\n"
"\n"
"If you have problems on your system and your system is listed in the "
"\"verified\" list, you probably have some non-standard setup, e.g. you "
"compiled your Linux-kernel yourself and disabled ptys (bummer!). Please ask "
"your friendly sysadmin for help.\n"
"\n"
"If your system is not listed, unpack the latest version of 'IO::Tty', do a "
"''perl Makefile.PL; make; make test; uname -a'' and send me (_RGiersig@cpan."
"org_) the results and I'll see what I can deduce from that. There are "
"chances that it will work right out-of-the-box...\n"
"\n"
"If it's working on your system, please send me a short note with details "
"(version number, distribution, etc. 'uname -a' and 'perl -V' is a good "
"start; also, the output from \"perl Makefile.PL\" contains a lot of "
"interesting info, so please include that as well) so I can get an overview. "
"Thanks!"
msgstr ""
"'IO::Tty' は 'IO::Pty' で内部的に用いられているモジュールで、疑似端末を作成す"
"る際に利用されるものです。定数の取り込み以外の処理を直接使いたくない場合は、 "
"'IO::Pty' をお使いください。重要な定数について、詳しくは IO::Tty::Constant の"
"マニュアルページをお読みください。\n"
"\n"
"Windows にも対応していますが、 cygwin 環境のみで利用できます。詳しくはhttp://"
"sources.redhat.com/cygwin/ のマニュアルページをお読みください。\n"
"\n"
"pty の作成は非常にシステムに依存したつくりになっていることに注意してくださ"
"い。ただ、私の経験では、新しい POSIX システムであればどのようなものでも利用で"
"きます。'IO::Tty' が動作するシステムについて、詳しくはマニュアル内の表をお読"
"みください。より詳しい一覧 (ただし少しずつ古いものが混じっています) について"
"は、 SourceForge 内のプロジェクトページ  http://sourceforge.net/projects/"
"expectperl/ から、マニュアルページをお読みください。\n"
"\n"
"お使いのシステムで問題が発生した場合で、 \"検証済み\" リストにお使いのシステ"
"ムが掲載されている場合は、標準的ではない構成でシステムを動作させているものと"
"思われます (たとえばカーネルを独自に構築していて、 pty 機能を無効化させている"
"場合など) 。このような場合、詳しくはシステムの管理者にお尋ねください。\n"
"\n"
"お使いのシステムが掲載されていない場合は、最新バージョンの 'IO::Tty' を展開"
"し、''perl Makefile.PL; make; make test; uname -a'' を実行したあと、その結果"
"を私 (_RGiersig@cpan.org_) 宛にお送りください。そこから推測可能な情報を提供さ"
"せていただきます。うまくすればそのまま動作するのかもしれませんが...\n"
"\n"
"お使いのシステムでうまく動作しない場合は、私宛に詳細を簡潔にお送りください"
"(バージョン番号、ディストリビューションなど。 'uname -a' や 'perl -V' を含め"
"ていただけると助かります; また、 \"perl Makefile.PL\" の実行結果には多数の有"
"用な情報が含まれているため、できるだけ含めるようにしてください) 。これによ"
"り、ヒントが得られるかもしれません。"

#. tumbleweed/perl-IPC-ShareLite/summary
#. leap/perl-IPC-ShareLite/summary
msgid "Lightweight interface to shared memory"
msgstr "共有メモリに対する軽量なインターフェイス"

#. tumbleweed/perl-IPC-ShareLite/description
#. leap/perl-IPC-ShareLite/description
msgid ""
"IPC::ShareLite provides a simple interface to shared memory, allowing data "
"to be efficiently communicated between processes. Your operating system must "
"support SysV IPC (shared memory and semaphores) in order to use this "
"module.\n"
"\n"
"IPC::ShareLite provides an abstraction of the shared memory and semaphore "
"facilities of SysV IPC, allowing the storage of arbitrarily large data; the "
"module automatically acquires and removes shared memory segments as needed. "
"Storage and retrieval of data is atomic, and locking functions are provided "
"for higher-level synchronization.\n"
"\n"
"In many respects, this module is similar to IPC::Shareable. However, IPC::"
"ShareLite does not provide a tied interface, does not (automatically) allow "
"the storage of variables, and is written in C for additional speed.\n"
"\n"
"Construct an IPC::ShareLite object by calling its constructor:\n"
"\n"
"    my $share = IPC::ShareLite->new(         -key     => 1971,         -"
"create  => 'yes',         -destroy => 'no'     ) or die $!;\n"
"\n"
"Once an instance has been created, data can be written to shared memory by "
"calling the store() method:\n"
"\n"
"\t$share->store(\"This is going in shared memory\");\n"
"\n"
"Retrieve the data by calling the fetch() method:\n"
"\n"
"\tmy $str = $share->fetch();\n"
"\n"
"The store() and fetch() methods are atomic; any processes attempting to read "
"or write to the memory are blocked until these calls finish. However, in "
"certain situations, you'll want to perform multiple operations atomically. "
"Advisory locking methods are available for this purpose.\n"
"\n"
"An exclusive lock is obtained by calling the lock() method:\n"
"\n"
"\t$share->lock();\n"
"\n"
"Happily, the lock() method also accepts all of the flags recognized by the "
"flock() system call. So, for example, you can obtain a shared lock like "
"this:\n"
"\n"
"\t$share->lock( LOCK_SH );\n"
"\n"
"Or, you can make either type of lock non-blocking:\n"
"\n"
"\t$share->lock( LOCK_EX|LOCK_NB );\n"
"\n"
"Release the lock by calling the unlock() method:\n"
"\n"
"\t$share->unlock;"
msgstr ""
"IPC::ShareLite "
"は、プロセス間で効率的なデータ通信を行なうのに必要な、共有メモリに対するシンプルなインターフェイスを提供します。このモジュールを利用するには、"
"お使いのオペレーティングシステムが SysV IPC (共有メモリとセマフォ) に対応しなければなりません。\n"
"\n"
"IPC::ShareLite は、 SysV IPC の共有メモリおよびセマフォの機能に対して抽象的な手段を提供します。これにより、任意のデータに対するス"
"トレージとして利用し、必要に応じて共有メモリのセグメントを取得または開放します。データの取得と保存はアトミックに行なわれるほか、"
"高レベルな同期のためにロック (施錠) 機能も利用することができます。\n"
"\n"
"このモジュールは、様々な点で IPC::Shareable に似ています。しかしながら、 IPC::ShareLite "
"はタイインターフェイスを提供しないほか、変数の (自動的な) 保存にも対応せず、速度の追求のために C 言語で書かれています。\n"
"\n"
"IPC::ShareLite オブジェクトを作成するには、下記のようにして実行します:\n"
"\n"
"    my $share = IPC::ShareLite->new(         -key     => 1971,         -"
"create  => 'yes',         -destroy => 'no'     ) or die $!;\n"
"\n"
"インスタンスを作成したあとは、 store() メソッドで共有メモリにデータを書き込むことができます:\n"
"\n"
"\t$share->store(\"This is going in shared memory\");\n"
"\n"
"データを取得したい場合は、 fetch() メソッドを呼び出します:\n"
"\n"
"\tmy $str = $share->fetch();\n"
"\n"
"store(), fetch() の各メソッドはアトミックに動作します; メモリに対して読み書きの処理を行なうにあたっては、以前の処理が終わるまで待たされ"
"ます。ただし、場合によっては複数の処理を同時並行に処理させたいような場合もありますので、この場合はアドバイザリロックのメソッドをご利用いただけます。\n"
"\n"
"また、排他ロックを取得したい場合は、 lock() メソッドを呼び出します:\n"
"\n"
"\t$share->lock();\n"
"\n"
"なお、 lock() メソッドは flock() "
"システムコールで利用することのできるフラグを指定することもできます。たとえば共有ロックを設定したい場合は、下記のようにして実行します:\n"
"\n"
"\t$share->lock( LOCK_SH );\n"
"\n"
"非ブロック型のロックを設定したい場合は、下記のようにします:\n"
"\n"
"\t$share->lock( LOCK_EX|LOCK_NB );\n"
"\n"
"ロックを解除するには、 unlock() メソッドを利用します:\n"
"\n"
"\t$share->unlock;"

#. tumbleweed/perl-JSON-DWIW/summary
#. leap/perl-JSON-DWIW/summary
msgid "JSON converter that Does What I Want"
msgstr "期待通りのことを実行する JSON コンバータ"

#. tumbleweed/perl-JSON-DWIW/description
#. leap/perl-JSON-DWIW/description
msgid ""
"Other JSON modules require setting several parameters before calling the "
"conversion methods to do what I want. This module does things by default "
"that I think should be done when working with JSON in Perl. This module also "
"encodes and decodes faster than the JSON manpage.pm and the JSON::Syck "
"manpage in my benchmarks.\n"
"\n"
"This means that any piece of data in Perl (assuming it's valid unicode) will "
"get converted to something in JSON instead of throwing an exception. It also "
"means that output will be strict JSON, while accepted input will be "
"flexible, without having to set any options.\n"
"\n"
"For a list of changes in recent versions, see the documentation for the "
"JSON::DWIW::Changes manpage.\n"
"\n"
"This module can be downloaded from the http://www.cpan.org/authors/id/D/DO/"
"DOWENS/ manpage."
msgstr ""
"他の JSON モジュールをお使いの場合、必要な処理を実施するのに、あらかじめいくつかのパラメータを設定する必要があります。このモジュールは、 Perl "
"内で JSON を利用する際、既定で必要な処理を行なうのに必要なことを実施します。このモジュールは、ベンチマークによると JSON.pm や JSON::"
"Syck よりも高速にエンコード／デコードすることができることが示されています。\n"
"\n"
"このモジュールは、 Perl 内の任意のデータ (正しく Unicode でエンコードされていることが前提です) を、例外を投げることなく JSON "
"形式に変換する機能を提供します。出力は厳密な JSON の形式で出力されますが、入力はオプションを設定する必要もなく、柔軟に処理されます。\n"
"\n"
"直近のバージョンにおける変更点の一覧は、 JSON::DWIW::Changes のマニュアルページをご覧ください。\n"
"\n"
"また、モジュールのダウンロードは http://www.cpan.org/authors/id/D/DO/DOWENS/ から行なってください。"

#. tumbleweed/perl-JSON-XS/summary
#. leap/perl-JSON-XS/summary
msgid "JSON serialising/deserialising, done correctly and fast"
msgstr "正しく高速に動作する JSON シリアライズ／デシリアライズ"

#. tumbleweed/perl-JSON-XS/description
#. leap/perl-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"Beginning with version 2.0 of the JSON module, when both JSON and JSON::XS "
"are installed, then JSON will fall back on JSON::XS (this can be overridden) "
"with no overhead due to emulation (by inheriting constructor and methods). "
"If JSON::XS is not available, it will fall back to the compatible JSON::PP "
"module as backend, so using JSON instead of JSON::XS gives you a portable "
"JSON API that can be fast when you need and doesn't require a C compiler "
"when that is a problem.\n"
"\n"
"As this is the n-th-something JSON module on CPAN, what was the reason to "
"write yet another JSON module? While it seems there are many JSON modules, "
"none of them correctly handle all corner cases, and in most cases their "
"maintainers are unresponsive, gone missing, or not listening to bug reports "
"for other reasons.\n"
"\n"
"See MAPPING, below, on how JSON::XS maps perl values to JSON values and vice "
"versa."
msgstr ""
"このモジュールは、 Perl のデータ構造を JSON 形式に変換したり、その逆変換を行"
"なったりすることができます。主に正しさを重視した構造とし、速度はその次になる"
"構造とするようにしています。本モジュールは特に後者を重視したつくりになってい"
"て、 C 言語で作成されています。\n"
"\n"
"JSON モジュールバージョン 2.0 以降では、 JSON, JSON::XS の両方がインストール"
"されている場合、 JSON は JSON::XS をその実装として使用します (必要であれば設"
"定を変更することもできます) 。この実装では、コンストラクタやメソッドを継承し"
"ているため、オーバーヘッドは全く発生しません。 JSON::XS が利用できない環境の"
"場合は、 JSON:PP モジュールを実装として使用しますが、この場合はJSON::XS の代"
"わりに JSON モジュールの API を利用することで、可搬性のあるJSON API にするこ"
"とができます。\n"
"\n"
"このモジュールは CPAN において n 番目の JSON モジュールであるため、なぜわざわ"
"ざ新しい JSON モジュールを開発したのかをよく尋ねられます。数多くの他の JSON "
"モジュールでは、例外的なデータ構造に正しく対応できていないほか、メンテナに問"
"い合わせても返答が無かったり、そもそもメンテナが行方不明になってしたり、バグ"
"報告を受け付けていなかったりしているためです。\n"
"\n"
"MAPPING セクションには、 JSON::XS が Perl 変数と JSON 値をどのように対応づけ"
"ているのか、その逆はどうなのかについて、詳しく説明しています。"

#. tumbleweed/perl-JavaScript-Minifier-XS/summary
#. leap/perl-JavaScript-Minifier-XS/summary
msgid "XS based JavaScript minifier"
msgstr "XS ベースの JavaScript 最小化機構"

#. tumbleweed/perl-JavaScript-Minifier-XS/description
#. leap/perl-JavaScript-Minifier-XS/description
msgid ""
"'JavaScript::Minifier::XS' is a JavaScript \"minifier\"; its designed to "
"remove un-necessary whitespace and comments from JavaScript files, which "
"also *not* breaking the JavaScript.\n"
"\n"
"'JavaScript::Minifier::XS' is similar in function to 'JavaScript::Minifier', "
"but is substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'JavaScript::Minifier::XS' は JavaScript をできる限り小さくまとめるための仕組みです。 JavaScript "
"ファイルから、その動作に影響を与えることなく、不要なホワイトスペースを削除したり、コメント部分を削除したりすることができます。\n"
"\n"
"'JavaScript::Minifier::XS' は 'JavaScript::Minifier' に似た機能を提供する仕組みですが、純粋な "
"Perl コードだけでなく XS で記述されているために高速に動作します。"

#. tumbleweed/perl-Lexical-SealRequireHints/summary
#. leap/perl-Lexical-SealRequireHints/summary
msgid "Prevent Leakage of Lexical Hints"
msgstr "レキシカルヒントによる漏洩の保護"

#. tumbleweed/perl-Lexical-SealRequireHints/description
#. leap/perl-Lexical-SealRequireHints/description
msgid ""
"This module works around two historical bugs in Perl's handling of the "
"'%^H' (lexical hints) variable. One bug causes lexical state in one file to "
"leak into another that is 'require'd/'use'd from it. This bug, [perl\n"
"\n"
"The second bug causes lexical state (normally a blank '%^H' once the first "
"bug is fixed) to leak outwards from 'utf8.pm', if it is automatically loaded "
"during Unicode regular expression matching, into whatever source is "
"compiling at the time of the regexp match. This bug, [perl #73174], was "
"present from Perl 5.8.7 up to Perl 5.11.5, fixed in Perl 5.12.0.\n"
"\n"
"Both of these bugs seriously damage the usability of any module relying on "
"'%^H' for lexical scoping, on the affected Perl versions. It is in practice "
"essential to work around these bugs when using such modules. On versions of "
"Perl that require such a workaround, this module globally changes the "
"behaviour of 'require', including 'use' and the implicit 'require' performed "
"in Unicode regular expression matching, so that it no longer exhibits these "
"bugs.\n"
"\n"
"The workaround supplied by this module takes effect the first time its "
"'import' method is called. Typically this will be done by means of a 'use' "
"statement. This should be done as early as possible, because it only affects "
"'require'/'use' statements that are compiled after the workaround goes into "
"effect. For 'use' statements, and 'require' statements that are executed "
"immediately and only once, it suffices to invoke the workaround when loading "
"the first module that will set up vulnerable lexical state. Delayed-action "
"'require' statements, however, are more troublesome, and can require the "
"workaround to be loaded much earlier. Ultimately, an affected Perl program "
"may need to load the workaround as very nearly its first action. Invoking "
"this module multiple times, from multiple modules, is not a problem: the "
"workaround is only applied once, and applies to everything subsequently "
"compiled.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS modules. The XS version has a better chance of "
"playing nicely with other modules that modify 'require' handling. The pure "
"Perl version can't work at all on some Perl versions; users of those "
"versions must use the XS. On all Perl versions suffering the underlying hint "
"leakage bug, pure Perl hooking of 'require' breaks the use of 'require' "
"without an explicit parameter (implicitly using '$_')."
msgstr ""
"このモジュールは、 Perl に古くから存在するバグである '%^H' (レキシカルヒント) 変数の処理に対して、回避策を提供するものです。 "
"あるバグを利用することで、一方のファイル内にある語彙状態を、 'require' または 'use' "
"を利用することで、他方のファイルに漏洩してしまいます。\n"
"\n"
"もう 1 つのバグは、語彙状態 (上述のバグを修正すれば、通常 '%^H' は空白になります) を 'utf8.pm' "
"から外に漏らしてしまうというもので、 Unicode の正規表現マッチングで自動的にこのモジュールを読み込んでしまうと、正規表現のマッチング処理時を行なっ"
"ただけで、どのソースであっても情報漏洩が発生してしまいます。これは [perl #73174] としてバグ報告されているもので、 Perl 5.8.7 "
"から 5.11.5 までのバージョンで発生し、 5.12.0 で解決したものです。\n"
"\n"
"いずれのバグとも、影響のある Perl バージョンを使用している環境では、 '%^H' をレキシカルスコープ用に使用しているモジュールの危険性を高めてしま"
"います。それらのモジュールをどうしても使用する必要がある場合は、回避策を実施する必要がありますが、このモジュールは 'require' のほか、 "
"'use' や Unicode 正規表現を利用する際の暗黙の 'require' の動作をグローバルに変更することで、 "
"バグを発生させないようにしています。\n"
"\n"
"このモジュールが提供する回避策は、'import' メソッドを呼び出した際に最初に効果を発揮します。一般に、この処理は 'use' "
"ステートメント経由で実行されます。この処理は、 'require' や 'use' "
"のステートメントが実行されてからでないと有効にならないため、できる限り早いうちに実行すべきものです。 'use' ステートメントや 'require' "
"ステートメントの場合、それは即時に 1 "
"度だけ実行されるため、早いうちに実行しておけば、脆弱なレキシカル変数による影響を小さくすることができるためです。なお、遅延アクションである "
"'require' ステートメントを利用すると、より問題を引き起こす可能性が高くなるため、回避策はできる限り早く読み込まれるべきです。極論を言うと、 "
"Perl のプログラム内で最初の処理として実行されるべきです。このモジュールを複数回起動しても問題はありません。回避策は一度だけ実行され、適用されます。"
"\n"
"\n"
"このモジュールは XS で実装されていますが、 XS モジュールを処理できない環境に合わせて、純粋な Perl 版も用意されています。 XS 版のほうが "
"'require' 処理を書き換えるのに都合よく動作します。なお、純粋 Perl 版は Perl のバージョンによっては全く動作しない場合もあります。"
"この場合は XS 版をお使いください。ヒント漏洩バグが発生するすべてのバージョンでは、純粋 Perl 版を利用して 'require' をフックすると、"
"明示的なパラメータ無しで 'require' を実行しても、正しく動作しません (暗黙で '$_' を使用します) 。"

#. tumbleweed/perl-Lingua-EN-Tagger/summary
#. leap/perl-Lingua-EN-Tagger/summary
msgid "Part-of-speech tagger for English natural language processing"
msgstr "英語の自然言語処理向けパートスピーチタグ作成"

#. tumbleweed/perl-Lingua-EN-Tagger/description
#. leap/perl-Lingua-EN-Tagger/description
msgid ""
"The module is a probability based, corpus-trained tagger that assigns POS "
"tags to English text based on a lookup dictionary and a set of probability "
"values. The tagger assigns appropriate tags based on conditional "
"probabilities - it examines the preceding tag to determine the appropriate "
"tag for the current word. Unknown words are classified according to word "
"morphology or can be set to be treated as nouns or other parts of speech.\n"
"\n"
"The tagger also extracts as many nouns and noun phrases as it can, using a "
"set of regular expressions."
msgstr ""
"このモジュールは、言語資料を学習して利用する確率ベースのタグ生成器です。辞書を参照して、確率値をもとにして POS タグを英語テキストに割り当てます。タグ"
"は分岐の確率をベースにして設定されるもので、前のタグが次のタグに対して影響を及ぼす仕組みです。未知の単語は単語の形態素をもとに分類したりすることができるほ"
"か、名詞やスピーチの他の場所との関連づけによって分類することができます。\n"
"\n"
"このタグ生成器は多数の名詞や名詞句を、正規表現のセットを利用してできるだけ多く抽出することもできます。"

#. tumbleweed/perl-Lingua-Stem-Snowball/summary
#. leap/perl-Lingua-Stem-Snowball/summary
msgid "Perl interface to Snowball stemmers"
msgstr "Snowball stemmers に対する Perl インターフェイス"

#. tumbleweed/perl-Lingua-Stem-Snowball/description
#. leap/perl-Lingua-Stem-Snowball/description
msgid ""
"Stemming reduces related words to a common root form -- for instance, \"horse"
"\", \"horses\", and \"horsing\" all become \"hors\". Most commonly, stemming "
"is deployed as part of a search application, allowing searches for a given "
"term to match documents which contain other forms of that term."
msgstr ""
"ステミングとはそれぞれの単語を 1 つの根幹となる形式に変換する処理のことを言います。たとえば \"horse\", \"horses\", \""
"horsing\" は、いずれも \"hors\" という根幹に変換することができます。より一般的に言うと、ステミングは検索アプリケーションの一部として利"
"用されているもので、指定した単語とその変化形を一括で検索できるようにする仕組みです。"

#. tumbleweed/perl-Linux-Inotify2/summary
#. leap/perl-Linux-Inotify2/summary
msgid "scalable directory/file change notification"
msgstr "スケーラブルなディレクトリ／ファイルの変更通知"

#. tumbleweed/perl-Linux-Inotify2/description
#. leap/perl-Linux-Inotify2/description
msgid ""
"This module implements an interface to the Linux 2.6.13 and later Inotify "
"file/directory change notification sytem."
msgstr ""
"このモジュールは、 Linux 2.6.13 およびそれ以降で対応している、 Inotify ファイ"
"ル／ディレクトリ変更通知システムに対するインターフェイスを実装しています。"

#. tumbleweed/perl-Linux-Pid/summary
#. leap/perl-Linux-Pid/summary
msgid "Get the native PID and the PPID on Linux"
msgstr "Linux でのネイティブ PID および PPID の取得"

#. tumbleweed/perl-Linux-Pid/description
#. leap/perl-Linux-Pid/description
msgid ""
"Why should one use a module to get the PID and the PPID of a process where "
"there are the '$$' variable and the 'getppid()' builtin ? (Not mentioning "
"the equivalent 'POSIX::getpid()' and 'POSIX::getppid()' functions.)\n"
"\n"
"In fact, this is useful on Linux, with multithreaded programs. Linux' C "
"library, using the linux thread model, returns different values of the PID "
"and the PPID from different threads. (Other thread models such as NPTL don't "
"have the same behaviour). This module forces perl to call the underlying C "
"functions 'getpid()' and 'getppid()'."
msgstr ""
"一般に、内蔵変数である '$$' や内蔵関数 'getppid()' を利用すれば、 PID や PPID を取得できてしまいます ("
"同等の機能を提供する 'POSIX::getpid()' や 'POSIX::getppid()' 関数については例外とします) "
"が、なぜこのようなモジュールが必要なのでしょうか？\n"
"\n"
"事実、 Linux でマルチスレッド型のプログラムを作成する場合には、このモジュールが便利です。 Linux スレッドモデルを採用する Linux C "
"ライブラリでは、各スレッドで PID と PPID が異なる値に設定されます (一方、 NPTL のスレッドでは動作が異なります) "
"。このモジュールを利用することで、 Perl に対して C 関数である 'getpid()' および 'getppid()' "
"の使用を強制することができます。"

#. tumbleweed/perl-List-MoreUtils/summary
#. tumbleweed/perl-List-SomeUtils/summary
#. leap/perl-List-SomeUtils/summary
#. leap/perl-List-MoreUtils/summary
msgid "Provide the stuff missing in List::Util"
msgstr "List::Util では提供されていない機能の提供"

#. tumbleweed/perl-List-MoreUtils/description
#. leap/perl-List-MoreUtils/description
msgid ""
"*List::MoreUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""
"*List::MoreUtils* は、リストに対する機能のうち List::Util "
"には取り入れられなかった、細かくも一般的に必要となるだろう機能が含まれています。\n"
"\n"
"下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、これらのモジュールが提供する機能は、全てを C "
"言語で実装した場合と同じくらい比較的高速に動作します。これらの機能の純粋な Perl "
"版は、このモジュールが対象のマシンでコンパイルできなかった場合のフォールバックとしてのみ動作します。"

#. tumbleweed/perl-List-SomeUtils-XS/summary
#. leap/perl-List-SomeUtils-XS/summary
msgid "XS implementation for List::SomeUtils"
msgstr "List::SomeUtils 向け XS 実装"

#. tumbleweed/perl-List-SomeUtils-XS/description
#. leap/perl-List-SomeUtils-XS/description
msgid ""
"There are no user-facing parts here. See List::SomeUtils for API details.\n"
"\n"
"You shouldn't have to install this module directly. When you install List::"
"SomeUtils, it checks whether your system has a compiler. If it does, then it "
"adds a dependency on this module so that it gets installed and you have the "
"faster XS implementation.\n"
"\n"
"This distribution requires List::SomeUtils but to avoid a circular "
"dependency, that dependency is explicitly left out from the this "
"distribution's metadata. However, without LSU already installed this module "
"cannot function."
msgstr ""
"ここにはユーザに対する説明は書かれていません。 API についての詳細は List::SomeUtils をお読みください。\n"
"\n"
"このモジュールは直接インストールすべきものではありません。 List::SomeUtils "
"をインストールすると、お使いのシステムにコンパイラが存在するかどうかを確認します。コンパイラが存在すると、このモジュールに対して依存関係が設定され、"
"インストールしてより高速な XS 実装を利用するようになります。\n"
"\n"
"この配布物は List::SomeUtils "
"を必要としていますが、これは依存関係の循環を避けるための措置であり、この配布物のメタデータから明示的に除外されるものです。しかしながら、 LSU "
"無しにはこのモジュールは動作しません。"

#. tumbleweed/perl-Locale-Msgfmt/summary
#. leap/perl-Locale-Msgfmt/summary
msgid "Compile .po files to .mo files"
msgstr ".po ファイルから .mo ファイルへのコンパイル"

#. tumbleweed/perl-Locale-Msgfmt/description
#. leap/perl-Locale-Msgfmt/description
msgid ""
"This module does the same thing as msgfmt from GNU gettext-tools, except "
"this is pure Perl."
msgstr ""
"このモジュールは、 GNU gettext-tools の msgfmt と同じ処理を行ないます。ただし、このモジュールは純粋に Perl "
"だけで作られています。"

#. tumbleweed/perl-LockFile-Simple/summary
#. leap/perl-LockFile-Simple/summary
msgid "Simple file locking scheme"
msgstr "シンプルなファイルロック (施錠) スキーム"

#. tumbleweed/perl-LockFile-Simple/description
#. leap/perl-LockFile-Simple/description
msgid ""
"This simple locking scheme is not based on any file locking system calls "
"such as 'flock()' or 'lockf()' but rather relies on basic file system "
"primitives and properties, such as the atomicity of the 'write()' system "
"call. It is not meant to be exempt from all race conditions, especially over "
"NFS. The algorithm used is described below in the *ALGORITHM* section.\n"
"\n"
"It is possible to customize the locking operations to attempt locking once "
"every 5 seconds for 30 times, or delete stale locks (files that are deemed "
"too ancient) before attempting the locking."
msgstr ""
"このシンプルなロック (施錠) スキームは、 'flock()' や 'lockf()' "
"のようなファイルロックのためのシステムコールをベースにしたものではなく、 'write()' "
"システムコールのアトミック性など、基本的なファイルプリミティブやプロパティに依存して作られています。ただし、 NFS "
"経由のファイルシステムなど、競合状態によって発生する問題を回避する仕組みではありません。使用されているアルゴリズムについて、詳しくは "
"*ALGORITHM* セクションをお読みください。\n"
"\n"
"なお、ロック操作を 5 秒間隔で 30 回試行するようにカスタマイズすることもできるほか、失効したロック (すでに使われていないものと判断できるロック) "
"を解除してから、ロックし直すこともできます。"

#. tumbleweed/perl-Log-Dispatch-FileRotate/summary
#. leap/perl-Log-Dispatch-FileRotate/summary
msgid "Log to files that archive/rotate themselves"
msgstr "アーカイブ処理やローテート処理を行なうログ機能"

#. tumbleweed/perl-Log-Dispatch-FileRotate/description
#. leap/perl-Log-Dispatch-FileRotate/description
msgid ""
"This module provides a simple object for logging to files under the Log::"
"Dispatch::* system, and automatically rotating them according to different "
"constraints. This is basically a Log::Dispatch::File wrapper with additions. "
"To that end the arguments\n"
"\n"
"        name, min_level, filename and  mode\n"
"\n"
"behave the same as Log::Dispatch::File. So see its man page (perldoc Log::"
"Dispatch::File)"
msgstr ""
"このモジュールは Log::Dispatch:* "
"システム内のファイルに対して動作するシンプルなオブジェクトで、様々な条件で自動的にローテート処理を行なわせることができます。基本的には "
"Log::Dispatch::File のラッパーに機能を追加したものです。このような目的のため、下記のようなパラメータは Log::Dispatch::"
"File のものと同じように動作します:\n"
"\n"
"         名前, 最小レベル, ファイル名など\n"
"\n"
"詳しくはマニュアルページ (perldoc Log::Dispatch::File) をお読みください。"

#. tumbleweed/perl-MLDBM-Sync/summary
#. leap/perl-MLDBM-Sync/summary
msgid "Perl module for safe concurrent access to MLDBM databases"
msgstr "MLDBM データベースに対する安全な同時アクセスを提供する Perl モジュール"

#. tumbleweed/perl-MLDBM-Sync/description
#. leap/perl-MLDBM-Sync/description
msgid ""
"This module wraps around the MLDBM interface, by handling concurrent access "
"to MLDBM databases with file locking, and flushes i/o explicity per lock/"
"unlock. The new [Read]Lock()/UnLock() API can be used to serialize requests "
"logically and improve performance for bundled reads & writes."
msgstr ""
"このモジュールは MLDBM インターフェイスに対するラッピングを行ない、 MLDBM "
"データベースに対するファイルロックとロック／アンロック時の I/O 同期を 提供し"
"て同時アクセスを処理します。新しい [Read]Lock()/UnLock() API をリクエストの "
"直列化に使用することもできますので、多数の読み込みや書き込みに対する性能も 改"
"善することができます。"

#. tumbleweed/perl-Mail-Sendmail/summary
#. leap/perl-Mail-Sendmail/summary
msgid "Simple platform independent mailer"
msgstr "シンプルなプラットフォーム非依存メーラー"

#. tumbleweed/perl-Mail-Sendmail/description
#. leap/perl-Mail-Sendmail/description
msgid "Simple platform independent e-mail from your perl script."
msgstr ""
"お使いの Perl スクリプトからプラットフォームに依存しない形式で電子メールを送"
"信します。"

#. tumbleweed/perl-Math-BigInt-GMP/summary
#. leap/perl-Math-BigInt-GMP/summary
msgid "Use the GMP library for Math::BigInt routines"
msgstr "Math::BigInt ルーチンでの GMP ライブラリの使用"

#. tumbleweed/perl-Math-BigInt-GMP/description
#. leap/perl-Math-BigInt-GMP/description
msgid ""
"Math::BigInt::GMP is a replacement library for Math::BigInt::Calc that "
"reimplements some of the Math::BigInt::Calc functions in XS. It can be used "
"via:\n"
"\n"
"    use Math::BigInt lib => 'GMP';\n"
"\n"
"This package contains a replacement (drop-in) module for Math::BigInt's "
"core, Math::BigInt::Calc.pm."
msgstr ""
"Math::BigInt::GMP は Math::BigInt::Calc に対する代替ライブラリで、 XS を利用して Math::BigInt::"
"Calc の機能を再実装したものです。下記のように実行することで、本モジュールを利用することができます:\n"
"\n"
"    use Math::BigInt lib => 'GMP';\n"
"\n"
"このパッケージには、 Math::BigInt の中枢部分に対する (完全互換の) 代替モジュール Math::BigInt::Calc.pm "
"が含まれています。"

#. tumbleweed/perl-Math-Calc-Units/summary
#. leap/perl-Math-Calc-Units/summary
msgid "Human-readable unit-aware calculator"
msgstr "人間にとってわかりやすい形式の単位に対応した計算機"

#. tumbleweed/perl-Math-Calc-Units/description
#. leap/perl-Math-Calc-Units/description
msgid ""
"Math::Calc::Units is a simple calculator that keeps track of units. It "
"currently handles combinations of byte sizes and duration only, although "
"adding any other multiplicative types is easy. Any unknown type is treated "
"as a unique user type (with some effort to map English plurals to their "
"singular forms).\n"
"\n"
"The primary intended use is via the ucalc script that prints out all of the "
"\"readable\" variants of a value. For example, \"3 bytes\" will only produce "
"\"3 byte\", but \"3 byte / sec\" produces the original along with \"180 "
"byte / minute\", \"10.55 kilobyte / hour\", etc."
msgstr ""
"Math::Calc::Units は単位を扱うことのできるシンプルな計算機です。現時点ではバイトサイズと時間単位のみを扱うことができますが、他の乗法単位"
"への変換は簡単に行なうことができます。未知のタイプはユーザ定義の独自型として扱われます (ただし、英語の複数形を単数形に変換することはできます) 。\n"
"\n"
"主な使い方としては、 ucalc スクリプト経由で値を \"わかりやすくする\" 方法があります。たとえば \"3 bytes (バイト)\" は単に "
"\"3 byte\" としか表現できませんが、 \"3 byte / sec (バイト毎秒)\" は \"180 byte / minute "
"(バイト毎分)\" や \"10.55 kilobyte / hour (キロバイト毎秒)\" に変換することができます。"

#. tumbleweed/perl-Math-Clipper/summary
#. leap/perl-Math-Clipper/summary
msgid "Polygon clipping in 2D"
msgstr "2D 内でのポリゴンクリッピング"

#. tumbleweed/perl-Math-Clipper/description
#. leap/perl-Math-Clipper/description
msgid ""
"'Clipper' is a C++ (and Delphi) library that implements polygon clipping."
msgstr "'Clipper' は C++ (および Delphi) 言語向けのポリゴンクリッピングを実装するライブラリです。"

#. tumbleweed/perl-Math-ConvexHull-MonotoneChain/summary
#. leap/perl-Math-ConvexHull-MonotoneChain/summary
msgid "Andrew's monotone chain algorithm for finding a convex hull in 2D"
msgstr "2D 内で凸包を検出するための Andrew's モノトーンチェインアルゴリズム"

#. tumbleweed/perl-Math-ConvexHull-MonotoneChain/description
#. leap/perl-Math-ConvexHull-MonotoneChain/description
msgid ""
"This is somewhat experimental still.\n"
"\n"
"This (XS) module optionally exports a single function 'convex_hull' which "
"calculates the convex hull of the input points and returns it. The algorithm "
"is 'O(n log n)' due to having to sort the input list, but should be somewhat "
"faster than a plain Graham's scan (also 'O(n log n)') in practice since it "
"avoids polar coordinates."
msgstr ""
"これは幾分か実験的なものです。\n"
"\n"
"この (XS) モジュールは、入力した点の凸包を計算し、その結果を返す 'convex_hull' "
"関数のみをオプションで公開しています。アルゴリズムは入力リストを並び替える必要があることから、 'O(n log n)' "
"になりますが、極座標を避ける仕組みが備わっていることから、純粋なグラハムスキャン (こちらも 'O(n log n)' です) "
"よりは幾分高速になるべき仕組みです。"

#. tumbleweed/perl-Math-Geometry-Voronoi/summary
#. leap/perl-Math-Geometry-Voronoi/summary
msgid "compute Voronoi diagrams from sets of points"
msgstr "点の集合からボロノイ図を計算するモジュール"

#. tumbleweed/perl-Math-Geometry-Voronoi/description
#. leap/perl-Math-Geometry-Voronoi/description
msgid ""
"This module computes Voronoi diagrams from a set of input points. Info on "
"Voronoi diagrams can be found here:\n"
"\n"
"  http://en.wikipedia.org/wiki/Voronoi_diagram\n"
"\n"
"This module is a wrapper around a C implementation found here:\n"
"\n"
"  http://www.derekbradley.ca/voronoi.html\n"
"\n"
"Which is itself a modification of code by Steve Fortune, the inventor of the "
"algorithm used (Fortune's algorithm):\n"
"\n"
"  http://cm.bell-labs.com/who/sjf/\n"
"\n"
"I made changes to the C code to allow reading input and writing output to/"
"from Perl data-structures. I also modified the memory allocation code to use "
"Perl's memory allocator. Finally, I changed all floats to doubles to provide "
"better precision and to match Perl's NVs."
msgstr ""
"このモジュールは入力点の集合からボロノイ図を算出します。ボロノイ図に関する情報は、下記をお読みください:\n"
"\n"
"  https://ja.wikipedia.org/wiki/ボロノイ図\n"
"\n"
"このモジュールは C 言語実装におけるラッパーです。詳しくは下記をお読みください:\n"
"\n"
"  http://www.derekbradley.ca/voronoi.html\n"
"\n"
"これは、使用しているアルゴリズム (Fortune's algorithm) の発見者である Steve Fortune 氏によるコードの修正版です:\n"
"\n"
"  http://cm.bell-labs.com/who/sjf/\n"
"\n"
"なお、本モジュールでは Perl のデータ構造を入出力するのに必要となるため、データの読み書き機能を追加するよう C "
"言語のソースコードを修正しています。また、 Perl のメモリアロケータを使用するのに必要な修正も実施しているほか、精度の改善や Perl の NV "
"にうまく当てはまるよう、単精度の小数点を倍精度に変更しています。"

#. tumbleweed/perl-Math-Libm/summary
#. leap/perl-Math-Libm/summary
msgid "Perl extension for the C math library, libm"
msgstr "C 数学ライブラリ libm 向け Perl 拡張"

#. tumbleweed/perl-Math-Libm/description
#. leap/perl-Math-Libm/description
msgid ""
"This module is a translation of the C _math.h_ file. It exports the "
"following selected constants and functions."
msgstr "このモジュールは C 言語版の _math_h_ ファイルの翻訳版で、様々な定数や関数などを公開しています。"

#. tumbleweed/perl-Math-PlanePath/summary
#. leap/perl-Math-PlanePath/summary
msgid "Points On a Path Through the 2-D Plane"
msgstr "2D 平面を介したパス上のポイント"

#. tumbleweed/perl-Math-PlanePath/description
#. leap/perl-Math-PlanePath/description
msgid ""
"This is a base class for some mathematical paths which map an integer "
"position '$n' to and from coordinates '$x,$y' in the 2D plane.\n"
"\n"
"The current classes include the following. The intention is that any 'Math::"
"PlanePath::Something' is a PlanePath, and supporting base classes or related "
"things are further down like 'Math::PlanePath::Base::Xyzzy'.\n"
"\n"
"    SquareSpiral           four-sided spiral     PyramidSpiral          "
"square base pyramid     TriangleSpiral         equilateral triangle "
"spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
"DiamondSpiral          four-sided spiral, looping faster     "
"PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
"sided spiral, compact     HexSpiral              six-sided spiral     "
"HexSpiralSkewed        six-sided spiral skewed for compactness     "
"HeptSpiralSkewed       seven-sided spiral, compact     "
"AnvilSpiral            anvil shape     OctagramSpiral         eight pointed "
"star     KnightSpiral           an infinite knight's tour     "
"CretanLabyrinth        7-circuit extended infinitely\n"
"\n"
"    SquareArms             four-arm square spiral     DiamondArms            "
"four-arm diamond spiral     AztecDiamondRings      four-sided rings     "
"HexArms                six-arm hexagonal spiral     GreekKeySpiral         "
"square spiral with Greek key motif     MPeaks                 \"M\" shape "
"layers\n"
"\n"
"    SacksSpiral            quadratic on an Archimedean spiral     "
"VogelFloret            seeds in a sunflower     TheodorusSpiral        unit "
"steps at right angles     ArchimedeanChords      unit chords on an "
"Archimedean spiral     MultipleRings          concentric circles     "
"PixelRings             concentric rings of midpoint pixels     "
"FilledRings            concentric rings of pixels     Hypot                  "
"points by distance     HypotOctant            first octant points by "
"distance     TriangularHypot        points by triangular distance     "
"PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
"\n"
"    PeanoCurve             3x3 self-similar quadrant     "
"WunderlichSerpentine   transpose parts of PeanoCurve     "
"HilbertCurve           2x2 self-similar quadrant     HilbertSides           "
"2x2 self-similar quadrant segments     HilbertSpiral          2x2 self-"
"similar whole-plane     ZOrderCurve            replicating Z shapes     "
"GrayCode               Gray code splits     WunderlichMeander      3x3 \"R\" "
"pattern quadrant     BetaOmega              2x2 self-similar half-plane     "
"AR2W2Curve             2x2 self-similar of four parts     "
"KochelCurve            3x3 self-similar of two parts     "
"DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
"5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
"\n"
"    ImaginaryBase          replicate in four directions     "
"ImaginaryHalf          half-plane replicate three directions     "
"CubicBase              replicate in three directions     "
"SquareReplicate        3x3 replicating squares     CornerReplicate        "
"2x2 replicating \"U\"     LTiling                self-simlar L shapes     "
"DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
"turns by Fibonacci word bits\n"
"\n"
"    Flowsnake              self-similar hexagonal tile traversal     "
"FlowsnakeCentres         likewise but centres of hexagons     "
"GosperReplicate        self-similar hexagonal tiling     "
"GosperIslands          concentric island rings     GosperSide             "
"single side or radial\n"
"\n"
"    QuintetCurve           self-similar \"+\" traversal     "
"QuintetCentres           likewise but centres of squares     "
"QuintetReplicate       self-similar \"+\" tiling\n"
"\n"
"    DragonCurve            paper folding     DragonRounded          paper "
"folding rounded corners     DragonMidpoint         paper folding segment "
"midpoints     AlternatePaper         alternating direction folding     "
"AlternatePaperMidpoint alternating direction folding, midpoints     "
"TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
"dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
"midpoints     R5DragonCurve          radix-5 dragon curve     "
"R5DragonMidpoint       radix-5 dragon curve midpoints     "
"CCurve                 \"C\" curve     ComplexPlus            base i"
"+realpart     ComplexMinus           base i-realpart, including "
"twindragon     ComplexRevolving       revolving base i+1\n"
"\n"
"    SierpinskiCurve        self-similar right-triangles     "
"SierpinskiCurveStair   self-similar right-triangles, stair-step     "
"HIndexing              self-similar right-triangles, squared up\n"
"\n"
"    KochCurve              replicating triangular notches     "
"KochPeaks              two replicating notches     KochSnowflakes         "
"concentric notched 3-sided rings     KochSquareflakes       concentric "
"notched 4-sided rings     QuadricCurve           eight segment zig-zag     "
"QuadricIslands           rings of those zig-zags     SierpinskiTriangle     "
"self-similar triangle by rows     SierpinskiArrowhead    self-similar "
"triangle connectedly     SierpinskiArrowheadCentres  likewise but centres of "
"triangles\n"
"\n"
"    Rows                   fixed-width rows     Columns                fixed-"
"height columns     Diagonals              diagonals between X and Y axes     "
"DiagonalsAlternating   diagonals Y to X and back again     "
"DiagonalsOctant        diagonals between Y axis and X=Y centre     "
"Staircase              stairs down from the Y to X axes     "
"StaircaseAlternating   stairs Y to X and back again     "
"Corner                 expanding stripes around a corner     "
"PyramidRows            expanding stacked rows pyramid     "
"PyramidSides           along the sides of a 45-degree pyramid     "
"CellularRule           cellular automaton by rule number     "
"CellularRule54         cellular automaton rows pattern     "
"CellularRule57         cellular automaton (rule 99 mirror too)     "
"CellularRule190        cellular automaton (rule 246 mirror too)     "
"UlamWarburton          cellular automaton diamonds     "
"UlamWarburtonQuarter   cellular automaton quarter-plane\n"
"\n"
"    DiagonalRationals      rationals X/Y by diagonals     "
"FactorRationals        rationals X/Y by prime factorization     "
"GcdRationals           rationals X/Y by rows with GCD integer     "
"RationalsTree          rationals X/Y by tree     FractionsTree          "
"fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
"child tree     CfracDigits            continued fraction 0<X/Y<1 by "
"digits     CoprimeColumns         coprime X,Y     DivisibleColumns       X "
"divisible by Y     WythoffArray           Fibonacci recurrences     "
"WythoffPreliminaryTriangle     PowerArray             powers in rows     "
"File                   points from a disk file\n"
"\n"
"And in the separate Math-PlanePath-Toothpick distribution\n"
"\n"
"    ToothpickTree          pattern of toothpicks     ToothpickReplicate     "
"same by replication rather than tree     ToothpickUpist         toothpicks "
"only growing upwards     ToothpickSpiral        toothpicks around the "
"origin\n"
"\n"
"    LCornerTree            L-shape corner growth     LCornerReplicate       "
"same by replication rather than tree     OneOfEight     "
"HTree                  H shapes replicated\n"
"\n"
"The paths are object oriented to allow parameters, though many have none. "
"See 'examples/numbers.pl' in the Math-PlanePath sources for a sample "
"printout of numbers from selected paths or all paths."
msgstr ""
"このモジュールは、整数表記の '$n' と二次元座標 '$x,$y' "
"との間を相互に変換することのできる、数学におけるパスを利用するためのベースクラスです。 \n"
"\n"
"現時点では下記のようなクラスが用意されています。それぞれ 'Math::PlanePath::Something' は PlanePath "
"を意図していて、サポートするベースクラスや関連するクラスは 'Math::PlanePath::Base::Xyzzy' のようなクラスになっています。"
"\n"
"\n"
"    SquareSpiral           four-sided spiral     PyramidSpiral          "
"square base pyramid     TriangleSpiral         equilateral triangle "
"spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
"DiamondSpiral          four-sided spiral, looping faster     "
"PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
"sided spiral, compact     HexSpiral              six-sided spiral     "
"HexSpiralSkewed        six-sided spiral skewed for compactness     "
"HeptSpiralSkewed       seven-sided spiral, compact     "
"AnvilSpiral            anvil shape     OctagramSpiral         eight pointed "
"star     KnightSpiral           an infinite knight's tour     "
"CretanLabyrinth        7-circuit extended infinitely\n"
"\n"
"    SquareArms             four-arm square spiral     DiamondArms            "
"four-arm diamond spiral     AztecDiamondRings      four-sided rings     "
"HexArms                six-arm hexagonal spiral     GreekKeySpiral         "
"square spiral with Greek key motif     MPeaks                 \"M\" shape "
"layers\n"
"\n"
"    SacksSpiral            quadratic on an Archimedean spiral     "
"VogelFloret            seeds in a sunflower     TheodorusSpiral        unit "
"steps at right angles     ArchimedeanChords      unit chords on an "
"Archimedean spiral     MultipleRings          concentric circles     "
"PixelRings             concentric rings of midpoint pixels     "
"FilledRings            concentric rings of pixels     Hypot                  "
"points by distance     HypotOctant            first octant points by "
"distance     TriangularHypot        points by triangular distance     "
"PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
"\n"
"    PeanoCurve             3x3 self-similar quadrant     "
"WunderlichSerpentine   transpose parts of PeanoCurve     "
"HilbertCurve           2x2 self-similar quadrant     HilbertSides           "
"2x2 self-similar quadrant segments     HilbertSpiral          2x2 self-"
"similar whole-plane     ZOrderCurve            replicating Z shapes     "
"GrayCode               Gray code splits     WunderlichMeander      3x3 \"R\" "
"pattern quadrant     BetaOmega              2x2 self-similar half-plane     "
"AR2W2Curve             2x2 self-similar of four parts     "
"KochelCurve            3x3 self-similar of two parts     "
"DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
"5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
"\n"
"    ImaginaryBase          replicate in four directions     "
"ImaginaryHalf          half-plane replicate three directions     "
"CubicBase              replicate in three directions     "
"SquareReplicate        3x3 replicating squares     CornerReplicate        "
"2x2 replicating \"U\"     LTiling                self-simlar L shapes     "
"DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
"turns by Fibonacci word bits\n"
"\n"
"    Flowsnake              self-similar hexagonal tile traversal     "
"FlowsnakeCentres         likewise but centres of hexagons     "
"GosperReplicate        self-similar hexagonal tiling     "
"GosperIslands          concentric island rings     GosperSide             "
"single side or radial\n"
"\n"
"    QuintetCurve           self-similar \"+\" traversal     "
"QuintetCentres           likewise but centres of squares     "
"QuintetReplicate       self-similar \"+\" tiling\n"
"\n"
"    DragonCurve            paper folding     DragonRounded          paper "
"folding rounded corners     DragonMidpoint         paper folding segment "
"midpoints     AlternatePaper         alternating direction folding     "
"AlternatePaperMidpoint alternating direction folding, midpoints     "
"TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
"dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
"midpoints     R5DragonCurve          radix-5 dragon curve     "
"R5DragonMidpoint       radix-5 dragon curve midpoints     "
"CCurve                 \"C\" curve     ComplexPlus            base i+"
"realpart     ComplexMinus           base i-realpart, including "
"twindragon     ComplexRevolving       revolving base i+1\n"
"\n"
"    SierpinskiCurve        self-similar right-triangles     "
"SierpinskiCurveStair   self-similar right-triangles, stair-step     "
"HIndexing              self-similar right-triangles, squared up\n"
"\n"
"    KochCurve              replicating triangular notches     "
"KochPeaks              two replicating notches     KochSnowflakes         "
"concentric notched 3-sided rings     KochSquareflakes       concentric "
"notched 4-sided rings     QuadricCurve           eight segment zig-zag     "
"QuadricIslands           rings of those zig-zags     SierpinskiTriangle     "
"self-similar triangle by rows     SierpinskiArrowhead    self-similar "
"triangle connectedly     SierpinskiArrowheadCentres  likewise but centres of "
"triangles\n"
"\n"
"    Rows                   fixed-width rows     Columns                fixed-"
"height columns     Diagonals              diagonals between X and Y axes     "
"DiagonalsAlternating   diagonals Y to X and back again     "
"DiagonalsOctant        diagonals between Y axis and X=Y centre     "
"Staircase              stairs down from the Y to X axes     "
"StaircaseAlternating   stairs Y to X and back again     "
"Corner                 expanding stripes around a corner     "
"PyramidRows            expanding stacked rows pyramid     "
"PyramidSides           along the sides of a 45-degree pyramid     "
"CellularRule           cellular automaton by rule number     "
"CellularRule54         cellular automaton rows pattern     "
"CellularRule57         cellular automaton (rule 99 mirror too)     "
"CellularRule190        cellular automaton (rule 246 mirror too)     "
"UlamWarburton          cellular automaton diamonds     "
"UlamWarburtonQuarter   cellular automaton quarter-plane\n"
"\n"
"    DiagonalRationals      rationals X/Y by diagonals     "
"FactorRationals        rationals X/Y by prime factorization     "
"GcdRationals           rationals X/Y by rows with GCD integer     "
"RationalsTree          rationals X/Y by tree     FractionsTree          "
"fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
"child tree     CfracDigits            continued fraction 0<X/Y<1 by "
"digits     CoprimeColumns         coprime X,Y     DivisibleColumns       X "
"divisible by Y     WythoffArray           Fibonacci recurrences     "
"WythoffPreliminaryTriangle     PowerArray             powers in rows     "
"File                   points from a disk file\n"
"\n"
"And in the separate Math-PlanePath-Toothpick distribution\n"
"\n"
"    ToothpickTree          pattern of toothpicks     ToothpickReplicate     "
"same by replication rather than tree     ToothpickUpist         toothpicks "
"only growing upwards     ToothpickSpiral        toothpicks around the "
"origin\n"
"\n"
"    LCornerTree            L-shape corner growth     LCornerReplicate       "
"same by replication rather than tree     OneOfEight     "
"HTree                  H shapes replicated\n"
"\n"
"パスはパラメータを許容できるようにするためオブジェクト指向になっていますが、そうでないものも多数あります。選択したパスやすべてのパスからの数値出力について"
"、詳しくは Math-PlanePath ソース内の 'examples/numbers.pl' をお読みください。"

#. tumbleweed/perl-Mcrypt/summary
#. leap/perl-Mcrypt/summary
msgid "An Autoload-Capable Interface Module for libmcrypt"
msgstr "自動読み込みに対応した libmcrypt 向けインターフェイスモジュール"

#. tumbleweed/perl-Mcrypt/description
#. leap/perl-Mcrypt/description
msgid ""
"The Mcrypt module provides a simple and intuitive Perl abstraction of the "
"libmcrypt cryptography library.  It provides mechanisms for encoding and "
"decoding Perl scalars."
msgstr ""
"mcrypt モジュールは、 libmcrypt 暗号化ライブラリに対するシンプルで直感的な "
"Perl 抽象化を 実現します。 Perl のスカラー変数に対するエンコードやデコード処"
"理機構を提供しています。"

#. tumbleweed/perl-Module-Build-XSUtil/summary
#. leap/perl-Module-Build-XSUtil/summary
msgid "Module::Build class for building XS modules"
msgstr "XS モジュールを構築するために必要な Module::Build クラス"

#. tumbleweed/perl-Module-Build-XSUtil/description
#. leap/perl-Module-Build-XSUtil/description
msgid ""
"Module::Build::XSUtil is subclass of the Module::Build manpage for support "
"building XS modules.\n"
"\n"
"This is a list of a new parameters in the Module::Build::new method:\n"
"\n"
"* needs_compiler_c99\n"
"\n"
"  This option checks C99 compiler's availability. If it's not available,   "
"Build.PL exits by 0.\n"
"\n"
"* needs_compiler_cpp\n"
"\n"
"  This option checks C++ compiler's availability. If it's not available,   "
"Build.PL exits by 0.\n"
"\n"
"  In addition, append 'extra_compiler_flags' and 'extra_linker_flags' for   C"
"++.\n"
"\n"
"* generate_ppport_h\n"
"\n"
"  Genereate ppport.h by the Devel::PPPort manpage.\n"
"\n"
"* generate_xshelper_h\n"
"\n"
"  Genereate xshelper.h which is a helper header file to include EXTERN.h,   "
"perl.h, XSUB.h and ppport.h, and defines some portability stuff which are   "
"not supported by ppport.h.\n"
"\n"
"  It is porting from the Module::Install::XSUtil manpage.\n"
"\n"
"* cc_warnings\n"
"\n"
"  Enable compiler warnings flag. It is enable by default.\n"
"\n"
"* -g options\n"
"\n"
"  If invoke Build.PL with '-g' option, It will build with debug options."
msgstr ""
"Module::Build::XSUtil は Module::Build に対するサブクラスで、 XS モジュールを構築するのに必要なモジュールです。"
"\n"
"\n"
"Module::Build::new メソッドで利用できる新しいパラメータは下記のとおりです:\n"
"\n"
"* needs_compiler_c99\n"
"\n"
"  このオプションを設定すると、 C99 コンパイラが存在するかどうかを確認します。存在していれば Build.PL は 0 で終了します。\n"
"\n"
"* needs_compiler_cpp\n"
"\n"
"  このオプションは C++ コンパイラが存在するかどうかを確認します。存在していれば Build.PL は 0 で終了します。\n"
"\n"
"  これに加えて、 C++ には 'extra_compiler_flags' や 'extra_linker_flags' があります。\n"
"\n"
"* generate_ppport_h\n"
"\n"
"  Devel::PPPort で ppport.h を生成します。\n"
"\n"
"* generate_xshelper_h\n"
"\n"
"  EXTERN.h, perl.h, XSUB.h, ppport.h へのヘルパーヘッダファイルである xshelper.h を生成するほか、 "
"ppport.h では対応していない可搬性のオプションなどを設定します。\n"
"\n"
"  こちらは Module::Install::XSUtil から移植したものです。\n"
"\n"
"* cc_warnings\n"
"\n"
"  コンパイラの警告フラグを有効にします。既定で有効化されます。\n"
"\n"
"* -g options\n"
"\n"
"  '-g' オプション付きで Build.PL を実行した場合、デバッグオプション付きで構築することができます。"

#. tumbleweed/perl-Module-ScanDeps/summary
#. leap/perl-Module-ScanDeps/summary
msgid "Recursively scan Perl code for dependencies"
msgstr "Perl コードを再帰的に読み込んで依存関係を生成するモジュール"

#. tumbleweed/perl-Module-ScanDeps/description
#. leap/perl-Module-ScanDeps/description
msgid ""
"This module scans potential modules used by perl programs, and returns a "
"hash reference; its keys are the module names as appears in '%INC' (e.g. "
"'Test/More.pm'); the values are hash references with this structure:\n"
"\n"
"    {         file    => '/usr/local/lib/perl5/5.8.0/Test/More.pm',         "
"key     => 'Test/More.pm',         type    => 'module',    # or 'autoload', "
"'data', 'shared'         used_by => [ 'Test/Simple.pm', ... ],         "
"uses    => [ 'Test/Other.pm', ... ],     }\n"
"\n"
"One function, 'scan_deps', is exported by default. Other functions such as "
"('scan_line', 'scan_chunk', 'add_deps', 'path_to_inc_name') are exported "
"upon request.\n"
"\n"
"Users of *App::Packer* may also use this module as the dependency-checking "
"frontend, by tweaking their _p2e.pl_ like below:\n"
"\n"
"    use Module::ScanDeps;     ...     my $packer = App::Packer-"
">new( frontend => 'Module::ScanDeps' );     ...\n"
"\n"
"Please see App::Packer::Frontend for detailed explanation on the structure "
"returned by 'get_files'."
msgstr ""
"このモジュールは Perl プログラムが潜在的に使用するモジュールを一覧にし、それをハッシュ参照として返します。参照のキーは '%INC' "
"内で現われるようなモジュール名 (例: 'Test/More.pm') で、値はこの構造体へのハッシュ参照になります:\n"
"\n"
"    {         file    => '/usr/local/lib/perl5/5.8.0/Test/More.pm',         "
"key     => 'Test/More.pm',         type    => 'module',    # or 'autoload', "
"'data', 'shared'         used_by => [ 'Test/Simple.pm', ... ],         "
"uses    => [ 'Test/Other.pm', ... ],     }\n"
"\n"
"1 つめの関数 'scan_deps' は既定で公開されている関数ですが、それ以外の関数 (たとえば 'scan_line', "
"'scan_chunk', 'add_deps', 'path_to_inc_name' など) は必要に応じて公開される関数です。\n"
"\n"
"*App::Packer* を利用しているユーザであれば、  _p2e.pl_ "
"を下記のように修正することで、このモジュールを依存関係のチェック用に使用することができます:\n"
"\n"
"    use Module::ScanDeps;     ...     my $packer = App::Packer->new( "
"frontend => 'Module::ScanDeps' );     ...\n"
"\n"
"'get_files' で返される構造について、詳しくは App::Packer::Frontend をご覧ください。"

#. tumbleweed/perl-Moose/summary
#. leap/perl-Moose/summary
msgid "Postmodern Object System for Perl 5"
msgstr "Perl 5 向けポストモダンオブジェクトシステム"

#. tumbleweed/perl-Moose/description
#. leap/perl-Moose/description
msgid ""
"Moose is an extension of the Perl 5 object system.\n"
"\n"
"The main goal of Moose is to make Perl 5 Object Oriented programming easier, "
"more consistent, and less tedious. With Moose you can think more about what "
"you want to do and less about the mechanics of OOP.\n"
"\n"
"Additionally, Moose is built on top of Class::MOP, which is a metaclass "
"system for Perl 5. This means that Moose not only makes building normal Perl "
"5 objects better, but it provides the power of metaclass programming as well."
msgstr ""
"Moose は Perl 5 のオブジェクトシステムに対する拡張です。\n"
"\n"
"Moose の主な目的は、 Perl 5 のオブジェクト指向プログラミングを、よりわかりやすくより一貫した仕組みにし、つまらなさを排除することにあります。"
" Moose を利用することで、やりたいことを明確にし、 OOP の仕組みそのものに対して心配する必要がなくなります。\n"
"\n"
"これに加えて、 Moose は Class::MOP 上で構築されています。これは Perl 5 向けのメタクラスシステムで、 Moose "
"は通常のオブジェクトを簡単に構築できるだけでなく、メタクラスプログラミングの利点をも享受できることになります。"

#. tumbleweed/perl-MooseX-Role-WithOverloading/summary
#. leap/perl-MooseX-Role-WithOverloading/summary
msgid "(DEPRECATED) Roles which support overloading"
msgstr "(廃止予定) オーバーロードに対応するためのロール"

#. tumbleweed/perl-MooseX-Role-WithOverloading/description
#. leap/perl-MooseX-Role-WithOverloading/description
msgid ""
"MooseX::Role::WithOverloading allows you to write a the Moose::Role manpage "
"which defines overloaded operators and allows those overload methods to be "
"composed into the classes/roles/instances it's compiled to, where plain the "
"Moose::Role manpages would lose the overloading.\n"
"\n"
"Starting with the Moose manpage version 2.1300, this module is no longer "
"necessary, as the functionality is available already. In that case, 'use "
"MooseX::Role::WithOverloading' behaves identically to 'use Moose::Role'."
msgstr ""
"MooseX::Role::WithOverloading は Moose::Role を作成するためのモジュールで、演算子のオーバーロードを定義すること"
"ができるほか、オーバーロードしたメソッドをコンパイル先のクラスやロール、インスタンスに組み込み、純粋な Moose::ROle "
"がオーバーロードを失うことができるものです。\n"
"\n"
"Mosse バージョン 2.1300 以降でこのモジュールは必須ではなくなりましたが、機能の提供は引き続き行なわれています。この場合、  'use "
"MooseX::Role::WithOverloading' は 'use Moose::Role' と同等の動作になります。"

#. tumbleweed/perl-Mouse/summary
msgid "Moose minus the antlers"
msgstr "Moose minus the antlers"

#. tumbleweed/perl-Mouse/description
msgid ""
"Moose is a postmodern object system for Perl5. Moose is wonderful.\n"
"\n"
"Unfortunately, Moose has a compile-time penalty. Though significant progress "
"has been made over the years, the compile time penalty is a non-starter for "
"some very specific applications. If you are writing a command-line "
"application or CGI script where startup time is essential, you may not be "
"able to use Moose (we recommend that you instead use persistent Perl "
"executing environments like 'FastCGI' for the latter, if possible).\n"
"\n"
"Mouse is a Moose compatible object system, which aims to alleviate this "
"penalty by providing a subset of Moose's functionality.\n"
"\n"
"We're also going as light on dependencies as possible. Mouse currently has\n"
"*no dependencies* except for building/testing modules. Mouse also works "
"without XS, although it has an XS backend to make it much faster."
msgstr ""
"Moose は Perl5 に対するポストモダン型のオブジェクトシステムです。 Moose は素晴らしいものです。\n"
"\n"
"残念ながら、 Moose にはコンパイル時のペナルティが存在しています。何年にもわたって大幅に進歩しているものの、コンパイル時のペナルティは特定のアプリケ"
"ーションでは起動時以外にも影響を及ぼしてしまいます。起動時間を気にする必要があるコマンドラインアプリケーションや CGI スクリプトを作成している場合は、"
" Moose を不便に感じる場合があるかもしれません (この場合は、可能であれば永続的な Perl 実行環境を提供する 'FastCGI' "
"のような仕組みをお使いください) 。\n"
"\n"
"Mouse は Moose 互換のオブジェクトシステムで、 Moose の機能のサブセットを提供しながらペナルティを軽減することを目指しているものです。"
"\n"
"\n"
"なお、できる限り依存関係が軽くなるように作っております。 Mouse では構築やテスト用のモジュールを除き、依存関係はありません。また、 Mouse は "
"XS 無しでも動作しますが、 XS を利用したほうが非常に高速に動作します。"

#. tumbleweed/perl-Mozilla-LDAP/summary
#. leap/perl-Mozilla-LDAP/summary
msgid "LDAP module that wraps the OpenLDAP C SDK"
msgstr "OpenLDAP C SDK をラッピングする LDAP モジュール"

#. tumbleweed/perl-Mozilla-LDAP/description
#. leap/perl-Mozilla-LDAP/description
msgid "A perl LDAP module that wraps the OpenLDAP C SDK."
msgstr "OpenLDAP C SDK をラッピングする Perl LDAP モジュールです。"

#. tumbleweed/perl-Nagios-Plugin/summary
#. leap/perl-Nagios-Plugin/summary
msgid "A family of perl modules to streamline writing Nagios plugins"
msgstr "Nagios プラグインを直感的に作成するための Perl モジュールファミリ"

#. tumbleweed/perl-Nagios-Plugin/description
#. leap/perl-Nagios-Plugin/description
msgid ""
"Nagios::Plugin and its associated Nagios::Plugin::* modules are a family of "
"perl modules to streamline writing Nagios plugins. The main end user modules "
"are Nagios::Plugin, providing an object-oriented interface to the entire "
"Nagios::Plugin::* collection, and Nagios::Plugin::Functions, providing a "
"simpler functional interface to a useful subset of the available "
"functionality.\n"
"\n"
"The purpose of the collection is to make it as simple as possible for "
"developers to create plugins that conform the Nagios Plugin guidelines "
"(http://nagiosplug.sourceforge.net/developer-guidelines.html)."
msgstr ""
"Nagiois::Plugin と関連する Nagios::Plugin::* モジュールは、 Nagios "
"のプラグインを素早く作成するために提供されている Perl モジュール集です。メインのエンドユーザ向けモジュールは Nagios::Plugin で、"
"このモジュールは Nagios::Plugin::* コレクション全体に対するオブジェクト志向のインターフェイスを提供するものです。また、 "
"Nagios::Plugin::Functions は、左記のモジュールの機能に対するサブセットを提供する、よりシンプルなインターフェイスです。\n"
"\n"
"このコレクションは、開発者に対して Nagios Plugin "
"ガイドラインを遵守しながら、できる限りシンプルにモジュールを作成できる仕組みを提供することを目指しています。"

#. tumbleweed/perl-Net-DBus/summary
#. leap/perl-Net-DBus/summary
msgid "Perl extension for the DBus message system"
msgstr "DBus メッセージシステム向けの Perl 拡張"

#. tumbleweed/perl-Net-DBus/description
#. leap/perl-Net-DBus/description
msgid ""
"Net::DBus provides a Perl API for the DBus message system. The DBus Perl "
"interface is currently operating against the 0.32 development version of "
"DBus, but should work with later versions too, providing the API changes "
"have not been too drastic.\n"
"\n"
"Users of this package are either typically, service providers in which case "
"the the Net::DBus::Service manpage and the Net::DBus::Object manpage modules "
"are of most relevance, or are client consumers, in which case the Net::DBus::"
"RemoteService manpage and the Net::DBus::RemoteObject manpage are of most "
"relevance."
msgstr ""
"Net::DBus は DBus メッセージシステムに対する Perl API を提供します。 DBus "
"Perl インターフェイスは、現在 DBus の開発バージョン 0.32 で動作する仕組みです"
"が、 API が大幅に変更されない限り、以降のバージョンでも動作するはずのもので"
"す。\n"
"\n"
"このパッケージは一般に、 Net::DBus::Service や Net::DBus::Object のモジュール"
"などから使われるほか、 Net::DBus::RemoteService や Net::DBus::RemoteObjectな"
"ど、クライアント側でも使用する場合があります。"

#. tumbleweed/perl-Net-IDN-Encode/summary
#. leap/perl-Net-IDN-Encode/summary
msgid "Internationalizing Domain Names in Applications (IDNA)"
msgstr ""
"Internationalized Domain Names in Applications (IDNA; アプリケーション内国際ドメイン名) サポート"

#. tumbleweed/perl-Net-IDN-Encode/description
#. leap/perl-Net-IDN-Encode/description
msgid ""
"This module provides an easy-to-use interface for encoding and decoding "
"Internationalized Domain Names (IDNs).\n"
"\n"
"IDNs use characters drawn from a large repertoire (Unicode), but IDNA allows "
"the non-ASCII characters to be represented using only the ASCII characters "
"already allowed in so-called host names today (letter-digit-hypen, '/[A-"
"Z0-9-]/i').\n"
"\n"
"Use this module if you just want to convert domain names (or email "
"addresses), using whatever IDNA standard is the best choice at the moment.\n"
"\n"
"You should be familiar with Unicode support in perl, as this module expects "
"correctly encoded input. See the perlunitut manpage, the perluniintro "
"manpage and the perlunicode manpage for details."
msgstr ""
"このモジュールは、国際ドメイン名 (IDN) をエンコードしたりデコードしたりするための使いやすいインターフェイスです。\n"
"\n"
"IDN は様々なレパートリーから構成される文字 (Unicode) を使用していますが、 IDNA は現代のホスト名に対してすでに許可されている文字 "
"(英字／数字／ハイフン: '/[A-Z0-9-]/i') のみを利用して、非 ASCII 文字を表現するように規定しています。\n"
"\n"
"ドメイン名 (またはメールアドレス) を変換したい場合は、このモジュールをお使いください。それは、 IDNA 標準が現時点では最適の選択肢であるためです。"
"\n"
"\n"
"このモジュールは正しくエンコードされた文字を期待する構造から、 Perl の Unicode について詳しく知っていることが前提とになります。詳しくは "
"perlunitut, perluniintro, perlunicode の各マニュアルページをお読みください。"

#. tumbleweed/perl-Net-IP/summary
#. leap/perl-Net-IP/summary
msgid "Allows easy manipulation of IPv4 and IPv6 addresses"
msgstr "IPv4/IPv6 アドレスの簡単な操作"

#. tumbleweed/perl-Net-IP/description
#. leap/perl-Net-IP/description
msgid ""
"This is the Net::IP module, designed to allow easy manipulation of IPv4 and "
"IPv6 addresses."
msgstr ""
"これは Net::IP モジュールと呼ばれ、 IPv4 および IPv6 アドレスについて 処理を"
"簡単に行なうことができるようにするものです。"

#. tumbleweed/perl-Net-IPv4Addr/summary
#. leap/perl-Net-IPv4Addr/summary
msgid "Net::IPv4Addr Module for Perl"
msgstr "Perl 向け Net::IPv4Addr モジュール"

#. tumbleweed/perl-Net-IPv4Addr/description
#. leap/perl-Net-IPv4Addr/description
msgid ""
"Net::IPv4Addr provides functions for parsing IPv4 addresses both in "
"traditional address/netmask format and in the new CIDR format. There are "
"also methods for calculating the network and broadcast address and also to "
"see check if a given address is in a specific network."
msgstr ""
"Net::IPv4Addr は、 IPv4 アドレスの処理について、従来の \"アドレス\" /\"ネット"
"マスク\" 形式のほか、新しい CIDR 形式にも対応したモジュールです。 また、ネッ"
"トワークアドレスやブロードキャストアドレス、および 指定したアドレスが指定した"
"ネットワーク内に存在するかどうかを調べる機能も 備えています。"

#. tumbleweed/perl-Net-Jabber/summary
#. leap/perl-Net-Jabber/summary
msgid "Jabber Perl Library"
msgstr "Jabber Perl ライブラリ"

#. tumbleweed/perl-Net-Jabber/description
#. leap/perl-Net-Jabber/description
msgid ""
"Net::Jabber is a convenient tool to use for any perl script that would like "
"to utilize the Jabber Instant Messaging protocol. While not a client in and "
"of itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::Jabber is "
"a wrapper around the rest of the official Net::Jabber::xxxxxx packages."
msgstr ""
"Net::Jabber は Jabber インスタントメッセージングプロトコルを扱う  Perl スクリ"
"プトを作成するためのツールです。 これ自身をクライアントとして使用してログイン"
"／ログオフすることができるだけでなく、 CGI クライアントやコマンドライン Perl "
"クライアントを作成するのに必要な、 全てのバックエンド機能を備えた十分かつ使い"
"やすいツールです。 Net::Jabber は、残りの公式 Net::Jabber::xxxxxx パッケージ"
"に 対するラッパーです。"

#. tumbleweed/perl-Net-LibIDN/summary
#. leap/perl-Net-LibIDN/summary
msgid "Net::LibIDN Perl module"
msgstr "Net::LibIDN Perl モジュール"

#. tumbleweed/perl-Net-LibIDN/description
#. leap/perl-Net-LibIDN/description
msgid ""
"This module provides Perl bindings for GNU Libidn by Simon Josefsson (http://"
"www.gnu.org/software/libidn/) in way that was heavily inspired by PHP "
"bindings for the same library done by Turbo Fredriksson (http://php- idn."
"bayour.com/)."
msgstr ""
"このモジュールは Simon Josefsson 氏が開発している GNU Libidn (http://www.gnu."
"org/software/libidn/) に対する Perl バインディングで、 Turbo Fredriksson 氏が"
"開発している PHP バインディング (http://php-idn.bayour.com/) を大きなヒントに"
"して開発されています。"

#. tumbleweed/perl-Net-Patricia/summary
#. leap/perl-Net-Patricia/summary
msgid "Patricia Trie perl module for fast IP address lookups"
msgstr "高速な IP アドレス参照のための Patricia Trie Perl モジュール"

#. tumbleweed/perl-Net-Patricia/description
#. leap/perl-Net-Patricia/description
msgid ""
"This module uses a Patricia Trie data structure to quickly perform IP "
"address prefix matching for applications such as IP subnet, network or "
"routing table lookups. The data structure is based on a radix tree using a "
"radix of two, so sometimes you see patricia implementations called \"radix\" "
"as well. The term \"Trie\" is derived from the word \"retrieval\" but is "
"pronounced like \"try\". Patricia stands for \"Practical Algorithm to "
"Retrieve Information Coded as Alphanumeric\", and was first suggested for "
"routing table lookups by Van Jacobsen. Patricia Trie performance "
"characteristics are well-known as it has been employed for routing table "
"lookups within the BSD kernel since the 4.3 Reno release.\n"
"\n"
"The BSD radix code is thoroughly described in \"TCP/IP Illustrated, Volume "
"2\" by Wright and Stevens and in the paper ``A Tree-Based Packet Routing "
"Table for Berkeley Unix'' by Keith Sklower."
msgstr ""
"このモジュールは Patricia Trie データ構造を利用して、素早く IP アドレスを参照"
"し、 IP サブネットやネットワーク、ルーティングテーブルを見つけ出す処理を行な"
"います。データ構造は 2 を基数とした基数木と呼ばれる構造で、 patricia 実装自体"
"を \"Radix\" (基数) と呼ぶ場合もあります。また、 \"Trie\" とは \"retrieval"
"\" (取得) という言葉から生まれた用語ですが、 \"try\" (トライ) と発音します。 "
"Patricia は \"Practical Algorithm to Retrieve Information Coded as "
"Alphanumeric\" (英数字でコーディングされた情報を取得するための現実的なアルゴ"
"リズム) の略で、 Van Jacobsen 氏がルーティングテーブルの参照のために考案した"
"ものです。 Patricia Trie の性能は、 BSD カーネルのバージョン 4.3 Reno リリー"
"ス以降に含まれている、ルーティングテーブルの参照機能でよく知られた存在になっ"
"ています。"

#. tumbleweed/perl-Net-Pcap/summary
#. leap/perl-Net-Pcap/summary
msgid "Interface to pcap LBL packet capture library"
msgstr "pcap LBL パケットキャプチャライブラリに対するインターフェイス"

#. tumbleweed/perl-Net-Pcap/description
#. leap/perl-Net-Pcap/description
msgid ""
"Net::Pcap is a Perl binding to the LBL pcap(3) library. The README for "
"libpcap describes itself as: \"a system-independent interface for user-level "
"packet capture.  libpcap provides a portable framework for low-level network "
"monitoring.  Applications include network statistics collection, security "
"monitoring, network debugging, etc.\""
msgstr ""
"Net::Pcap は LBL pcap(3) ライブラリに対する Perl バインディングです。 libpcap 内の README では、 "
"libpcap 自身を下記のように説明しています: \"ユーザレベルのパケットキャプチャを実施する、システムに依存しないライブラリです。 libpcap "
"では低レベルなネットワーク監視に対して、可搬性のあるフレームワークを提供しています。ネットワークの統計情報やセキュリティの監視、ネットワークの不具合調査な"
"どを実施するアプリケーション向けの仕組みです。\""

#. tumbleweed/perl-Net-SSH2/summary
#. leap/perl-Net-SSH2/summary
msgid "Support for the SSH 2 protocol via libssh2"
msgstr "libssh 経由で SSH 2 プロトコルに対応するモジュール"

#. tumbleweed/perl-Net-SSH2/description
#. leap/perl-Net-SSH2/description
msgid ""
"Net::SSH2 is a Perl interface to the libssh2 (http://www.libssh2.org) "
"library. It supports the SSH2 protocol (there is no support for SSH1) with "
"all of the key exchanges, ciphers, and compression of libssh2.\n"
"\n"
"Even if the module can be compiled and linked against very old versions of "
"the library, nothing below 1.5.0 should really be used (older versions were "
"quite buggy and unreliable) and version 1.7.0 or later is recommended."
msgstr ""
"Net::SSH2 は libssh2 (http://www.libssh2.org) ライブラリに対する Perl のインターフェイスです。 "
"SSH2 プロトコルに対応 (SSH1 には対応していません) し、 libssh2 が提供する鍵の交換や暗号化、圧縮などに対応しています。\n"
"\n"
"このモジュールは、非常に古いバージョンのライブラリを利用することでもコンパイルおよびリンクすることができますが、バージョン 1.5.0 "
"以下のものは使用すべきではなく (古いバージョンにはバグが多く信頼性に欠けるため) 、 1.7.0 およびそれ以降のバージョンをお勧めしています。"

#. tumbleweed/perl-Net-SSLeay/summary
#. leap/perl-Net-SSLeay/summary
msgid "Perl extension for using OpenSSL"
msgstr "OpenSSL を使用する Perl 拡張"

#. tumbleweed/perl-Net-SSLeay/description
msgid ""
"Net::SSLeay module contains perl bindings to openssl (http://www.openssl."
"org) library. Net::SSLeay module basically comprise of:     High level "
"functions for accessing web servers (by using HTTP/HTTPS)     Low level API "
"(mostly mapped 1:1 to openssl's C functions)     Convenience functions "
"(related to low level API but with more perl friendly interface)"
msgstr ""
"Net::SSLeay モジュールには、 openssl (http://www.openssl.org) ライブラリに対"
"する Perl バインディングが含まれています。 Net:SSLeay モジュールには、主に下"
"記のような機能があります:     Web サーバなどに (HTTP/HTTPS を利用して) アクセ"
"スするための高レベルな関数     低レベルな API (openssl の C 言語関数に対する"
"ほぼ 1:1 のマッピング)     その他の便利な関数 (低レベルな API に関連するもの"
"の、より Perl に近いインターフェイス)"

#. tumbleweed/perl-NetAddr-IP/summary
#. leap/perl-NetAddr-IP/summary
msgid "Manages IPv4 and IPv6 addresses and subnets"
msgstr "IPv4 および IPv6 アドレスとサブネットの管理"

#. tumbleweed/perl-NetAddr-IP/description
#. leap/perl-NetAddr-IP/description
msgid ""
"This module provides an object-oriented abstraction on top of IP addresses "
"or IP subnets that allows for easy manipulations. Version 4.xx of NetAddr::"
"IP will work with older versions of Perl and is compatible with Math::"
"BigInt.\n"
"\n"
"The internal representation of all IP objects is in 128 bit IPv6 notation. "
"IPv4 and IPv6 objects may be freely mixed."
msgstr ""
"このモジュールは、 IP アドレスやサブネットに対するオブジェクト指向の抽象化機"
"能を提供し、操作を簡単に行なうことができるようにします。バージョン 4.xx の"
"NetAddr::IP モジュールは古いバージョンの Perl で動作するもので、以前のバー"
"ジョンと比較すると、 Math::BigInt を使用しないようになっています。\n"
"\n"
"IP オブジェクトに対する内部表現は、全て 128 ビットの IPv6 方式になっていま"
"す。そのため、 IPv4/IPv6 の各オブジェクトは自由に混在させることができます。"

#. tumbleweed/perl-NetxAP/summary
#. leap/perl-NetxAP/summary
msgid "Interface to the protocol family IMAP, IMSP, ACAP, and ICAP"
msgstr "IMAP, IMSP, ACAP, ICAP プロトコルファミリのインターフェイス"

#. tumbleweed/perl-NetxAP/description
#. leap/perl-NetxAP/description
msgid ""
"This module provides an interface to the protocol family represented by "
"IMAP, IMSP, ACAP, and ICAP.  A usable IMAP module is also provide."
msgstr ""
"このモジュールは、 IMAP, IMSP, ACAP, ICAP に代表されるプロトコルファミリへの "
"インターフェイスを提供しています。使用可能な IMAP モジュールも提供されていま"
"す。"

#. tumbleweed/perl-PAR-Packer/summary
#. leap/perl-PAR-Packer/summary
msgid "PAR Packager"
msgstr "PAR パッケージャ"

#. tumbleweed/perl-PAR-Packer/description
#. leap/perl-PAR-Packer/description
msgid ""
"This module implements the *App::Packer::Backend* interface, for generating "
"stand-alone executables, perl scripts and PAR files.\n"
"\n"
"Currently, this module is used by the command line tool *pp* internally, as "
"well as by the contributed _contrib/gui_pp/gpp_ program.\n"
"\n"
"Since version 0.97 of PAR, this module and its related tools such as 'pp' "
"have been stripped from the PAR distribution and are now distributed as the "
"'PAR-Packer' distribution so that PAR users need not necessarily have a C "
"compiler."
msgstr ""
"このモジュールは *App::Packer::Backend* インターフェイスを実装するもので、単独で動作する実行ファイルや Perl スクリプト、 "
"PAR ファイルなどを生成するための仕組みです。\n"
"\n"
"現時点では、このモジュールは内部的に *pp* が使用しているほか、 _contrib/gui_pp\\gpp_program も使用しています。\n"
"\n"
"PAR バージョン 0.97 の時点で、このモジュールと 'pp' などの関連ツールは PAR 配布物からは取り除かれ、 'PAR-Packer' "
"の配布物として配布されるようになりました。これは、 PAR だけを使用したいユーザに対して、 C コンパイラが無くても使用できるようにするための措置です。"

#. tumbleweed/perl-Package-Stash-XS/summary
#. leap/perl-Package-Stash-XS/summary
msgid "faster and more correct implementation of the Package::Stash API"
msgstr "Package::Stash API の高速でより正しい実装"

#. tumbleweed/perl-Package-Stash-XS/description
#. leap/perl-Package-Stash-XS/description
msgid ""
"This is a backend for the Package::Stash manpage, which provides the "
"functionality in a way that's less buggy and much faster. It will be used by "
"default if it's installed, and should be preferred in all environments with "
"a compiler."
msgstr ""
"これは Package::Stash のバックエンドで、バグも少なく高速に動作する機能を提供"
"します。インストールされていれば、このモジュールが既定で使用されるようになっ"
"ていて、コンパイラのある環境であれば全ての環境で推奨されます。"

#. tumbleweed/perl-PadWalker/summary
#. leap/perl-PadWalker/summary
msgid "Play with Other Peoples' Lexical Variables"
msgstr "他の人々のレキシカル変数の使用"

#. tumbleweed/perl-PadWalker/description
#. leap/perl-PadWalker/description
msgid ""
"PadWalker is a module which allows you to inspect (and even change!) lexical "
"variables in any subroutine which called you. It will only show those "
"variables which are in scope at the point of the call.\n"
"\n"
"PadWalker is particularly useful for debugging. It's even used by Perl's "
"built-in debugger. (It can also be used for evil, of course.)\n"
"\n"
"I wouldn't recommend using PadWalker directly in production code, but it's "
"your call. Some of the modules that use PadWalker internally are certainly "
"safe for and useful in production."
msgstr ""
"PadWalker は任意のサブルーチン内にある lexical 変数を検査 (および修正) するこ"
"とができるモジュールです。呼び出しの時点で、そのスコープ内にある変数のみを表"
"示することができます。\n"
"\n"
"PadWalker は特にデバッグ用に便利なモジュールです。 Perl の内蔵デバッガでも使"
"用されています (もちろん、悪用することもできてしまいます) 。\n"
"\n"
"PadWalker は本番用途の環境では使用しないことをお勧めしますが、お使いの呼び出"
"しで利用してもかまいません。 PadWalker 内で内部的に使用しているモジュールは、"
"内部的に安全なものであり、本番環境でも有用です。"

#. tumbleweed/perl-Pango/summary
#. leap/perl-Pango/summary
msgid "Pango Perl module"
msgstr "Pango Perl モジュール"

#. tumbleweed/perl-Pango/description
#. leap/perl-Pango/description
msgid ""
"Pango is a library for laying out and rendering text, with an emphasis on "
"internationalization. Pango can be used anywhere that text layout is needed, "
"but using Pango in conjunction with L<Cairo> and/or L<Gtk2> provides a "
"complete solution with high quality text handling and graphics rendering.\n"
"\n"
"Dynamically loaded modules handle text layout for particular combinations of "
"script and font backend. Pango provides a wide selection of modules, "
"including modules for Hebrew, Arabic, Hangul, Thai, and a number of Indic "
"scripts. Virtually all of the world's major scripts are supported.\n"
"\n"
"In addition to the low level layout rendering routines, Pango includes "
"Pango::Layout, a high level driver for laying out entire blocks of text, and "
"routines to assist in editing internationalized text."
msgstr ""
"Pango はテキストの配置や描画を行なうライブラリで、主に国際化を主眼に置いて開"
"発されています。テキストの配置が必要な様々な場所で使用することができますが、"
"Pango と L<Cairo> 、および L<Gtk2> と共に使用することで、高品質なテキスト処理"
"およびグラフィック描画の完全ソリューションを提供します。\n"
"\n"
"動的に読み込まれたモジュールは、特定のスクリプトとフォントのバックエンドを組"
"み合わせて、テキストの処理を行ないます。 Pango は幅広いモジュールを提供してい"
"て、ヘブライ語やアラビア語、ハングルやタイ語、多数のインド文字に対応していま"
"す。設計上は世界中にある主な言語すべてに対応しています。\n"
"\n"
"低レベルの描画ルーチンに加え、 Pango では Pango::Layout と呼ばれる仕組みも提"
"供しています。これはテキストブロック全体を配置するための高レベルなドライバ"
"で、国際化されたテキストの編集を支援するルーチンです。"

#. tumbleweed/perl-Params-Classify/summary
#. leap/perl-Params-Classify/summary
msgid "Argument type classification"
msgstr "パラメータタイプの分類"

#. tumbleweed/perl-Params-Classify/description
#. leap/perl-Params-Classify/description
msgid ""
"This module provides various type-testing functions. These are intended for "
"functions that, unlike most Perl code, care what type of data they are "
"operating on. For example, some functions wish to behave differently "
"depending on the type of their arguments (like overloaded functions in C+"
"+).\n"
"\n"
"There are two flavours of function in this module. Functions of the first "
"flavour only provide type classification, to allow code to discriminate "
"between argument types. Functions of the second flavour package up the most "
"common type of type discrimination: checking that an argument is of an "
"expected type. The functions come in matched pairs, of the two flavours, and "
"so the type enforcement functions handle only the simplest requirements for "
"arguments of the types handled by the classification functions. Enforcement "
"of more complex types may, of course, be built using the classification "
"functions, or it may be more convenient to use a module designed for the "
"more complex job, such as the Params::Validate manpage.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""
"このモジュールは様々なタイプテスト機能を提供します。これらはほとんどの Perl "
"コードのやり方とは異なり、データの種類が何であるのかを判別するために用意されているものです。たとえば、パラメータとして与えられたデータの種類によって、"
"その動作を変えるような (例えれば C++ 言語におけるオーバーロード関数など) 用途が考えられます。\n"
"\n"
"このモジュールで提供される関数には、 2 種類のものがあります。 1 "
"つはデータタイプの分類のみを行なう機能で、パラメータのタイプを区別するための仕組みです。もう 1 "
"つは、よくあるタイプの区別をパッケージ化しているもので、指定したパラメータが期待通りであるかどうかを識別するものです。関数は 2 "
"つの種類を組にして提供されるため、複雑なタイプを強制するような仕組みも分類機能を利用すれば構築できるほか、 Params::Validate "
"のような複雑な処理を行なうモジュールを作成するのも簡単に行なうことができます。\n"
"\n"
"このモジュールは XS で実装されていますが、 XS を処理できないシステム向けに Perl のみで実装されている版もあります。"

#. tumbleweed/perl-Params-Util/summary
#. leap/perl-Params-Util/summary
msgid "Simple, compact and correct param-checking functions"
msgstr "シンプルでコンパクト、修正機能にも対応したパラメータチェック関数"

#. tumbleweed/perl-Params-Util/description
#. leap/perl-Params-Util/description
msgid ""
"'Params::Util' provides a basic set of importable functions that makes "
"checking parameters a hell of a lot easier\n"
"\n"
"While they can be (and are) used in other contexts, the main point behind "
"this module is that the functions *both* Do What You Mean, and Do The Right "
"Thing, so they are most useful when you are getting params passed into your "
"code from someone and/or somewhere else and you can't really trust the "
"quality.\n"
"\n"
"Thus, 'Params::Util' is of most use at the edges of your API, where params "
"and data are coming in from outside your code.\n"
"\n"
"The functions provided by 'Params::Util' check in the most strictly correct "
"manner known, are documented as thoroughly as possible so their exact "
"behaviour is clear, and heavily tested so make sure they are not fooled by "
"weird data and Really Bad Things.\n"
"\n"
"To use, simply load the module providing the functions you want to use as "
"arguments (as shown in the SYNOPSIS).\n"
"\n"
"To aid in maintainability, 'Params::Util' will *never* export by default.\n"
"\n"
"You must explicitly name the functions you want to export, or use the ':ALL' "
"param to just have it export everything (although this is not recommended if "
"you have any _FOO functions yourself with which future additions to 'Params::"
"Util' may clash)"
msgstr ""
"'Params::Util' は面倒なパラメータチェックを簡単に行なうための基本的な組み込み"
"のできる関数集を提供しています。\n"
"\n"
"他のコンテキスト内で使用することもできますが、このモジュールの主な利点として"
"は、関数の意味するものと正確性を両立できるということにあります。これはお使い"
"のコードでパラメータを受け取る場合、それらの品質を信頼できないような状況下で"
"便利な機能です。\n"
"\n"
"そのため、 'Params::Util' はパラメータとデータが外部から渡されるようなコード"
"の場合、API の冒頭で使用しておくことがほとんどです。\n"
"\n"
"'Params::Util' で提供される関数は、最も厳密な既知の修正マナーで実施され、それ"
"らのルールはできるかぎり大まかなドキュメント化が為され、動作ができるだけ明確"
"になるように作られています。また厳しいテストにより不自然なデータや明らかに不"
"正なデータで混乱を来たさないような作りになっています。\n"
"\n"
"使用する際は単純に、使用したい関数を提供するモジュールをパラメータとして指定"
"して読み込むだけです (SYNOPSIS をお読みください) 。\n"
"\n"
"なお、メンテナンス性を高める目的から、 'Params::Util' は既定では何もエクス"
"ポートしていません。\n"
"\n"
"エクスポートしたい関数は明示的に指定するか、もしくは ':ALL' を指定してすべて"
"のものをエクスポートすることもできます (特定の関数を利用するにあたっては、こ"
"れはお勧めの方法ではありません。今後の追加により 'Param::Util' がクラッシュす"
"る可能性があるためです) 。"

#. tumbleweed/perl-Params-Validate/summary
#. leap/perl-Params-Validate/summary
msgid "Validate method/function parameters"
msgstr "メソッド／関数のパラメータを確認する仕組み"

#. tumbleweed/perl-Params-Validate/description
#. leap/perl-Params-Validate/description
msgid ""
"The Params::Validate module allows you to validate method or function call "
"parameters to an arbitrary level of specificity. At the simplest level, it "
"is capable of validating the required parameters were given and that no "
"unspecified additional parameters were passed in.\n"
"\n"
"It is also capable of determining that a parameter is of a specific type, "
"that it is an object of a certain class hierarchy, that it possesses certain "
"methods, or applying validation callbacks to arguments."
msgstr ""
"Params::Validate モジュールは、任意のレベルで特性を設定できる、メソッドおよび"
"関数の呼び出しパラメータ検証機能を提供します。もっともシンプルなレベルでは、"
"必要なパラメータが与えられているかどうかを検証し、不正な追加パラメータが設定"
"されていないかどうかを確認することができます。\n"
"\n"
"また、パラメータが正しい型であるかどうかを確認することもできます。たとえばそ"
"れは特定のクラス階層であるかどうかや、特定のメソッドを保有しているかどうかを"
"確認できるほか、検証コールバックをパラメータに対して適用することもできます。"

#. tumbleweed/perl-Parse-RecDescent/summary
#. tumbleweed/perl-Parse-RecDescent/description
#. leap/perl-Parse-RecDescent/summary
#. leap/perl-Parse-RecDescent/description
msgid "Generate Recursive-Descent Parsers"
msgstr "再帰降下型パーサーの生成"

#. tumbleweed/perl-Parse-Yapp/summary
#. leap/perl-Parse-Yapp/summary
msgid "Perl extension for generating and using LALR parsers"
msgstr "LALR パーサを生成して使用するための Perl 拡張"

#. tumbleweed/perl-Parse-Yapp/description
#. leap/perl-Parse-Yapp/description
msgid ""
"Parse::Yapp (Yet Another Perl Parser compiler) is a collection of modules "
"that let you generate and use yacc like thread safe (reentrant) parsers with "
"perl object oriented interface."
msgstr ""
"Parse::Yapp (Yet Another Perl Parser compiler) は、 Perl のオブジェクト指向イ"
"ンターフェイスを 持つ yacc に似たスレッドセーフ (再入可能) なパーサを生成し使"
"用することができる、 モジュール集です。"

#. tumbleweed/perl-PerlIO-eol/summary
#. leap/perl-PerlIO-eol/summary
msgid "PerlIO layer for normalizing line endings"
msgstr "行編集の標準化のための PerlIO レイヤ"

#. tumbleweed/perl-PerlIO-eol/description
#. leap/perl-PerlIO-eol/description
msgid ""
"This layer normalizes any of \"CR\", \"LF\", \"CRLF\" and \"Native\" into "
"the designated line ending.  It works for both input and output handles."
msgstr ""
"このレイヤは、 \"CR\", \"LF\", \"CRLF\", \"ネイティブ\" の各改行を標準化し、"
"正しい行編集を行なうことを目的としています。入出力ハンドルの両方に対応してい"
"ます。"

#. tumbleweed/perl-PerlIO-locale/summary
#. leap/perl-PerlIO-locale/summary
msgid "PerlIO layer to use the encoding of the current locale"
msgstr "現在のロケールのエンコード方法を使用するための PerlIO レイヤ"

#. tumbleweed/perl-PerlIO-locale/description
#. leap/perl-PerlIO-locale/description
msgid ""
"This is mostly a per-filehandle version of the 'open' pragma, when used "
"under the form\n"
"\n"
"    use open ':locale';\n"
"\n"
"The encoding for the opened file will be set to the encoding corresponding "
"to the locale currently in effect, if perl can guess it."
msgstr ""
"これは 'open' プラグマのファイルハンドル別のバージョンで、下記のような形式で利用することができます:\n"
"\n"
"    use open ':locale';\n"
"\n"
"開いたファイルのエンコーディングは、 Perl 側で推測可能な場合、現在のロケールに合わせて設定されます。"

#. tumbleweed/perl-PerlIO-utf8_strict/summary
#. leap/perl-PerlIO-utf8_strict/summary
msgid "Fast and correct UTF-8 IO"
msgstr "高速で正しい UTF-8 IO"

#. tumbleweed/perl-PerlIO-utf8_strict/description
#. leap/perl-PerlIO-utf8_strict/description
msgid ""
"This module provides a fast and correct UTF-8 PerlIO layer. Unlike perl's "
"default ':utf8' layer it checks the input for correctness."
msgstr ""
"このモジュールは、高速で正しい UTF-8 の PerlIO レイヤを提供します。 Perl の既定値である ':uf8' "
"レイヤとは異なり、入力に対するチェックを実施します。"

#. tumbleweed/perl-Pod-HtmlPsPdf/summary
#. leap/perl-Pod-HtmlPsPdf/summary
msgid "Perl module Pod::HtmlPsPdf"
msgstr "Perl モジュール Pod::HtmlPsPdf"

#. tumbleweed/perl-Pod-HtmlPsPdf/description
#. leap/perl-Pod-HtmlPsPdf/description
msgid "Documentation projects builder in HTML, PS and PDF formats."
msgstr ""
"HTML, PS, PDF フォーマットに対応するドキュメンテーションプロジェクトビルダー"
"です。"

#. tumbleweed/perl-Prima/summary
#. leap/perl-Prima/summary
msgid "Perl Graphic Toolkit"
msgstr "Perl グラフィックツールキット"

#. tumbleweed/perl-Prima/description
#. leap/perl-Prima/description
msgid ""
"The toolkit is combined from two basic set of classes - core and external. "
"The core classes are coded in C and form a base line for every Prima object "
"written in perl. The usage of C is possible together with the toolkit; "
"however, its full power is revealed in the perl domain. The external classes "
"present easily expandable set of widgets, written completely in perl and "
"communicating with the system using Prima library calls."
msgstr ""
"このツールキットは、 core と external と呼ばれる 2 種類のクラスを組み合わせたものです。 core クラスは C "
"言語でコーディングされ、 Perl 内で記述される各 Prima オブジェクトに対して、ベースラインを提供します。 C "
"言語の使用範囲はツールキットに合わせられていますが、 Perl 領域からでもすべての力を生かすことができるようになっています。 external "
"クラスはウイジェットに対する拡張の容易さを示すもので、 Perl のみで作られていて Prima ライブラリコールを経由して通信を行ないます。"

#. tumbleweed/perl-Proc-ProcessTable/summary
#. leap/perl-Proc-ProcessTable/summary
msgid "Perl extension to access the unix process table"
msgstr "Unix プロセステーブルにアクセスするための Perl 拡張"

#. tumbleweed/perl-Proc-ProcessTable/description
#. leap/perl-Proc-ProcessTable/description
msgid "Perl interface to the unix process table."
msgstr "Unix プロセステーブルに対する Perl インターフェイスです。"

#. tumbleweed/perl-Quantum-Superpositions/summary
#. leap/perl-Quantum-Superpositions/summary
msgid "Qm-like superpositions for Perl"
msgstr "Perl 向けの Qm 風重ね合わせ"

#. tumbleweed/perl-Quantum-Superpositions/description
#. leap/perl-Quantum-Superpositions/description
msgid ""
"The Quantum::Superpositions module provides a new scalar data structure: the "
"superposition. In a metaphor drawn from quantum mechanics, superpositions "
"store a collection of values by overlaying them in parallel superimposed "
"states within a single scalar variable."
msgstr ""
"Quantum::Superpositions モジュールは、\"重ね合わせ\" という新しいスカラーデー"
"タ構造を 提供します。これは量子力学で作られた隠喩で、 重ね合わせとは単一のス"
"カラー値内で同時に重ね合わせられた状態が保存されている ことを指します。"

#. tumbleweed/perl-RPM2/summary
#. leap/perl-RPM2/summary
#| msgid "The RPM Package Manager"
msgid "Perl bindings for the RPM Package Manager API"
msgstr "RPM パッケージマネージャ API 向け Perl バインディング"

#. tumbleweed/perl-RPM2/description
#. leap/perl-RPM2/description
msgid ""
"The RPM2 module provides an object-oriented interface to querying both the "
"installed RPM database as well as files on the filesystem."
msgstr ""
"RPM2 モジュールは、インストールされている RPM "
"データベースや、ファイルシステム内のファイルを問い合わせることができる、オブジェクト志向のインターフェイスを提供します。"

#. tumbleweed/perl-Readonly-XS/summary
#. leap/perl-Readonly-XS/summary
msgid ""
"Companion module for Readonly.pm, to speed up read-only scalar variables"
msgstr "読み込み専用のスカラー値を高速化するための、 Readonly.pm に対するコンパニオンモジュール"

#. tumbleweed/perl-Readonly-XS/description
#. leap/perl-Readonly-XS/description
msgid ""
"This is a companion module to Readonly.pm.  You do not use Readonly::XS "
"directly.  Instead, once it is installed, Readonly.pm will detect this and "
"will use it for creating read-only scalars.  This results in a significant "
"speed improvement.  This does not speed up read-only arrays or hashes."
msgstr ""
"これは Readonly.pm に対するコンパニオンモジュールです。なお、 Readonly::XS は直接使用しないでください。その代わり、"
"このモジュールをインストールすると Readonly.pm 側でそれを自動的に検出し、読み込み専用のスカラー値を作成する際に、このモジュールを使用するよう"
"になります。これにより、大きく性能を改善することができます。なお、読み込み専用の配列やハッシュに対しては動作しません。"

#. tumbleweed/perl-Regexp-Shellish/summary
#. leap/perl-Regexp-Shellish/summary
msgid "Shell-like regular expressions"
msgstr "シェルのような正規表現"

#. tumbleweed/perl-Regexp-Shellish/description
#. leap/perl-Regexp-Shellish/description
msgid ""
"Provides shell-like regular expressions.  The wildcards provided are ?,\n"
"* and **, where ** is like * but matches /.  See compile_shellish for "
"details."
msgstr ""
"シェルで使用されるような正規表現の機能を提供します。ワイルドカードとして使用できる文字としては、 ?, *, ** があります。なお、 ** は * "
"と同じような動作をしますが、 / に対してもマッチします。詳しくは compile_shellish をお読みください。"

#. tumbleweed/perl-SDL/summary
#. leap/perl-SDL/summary
msgid "Glue between Perl and SDL"
msgstr "Perl と SDL の間を結ぶグルー"

#. tumbleweed/perl-SDL/description
#. leap/perl-SDL/description
msgid ""
"SDL Perl are a set of bindings to the Simple DirectMedia Layer (SDL).\n"
"\n"
"Simple DirectMedia Layer is a cross-platform multimedia library designed to "
"provide low level access to audio, keyboard, mouse, joystick, 3D hardware "
"via OpenGL, and 2D video framebuffer. It is used by MPEG playback software, "
"emulators, and many popular games, including the award winning Linux port of "
"\"Civilization: Call To Power.\""
msgstr ""
"SDL Perl は Simple DirectMedia Layer (SDL) に対するバインディング集です。\n"
"\n"
"Simple DirectMedia Layer はプラットフォームに依存しないライブラリで、オーディ"
"オやキーボード、マウスやジョイスティック、 OpenGL を介した 3D ハードウエアや"
"2D ビデオのフレームバッファに低レベルなアクセスを行ないます。 MPEG 再生ソフト"
"ウエアやエミュレータ、多くの有名なゲーム (\"Civilization: Call To Power.\" な"
"ど、有名なゲームも含まれます) で使用されます。"

#. tumbleweed/perl-SGML-Parser-OpenSP/summary
#. leap/perl-SGML-Parser-OpenSP/summary
msgid "Perl interface to the OpenSP SGML and XML parser"
msgstr "OpenSP SGML および XML パーサーに対する Perl インターフェイス"

#. tumbleweed/perl-SGML-Parser-OpenSP/description
#. leap/perl-SGML-Parser-OpenSP/description
msgid ""
"SGML::Parser::OpenSP provides a native Perl interface, written in C++ and "
"XS, to the OpenSP SGML and XML parser.\n"
"\n"
" Authors:\tBjoern Hoehrmann, <bjoern@hoehrmann.de>"
msgstr ""
"SGML::Parser::OpenSP は OpenSP SGML および XML パーサに対するネイティブ Perl インターフェイスで、 C++ "
"言語と XS で作られています。\n"
"\n"
" 作者:\tBjoern Hoehrmann, <bjoern@hoehrmann.de>"

#. tumbleweed/perl-SGMLS/summary
#. leap/perl-SGMLS/summary
msgid "SGML/XML Parsers"
msgstr "SGML/XML パーサー"

#. tumbleweed/perl-SGMLS/description
#. leap/perl-SGMLS/description
msgid ""
"SGMLSpm is a Perl script that reads ESIS output (from parsers like SP) and "
"offers an event-based interface to the parser. As long as the parser can "
"parse XML this also works for XML."
msgstr ""
"SGMLSpm は、 ESIS の出力 (SP のようなパーサから作成したもの) を読み取り、パー"
"サに対するイベントベースのインターフェイスを提供します。パーサが XML を処理で"
"きる限り、このモジュールは XML で動作します。"

#. tumbleweed/perl-SVN-Simple/summary
#. leap/perl-SVN-Simple/summary
msgid "A simple interface to subversion's editor interface"
msgstr ""
"subversion のエディタインターフェイスに対するシンプルなインターフェイス"

#. tumbleweed/perl-SVN-Simple/description
#. leap/perl-SVN-Simple/description
msgid ""
"SVN::Simple::Edit wraps the subversion delta editor with a perl friendly "
"interface and then you could easily drive it for describing changes to a "
"tree. A common usage is to wrap the commit editor, so you could make commits "
"to a subversion repository easily."
msgstr ""
"SVN::Simple::Edit は subversion の差分エディタに対するラッパーで、 Perl を使"
"用したわかりやすいインターフェイスと、それに伴ってツリー上の変更点の説明を簡"
"単に扱うことができるようにするものです。一般的な使い方としてはコミットエディ"
"タに対するラッパーで、 subversion リポジトリに対するコミットを簡単に行なうこ"
"とができます。"

#. tumbleweed/perl-Scalar-List-Utils/summary
#. tumbleweed/perl-Scalar-List-Utils/description
#. leap/perl-Scalar-List-Utils/summary
#. leap/perl-Scalar-List-Utils/description
msgid "Common Scalar and List utility subroutines"
msgstr "汎用スカラー／リストユーティリティサブルーチン集"

#. tumbleweed/perl-Scalar-String/summary
#. leap/perl-Scalar-String/summary
msgid "String aspects of scalars"
msgstr "スカラー値の文字列化"

#. tumbleweed/perl-Scalar-String/description
#. leap/perl-Scalar-String/description
msgid ""
"This module is about the string part of plain Perl scalars. A scalar has a "
"string value, which is notionally a sequence of Unicode codepoints, but may "
"be internally encoded in either ISO-8859-1 or UTF-8. In places, and more so "
"in older versions of Perl, the internal encoding shows through. To fully "
"understand Perl strings it is necessary to understand these implementation "
"details.\n"
"\n"
"This module provides functions to classify a string by encoding and to "
"encode a string in a desired way.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""
"このモジュールは Perl のスカラー値の文字列部分を扱うためのものです。スカラー値には文字列値が設定されていますが、これは概念上、 ISO-8859-"
"1 もしくは UTF-8 で内部的にエンコードされた Unicode コードポイントの並びとして解釈することができます。実際のところ、古いバージョンの "
"Perl では、内部エンコーディングがそのようになっています。 Perl の文字列について詳しく知るには、これらの実装に関する詳細を知る必要があります。"
"\n"
"\n"
"このモジュールは、エンコーディングで文字列を分類したり、必要な方法で文字列をエンコードするための関数を提供しています。\n"
"\n"
"なお、このモジュールは XS で実装されていますが、 XS を処理できないシステム向けに純粋 Perl 版も用意されています。"

#. tumbleweed/perl-Scope-Upper/summary
#. leap/perl-Scope-Upper/summary
msgid "Act on upper scopes"
msgstr "上位スコープでの処理"

#. tumbleweed/perl-Scope-Upper/description
#. leap/perl-Scope-Upper/description
msgid ""
"This module lets you defer actions _at run-time_ that will take place when "
"the control flow returns into an upper scope. Currently, you can:\n"
"\n"
"  * hook an upper scope end with reap ;\n"
"\n"
"  * localize variables, array/hash values or deletions of elements in higher "
"contexts with respectively localize, localize_elem and localize_delete ;\n"
"\n"
"  * return values immediately to an upper level with unwind, yield and "
"leave ;\n"
"\n"
"  * gather information about an upper context with want_at and "
"context_info ;\n"
"\n"
"  * execute a subroutine in the setting of an upper subroutine stack frame "
"with uplevel ;\n"
"\n"
"  * uniquely identify contexts with uid and validate_uid."
msgstr ""
"このモジュールは、上位のスコープに制御が返る際に実行すべきコードを、実行時に定義することのできるモジュールです。現時点では、下記のような機能が用意されてい"
"ます:\n"
"\n"
"  * reap による上位スコープに対するフック;\n"
"\n"
"  * localize_elem, localize_delete "
"による変数、配列、ハッシュ値のローカル化、より高いコンテキスト内で関連するローカル化による要素の削除;\n"
"\n"
"  * unwind, yield, leave による上位レベルへの即時返却;\n"
"\n"
"  * want_at and context_info による上位コンテキストに関する情報の収集;\n"
"\n"
"  * uplevel による上位サブルーチンのスタックフレームに設定するサブルーチンの実行;\n"
"\n"
"  * uid, validate_uid による識別子の設定"

#. tumbleweed/perl-Set-Crontab/summary
#. leap/perl-Set-Crontab/summary
msgid "Expand crontab(5)-style integer lists"
msgstr "crontab(5) 形式の整数リストの展開"

#. tumbleweed/perl-Set-Crontab/description
#. leap/perl-Set-Crontab/description
msgid ""
"Set::Crontab parses crontab-style lists of integers and defines some utility "
"functions to make it easier to deal with them."
msgstr ""
"Set::Crontab は整数の一覧を解釈し、それらを簡単に扱うことができる いくつかの"
"ユーティリティ関数を定義しています。"

#. tumbleweed/perl-Set-Object/summary
#. leap/perl-Set-Object/summary
msgid "Set of Objects and Strings"
msgstr "オブジェクト／文字列集"

#. tumbleweed/perl-Set-Object/description
#. leap/perl-Set-Object/description
msgid ""
"This modules implements a set of objects, that is, an unordered collection "
"of objects without duplication.\n"
"\n"
"The term _objects_ is applied loosely - for the sake of the Set::Object "
"manpage, anything that is a reference is considered an object.\n"
"\n"
"the Set::Object manpage 1.09 and later includes support for inserting "
"scalars (including the empty string, but excluding 'undef') as well as "
"objects. This can be thought of as (and is currently implemented as) a "
"degenerate hash that only has keys and no values. Unlike objects placed into "
"a Set::Object, scalars that are inserted will be flattened into strings, so "
"will lose any magic (eg, tie) or other special bits that they went in with; "
"only strings come out."
msgstr ""
"このモジュールは、オブジェクトのセットを実装するモジュールです。登録されたオ"
"ブジェクトは順序を持たず、重複するオブジェクトは登録できません。\n"
"\n"
"ここで言うところの _オブジェクト_ とは、非常に幅広いものを指しています。Set::"
"Object のマニュアルページにもあるとおり、参照すべてがオブジェクトとしてみなさ"
"れます。\n"
"\n"
"Set::Object のバージョン 1.09 またはそれ以降の場合は、オブジェクトだけでなく"
"スカラー値の挿入にも対応しています (空文字列も挿入できますが、 'undef' は挿入"
"できません) 。これはつまり、キー値だけで値のないハッシュであるものとみなすこ"
"とができます (実際にもそういう実装になっています) 。 Set::Object 内ではオブ"
"ジェクトとは異なり、スカラー値は文字列に変換されて挿入されます。これにより、"
"タイなどのマジック機構を失うほか、特殊ビットの設定なども無視されることになり"
"ます。"

#. tumbleweed/perl-Socket-MsgHdr/summary
#. leap/perl-Socket-MsgHdr/summary
msgid "Perl interface for the sendmsg/recvmsg functions"
msgstr "sendmsg/recvmsg 機能向け Perl インターフェイス"

#. tumbleweed/perl-Socket-MsgHdr/description
#. leap/perl-Socket-MsgHdr/description
msgid ""
"Socket::MsgHdr provides advanced socket messaging operations via sendmsg and "
"recvmsg."
msgstr ""
"Socket::MsgHdr は、 sendmsg/recvmsg を介した高機能なソケットメッセージ操作を "
"提供します。"

#. tumbleweed/perl-Socket6/summary
#. leap/perl-Socket6/summary
msgid "IPv6 Sockets (Perl Module)"
msgstr "IPv6 ソケット (Perl モジュール)"

#. tumbleweed/perl-Socket6/description
#. leap/perl-Socket6/description
msgid ""
"The IPv6 related part of the C socket.h defines and structure manipulators."
msgstr ""
"C 言語の socket.h で提供される定義と構造操作のうち、 IPv6 関連の部分を提供し"
"ます。"

#. tumbleweed/perl-String-Approx/summary
#. leap/perl-String-Approx/summary
msgid "Perl extension for approximate matching (fuzzy matching)"
msgstr "近似 (曖昧) マッチング向け Perl 拡張"

#. tumbleweed/perl-String-Approx/description
#. leap/perl-String-Approx/description
msgid ""
"String::Approx lets you match and substitute strings approximately. With "
"this you can emulate errors: typing errorrs, speling errors, closely related "
"vocabularies (colour color), genetic mutations (GAG ACT), abbreviations "
"(McScot, MacScot).\n"
"\n"
"NOTE: String::Approx suits the task of string matching, not string "
"comparison, and it works for strings, not for text.\n"
"\n"
" Authors:\tJarkko Hietaniemi <jhi@iki.fi>"
msgstr ""
"String::Approx は文字列のマッチングと置換処理を曖昧に行ないます。これにより、下記のようなエラーを疑似することができます: "
"入力ミス、スペルミス、近い表現 (colour と color など), 汎用ミューテーション (GAG と ACT など), 略称 (McScot と "
"MacScot など) 。\n"
"\n"
"注意: String::Approx "
"は文字列のマッチング処理にのみ適切な仕組みであり、比較には適しません。また、テキストではなく文字列に対してのみ動作します。\n"
"\n"
" Authors:Jarkko Hietaniemi <jhi@iki.fi>"

#. tumbleweed/perl-Sub-Identify/summary
#. leap/perl-Sub-Identify/summary
msgid "Retrieve names of code references"
msgstr "コード参照の名前取得"

#. tumbleweed/perl-Sub-Identify/description
#. leap/perl-Sub-Identify/description
msgid ""
"'Sub::Identify' allows you to retrieve the real name of code references.\n"
"\n"
"It provides six functions, all of them taking a code reference.\n"
"\n"
"'sub_name' returns the name of the code reference passed as an argument (or "
"'__ANON__' if it's an anonymous code reference), 'stash_name' returns its "
"package, and 'sub_fullname' returns the concatenation of the two.\n"
"\n"
"'get_code_info' returns a list of two elements, the package and the "
"subroutine name (in case of you want both and are worried by the speed.)\n"
"\n"
"In case of subroutine aliasing, those functions always return the original "
"name.\n"
"\n"
"'get_code_location' returns a two-element list containing the file name and "
"the line number where the subroutine has been defined.\n"
"\n"
"'is_sub_constant' returns a boolean value indicating whether the subroutine "
"is a constant or not."
msgstr ""
"'Sub::Identify' はコード参照の実名を取得することができる仕組みです。\n"
"\n"
"6 種類の関数が用意されていますが、いずれもコード参照を指定します。\n"
"\n"
"'sub_name' はパラメータとして与えたコード参照の名前を返します (匿名のコード参"
"照であった場合は '__ANON__' を返します) 。 'stash_name' はパッケージ名を、 "
"'sub_fullname' はパッケージ名と名前の両方を結合して返します。\n"
"\n"
"'get_code_info' は 2 つの要素のリスト (パッケージとサブルーチンの名前) を返し"
"ます (両方が必要で、速度面での心配をしている場合に使用します) 。\n"
"\n"
"サブルーチンの別名を使用している場合、これらの関数は常に元の名前を返しま"
"す。\n"
"\n"
"'get_code_location' は 2 つの要素のリスト (サブルーチンが定義されているファイ"
"ル名と行番号) を返します。\n"
"\n"
"'is_sub_constant' はサブルーチンが定数であるかどうかを真偽値で返します。"

#. tumbleweed/perl-Sub-Name/summary
msgid "(Re)name a sub"
msgstr "サブルーチンの名前 (変更)"

#. tumbleweed/perl-Sub-Name/description
#. leap/perl-Sub-Name/description
msgid "This module has only one function, which is also exported by default:"
msgstr ""
"このモジュールにはたった 1 つの関数のみが含まれていて、既定で公開されていま"
"す:"

#. tumbleweed/perl-Symbol-Table/summary
#. leap/perl-Symbol-Table/summary
msgid "An easy interface to symbol tables"
msgstr "シンボルテーブルに対する簡易なインターフェイス"

#. tumbleweed/perl-Symbol-Table/description
#. leap/perl-Symbol-Table/description
msgid "Symbol::Table allows the user to manipulate Perl's symbol table"
msgstr "Symbol::Table は、 Perl のシンボルテーブルを簡単に扱うことができます。"

#. tumbleweed/perl-Sys-CPU/summary
#. leap/perl-Sys-CPU/summary
msgid ""
"Perl extension for getting CPU information. Currently only number of CPU[cut]"
msgstr "CPU 情報 (現時点では CPU 数) を取得する Perl 拡張"

#. tumbleweed/perl-Sys-CPU/description
#. leap/perl-Sys-CPU/description
msgid ""
"In responce to a post on perlmonks.org, a module for counting the number of "
"CPU's on a system. Support has now also been added for type of CPU and clock "
"speed. While much of the code is from UNIX::Processors, win32 support has "
"been added (but not tested)."
msgstr ""
"perlmonks.org への回答として作成された、システムの CPU 数を数えるモジュールです。現在は CPU "
"の種類とクロックスピードも取得することができます。コードのうちの多くは UNIX::Processors からのものですが、 win32 "
"サポートも追加されています (ただしテストは行なわれていません) 。"

#. tumbleweed/perl-Sys-LoadAvg/summary
#. leap/perl-Sys-LoadAvg/summary
msgid "Perl extension for accessing system CPU load averages"
msgstr "CPU のロードアベレージにアクセスするための Perl 拡張"

#. tumbleweed/perl-Sys-LoadAvg/description
#. leap/perl-Sys-LoadAvg/description
msgid ""
"Algorithm::Annotate generates a list that is useful for generating output "
"similar to 'cvs annotate'."
msgstr "Algorithm::Annotate は、 'cvs annotate' に似た出力を生成する際に便利なリスト生成モジュールです。"

#. tumbleweed/perl-Sys-Virt/summary
#. leap/perl-Sys-Virt/summary
msgid "Represent and manage a libvirt hypervisor connection"
msgstr "libvirt ハイパーバイザ接続を管理するモジュール"

#. tumbleweed/perl-Sys-Virt/description
#. leap/perl-Sys-Virt/description
msgid ""
"The Sys::Virt module provides a Perl XS binding to the libvirt virtual "
"machine management APIs. This allows machines running within arbitrary "
"virtualization containers to be managed with a consistent API."
msgstr ""
"Sys::Virt モジュールは libvirt 仮想マシン管理 API にバインディングするための Perl XS モジュールです。安定した API "
"を通して、任意の仮想コンテナ内で動作するマシンにアクセスすることができます。"

#. tumbleweed/perl-SystemPerl/summary
#. leap/perl-SystemPerl/summary
msgid "SystemPerl Language Extension to SystemC"
msgstr "SystemC に対する SystemPerl 言語拡張"

#. tumbleweed/perl-SystemPerl/description
#. leap/perl-SystemPerl/description
msgid ""
"SystemPerl is a version of the SystemC language. It is designed to expand "
"text so that needless repetition in the language is minimized. By using the "
"sp_preproc manpage, SystemPerl files can be expanded into C++ files at "
"compile time, or expanded in place to make them valid stand-alone SystemC "
"files.\n"
"\n"
"The concept of SystemPerl is based upon the AUTOS in the the verilog-mode "
"manpage package for Emacs, by the same author."
msgstr ""
"SystemPerl は SystemC 言語の特定バージョンです。テキストを拡張するように設計されていて、言語ごとに作成するような手間を省いています。 "
"sp_preproc を使用することで、 SystemPerl はコンパイル時に C++ 言語を利用して拡張することができるほか、単独の SystemC "
"ファイルとして展開することもできます。\n"
"\n"
"SystemPerl の考え方は、 Emacs 向けの verilog モードパッケージにおける AUTOS (同一の作者) をベースにしています。"

#. tumbleweed/perl-SystemPerl/perl-SystemPerl-devel/summary
#. leap/perl-SystemPerl/perl-SystemPerl-devel/summary
msgid "Development files for perl-SystemPerl"
msgstr "perl-SystemPerl 向け開発用ファイル"

#. tumbleweed/perl-SystemPerl/perl-SystemPerl-devel/description
#. leap/perl-SystemPerl/perl-SystemPerl-devel/description
msgid ""
"The perl-SystemPerl-devel package contains libraries and header files for "
"developing applications that use perl-SystemPerl."
msgstr ""
"perl-SystemPerl-devel パッケージには、 perl-SystemPerl "
"を使用するアプリケーションをコンパイルおよび開発するのに必要な、ヘッダファイルとライブラリが含まれています。"

#. tumbleweed/perl-Task-Weaken/summary
#. leap/perl-Task-Weaken/summary
msgid "Task::Weaken - Ensure that a platform has weaken support"
msgstr ""
"Task::Weaken - プラットフォームが weaken 対応であることを確かめる仕組み"

#. tumbleweed/perl-Task-Weaken/description
#. leap/perl-Task-Weaken/description
msgid ""
"One recurring problem in modules that use Scalar::Util's \"weaken\" function "
"is that it is not present in the pure-perl variant.\n"
"\n"
"While this isn't necessarily always a problem in a straight CPAN-based Perl "
"environment, some operating system distributions only include the pure-Perl "
"versions, don't include the XS version, and so weaken is then \"missing\" "
"from the platform, despite passing a dependency on Scalar::Util successfully."
msgstr ""
"モジュールにおいて頻発する問題として、 Scalar::Util の \"weaken\" 関数が、特"
"定の Perl 環境に存在するかどうか、というものがあります。\n"
"\n"
"これは CPAN ベースの Perl では発生しない問題ですが、オペレーティングシステム"
"によっては純粋な Perl 機能しか搭載しておらず、 XS バージョンを含まない場合が"
"あります。そのため、 weaken が存在しないプラットフォームが存在し、それにも関"
"わらず Scalar::Util の依存関係をパスしてしまう場合があるためです。"

#. tumbleweed/perl-Template-Toolkit/summary
#. tumbleweed/perl-Template-Toolkit/description
#. leap/perl-Template-Toolkit/summary
#. leap/perl-Template-Toolkit/description
msgid "Template Processing System"
msgstr "テンプレート処理システム"

#. tumbleweed/perl-Term-ReadKey/summary
#. leap/perl-Term-ReadKey/summary
msgid "Module for Simple Terminal Control"
msgstr "シンプルな端末コントロールモジュール"

#. tumbleweed/perl-Term-ReadKey/description
#. leap/perl-Term-ReadKey/description
msgid ""
"This module, ReadKey, provides ioctl control for terminals and Win32 "
"consoles so the input modes can be changed (thus allowing reads of a single "
"character at a time), and also provides non-blocking reads of stdin, as well "
"as several other terminal related features, including retrieval/modification "
"of the screen size, and retrieval/modification of the control characters."
msgstr ""
"ReadKey は端末や Win32 コンソール向けの ioctl コントロールを提供し、 入力モー"
"ドを変更することができる (そのため、 1 回で 1 個の文字を読み取ることができま"
"す) ほか、 標準入力に対する非ブロックモードの読み取りやその他の端末関連の機能"
"を提供します。 たとえば画面サイズの取得や変更、 コントロール文字の取得や変更"
"などがあります。"

#. tumbleweed/perl-Term-ReadPassword/summary
#. leap/perl-Term-ReadPassword/summary
msgid "Term::ReadPassword - Asking the user for a password"
msgstr "Term::ReadPassword - ユーザに対してパスワードを尋ねるモジュール"

#. tumbleweed/perl-Term-ReadPassword/description
#. leap/perl-Term-ReadPassword/description
msgid ""
"This module lets you ask the user for a password in the traditional way, "
"from the keyboard, without echoing.\n"
"\n"
"This is not intended for use over the web; user authentication over the web "
"is another matter entirely. Also, this module should generally be used in "
"conjunction with Perl's crypt() function, sold separately."
msgstr ""
"このモジュールは、ユーザに対して伝統的な方法、つまりキーボードからの入力を受"
"け付けてその結果を表示しない方式で、パスワードを尋ねることを行ないます。\n"
"\n"
"これは Web 上で使用することは想定していません; Web でのユーザ認証には全く異な"
"る別の問題があります。また、このモジュールは一般に、別途提供されている Perl "
"の crypt() 関数と共に使用するべきものです。"

#. tumbleweed/perl-TermReadLine-Gnu/summary
#. leap/perl-TermReadLine-Gnu/summary
msgid "Perl extension for the GNU Readline/History Library"
msgstr "GNU Readline/History ライブラリ向け Perl 拡張"

#. tumbleweed/perl-TermReadLine-Gnu/description
#. leap/perl-TermReadLine-Gnu/description
msgid ""
"This is an implementation of Term::ReadLine using the GNU Readline/History "
"Library. This package also has the interface with the almost all functions "
"and variables which are documented in the GNU Readline/History Library "
"Manual."
msgstr ""
"これは GNU Readline/History ライブラリを使用する Term::ReadLine の実装です。 "
"また、このパッケージには GNU Readline/History のマニュアルに書かれている ほぼ"
"全ての関数や変数に対するインターフェイスが備わっています。"

#. tumbleweed/perl-Test-LeakTrace/summary
#. leap/perl-Test-LeakTrace/summary
msgid "Traces memory leaks"
msgstr "メモリリークの追跡"

#. tumbleweed/perl-Test-LeakTrace/description
#. leap/perl-Test-LeakTrace/description
msgid ""
"'Test::LeakTrace' provides several functions that trace memory leaks. This "
"module scans arenas, the memory allocation system, so it can detect any "
"leaked SVs in given blocks.\n"
"\n"
"*Leaked SVs* are SVs which are not released after the end of the scope they "
"have been created. These SVs include global variables and internal caches. "
"For example, if you call a method in a tracing block, perl might prepare a "
"cache for the method. Thus, to trace true leaks, 'no_leaks_ok()' and "
"'leaks_cmp_ok()' executes a block more than once."
msgstr ""
"'Test::LeakTrace' はメモリリークを追跡するためのいくつかの関数を提供します。"
"このモジュールは、メモリ割り当てシステムが割り当てた領域をチェックし、指定さ"
"れたブロックに対してリークが発生しているかどうかを確認します。\n"
"\n"
"*Leaked SV* は、そのメモリ領域が作成されたスコープが終了した時点で、それが解"
"放されていないことを示しています。これらの SV には、グローバル変数や内部"
"キャッシュなども含まれます。たとえばトレーシングブロック内でメソッドを呼び出"
"すことで、 Perl はメソッドに対するキャッシュを作成します。そのため、本当に"
"リークしているかどうかを確かめるため、 'no_leaks_ok()' と 'leaks_cmp_ok()' は"
"ブロックを 1 回以上実行します。"

#. tumbleweed/perl-Test-Taint/summary
#. leap/perl-Test-Taint/summary
msgid "Tools to test taintedness"
msgstr "汚染 (tainted) 状況をテストするツール"

#. tumbleweed/perl-Test-Taint/description
#. leap/perl-Test-Taint/description
msgid ""
"Tainted data is data that comes from an unsafe source, such as the command "
"line, or, in the case of web apps, any GET or POST transactions. Read the "
"the perlsec manpage man page for details on why tainted data is bad, and how "
"to untaint the data.\n"
"\n"
"When you're writing unit tests for code that deals with tainted data, you'll "
"want to have a way to provide tainted data for your routines to handle, and "
"easy ways to check and report on the taintedness of your data, in standard "
"the Test::More manpage style."
msgstr ""
"汚染された (tainted) データとは信頼のできない発信源からのデータを意味する用語で、たとえばコマンドラインや Web アプリにおける GET "
"または POST のデータを指します。なぜ汚染されたデータが問題になるのか、およびデータの汚染除去方法について、詳しくは perlsec "
"マニュアルページをお読みください。\n"
"\n"
"このような汚染されたデータを扱うコードを作成している場合、単体テストではその動作を確認するため、汚染されたデータを用意する必要がありますが、"
"このモジュールではそのような汚染データを Test::More のような標準の形式で提供してチェックし、レポートを生成する機能を提供しています。"

#. tumbleweed/perl-Test-YAML-Valid/summary
#. leap/perl-Test-YAML-Valid/summary
msgid "Test for valid YAML"
msgstr "YAML の正当性のテスト"

#. tumbleweed/perl-Test-YAML-Valid/description
#. leap/perl-Test-YAML-Valid/description
msgid "This module lets you easily test the validity of YAML."
msgstr "このモジュールを利用することで、 YAML の正当性を簡単にテストすることができるようになります。"

#. tumbleweed/perl-Text-Aspell/summary
#. leap/perl-Text-Aspell/summary
msgid "Perl interface to the GNU Aspell library"
msgstr "GNU Aspell ライブラリに対する Perl インターフェイス"

#. tumbleweed/perl-Text-Aspell/description
#. leap/perl-Text-Aspell/description
msgid ""
"This module provides a Perl interface to the GNU Aspell library. This module "
"is to meet the need of looking up many words, one at a time, in a single "
"session, such as spell-checking a document in memory.\n"
"\n"
"The GNU C interface is described at:\n"
"\n"
"    http://aspell.net/man-html/Through-the-C-API.html#Through-the-C-API\n"
"\n"
"It's worth looking over the way config and speller (manager) objects are "
"created when using the Aspell C API as some of that is hidden in the Text::"
"Aspell module.\n"
"\n"
"For example, with Text::Aspell you do not have to explicitly create a "
"speller object. The speller (manager) object is created automatically the "
"first time you call suggest() or check().\n"
"\n"
"Note also that once the speller object is created some (all?) config options "
"cannot be changed. For example, setting configuration options such as \"lang"
"\" are what determine what dictionary Aspell will use. Once the speller "
"object is created that dictionary will be used. I.e. setting \"lang\" after "
"the speller object is created will have no effect."
msgstr ""
"このモジュールは GNU Aspell ライブラリに対する Perl のインターフェイスです。このモジュールは、単一のセッション内で多数の単語を 1 "
"つずつ検索したい用途に適合するように作られていて、たとえばメモり内にある文書のスペルチェックなどに使用することができます。\n"
"\n"
"GNU C インターフェイスについて、詳しくは下記をお読みください:\n"
"\n"
"    http://aspell.net/man-html/Through-the-C-API.html#Through-the-C-API\n"
"\n"
"設定方法や speller (管理) オブジェクトの作成について、詳しくは上記をお読みください。また、 Aspell C API を使用する際の作業は、 "
"Text::Aspell モジュール内に隠蔽される仕組みになっています。\n"
"\n"
"たとえば Text::Aspell では、 speller オブジェクトを明示的に作成する必要はありません。 speller (管理) オブジェクトは、 "
"suggest() や check() を初めて実行した際に自動的に作成されます。\n"
"\n"
"なお、いったん speller オブジェクトが作成されてしまうと、設定項目によっては変更できないものがあることにご注意ください。たとえば、 \""
"lang\" (Aspell が使用する辞書の設定) などのオプションなどがそれにあたります。 speller オブジェクトがいったん作成されてしまうと、"
" \"lang\" オプションの設定を変更しても、効果がありません。"

#. tumbleweed/perl-Text-BibTeX/summary
#. leap/perl-Text-BibTeX/summary
msgid "Interface to read and parse BibTeX files"
msgstr "BibTeX ファイルの読み込みと処理のインターフェイス"

#. tumbleweed/perl-Text-BibTeX/description
#. leap/perl-Text-BibTeX/description
msgid ""
"The 'Text::BibTeX' module serves mainly as a high-level introduction to the "
"'Text::BibTeX' library, for both code and documentation purposes. The code "
"loads the two fundamental modules for processing BibTeX files ('Text::"
"BibTeX::File' and 'Text::BibTeX::Entry'), and this documentation gives a "
"broad overview of the whole library that isn't available in the "
"documentation for the individual modules that comprise it.\n"
"\n"
"In addition, the 'Text::BibTeX' module provides a number of miscellaneous "
"functions that are useful in processing BibTeX data (especially the kind "
"that comes from bibliographies as defined by BibTeX 0.99, rather than "
"generic database files). These functions don't generally fit in the object-"
"oriented class hierarchy centred around the 'Text::BibTeX::Entry' class, "
"mainly because they are specific to bibliographic data and operate on "
"generic strings (rather than being tied to a particular BibTeX entry). These "
"are also documented here, in the \"MISCELLANEOUS FUNCTIONS\" manpage.\n"
"\n"
"Note that every module described here begins with the 'Text::BibTeX' prefix. "
"For brevity, I have dropped this prefix from most class and module names in "
"the rest of this manual page (and in most of the other manual pages in the "
"library)."
msgstr ""
"'Text::BibTeX' モジュールは主に、コード向けおよびドキュメンテーション向けのライブラリである 'Text::BigTeX' "
"ライブラリに対して、高レベルな導入部として動作するものです。コードは BibTeX ファイルを処理するために 2 種類の基本モジュール "
"('Text::BibTeX::File' および 'Text::BibTeX::Entry') を読み込む仕組みで、このドキュメンテーションでは、含まれ"
"る個別のモジュールに対するドキュメンテーションには掲載されていないような、広範囲の概要を説明しています。\n"
"\n"
"これに加えて、 'Text::BibTeX' モジュールは、 BibTeX データを処理する際に便利な多数の様々な関数 "
"(汎用データベースファイルではなく、特に BibTeX 0.99 で定義されている文献情報からのもの)  "
"も提供しています。これらの関数は、主に文献データ固有のものであったり、 (特定の BibTeX 項目に結びつくものではなく) "
"汎用の文字列に対して動作するものであることから、  'Text::BigTeX::Entry' "
"クラスに代表されるようなオブジェクト志向のクラス構造にはうまく当てはまりません。これらも本ドキュメンテーションで記述しています。詳しくは \""
"MISCELLANEOUS FUNCTIONS\" をお読みください。\n"
"\n"
"なお、ここで説明している各モジュールは 'Text::BibTeX' の接頭辞で始まります。モジュール名を簡潔にする理由から、"
"多くのクラスやモジュール名の説明 (およびライブラリ内のマニュアルページ) ではこの接頭辞は省略してありますので、ご注意ください。"

#. tumbleweed/perl-Text-CSV_XS/summary
#. leap/perl-Text-CSV_XS/summary
msgid "comma-separated values manipulation routines"
msgstr "カンマ区切りの値を操作するルーチン"

#. tumbleweed/perl-Text-CSV_XS/description
#. leap/perl-Text-CSV_XS/description
msgid ""
"Text::CSV_XS provides facilities for the composition and decomposition of "
"comma-separated values. An instance of the Text::CSV_XS class will combine "
"fields into a CSV string and parse a CSV string into fields.\n"
"\n"
"The module accepts either strings or files as input and support the use of "
"user-specified characters for delimiters, separators, and escapes."
msgstr ""
"Text::CSV_XS は、カンマ区切りの値を組み立てたり分解したりすることができま"
"す。 Text:CSV_XS のインスタンスは、値を組み合わせて CSV 文字列を作成したり、 "
"CSV 文字列を値に変換したりすることができます。\n"
"\n"
"このモジュールは文字列またはファイルを入力として受け付けるほか、ユーザ指定の"
"区切り文字やセパレータ、エスケープなどを使用することができます。"

#. tumbleweed/perl-Text-CharWidth/summary
#. tumbleweed/perl-Text-CharWidth/description
#. leap/perl-Text-CharWidth/summary
#. leap/perl-Text-CharWidth/description
msgid "Get number of occupied columns of a string on terminal"
msgstr "端末上の文字列幅の取り出し"

#. tumbleweed/perl-Text-DelimMatch/summary
#. leap/perl-Text-DelimMatch/summary
msgid "DelimMatch for Locating Delimited Substrings with Proper Nesting"
msgstr "適切な入れ後処理を行なう区切り文字付きの文字列群を作成する DelimMatch"

#. tumbleweed/perl-Text-DelimMatch/description
#. leap/perl-Text-DelimMatch/description
msgid ""
"DelimMatch is a Perl 5 module that provides functions for locating delimited "
"substrings with proper nesting."
msgstr ""
"DelimMatch は、区切り文字で区切られた文字列群を作成する関数のある Perl 5 モ"
"ジュールです。"

#. tumbleweed/perl-Text-Hunspell/summary
#. leap/perl-Text-Hunspell/summary
msgid "Perl interface to the Hunspell library"
msgstr "Hunspell ライブラリに対する Perl インターフェイス"

#. tumbleweed/perl-Text-Hunspell/description
#. leap/perl-Text-Hunspell/description
msgid ""
"This module provides a Perl interface to the *Hunspell* library. This module "
"is to meet the need of looking up many words, one at a time, in a single "
"session, such as spell-checking a document in memory.\n"
"\n"
"The example code describes the interface on http://hunspell.sf.net"
msgstr ""
"このモジュールは *Hunspell* ライブラリに対する Perl "
"のインターフェイスを提供します。このモジュールは、メモリ内での文書のスペルチェックなど、単一のセッション内で多数の単語を 1 "
"つずつ検索するような要件に適合しています。\n"
"\n"
"インターフェイスに関するサンプルコードは、 http://hunspell.sf.net をご覧ください。"

#. tumbleweed/perl-Text-Iconv/summary
#. leap/perl-Text-Iconv/summary
msgid "Perl interface to iconv() codeset conversion function"
msgstr "iconv() コードセット変換関数に対する Perl インターフェイス"

#. tumbleweed/perl-Text-Iconv/description
#. leap/perl-Text-Iconv/description
msgid ""
"The Text::Iconv module provides a Perl interface to the iconv() function as "
"defined by the Single UNIX Specification.\n"
"\n"
"The convert() method converts the encoding of characters in the input string "
"from the fromcode codeset to the tocode codeset, and returns the result.\n"
"\n"
"Settings of fromcode and tocode and their permitted combinations are "
"implementation-dependent. Valid values are specified in the system "
"documentation; the iconv(1) utility should also provide a -l option that "
"lists all supported codesets."
msgstr ""
"Text::Iconv モジュールは、 Single UNIX Specification で規定された iconv() 関"
"数に対して、この Perl インターフェイスを提供します。\n"
"\n"
"convert() メソッドは入力文字列の文字エンコーディングを、 fromcode のコード"
"セットから tocode のコードセットに変換し、結果を返します。\n"
"\n"
"fromcode と tocode の設定と、設定可能な組み合わせについては、実装に依存した作"
"りになっています。正しい値はシステムのドキュメンテーションをお読みください; "
"iconv(1) ユーティリティでは、 -l オプションで対応するコードセットの一覧を表示"
"することができます。"

#. tumbleweed/perl-Text-Kakasi/summary
#. leap/perl-Text-Kakasi/summary
msgid "Perl binding for KAKASI, the kanji kana simple inverter"
msgstr "漢字かな変換 KAKASI 向け Perl バインディング"

#. tumbleweed/perl-Text-Kakasi/description
#. leap/perl-Text-Kakasi/description
msgid ""
"This module provides libkakasi interface for perl. libkakasi is a part of "
"KAKASI.  KAKASI is the language processing filter to convert Kanji "
"characters to Hiragana, Katakana or Romaji and may be helpful to read "
"Japanese documents.  More information about KAKASI is available at <http://"
"kakasi.namazu.org/>."
msgstr ""
"このモジュールは、 Perl 向けの libkakasi インターフェイスを提供します。 "
"libkakasi は KAKASI の一部です。 KAKASI は漢字をひらがなやカタカナ、ローマ字"
"に 変換し、日本語の文書を読みやすくするためのものです。 KAKASI に対する詳細情"
"報は、 <http://kakasi.namazu.org/> をご覧ください。"

#. tumbleweed/perl-Text-Soundex/summary
#. leap/perl-Text-Soundex/summary
msgid "Implementation of the soundex algorithm"
msgstr "soundex アルゴリズムの実装"

#. tumbleweed/perl-Text-Soundex/description
#. leap/perl-Text-Soundex/description
msgid ""
"Soundex is a phonetic algorithm for indexing names by sound, as pronounced "
"in English. The goal is for names with the same pronunciation to be encoded "
"to the same representation so that they can be matched despite minor "
"differences in spelling. Soundex is the most widely known of all phonetic "
"algorithms and is often used (incorrectly) as a synonym for \"phonetic "
"algorithm\". Improvements to Soundex are the basis for many modern phonetic "
"algorithms. (Wikipedia, 2007)\n"
"\n"
"This module implements the original soundex algorithm developed by Robert "
"Russell and Margaret Odell, patented in 1918 and 1922, as well as a "
"variation called \"American Soundex\" used for US census data, and current "
"maintained by the National Archives and Records Administration (NARA).\n"
"\n"
"The soundex algorithm may be recognized from Donald Knuth's *The Art of "
"Computer Programming*. The algorithm described by Knuth is the NARA "
"algorithm.\n"
"\n"
"The value returned for strings which have no soundex encoding is defined "
"using '$Text::Soundex::nocode'. The default value is 'undef', however values "
"such as ''Z000'' are commonly used alternatives.\n"
"\n"
"For backward compatibility with older versions of this module the '$Text::"
"Soundex::nocode' is exported into the caller's namespace as "
"'$soundex_nocode'.\n"
"\n"
"In scalar context, 'soundex()' returns the soundex code of its first "
"argument. In list context, a list is returned in which each element is the "
"soundex code for the corresponding argument passed to 'soundex()'. For "
"example, the following code assigns @codes the value '('M200', 'S320')':\n"
"\n"
"   @codes = soundex qw(Mike Stok);\n"
"\n"
"To use 'Text::Soundex' to generate codes that can be used to search one of "
"the publically available US Censuses, a variant of the soundex algorithm "
"must be used:\n"
"\n"
"    use Text::Soundex;     $code = soundex_nara($name);\n"
"\n"
"An example of where these algorithm differ follows:\n"
"\n"
"    use Text::Soundex;     print soundex(\"Ashcraft\"), \"\\n\";       # "
"prints: A226     print soundex_nara(\"Ashcraft\"), \"\\n\";  # prints: A261"
msgstr ""
"Soundex は英語での発音順に名前を並べ替えるアルゴリズムです。このプロジェクトは、同じ発音の単語を同じ表現にエンコードすることで、細かいスペルミスに"
"関わらず検索できるようにすることを目的としています。 Soundex は既知のすべてのアルゴリズムの中でもっともよく知られていて、かつしばしば (誤って)"
" 用いられるアルゴリズム \"phonetic algorithm\" を使用しています。 Soundex に対する改善は、"
"多数のモダンなアルゴリズムに対するベースともなっています (Wikipedia, 2007) 。\n"
"\n"
"このモジュールは、 1918 年および 1922 年に特許となり、 Robert Russell 氏と Margaret Odell "
"氏が開発したオリジナルの soundex アルゴリズムのほか、 US census data で使用され、現在し National Archives "
"and Records Administration (NARA) がメンテナンスしている \"American Soundex\" "
"と呼ばれる派生物を実装しています。\n"
"\n"
"soundex アルゴリズムは Donald Knuth 氏の *The Art of Computer Programming* でも言及されていて、 "
"Knuth 氏は NARA アルゴリズムと表現しています。\n"
"\n"
"soundex エンコーディングを使用していない文字列を指定した場合、それに対する返り値は '$Text::Soundex::nocode' "
"を利用して設定されます。既定値は 'undef' ですが、 ''Z000'' のような値を代替的に用いる場合もあります。\n"
"\n"
"また、このモジュールの旧バージョンと互換性を維持するため、 '$Text::Soundex::nocode' は呼び出し元のネームスペース内に '$"
"soundex_nocode' として公開されます。\n"
"\n"
"スカラーコンテキストでは、 'soundex()' は最初のパラメータの soundex コードを返します。リストコンテキストでは、各要素の "
"soundex コードを 'soundex()' に渡した場合と同様に、リストを返します。たとえば、下記のコードは @codes に '('M200', "
"'S320')' が設定されます:\n"
"\n"
"   @codes = soundex qw(Mike Stok);\n"
"\n"
"'Text::Soundex' を利用して US Censuses が使用する派生アルゴリズムのコードを生成したい場合は、下記のようにします:\n"
"\n"
"    use Text::Soundex;     $code = soundex_nara($name);\n"
"\n"
"アルゴリズムの違いにより、それぞれ下記のように表示されます:\n"
"\n"
"    use Text::Soundex;     print soundex(\"Ashcraft\"), \"\\n"
"\";       # prints: A226     print soundex_nara(\"Ashcraft\"), \"\\n"
"\";  # prints: A261"

#. tumbleweed/perl-Time-modules/summary
#. leap/perl-Time-modules/summary
msgid "Various Perl time modules"
msgstr "様々な Perl 時間モジュール"

#. tumbleweed/perl-Time-modules/description
#. leap/perl-Time-modules/description
msgid "Perl modules providing various time functions."
msgstr "様々な時間関数を提供する Perl モジュールです。"

#. tumbleweed/perl-Tk/summary
#. tumbleweed/perl-Tk/perl-Tk-devel/summary
#. leap/perl-Tk/summary
#. leap/perl-Tk/perl-Tk-devel/summary
msgid "Perl Tk"
msgstr "Perl Tk"

#. tumbleweed/perl-Tk/description
#. tumbleweed/perl-Tk/perl-Tk-devel/description
#. leap/perl-Tk/description
#. leap/perl-Tk/perl-Tk-devel/description
msgid ""
"Perl Tk is an enhancement for Perl. It combines the well structured "
"graphical library Tk with the powerful scripting language Perl."
msgstr ""
"Perl Tk は Perl 向けの拡張です。 パワフルなスクリプト言語である Perl に、 き"
"れいに構造化されたグラフィカルライブラリ Tk を組み込みます。"

#. tumbleweed/perl-TryCatch/summary
msgid "first class try catch semantics for Perl, without source filters."
msgstr "ソースフィルタを使用しない Perl 向け try-catch 機構"

#. tumbleweed/perl-TryCatch/description
msgid ""
"This module aims to provide a nicer syntax and method to catch errors in "
"Perl, similar to what is found in other languages (such as Java, Python or C+"
"+). The standard method of using 'eval {}; if ($@) {}' is often prone to "
"subtle bugs, primarily that its far too easy to stomp on the error in error "
"handlers. And also eval/if isn't the nicest idiom."
msgstr ""
"このモジュールは、他の言語 (Java, Python, C++) にも存在するような、 Perl "
"内でエラーキャッチのためのよりわかりやすい文法を提供するものです。標準で提供される方式は 'eval {}; if ($@) {}' "
"を使用するものでバグを引き起こしやすいものであるため、このモジュールはそのようなエラー処理をわかりやすくするものです。"

#. tumbleweed/perl-Unicode-LineBreak/summary
#. leap/perl-Unicode-LineBreak/summary
msgid "UAX #14 Unicode Line Breaking Algorithm"
msgstr "UAX #14 Unicode 改行アルゴリズム"

#. tumbleweed/perl-Unicode-LineBreak/description
#. leap/perl-Unicode-LineBreak/description
msgid ""
"Unicode::LineBreak performs Line Breaking Algorithm described in Unicode "
"Standard Annex #14 [UAX #14]. East_Asian_Width informative property defined "
"by Annex #11 [UAX #11] will be concerned to determine breaking positions."
msgstr ""
"Unicode::LineBreak は Unicode Standard Annex #14 [UAX #14] "
"で規定されている改行アルゴリズムを実施します。改行を実施する際、 Annex #11 [UAX #11] で定義されている "
"East_Asian_Width 情報プロパティも考慮されます。"

#. tumbleweed/perl-Unicode-Map/summary
#. leap/perl-Unicode-Map/summary
msgid "maps charsets from and to utf16 unicode"
msgstr "utf16 (Unicode) 文字コードセットマッピング処理"

#. tumbleweed/perl-Unicode-Map/description
#. leap/perl-Unicode-Map/description
msgid ""
"This module converts strings from and to 2-byte Unicode UCS2 format. All "
"mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8 encoding. To "
"transform these use Unicode::String.\n"
"\n"
"For historical reasons this module coexists with Unicode::Map8. Please use "
"Unicode::Map8 unless you need to care for two byte character sets, e.g. "
"chinese GB2312. Anyway, if you stick to the basic functionality (see "
"documentation) you can use both modules equivalently.\n"
"\n"
"Practically this module will disappear from earth sooner or later as Unicode "
"mapping support needs somehow to get into perl's core. If you like to work "
"on this field please don't hesitate contacting Gisle Aas!\n"
"\n"
"This module can't deal directly with utf8. Use Unicode::String to convert "
"utf8 to utf16 and vice versa.\n"
"\n"
"Character mapping is according to the data of binary mapfiles in Unicode::"
"Map hierarchy. Binary mapfiles can also be created with this module, "
"enabling you to install own specific character sets. Refer to mkmapfile or "
"file REGISTRY in the Unicode::Map hierarchy."
msgstr ""
"このモジュールは Unicode UCS2 形式の文字列変換を扱うモジュールです。マッピングにあたっては、 UTF8 の 1 バイトエンコードではなく、 "
"UTF16 エンコードを利用した 2 バイトのエンコードを行ないます。\n"
"\n"
"歴史上の経緯から、このモジュールは Unicode::Map8 と共存しています。中国語の GB2312 など、 2 "
"バイトの文字セットを扱う必要がある場合を除いて、 Unicode::Map8 をお使いください。もちろん基本的な機能 "
"(詳しくはドキュメンテーションをお読みください) は、いずれのモジュールでも同じように動作します。\n"
"\n"
"実際のところ、このモジュールは Perl の中枢機能に Unicode "
"マッピングのサポートが加えられることから、早かれ遅かれ消える運命にあります。この領域で何らかの作業を行ないたい場合は、臆することなく Gisle Aas "
"氏にご連絡ください。\n"
"\n"
"また、このモジュールは utf8 を直接扱うことができません。 utf8 から utf16 に変換を行ないたい場合は、 Unicode::String "
"をお使いください。\n"
"\n"
"文字コードのマッピングは Unicode::Map の階層構造内にあるバイナリマップファイルを基礎にしています。バイナリのマップファイルもこのモジュールで"
"作成することができますが、これによって独自の文字コードセットを作成することができます。 Unicode::Map の階層構造について、詳しくは "
"mkmapfile もしくは REGISTRY ファイルをお読みください。"

#. tumbleweed/perl-Unicode-Map8/summary
#. leap/perl-Unicode-Map8/summary
msgid "Mapping table between 8-bit chars and Unicode"
msgstr "8 ビット文字と Unicode のマッピングテーブル"

#. tumbleweed/perl-Unicode-Map8/description
#. leap/perl-Unicode-Map8/description
msgid ""
"The Unicode::Map8 class implements efficient mapping tables between 8-bit "
"character sets and 16-bit character sets like Unicode. The tables are "
"efficient both in terms of space allocated and translation speed. The 16-bit "
"strings are assumed to use network byte order."
msgstr ""
"Unicode::Map8 クラスは、 8 ビットキャラクタセットと Unicode のような 16 ビッ"
"トキャラクタセット の間を効果的にマッピングする機能を実装しています。 この"
"テーブルは割り当てる領域や変換速度の面で便利な形になっています。 なお、 16 "
"ビット文字列はネットワークバイトオーダーであることを前提にしています。"

#. tumbleweed/perl-Unicode-Normalize/summary
#. leap/perl-Unicode-Normalize/summary
msgid "Unicode Normalization Forms"
msgstr "Unicode 正規化フォーム"

#. tumbleweed/perl-Unicode-Normalize/description
#. leap/perl-Unicode-Normalize/description
msgid ""
"Parameters:\n"
"\n"
"'$string' is used as a string under character semantics (see "
"_perlunicode_).\n"
"\n"
"'$code_point' should be an unsigned integer representing a Unicode code "
"point.\n"
"\n"
"Note: Between XSUB and pure Perl, there is an incompatibility about the "
"interpretation of '$code_point' as a decimal number. XSUB converts "
"'$code_point' to an unsigned integer, but pure Perl does not. Do not use a "
"floating point nor a negative sign in '$code_point'."
msgstr ""
"バラメータ:\n"
"\n"
"'$string' は文字セマンティクスで扱われる文字列です (詳しくは _perlunicode_ をお読みください) 。\n"
"\n"
"'$code_point' は Unicode コードポイントを表わす符号無し整数です。\n"
"\n"
"注意: XSUB と純粋 Perl の間では、 '$code_point' を 10 進数の数値として解釈する際の非互換性が存在しています。 XSUB "
"では '$code_point' を符号無し整数に変換しますが、純粋 Perl ではそれを行ないません。 '$code_point' "
"には小数点、もしくは負の数値を入れてはなりません。"

#. tumbleweed/perl-Unicode-String/summary
#| msgid "String of Unicode characters (UCS2/UTF16)"
msgid "String of Unicode characters (UTF-16BE)"
msgstr "Unicode 文字による文字列 (UTF-16BE)"

#. tumbleweed/perl-Unicode-String/description
msgid ""
"A 'Unicode::String' object represents a sequence of Unicode characters. "
"Methods are provided to convert between various external formats (encodings) "
"and 'Unicode::String' objects, and methods are provided for common string "
"manipulations.\n"
"\n"
"The functions utf32be(), utf32le(), utf16be(), utf16le(), utf8(), utf7(), "
"latin1(), uhex(), uchr() can be imported from the 'Unicode::String' module "
"and will work as constructors initializing strings of the corresponding "
"encoding.\n"
"\n"
"The 'Unicode::String' objects overload various operators, which means that "
"they in most cases can be treated like plain strings.\n"
"\n"
"Internally a 'Unicode::String' object is represented by a string of 2 byte "
"numbers in network byte order (big-endian). This representation is not "
"visible by the API provided, but it might be useful to know in order to "
"predict the efficiency of the provided methods."
msgstr ""
"'Unicode::String' オブジェクトは Unicode による文字の並びを保持するための仕組みです。メソッドとして、様々な外部形式 "
"(エンコーディング) と 'Unicode::String' との相互変換機能が用意されているほか、一般的な文字列操作機能も提供されています。\n"
"\n"
"'Unicode::String' では utf32be(), utf32le(), utf16be(), utf16le(), utf8(), "
"utf7(), latin1(), uhex(), uchr() "
"の各関数をインポートしているほか、これらは対応するエンコーディングで文字列を初期化するコンストラクタとしても動作します。\n"
"\n"
"'Unicode::String' "
"オブジェクトでは様々な演算子もオーバーロードしていて、これにより多くの場合、純粋な文字列操作のように扱うこともできます。\n"
"\n"
"なお、内部的には 'Unicode::String' はネットワークバイトオーダー (big endian) で 2 バイトの数値を表現しています。 "
"API からはこのような表記を確認することはできませんが、メソッドの利用効率を考慮する際には便利な情報となるでしょう。"

#. tumbleweed/perl-Unix-Syslog/summary
#. leap/perl-Unix-Syslog/summary
msgid "Perl interface to the UNIX syslog(3) calls"
msgstr "UNIX syslog(3) コールに対する Perl インターフェイス"

#. tumbleweed/perl-Unix-Syslog/description
#. leap/perl-Unix-Syslog/description
msgid ""
"This module provides an interface to the system logger syslogd(8) via Perl's "
"XSUBs. The implementation attempts to resemble the native libc- functions of "
"your system, so that anyone being familiar with syslog.h should be able to "
"use this module right away."
msgstr ""
"このモジュールは、システムロガーである syslogd(8) を Perl の XSUB 経由で呼び"
"出すことのできるインターフェイスです。実装はお使いのシステムにおけるネイティ"
"ブな libc 関数に似るように作られているため、 syslog.h に慣れたユーザであれ"
"ば、このモジュールをすぐに使いこなすことができるようになっています。"

#. tumbleweed/perl-Variable-Magic/summary
#. leap/perl-Variable-Magic/summary
msgid "Associate user-defined magic to variables from Perl"
msgstr "ユーザ定義のマジックを Perl の変数に割り当てる機能"

#. tumbleweed/perl-Variable-Magic/description
#| msgid ""
#| "Magic is Perl's way of enhancing variables. This mechanism lets the user "
#| "add extra data to any variable and hook syntactical operations (such as "
#| "access, assignment or destruction) that can be applied to it. With this "
#| "module, you can add your own magic to any variable without having to "
#| "write a single line of XS.\n"
#| "\n"
#| "You'll realize that these magic variables look a lot like tied variables. "
#| "It is not surprising, as tied variables are implemented as a special kind "
#| "of magic, just like any 'irregular' Perl variable : scalars like '$!', "
#| "'$(' or '$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' "
#| "and 'substr()' lvalues, the threads::shared manpage variables... They all "
#| "share the same underlying C API, and this module gives you direct access "
#| "to it."
msgid ""
"Magic is Perl's way of enhancing variables. This mechanism lets the user add "
"extra data to any variable and hook syntactical operations (such as access, "
"assignment or destruction) that can be applied to it. With this module, you "
"can add your own magic to any variable without having to write a single line "
"of XS.\n"
"\n"
"You'll realize that these magic variables look a lot like tied variables. It "
"is not surprising, as tied variables are implemented as a special kind of "
"magic, just like any 'irregular' Perl variable : scalars like '$!', '$(' or "
"'$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' and "
"'substr()' lvalues, threads::shared variables... They all share the same "
"underlying C API, and this module gives you direct access to it."
msgstr ""
"Magic とは変数を拡張するための Perl の仕組みです。これはユーザに対して、任意の変数内に追加データを設定し、スクリプト内での操作 "
"(たとえばアクセスや代入、破壊など) をフックできるようになります。このモジュールを利用することで、XS の単一行を記述したりすることなく、独自の "
"Magic を任意の変数に設定することができます。\n"
"\n"
"これらの Magic 変数はタイ変数によく似た仕組みであることがわかるはずです。これは驚くようなことではありません。タイ変数も Magic "
"の特殊系として実装されているからです。たとえば下記のような 'イレギュラー' な Perl 変数があります: '$!', '$(', '$^W' "
"のようなスカラー変数や '%ENV' と '%SIG' のようなハッシュ、 '@ISA' のような配列や 'vec()' と 'substr()' "
"のような lvalue 、 threads::shared の変数など。これらはすべて同じ C 言語 API "
"をベースにしていて、このモジュールからそれらに直接アクセスできるようになります。"

#. tumbleweed/perl-Verilog-Perl/summary
#. leap/perl-Verilog-Perl/summary
msgid "Verilog language utilities and parsing"
msgstr "Verilog 言語ユーティリティと処理"

#. tumbleweed/perl-Verilog-Perl/description
#. leap/perl-Verilog-Perl/description
msgid ""
"The Verilog-Perl library is a building point for Verilog support in the Perl "
"language."
msgstr "Verilog-Perl ライブラリは、 Perl 言語内で Verilog サポートを行なうためのモジュールです。"

#. tumbleweed/perl-WWW-Curl/summary
#. leap/perl-WWW-Curl/summary
msgid "Perl extension interface for libcurl"
msgstr "libcurl 向け Perl 拡張インターフェイス"

#. tumbleweed/perl-WWW-Curl/description
#. leap/perl-WWW-Curl/description
msgid "WWW::Curl is a Perl extension interface for libcurl."
msgstr "WWW::Curl は libcurl に対する Perl の拡張インターフェイスです。"

#. tumbleweed/perl-Want/summary
#. leap/perl-Want/summary
msgid "Generalisation of C<Wantarray>"
msgstr "C<Wantarray> の生成"

#. tumbleweed/perl-Want/description
#. leap/perl-Want/description
msgid ""
"This module generalises the mechanism of the *wantarray* function, allowing "
"a function to determine in some detail how its return value is going to be "
"immediately used."
msgstr "このモジュールは *wantarray* 関数の仕組みを一般化するもので、関数に対して返す値の詳細を判断させるための仕組みです。"

#. tumbleweed/perl-WeakRef/summary
#. leap/perl-WeakRef/summary
msgid "API for weak references to be created in Perl"
msgstr "Perl 内で作られる弱参照のための API"

#. tumbleweed/perl-WeakRef/description
#. leap/perl-WeakRef/description
msgid ""
"A patch to Perl 5.005_55 by the author implements a core API for weak "
"references. This module is a Perl-level interface to that API, allowing weak "
"references to be created in Perl.\n"
"\n"
"A weak reference is just like an ordinary Perl reference except that it "
"isn't included in the reference count of the thing referred to. This means "
"that once all references to a particular piece of data are weak, the piece "
"of data is freed and all the weak references are set to undef. This is "
"particularly useful for implementing circular data structures without memory "
"leaks or caches of objects."
msgstr ""
"作者による Perl 5.005_55 に対するパッチを適用することで、弱参照のための 中枢 "
"API が実装されるようになりました。このモジュールは、 Perl 内で作成される 弱参"
"照を使用するための Perl レベルインターフェイスです。\n"
"\n"
"弱参照とは通常の Perl 参照とほぼ同じものですが、唯一の例外は このオブジェクト"
"が参照するものは参照カウントには含まれないことにあります。 これによりデータ内"
"の特定の箇所に対する全ての参照が弱くなるため、 これらのデータを解放されること"
"になり、弱参照は undef の状態になります。 これはメモリリークを発生させずに循"
"環型のデータ構造を作成したり、オブジェクトに 対するキャッシュを作成したりする"
"ことができます。"

#. tumbleweed/perl-Wx/summary
#. leap/perl-Wx/summary
msgid "Interface to the Wxwidgets Cross-Platform Gui Toolkit"
msgstr "Wxwidgets クロスプラットフォーム GUI ツールキットに対するインターフェイス"

#. tumbleweed/perl-Wx/description
#. leap/perl-Wx/description
msgid ""
"The Wx module is a wrapper for the wxWidgets (formerly known as wxWindows) "
"GUI toolkit.\n"
"\n"
"This module comes with extensive documentation in HTML format; you can "
"download it from http://wxperl.sourceforge.net/"
msgstr ""
"Wx モジュールは wxWidgets (以前は wxWindows という名称でした) GUI ツールキットのラッパーです。\n"
"\n"
"このモジュールでは、 HTML 形式で広範囲のドキュメンテーションが提供されています。ダウンロードは "
"http://wxperl.sourceforge.net/ から行なってください。"

#. tumbleweed/perl-X11-Protocol/summary
#. leap/perl-X11-Protocol/summary
msgid "Perl module for the X Window System Protocol, version 11"
msgstr "X Window System プロトコルバージョン 11 向けの Perl モジュール"

#. tumbleweed/perl-X11-Protocol/description
#. leap/perl-X11-Protocol/description
msgid ""
"X11::Protocol is a client-side interface to the X11 Protocol (see X(1) for "
"information about X11), allowing perl programs to display windows and "
"graphics on X11 servers.\n"
"\n"
"A full description of the protocol is beyond the scope of this "
"documentation; for complete information, see the _X Window System Protocol, "
"X Version 11_, available as Postscript or *roff source from 'ftp://ftp.x."
"org', or _Volume 0: X Protocol Reference Manual_ of O'Reilly & Associates's "
"series of books about X (ISBN 1-56592-083-X, 'http://www.oreilly.com'), "
"which contains most of the same information."
msgstr ""
"X11::Protocol は X11 プロトコル (X11 について、詳しくは X(1) のマニュアルペー"
"ジをお読みください) に対するクライアント側のインターフェイスです。これによ"
"り、Perl プログラムから X11 サーバ上にウインドウやグラフィックを描画したりす"
"ることができます。\n"
"\n"
"このプロトコルの完全な説明は、このドキュメンテーションには書いてありません。"
"完全な説明をご希望の場合は、 'ftp://ftp.x.org' で Postscript 形式および "
"*roff 形式で提供されている _X Window System Protocol, X Version 11_ や、X に"
"関する書籍であるオライリー社発行 _Volume 0: X Protocol Reference Manual_ "
"(ISBN 1-56592-083-X, 'http://www.oreilly.com') をお読みください。いずれも同じ"
"情報を提供しています。"

#. tumbleweed/perl-X500-DN/summary
#. leap/perl-X500-DN/summary
msgid "Provides an interface for RFC 2253 style DN strings"
msgstr "RFC 2253 形式の DN 文字列に対するインターフェイス"

#. tumbleweed/perl-X500-DN/description
#. leap/perl-X500-DN/description
msgid ""
"X500::DN Provides a pure perl parser and formatter for RFC 2253 style DN "
"strings."
msgstr ""
"X500::DN は、 RFC 2253 形式の DN 文字列を処理したり書式を整えたりする 純粋 "
"Perl モジュールです。"

#. tumbleweed/perl-XML-Bare/summary
#. leap/perl-XML-Bare/summary
msgid "Minimal XML parser implemented via a C state engine"
msgstr "C ステートエンジンで実装されている最小 XML パーサー"

#. tumbleweed/perl-XML-Bare/description
#. leap/perl-XML-Bare/description
msgid ""
"This module is a 'Bare' XML parser. It is implemented in C. The parser "
"itself is a simple state engine that is less than 500 lines of C. The parser "
"builds a C struct tree from input text. That C struct tree is converted to a "
"Perl hash by a Perl function that makes basic calls back to the C to go "
"through the nodes sequentially.\n"
"\n"
"The parser itself will only cease parsing if it encounters tags that are not "
"closed properly. All other inputs will parse, even invalid inputs. To "
"allowing checking for validity, a schema checker is included in the module "
"as well.\n"
"\n"
"The schema format is custom and is meant to be as simple as possible. It is "
"based loosely around the way multiplicity is handled in Perl regular "
"expressions."
msgstr ""
"このモジュールは、 C 言語で実装された '複雑な機能のない' XML パーサーです。パーサー自身はシンプルなステートエンジンで動作し、 500 "
"行未満の C コードでできています。このパーサーは入力テキストから C 言語の構造体ツリーを構築し、  C "
"言語に対する基本的なコールバック関数を順次呼び出す Perl の関数を利用して Perl のハッシュに変換されます。\n"
"\n"
"パーサー自身は正しく閉じられていないタグを検出すると、解釈を中止します。その他の入力については検証されず、そのまま解釈されます。正当性をチェックしたい場合"
"は、本モジュール内のテキーマチェッカーをお使いください。\n"
"\n"
"スキーマの形式は独自のもので、できるかぎりシンプルになるように作られています。多重度は Per の正規表現を利用して緩くチェックされます。"

#. tumbleweed/perl-XML-Dumper/summary
#. leap/perl-XML-Dumper/summary
msgid "Perl module for dumping Perl objects from/to XML"
msgstr "Perl のオブジェクトと XML との間を相互に変換するための Perl モジュール"

#. tumbleweed/perl-XML-Dumper/description
#. leap/perl-XML-Dumper/description
msgid ""
"XML::Dumper dumps Perl data to XML format. XML::Dumper can also read XML "
"data that was previously dumped by the module and convert it back to Perl. "
"You can use the module read the XML from a file and write the XML to a file. "
"Perl objects are blessed back to their original packaging; if the modules "
"are installed on the system where the perl objects are reconstituted from "
"xml, they will behave as expected. Intuitively, if the perl objects are "
"converted and reconstituted in the same environment, all should be well. And "
"it is.\n"
"\n"
"  Authors: \t\tMike Wong <mike_w3@pacbell.net> \t\tJonathan Eisenzopf "
"<eisen@pobox.com>"
msgstr ""
"XML::Dumper は Perl のデータを XML 形式に出力することができます。また、以前にこのモジュールで作成した出力データの XML "
"を読み込むこともできます。このほか、 XML をファイルに書き出したり、ファイルから読み込んだりすることもできます。 Perl "
"のオブジェクトは元々のパッケージ方法に従って構築されるため、 XML から Perl "
"のオブジェクトに再構築したシステムと同じシステムにモジュールをインストールすれば、動作は同じになります。同様に Perl "
"オブジェクトを同じシステムで扱えば、動作も同じになります。\n"
"\n"
"  著者: \t\tMike Wong <mike_w3@pacbell.net> \t\tJonathan Eisenzopf "
"<eisen@pobox.com>"

#. tumbleweed/perl-XML-Entities/summary
#. leap/perl-XML-Entities/summary
msgid "Perl Module to decode Strings with XML Entities"
msgstr "XML エンティティの文字列をデコードするための Perl モジュール"

#. tumbleweed/perl-XML-Entities/description
#. leap/perl-XML-Entities/description
msgid "This module deals with decoding of strings with XML character entities."
msgstr "このモジュールは、 XML の文字エンティティの文字列をデコードする処理を行ないます。"

#. tumbleweed/perl-XML-LibXML/summary
#. leap/perl-XML-LibXML/summary
msgid "Perl Binding for libxml2"
msgstr "libxml2 に対する Perl バインディング"

#. tumbleweed/perl-XML-LibXML/description
msgid ""
"This module is an interface to libxml2, providing XML and HTML parsers with "
"DOM, SAX and XMLReader interfaces, a large subset of DOM Layer 3 interface "
"and a XML::XPath-like interface to XPath API of libxml2. The module is split "
"into several packages which are not described in this section; unless stated "
"otherwise, you only need to 'use XML::LibXML;' in your programs."
msgstr ""
"このモジュールは、 DOM, SAX, XMLReader の各インターフェイスで XML や HTML "
"パーサの機能を提供する、 libxml2 向けインターフェイスです。 DOM Layer 3 イン"
"ターフェイスや libxml2 の XPath API インターフェイスである XML::XPath の機能"
"も提供しています。このモジュールはいくつかのパッケージに分解することができま"
"すが、ここでは説明していません。通常はプログラムから 'use XML::LibXML;' のよ"
"うに宣言してお使いください。"

#. tumbleweed/perl-XML-LibXSLT/summary
#. leap/perl-XML-LibXSLT/summary
msgid "Interface to the GNOME libxslt library"
msgstr "GNOME libxslt ライブラリに対するインターフェイス"

#. tumbleweed/perl-XML-LibXSLT/description
#. leap/perl-XML-LibXSLT/description
msgid ""
"This module is an interface to the GNOME project's libxslt. This is an "
"extremely good XSLT engine, highly compliant and also very fast. I have "
"tests showing this to be more than twice as fast as Sablotron."
msgstr ""
"このモジュールは GNOME プロジェクトの libxslt に対するインターフェイスです。"
"非常に良質な XSLT エンジンであり、標準への準拠と速度の面で有利な仕組みです。 "
"Sablotron と比較すると 2 倍もの速度が出るとの調査結果もあります。"

#. tumbleweed/perl-XML-NamespaceSupport/summary
#. leap/perl-XML-NamespaceSupport/summary
msgid "A simple generic namespace support class"
msgstr "シンプルな汎用ネームスペースサポートクラス"

#. tumbleweed/perl-XML-NamespaceSupport/description
#. leap/perl-XML-NamespaceSupport/description
msgid ""
"This module offers a simple way to process namespaced XML names (unames) "
"from within any application that may need them. It also helps maintain a "
"prefix to namespace URI map, and provides a number of basic checks."
msgstr ""
"このモジュールは、ネームスペースを必要とするアプリケーションから、 ネームス"
"ペース付きの XML (unames) を処理するための シンプルな方法を提供します。プレ"
"フィクスからネームスペース URI への 変換を管理する機能や、いくつかの基本的な"
"チェック機能も提供されています。"

#. tumbleweed/perl-XML-NodeFilter/summary
#. leap/perl-XML-NodeFilter/summary
msgid "XML::NodeFilter"
msgstr "XML::NodeFilter"

#. tumbleweed/perl-XML-NodeFilter/description
#. leap/perl-XML-NodeFilter/description
msgid ""
"XML::NodeFilter is a generic node filter class for DOM traversal as "
"specified in the DOM Level 2 Traversal and Range specification. It extends "
"that specification, so this class is easier to use for Perl programmers."
msgstr ""
"XML::NodeFilter は、 DOM Level 2 Traversal and Range specification に規定され"
"た DOM トラバーサルのための汎用ノードフィルタクラスです。 これらの仕様を拡張"
"して実装しているため、 Perl プログラマには使いやすいクラスになっています。"

#. tumbleweed/perl-XML-Parser/summary
#. leap/perl-XML-Parser/summary
msgid "A perl module for parsing XML documents"
msgstr "XML ドキュメントを解釈するための Perl モジュール"

#. tumbleweed/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of the "
"XML::Parser::Expat manpage, which is a lower level interface to James "
"Clark's expat library. Each call to one of the parsing methods creates a new "
"instance of XML::Parser::Expat which is then used to parse the document. "
"Expat options may be provided when the XML::Parser object is created. These "
"options are then passed on to the Expat object on each parse call. They can "
"also be given as extra arguments to the parse methods, in which case they "
"override options given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by 'the /STYLES manpage' and/"
"or 'the /HANDLERS manpage' options, or by the /setHandlers manpage method. "
"These all provide mechanisms for XML::Parser to set the handlers needed by "
"XML::Parser::Expat. If neither 'Style' nor 'Handlers' are specified, then "
"parsing just checks the document for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter "
"the _Expat_ object, not the Parser object."
msgstr ""
"このモジュールは XML ドキュメントを処理する手段を提供しています。 XML::"
"Parser::Expat と呼ばれる James Clark 氏が開発したexpat ライブラリをベースに作"
"成されています。 XML の解析メソッドのうちのいずれかを呼び出すと XML::Parser::"
"Expat に対する新しいインスタンスが作成され、そこからドキュメントの解析が始ま"
"ります。 expat オプションは XML::Parser オブジェクトが作成された際に設定でき"
"るようになります。これらのオプションは各解析処理の呼び出しの際に、 expat オブ"
"ジェクトに渡されます。オプションは解析メソッドのパラメータとして渡すこともで"
"き、この際に渡したパラメータは XML::Parser のインスタンスを作成した際に指定し"
"たオプションを上書きします。\n"
"\n"
"解析処理の振る舞いは、それぞれ \"スタイル\" や \"ハンドラ\" と呼ばれるオプ"
"ションで制御することができるほか、 \"setHandlers\"メソッドでも制御することが"
"できます。これらすべては XML::Parser に対してメカニズムを提供するもので、 "
"XML::Parser::Expat が必要とするハンドラを設定するためのものです。スタイルやハ"
"ンドラを何も指定しない場合は、ドキュメントが正しい形式になっているかどうかを"
"単純にチェックするだけの動作をします。\n"
"\n"
"設定したハンドラが呼び出されると、ハンドラ側では最初のパラメータとして "
"Parser のオブジェクトではなく、expat のオブジェクトを受け取ります。"

#. tumbleweed/perl-XML-SAX/summary
#. leap/perl-XML-SAX/summary
msgid "XML::SAX Perl Module"
msgstr "XML::SAX Perl モジュール"

#. tumbleweed/perl-XML-SAX/description
#. leap/perl-XML-SAX/description
msgid ""
"XML::SAX consists of several framework classes for using and building Perl "
"SAX2 XML parsers, filters, and drivers. It is designed around the need to be "
"able to \"plug in\" different SAX parsers to an application without "
"requiring programmer intervention. Those of you familiar with the DBI will "
"be right at home. Some of the designs come from the Java JAXP specification "
"(SAX part), only without the javaness."
msgstr ""
"XML::SAX は、 Perl SAX2 XML パーサーやフィルタ、ドライバを使用したり構築した"
"りするための いくつかのフレームワーククラスからなっています。このモジュール"
"は、 異なる SAX パーサーに \"切り替える\" にあたってプログラマの介在無しで 実"
"現できるように設計されています。 DBI をよくご存じの方であれば、 便利に使うこ"
"とができるでしょう。いくつかの設計は、 Java JAXP 仕様 (SAX パート) から Java "
"の部分を取り除いた形で導入されています。"

#. tumbleweed/perl-XML-SAX-ExpatXS/summary
#. leap/perl-XML-SAX-ExpatXS/summary
msgid "Perl SAX 2 XS extension to Expat parser"
msgstr "Expat パーサに対する Perl SAX2 XS 拡張"

#. tumbleweed/perl-XML-SAX-ExpatXS/description
#. leap/perl-XML-SAX-ExpatXS/description
msgid ""
"XML::SAX::ExpatXS is a direct XS extension to Expat XML parser. It "
"implements  Perl SAX 2.1 interface. See http://perl-xml.sourceforge.net/perl-"
"sax/ for  Perl SAX API description. Any deviations from the Perl SAX 2.1 "
"specification  are considered as bugs."
msgstr ""
"XML::SAX::ExpatXS は Expat XML パーサに対する直接的な XS 拡張です。 Perl SAX 2.1 "
"インターフェイスを実装するものです。 Perl SAX API の説明について、詳しくは http://perl-xml.sourceforge.net"
"/perl-sax/ をお読みください。 Perl SAX 2.1 仕様と異なる点があれば、それらはバグとして扱います。"

#. tumbleweed/perl-XML-Writer-String/summary
#. leap/perl-XML-Writer-String/summary
msgid "Capture output from XML::Writer"
msgstr "XML::Writer の出力に対するキャプチャ"

#. tumbleweed/perl-XML-Writer-String/description
#. leap/perl-XML-Writer-String/description
msgid ""
"This module implements a bare-bones class specifically for the purpose of "
"capturing data from the XML::Writer module. XML::Writer expects an IO::"
"Handle object and writes XML data to the specified object (or STDOUT) via "
"it's print() method. This module simulates such an object for the specific "
"purpose of providing the required print() method.\n"
"\n"
"It is recommended that $writer->end() is called prior to calling $s->value() "
"to check for well-formedness.\n"
"\n"
"Author:\n"
"-------     Simon Oliver <simon.oliver@umist.ac.uk>"
msgstr ""
"このモジュールは、 XML::Writer モジュールからのデータを捕捉する目的に特化したベアボーンクラスです。 XML::Writer は IO::"
"Handle オブジェクトを入力として受け付け、 print() メソッドで指定したオブジェクト (または標準出力) に XML "
"データを書き込みます。このモジュールは、必要な print() メソッドを提供する特定用途向けに、オブジェクトを疑似することも行ないます。\n"
"\n"
"なお、 $s->value() を整形のチェックに用いる場合、事前に $writer->end() を呼び出しておくことをお勧めします。\n"
"\n"
"著者:\n"
"-------     Simon Oliver <simon.oliver@umist.ac.uk>"

#. tumbleweed/perl-XML-XSLT/summary
#. leap/perl-XML-XSLT/summary
msgid "Perl module XML::XSLT"
msgstr "Perl モジュール XML::XSLT"

#. tumbleweed/perl-XML-XSLT/description
#. leap/perl-XML-XSLT/description
msgid "This is a Perl module to parse XSL Transformational sheets."
msgstr ""
"これは XSL Transformational sheet を処理するための Perl モジュールです。"

#. tumbleweed/perl-YAML-LibYAML/summary
#. tumbleweed/perl-YAML-LibYAML/description
msgid "Perl YAML Serialization using XS and libyaml"
msgstr "XS と libyaml を使用する Perl YAML シリアライズ"

#. tumbleweed/perl-YAML-Syck/description
#. leap/perl-YAML-Syck/description
msgid ""
"This module provides a Perl interface to the *libsyck* data serialization "
"library. It exports the 'Dump' and 'Load' functions for converting Perl data "
"structures to YAML strings, and the other way around.\n"
"\n"
"*NOTE*: If you are working with other language's YAML/Syck bindings (such as "
"Ruby), please set '$YAML::Syck::ImplicitTyping' to '1' before calling the "
"'Load'/'Dump' functions. The default setting is for preserving backward-"
"compatibility with 'YAML.pm'."
msgstr ""
"このモジュールは *libsyck* データシリアライズ化ライブラリに対する Perl のイン"
"ターフェイスを提供します。 Perl のデータ構造を、 YAML 形式の文字列やその他の"
"方式で 'Dump' (ダンプ) したり 'Load' (ロード) したりすることができます。\n"
"\n"
"*注意*: 他の言語 (たとえば Ruby) で YAML/Syck バインディングを使用している場"
"合、'Load'/'Dump' 関数を使用する前に '$YAML::Syck::ImplicitTyping' を '1' に"
"設定してください。既定の設定は、 'YAML.pm' の後方互換性を維持するための設定に"
"なっています。"

#. tumbleweed/perl-autobox/summary
#. leap/perl-autobox/summary
msgid "Call Methods On Native Types"
msgstr "ネイティブタイプでのメソッド呼び出し"

#. tumbleweed/perl-autobox/description
#| msgid ""
#| "The autobox pragma allows methods to be called on integers, floats, "
#| "strings, arrays, hashes, and code references in exactly the same manner "
#| "as blessed references.\n"
#| "\n"
#| "The autoboxing is transparent: boxed values are not blessed into their "
#| "(user-defined) implementation class (unless the method elects to bestow "
#| "such a blessing) - they simply use its methods as though they are.\n"
#| "\n"
#| "The classes (packages) into which the native types are boxed are fully "
#| "configurable. By default, a method invoked on a non-object value is "
#| "assumed to be defined in a class whose name corresponds to the 'ref()' "
#| "type of that value - or SCALAR if the value is a non-reference."
msgid ""
"The 'autobox' pragma allows methods to be called on integers, floats, "
"strings, arrays, hashes, and code references in exactly the same manner as "
"blessed references.\n"
"\n"
"Autoboxing is transparent: values are not blessed into their (user-defined) "
"implementation class (unless the method elects to bestow such a blessing) - "
"they simply use its methods as though they are.\n"
"\n"
"The classes (packages) into which the native types are boxed are fully "
"configurable. By default, a method invoked on a non-object value is assumed "
"to be defined in a class whose name corresponds to the 'ref()' type of that "
"value - or SCALAR if the value is a non-reference."
msgstr ""
"autobox pragma は整数や浮動小数、文字列や配列、ハッシュやコード参照などをブレスと全く同じやり方で呼び出すことができます。\n"
"\n"
"autobox は透過的に動作します: 値はそれらの (ユーザ定義の) 実装クラス内にブレスされることはなく "
"(メソッドがそのようなブレス処理を意図的に選択しない限り) 、単にメソッドを呼び出すだけの処理にすることができます。\n"
"\n"
"ネイティブな型がボックス化されているクラス (パッケージ) は、全てを設定することができます。既定では非オブジェクト値で実行されたメソッドは、その値の "
"'ref()' 型の関係づけられた名前のクラスで定義されているものと判断します。それ以外の場合は、値は非参照のスカラとして呼び出されます。"

#. tumbleweed/perl-autovivification/summary
msgid "Lexically disable autovivification"
msgstr "autovivification の文法的な無効化"

#. tumbleweed/perl-autovivification/description
#. leap/perl-autovivification/description
msgid ""
"When an undefined variable is dereferenced, it gets silently upgraded to an "
"array or hash reference (depending of the type of the dereferencing). This "
"behaviour is called _autovivification_ and usually does what you mean (e.g. "
"when you store a value) but it may be unnatural or surprising because your "
"variables gets populated behind your back. This is especially true when "
"several levels of dereferencing are involved, in which case all levels are "
"vivified up to the last, or when it happens in intuitively read-only "
"constructs like 'exists'.\n"
"\n"
"This pragma lets you disable autovivification for some constructs and "
"optionally throws a warning or an error when it would have happened."
msgstr ""
"未定義の変数に対して参照外しを行なうと、それらは暗黙のうちに (参照する側が期待するタイプに従って) "
"配列もしくはハッシュ参照として扱われるようになります。このような動作を _autovivification_ と呼び、通常は期待通りの動作となります "
"(たとえば値を代入する場合) が、自動的に変数の構造が変わってしまうことから、場合によっては不自然に感じてしまったりして、期待通りの結果にならない場合があ"
"ります。特に複数段階の参照を扱っているような場合は、最後の要素レベルまで autovivification されてしまいますし、 'exists' "
"のような読み込み専用の関数などでは予期しない結果になってしまいます。\n"
"\n"
"このプラグマを使用すると、 autovivification "
"の仕組みをいくつかの構造に対して無効化し、必要であれば発生時に警告やエラーをスローすることができるようになります。"

#. tumbleweed/perl-bareword-filehandles/summary
#. leap/perl-bareword-filehandles/summary
msgid "Disables Bareword Filehandles"
msgstr "単純なファイルハンドルの無効化"

#. tumbleweed/perl-bareword-filehandles/description
#. leap/perl-bareword-filehandles/description
msgid ""
"This module lexically disables the use of bareword filehandles with builtin "
"functions, except for the special builtin filehandles 'STDIN', 'STDOUT', "
"'STDERR', 'ARGV', 'ARGVOUT' and 'DATA'."
msgstr ""
"このモジュールは、特別な内蔵ファイルハンドル ('STDIN', 'STDOUT', 'STDERR', 'ARGV', 'ARGVOUT', "
"'DATA') を除き、内蔵関数を利用した単純なファイルハンドルを文法的に無効化します。"

#. tumbleweed/perl/perl-base/description
#. tumbleweed/perl/perl-base-32bit/description
#. leap/perl/perl-base-32bit/description
#. leap/perl/perl-base/description
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks.\n"
"\n"
"Perl is intended to be practical (easy to use, efficient, and complete) "
"rather than beautiful (tiny, elegant, and minimal).\n"
"\n"
"This package contains only some basic modules and the perl binary itself."
msgstr ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl は任意のテキストファイルを読み出してこれらのテキストから 必要な情報を取"
"り出し、これらの情報に基づく何らかのレポートを表示することに 長けています。ま"
"た、多くのシステム管理作業にも便利に使用することができます。\n"
"\n"
"Perl は美しさ (簡易性、美観、コンパクト性) よりも現実 (使いやすさ、便利さ、完"
"全性) を追求しています。\n"
"\n"
" このパッケージには、いくつかの基本モジュールと Perl バイナリ自身が含まれてい"
"ます。"

#. tumbleweed/perl-common-sense/summary
#. leap/perl-common-sense/summary
msgid "Save a Tree and a Kitten, Use Common::Sense!"
msgstr "木と子猫を救うためのツール Common::Sense"

#. tumbleweed/perl-common-sense/description
#. leap/perl-common-sense/description
msgid ""
"   “Nothing is more fairly distributed than common sense: no one thinks    "
"he needs more of it than he already has.”\n"
"\n"
"   – René Descartes\n"
"\n"
"This module implements some sane defaults for Perl programs, as defined by "
"two typical (or not so typical - use your common sense) specimens of Perl "
"coders. In fact, after working out details on which warnings and strict "
"modes to enable and make fatal, we found that we (and our code written so "
"far, and others) fully agree on every option, even though we never used "
"warnings before, so it seems this module indeed reflects a \"common\" sense "
"among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be "
"summarised as: \"enforcing strict policies to catch as many bugs as "
"possible, while at the same time, not limiting the expressive power "
"available to the programmer\".\n"
"\n"
"Two typical examples of how this philosophy is applied in practise is the "
"handling of uninitialised and malloc warnings:\n"
"\n"
"* _uninitialised_\n"
"\n"
"  'undef' is a well-defined feature of perl, and enabling warnings for   "
"using it rarely catches any bugs, but considerably limits you in what you   "
"can do, so uninitialised warnings are disabled.\n"
"\n"
"* _malloc_\n"
"\n"
"  Freeing something twice on the C level is a serious bug, usually causing   "
"memory corruption. It often leads to side effects much later in the   "
"program and there are no advantages to not reporting this, so malloc   "
"warnings are fatal by default.\n"
"\n"
"Unfortunately, there is no fine-grained warning control in perl, so often "
"whole groups of useful warnings had to be excluded because of a single "
"useless warning (for example, perl puts an arbitrary limit on the length of "
"text you can match with some regexes before emitting a warning, making the "
"whole 'regexp' category useless).\n"
"\n"
"What follows is a more thorough discussion of what this module does, and why "
"it does it, and what the advantages (and disadvantages) of this approach are."
msgstr ""
"   \"分別ほど人々の間に平等に分け与えられているものはない。というのも、誰でも"
"みんな、自分には分別が十分に備わっていると思っているからだ。\" \n"
"\n"
"   - ルネ・デカルト\n"
"\n"
"このモジュールは、 2 つの典型的 (かどうかはあなたの判断です) な Perl プログラ"
"ムの見本として、真っ当な既定値を実装しています。事実、生成された警告や制約"
"モードを致命的エラーとして扱うことで、我々 (と作成するコード) は各メッセージ"
"による対応を促される結果となります。これは今まで警告として扱ってこなかったも"
"のであっても、それは長期間にわたる Perl のコーダによる \"分別\" に照らしあわ"
"せることで、悪い箇所を指摘することになるためです。\n"
"\n"
"common::sense モジュールで選定された基本的な哲学は、 \"できるかぎり多数のバグ"
"を捕まえるための制約ポリシーを強制しながら、同時にプログラマに備わった表現力"
"を邪魔しないこと\" にあります。\n"
"\n"
"下記の 2 つの例で、実際に uninitialised と malloc に対する警告哲学を示しま"
"す:\n"
"\n"
"* _uninitialised_\n"
"\n"
"  'undef' は Perl でよく使用される機能で、これを使用することで滅多に発生しな"
"いバグに対して警告を生成することができます。ですが、これを利用することでコー"
"ディングを制限してしまうことになるため、初期化されていない旨の警告を無効化し"
"ます。\n"
"\n"
"* _malloc_\n"
"\n"
"  C 言語レベルでは、確保されたメモリを 2 度解放することは深刻なバグになり、一"
"般的にはメモリ破壊を引き起こします。プログラム内で副次的な悪影響を起こすこと"
"もあるため、これを警告しないことに何の利点もありません。そのため、 malloc の"
"警告は既定で致命的エラーに設定されています。\n"
"\n"
"残念ながら Perl の警告をうまく制御する方法はなく、 1 つの無意味な警告のため"
"に、残り全ての有用な警告を排除してしまいがちです (たとえば Perl では、正規表"
"現に該当させる目的で任意の長さにテキストを制限できますが、これにより無意味な"
"警告を生成してしまう場合があります。これにより 'regexp' の警告分類は意味のな"
"いものになってしまいます) 。\n"
"\n"
"下記はこのモジュールが何を行なうのか、およびなぜこれを行なうのか、そしてこの"
"方法がどのような利点をもたらすのかについて、詳しく述べたものです。"

#. tumbleweed/perl-gettext/summary
msgid "Message Handling Functions"
msgstr "メッセージ処理関数"

#. tumbleweed/perl-gettext/description
msgid ""
"The gettext module permits access from perl to the gettext() family of "
"functions for retrieving message strings from databases constructed to "
"internationalize software.\n"
"\n"
"* $d = Locale::gettext->domain(DOMAIN)\n"
"\n"
"* $d = Locale::gettext->domain_raw(DOMAIN)\n"
"\n"
"  Creates a new object for retrieving strings in the domain *DOMAIN* and   "
"returns it. 'domain' requests that strings be returned as Perl strings   "
"(possibly with wide characters) if possible while 'domain_raw' requests   "
"that octet strings directly from functions like 'dgettext()'.\n"
"\n"
"* $d->get(MSGID)\n"
"\n"
"  Calls 'dgettext()' to return the translated string for the given *MSGID*.\n"
"\n"
"* $d->cget(MSGID, CATEGORY)\n"
"\n"
"  Calls 'dcgettext()' to return the translated string for the given "
"*MSGID*   in the given *CATEGORY*.\n"
"\n"
"* $d->nget(MSGID, MSGID_PLURAL, N)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N*.\n"
"\n"
"* $d->ncget(MSGID, MSGID_PLURAL, N, CATEGORY)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N* in the given *CATEGORY*.\n"
"\n"
"* $d->dir([NEWDIR])\n"
"\n"
"  If *NEWDIR* is given, calls 'bindtextdomain' to set the name of the   "
"directory where messages for the domain represented by '$d' are found.   "
"Returns the (possibly changed) current directory name.\n"
"\n"
"* $d->codeset([NEWCODE])\n"
"\n"
"  For instances created with 'Locale::gettext->domain_raw', manuiplates "
"the   character set of the returned strings. If *NEWCODE* is given, calls   "
"'bind_textdomain_codeset' to set the character encoding in which messages   "
"for the domain represented by '$d' are returned. Returns the (possibly   "
"changed) current encoding name.\n"
"\n"
"gettext(), dgettext(), and dcgettext() attempt to retrieve a string matching "
"their 'msgid' parameter within the context of the current locale. "
"dcgettext() takes the message's category and the text domain as parameters "
"while dgettext() defaults to the LC_MESSAGES category and gettext() defaults "
"to LC_MESSAGES and uses the current text domain. If the string is not found "
"in the database, then 'msgid' is returned.\n"
"\n"
"ngettext(), dngettext(), and dcngettext() function similarily but implement "
"differentiation of messages between singular and plural. See the "
"documentation for the corresponding C functions for details.\n"
"\n"
"textdomain() sets the current text domain and returns the previously active "
"domain.\n"
"\n"
"_bindtextdomain(domain, dirname)_ instructs the retrieval functions to look "
"for the databases belonging to domain 'domain' in the directory 'dirname'\n"
"\n"
"_bind_textdomain_codeset(domain, codeset)_ instructs the retrieval functions "
"to translate the returned messages to the character encoding given by "
"*codeset* if the encoding of the message catalog is known."
msgstr ""
"gettext モジュールは Perl に対して gettext() "
"ファミリへのアクセス機能を提供するモジュールで、国際化ソフトウエアで構築されたデータベースから、文字列を取得する機能を提供します。\n"
"\n"
"* $d = Locale::gettext->domain(DOMAIN)\n"
"\n"
"* $d = Locale::gettext->domain_raw(DOMAIN)\n"
"\n"
"  上記のメソッドは *DOMAIN* で指定された領域 (ドメイン) "
"に対して、文字列を取得するための新しいオブジェクトを作成し、作成したオブジェクトを返します。 'domain' メソッドは Perl の文字列 "
"(おそらくはワイドキャラクタを含む文字列) として文字列を返すようにしますが、 'domain_raw' メソッドでは 'dgettext()' "
"のようにオクテット文字列を直接返すようにします。\n"
"\n"
"* $d->get(MSGID)\n"
"\n"
"  'dgettext()' を呼び出して、指定した *MSGID* メッセージの翻訳済み文字列を返します。\n"
"\n"
"* $d->cget(MSGID, CATEGORY)\n"
"\n"
"  'dcgettext()' を呼び出して、指定した *CATEGORY* (分類) 内の *MSGID* メッセージの翻訳済み文字列を返します。\n"
"\n"
"* $d->nget(MSGID, MSGID_PLURAL, N)\n"
"\n"
"  'dngettext()' を呼び出して、指定した *N* の値に従って *MSGID* (単数の場合) または *MSGID_PLURAL* "
"メッセージの翻訳済み文字列を返します。\n"
"\n"
"* $d->ncget(MSGID, MSGID_PLURAL, N, CATEGORY)\n"
"\n"
"  'dngettext()' を呼び出して、 *CATEGORY* (分類) 内であり、かつ 指定した *N* の値に従って *MSGID* "
"(単数の場合) または *MSGID_PLURAL* メッセージの翻訳済み文字列を返します。\n"
"\n"
"* $d->dir([NEWDIR])\n"
"\n"
"  *NEWDIR* を指定すると、 'bindtextdomain' を呼び出して、 '$d' "
"で表わされる領域向けのメッセージがあるディレクトリの名前を設定します。返される値は、 (おそらく変更済みの) 現在のディレクトリになります。\n"
"\n"
"* $d->codeset([NEWCODE])\n"
"\n"
"  たとえば 'Locale::gettext->domain_raw' で作成した場合、返される文字列の文字セットを変更します。 *NEWCODE* "
"が指定された場合は、 'bind_textdomain_codeset' を呼び出して、 '$d' "
"で表わされるドメインに対ししてメッセージの文字エンコーディングを設定します。返される値は、 (おそらく変更済みの) 現在のエンコーディング名になります。"
"\n"
"\n"
"gettext(), dgettext(), dcgettext() は、現在のロケールのコンテキスト内で、 'msgid' "
"パラメータに該当する文字列を取得します。 dcgettext() はメッセージの分類とドメインの両方をパラメータとして取りますが、 dgettext() "
"は分類が LC_MESSAGES であるものとして取得し、 gettext() は現在の分類が LC_MESSAGES "
"で、かつ現在のテキストドメインであるものとして取得します。文字列が見つからない場合は、 'msgid' を返します。\n"
"\n"
"ngettext(), dngettext(), dcngettext() "
"関数はそれぞれ似たような実装になっていますが、単一形と複数形で異なるメッセージを設定することができます。詳しくは C "
"言語の関数に関するドキュメンテーションをお読みください。\n"
"\n"
"textdomain() は現在のテキストドメインを設定し、以前のテキストドメインを返します。\n"
"\n"
"_bindtextdomain(domain, dirname)_ は、ディレクトリ 'dirname' 内のドメイン 'domain' "
"に属するデータベースを検索するための取得関数です。\n"
"\n"
"_bind_textdomain_codeset(domain, codeset)_ は、メッセージカタログのエンコーディングが既知のものであった場合、 "
"*codeset* で返却されたメッセージを変換する関数です。"

#. tumbleweed/perl-local-lib/perl-homedir/summary
#. leap/perl-local-lib/perl-homedir/summary
msgid "Per-user Perl local::lib setup"
msgstr "ユーザごとの Perl local::lib 設定"

#. tumbleweed/perl-local-lib/perl-homedir/description
#. leap/perl-local-lib/perl-homedir/description
msgid ""
"perl-homedir configures the system to automatically create a ~/perl5 "
"directory in each user's $HOME on user login.  This allows each user to "
"install and CPAN packages via the CPAN to their $HOME, with no additional "
"configuration or privliges, and without installing them system-wide.\n"
"\n"
"If you want your users to be able to install and use their own Perl modules, "
"install this package."
msgstr ""
"perl-homedir は、ユーザのログイン時、自動的にユーザの $HOME (ホームディレクトリ) 内に ~/perl5 "
"ディレクトリを作成してシステムを設定する機能を提供します。これにより、各ユーザが独自の CPAN パッケージを構築して、 $HOME "
"ディレクトリ内に保存できるようになります。追加の設定や特権などは不要ですし、システム全体にパッケージをインストールする必要もありません。\n"
"\n"
"ユーザに対して独自の Perl モジュールのインストールを許可したい場合は、このパッケージをインストールしてください。"

#. tumbleweed/perl-indirect/summary
#. leap/perl-indirect/summary
msgid "Lexically warn about using the indirect method call syntax"
msgstr "間接的なメソッド呼び出し文法を使用した際に文法上の警告を生成するモジュール"

#. tumbleweed/perl-indirect/description
msgid ""
"When enabled, this pragma warns about indirect method calls that are present "
"in your code.\n"
"\n"
"The indirect syntax is now considered harmful, since its parsing has many "
"quirks and its use is error prone : when the subroutine 'foo' has not been "
"declared in the current package, 'foo $x' actually compiles to '$x->foo', "
"and 'foo { key => 1 }' to ''key'->foo(1)'. Please refer to the REFERENCES "
"section for a more complete list of reasons for avoiding this construct.\n"
"\n"
"This pragma currently does not warn for core functions ('print', 'say', "
"'exec' or 'system'). This may change in the future, or may be added as "
"optional features that would be enabled by passing options to 'unimport'.\n"
"\n"
"This module is *not* a source filter."
msgstr ""
"有効化すると、お使いのコード内に間接的なメソッド呼び出しが存在すると、このプラグマが警告を発するようになります。\n"
"\n"
"間接文法は現在、解釈が曖昧であったり、エラーを引き起こす元凶となってしまっていることから、有害なものとして扱われています: たとえばサブルーチン "
"'foo' が現在のパッケージ内で定義されていない場合、 'foo $x' は '$x->foo' にコンパイルされますし、 'foo { key => "
"1}' は ''key'->foo(1)' にコンパイルされてしまいます。このような構造を避けるべき理由について、詳しくは REFERENCES "
"をご覧ください。\n"
"\n"
"このプラグマでは、現在中枢関数 ('print', 'say', 'exec', 'system') "
"に対しては警告を発さないように作られていますが、将来のバージョンで変更される可能性があるほか、 'unimport' "
"にオプションを渡すことで有効化できるような、オプションの機能が追加される可能性があります。\n"
"\n"
"このモジュールはソースフィルタ *ではありません* 。"

#. tumbleweed/perl-ldap/summary
#. leap/perl-ldap/summary
msgid "Client Interface for LDAP Servers"
msgstr "LDAP サーバに対するクライアントインターフェイス"

#. tumbleweed/perl-ldap/description
#. leap/perl-ldap/description
msgid "A Client interface for LDAP servers."
msgstr "LDAP サーバに対するクライアントインターフェイスです。"

#. tumbleweed/perl-libconfigfile/summary
#. leap/perl-libconfigfile/summary
msgid "Parses simple configuration files"
msgstr "シンプルな設定ファイルの処理"

#. tumbleweed/perl-libconfigfile/description
#. leap/perl-libconfigfile/description
msgid ""
"ConfigFile parses simple configuration files and stores its values in an "
"anonymous hash reference. The syntax of the configuration file is quite "
"simple:\n"
"\n"
"1.  This is a comment VALUE_ONE = foo VALUE_TWO = $VALUE_ONE/bar VALUE_THREE "
"= The value contains a \\# (hash). # This is a comment. COMPOSED_VALUE[one] "
"= The first component of a clustered value COMPOSED_VALUE[two] = The second "
"component of a clustered value"
msgstr ""
"ConfigFile はシンプルな形式の設定ファイルを処理し、無名ハッシュ参照として こ"
"れらの値を代入する機能を提供します。 設定ファイルの書式は至ってシンプルで"
"す:\n"
"\n"
"# コメント VALUE_ONE = foo VALUE_TWO = $VALUE_ONE/bar VALUE_THREE = この値に"
"は \\# (ハッシュ) が含まれています. # ここもコメントです COMPOSED_VALUE[one] "
"= 複数個にまたがった値のうち 1 つめの値を示しています COMPOSED_VALUE[two] = "
"複数個にまたがった値のうち 2 つめの値を示しています"

#. tumbleweed/perl-libintl-perl/summary
msgid "High-Level Interface to Uniforum Message Translation"
msgstr "Uniforum Message Translation に対する高レベルインターフェイス"

#. tumbleweed/perl-libintl-perl/description
#. leap/perl-libintl-perl/description
msgid ""
"This is an internationalization library for Perl that aims to be compatible "
"with the Uniforum message translations system as implemented for example in "
"GNU gettext."
msgstr ""
"このモジュールは、 GNU gettext で実装されている統一メッセージ変換システムとの"
"互換性を目指した、国際化ライブラリです。"

#. tumbleweed/perl-libxml-perl/summary
#. leap/perl-libxml-perl/summary
msgid "Collection of Perl modules for working with XML"
msgstr "XML 処理を行なう Perl モジュール集"

#. tumbleweed/perl-libxml-perl/description
#. leap/perl-libxml-perl/description
msgid "perl-libxml-perl is a collection of Perl modules for working with XML."
msgstr "perl-libxml-perl は、 XML 処理を行なうための Perl モジュール集です。"

#. tumbleweed/perl-local-lib/summary
#. leap/perl-local-lib/summary
msgid "Create and Use a Local Lib/ for Perl Modules with Perl5lib"
msgstr "Perl5lib で Perl モジュール向けのローカルライブラリを作成して使用するモジュール"

#. tumbleweed/perl-local-lib/description
#. leap/perl-local-lib/description
msgid ""
"This module provides a quick, convenient way of bootstrapping a user-local "
"Perl module library located within the user's home directory. It also "
"constructs and prints out for the user the list of environment variables "
"using the syntax appropriate for the user's current shell (as specified by "
"the 'SHELL' environment variable), suitable for directly adding to one's "
"shell configuration file.\n"
"\n"
"More generally, local::lib allows for the bootstrapping and usage of a "
"directory containing Perl modules outside of Perl's '@INC'. This makes it "
"easier to ship an application with an app-specific copy of a Perl module, or "
"collection of modules. Useful in cases like when an upstream maintainer "
"hasn't applied a patch to a module of theirs that you need for your "
"application."
msgstr ""
"このモジュールは、ユーザのホームディレクトリ内に配置されているローカルの Perl "
"モジュールに対して、そのブートストラップを素早く簡単に行なうための仕組みです。そのほか、ユーザのカレントシェル ('SHELL' "
"環境変数で指定されているシェル) "
"に対して適切な文法を利用して、環境変数の一覧を構築して出力する機能も用意されています。これはシェルの設定ファイルに直接追加できるようにするための措置です。"
"\n"
"\n"
"もっと一般的には、 local::lib は Perl の '@INC' 外にある Perl "
"のモジュール用ディレクトリについて、そのブートストラップと使用を行なうための仕組みでもあります。これにより、アプリケーションが独自のバージョンの "
"Perl モジュールのコピーを利用できるようになります。たとえばアップストリームのメンテナが、特定のモジュールに対するパッチを当てていないものの、そのパッ"
"チを当てないとアプリケーションがうまく動作しないような場合などに有用です。"

#. tumbleweed/perl-multidimensional/summary
#. leap/perl-multidimensional/summary
msgid "Disables Multidimensional Array Emulation"
msgstr "多次元配列のエミュレーションの無効化"

#. tumbleweed/perl-multidimensional/description
#. leap/perl-multidimensional/description
msgid ""
"Perl's multidimensional array emulation stems from the days before the "
"language had references, but these days it mostly serves to bite you when "
"you typo a hash slice by using the '$' sigil instead of '@'.\n"
"\n"
"This module lexically makes using multidimensional array emulation a fatal "
"error at compile time."
msgstr ""
"Perl の多次元配列のエミュレーションは、言語が参照を保持していた時代に由来するものですが、現在はハッシュのスライスを '@' ではなく '$' "
"で使用するようなタイプミスでのみ発生します。\n"
"\n"
"このモジュールは、多次元の配列エミュレーションを、コンパイル時の致命的な文法エラーとして報告する機能を提供します。"

#. tumbleweed/perl-pcsc/summary
#. leap/perl-pcsc/summary
msgid "Perl interface to Smart Card Reader"
msgstr "スマートカードリーダーに対する Perl インターフェイス"

#. tumbleweed/perl-pcsc/description
#. leap/perl-pcsc/description
msgid ""
"PC/SC represents an abstraction layer to smart card readers. It provides a "
"communication layer with a wide variety of smart card readers through a "
"standardized API."
msgstr ""
"PC/SC はスマートカードリーダに対する抽象レイヤを提供する仕組みです。様々なカードリーダーの通信レイヤを、標準化された API "
"の元でアクセスできるようにします。"

#. tumbleweed/perl-qpid/summary
#. leap/perl-qpid/summary
msgid "Perl bindings for the Qpid messaging framework"
msgstr "Qpid メッセージングフレームワーク向け Perl バインディング"

#. tumbleweed/perl-qpid/description
#. leap/perl-qpid/description
msgid "Perl bindings for the Qpid messaging framework."
msgstr "Qpid メッセージングフレームワーク向け Perl バインディングです。"

#. tumbleweed/perl-qt4/summary
#. leap/perl-qt4/summary
msgid "PerlQt kdebindings library"
msgstr "PerlQt kdebindings ライブラリ"

#. tumbleweed/perl-qt4/description
#. leap/perl-qt4/description
msgid "Perl bindings for the Qt4 libraries from the kdebindings project."
msgstr ""
"kdebindings プロジェクト提供の qt4 ライブラリ向け Perl バインディングです。"

#. tumbleweed/perl-qt4/perl-qt4-devel/summary
#. leap/perl-qt4/perl-qt4-devel/summary
msgid "Development libraries for Perl-Qt4"
msgstr "Perl-Qt4 向け開発ライブラリ"

#. tumbleweed/perl-qt4/perl-qt4-devel/description
#. leap/perl-qt4/perl-qt4-devel/description
msgid ""
"This package contains development files for the Perl bindings for the Qt4 "
"libraries."
msgstr ""
"このパッケージには Qt4 ライブラリの Perl バインディングに対する開発用ファイル"
"が含まれています。"

#. tumbleweed/perl-version/summary
#. leap/perl-version/summary
msgid "Perl extension for Version Objects"
msgstr "バージョンオブジェクト向け Perl 拡張"

#. tumbleweed/perl-version/description
#. leap/perl-version/description
msgid ""
"Version objects were added to Perl in 5.10. This module implements version "
"objects for older version of Perl and provides the version object API for "
"all versions of Perl. All previous releases before 0.74 are deprecated and "
"should not be used due to incompatible API changes. Version 0.77 introduces "
"the new 'parse' and 'declare' methods to standardize usage. You are strongly "
"urged to set 0.77 as a minimum in your code, e.g.\n"
"\n"
"  use version 0.77; # even for Perl v.5.10.0"
msgstr ""
"version オブジェクトは Perl 5.10 で追加された仕組みです。このモジュールは古いバージョンの Perl "
"に対してバージョンオブジェクトを実装し、すべてのバージョンの Perl で version オブジェクトの API を利用できるようにします。 0.74 "
"以前のリリースは廃止予定のもので、互換性を損なう形で変更が加えられているため、使用すべきではありません。バージョン 0.77 "
"では標準の使い方として新しく 'parse', 'declare' の各メソッドが追加されています。そのため、お使いのコードでは最小のバージョンを "
"0.77 として規定することを強くお勧めします:\n"
"\n"
"  use version 0.77; # Perl v.5.10.0 向け"

#. tumbleweed/perl-Clipboard/clipboard/summary
#. leap/perl-Clipboard/clipboard/summary
msgid "Command-Line Utilities to Copy and Paste with any OS"
msgstr "任意の OS でコピー＆ペーストを行なうためのコマンドラインユーティリティ"

#. tumbleweed/perl-Clipboard/clipboard/description
#. leap/perl-Clipboard/clipboard/description
msgid ""
"Who doesn't remember the first time they learned to copy and paste, and "
"generated an exponentially growing text document? Yes, that's right, "
"clipboards are magical.\n"
"\n"
"This package contains several command-line utilities to manpulate clipboards."
msgstr ""
"初めてコピー＆ペーストを学んだ時の記憶がありますか？コピー＆ペーストによって、テキストは指数関数的に増えていきます。そう、クリップボードは魔法のような仕組"
"みです。\n"
"\n"
"このパッケージには、クリップボードを操作するためのいくつかのコマンドラインユーティリティが含まれています。"

#. tumbleweed/perl-Image-ExifTool/exiftool/summary
#. leap/perl-Image-ExifTool/exiftool/summary
msgid "Customisable application to read and write meta information in files"
msgstr "ファイル内のメタデータを読み書きするためのカスタマイズ可能なアプリケーション"

#. tumbleweed/perl-Image-ExifTool/exiftool/description
#. leap/perl-Image-ExifTool/exiftool/description
msgid ""
"ExifTool is a a full-featured application for reading and writing meta "
"information in a wide variety of files, including the maker note information "
"of many digital cameras by various manufacturers such as Canon, Casio, "
"FujiFilm, GE, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Nikon, "
"Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, "
"Sanyo, Sigma/Foveon and Sony."
msgstr ""
"ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書きす"
"るアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応してい"
"て、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, コダック, "
"Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パナソニック／"
"ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サンヨー, Sigma/"
"Foveon, SONY などに対応しています。"

#. tumbleweed/perl-Algorithm-Annotate/summary
#. leap/perl-Algorithm-Annotate/summary
msgid "represent a series of changes in annotate form"
msgstr "注釈形式で変更点を表示"

#. tumbleweed/perl-Algorithm-Annotate/description
#. leap/perl-Algorithm-Annotate/description
msgid ""
"Algorithm::Annotate generates a list that is useful for generating output "
"simliar to 'cvs annotate'."
msgstr "Algorithm::Annotate は、 'cvs annotate' に似た出力を生成する際に便利なリストを生成します。"

#. tumbleweed/perl-Algorithm-C3/summary
#. leap/perl-Algorithm-C3/summary
msgid "A module for merging hierarchies using the C3 algorithm"
msgstr "C3 アルゴリズムを利用して階層構造を合成するためのモジュール"

#. tumbleweed/perl-Algorithm-C3/description
#. leap/perl-Algorithm-C3/description
msgid ""
"This module implements the C3 algorithm. I have broken this out into it's "
"own module because I found myself copying and pasting it way too often for "
"various needs. Most of the uses I have for C3 revolve around class building "
"and metamodels, but it could also be used for things like dependency "
"resolution as well since it tends to do such a nice job of preserving local "
"precedence orderings.\n"
"\n"
"Below is a brief explanation of C3 taken from the the Class::C3 manpage "
"module. For more detailed information, see the the SEE ALSO manpage section "
"and the links there."
msgstr ""
"このモジュールは C3 アルゴリズムを実装しています。なお、このモジュールは様々な要件に合わせるためにコピーを切り返している箇所があるため、モジュールを分"
"解して対応しています。多くの用途では、クラスの構築やメタモデルに対して C3 "
"を利用しますが、ローカルでの優先順位を維持するのに便利な仕組みを作る目的があることから、依存関係の解決などにも利用することができます。\n"
"\n"
"下記は Class::C3 モジュール内に書かれている C3 の概要例です。詳しくは SEE ALSO セクションとそのリンク先をお読みください。"

#. tumbleweed/perl-Algorithm-CheckDigits/summary
#. tumbleweed/perl-Algorithm-CheckDigits/description
#. leap/perl-Algorithm-CheckDigits/summary
#. leap/perl-Algorithm-CheckDigits/description
msgid "Perl extension to generate and test check digits"
msgstr "チェックディジットの生成とテストのための Perl 拡張"

#. tumbleweed/perl-Algorithm-Diff/summary
#. tumbleweed/perl-Algorithm-Diff/description
#. leap/perl-Algorithm-Diff/summary
#. leap/perl-Algorithm-Diff/description
msgid "Compute `intelligent' differences between two files / lists"
msgstr ""
"2 つのファイルやリストに対して、 'インテリジェントな' 差分を計算するツール"

#. tumbleweed/perl-Alien-Tidyp/summary
#. tumbleweed/perl-Alien-Tidyp/description
#. leap/perl-Alien-Tidyp/summary
#. leap/perl-Alien-Tidyp/description
msgid "Building, finding and using tidyp library - L<http://www.tidyp.com>"
msgstr "tidyp ライブラリ (<http://www.tidyp.com>) の構築／検出／使用"

#. tumbleweed/perl-Any-Moose/summary
#. tumbleweed/perl-Any-Moose/description
#. leap/perl-Any-Moose/summary
#. leap/perl-Any-Moose/description
msgid "(DEPRECATED) use Moo instead!"
msgstr "(廃止予定) 代わりに Moo をお使いください！"

#. tumbleweed/perl-AnyEvent-HTTP/summary
#. leap/perl-AnyEvent-HTTP/summary
msgid "Simple but Non-Blocking Http/Https Client"
msgstr "シンプルながらも非ブロック型の http/https クライアント"

#. tumbleweed/perl-AnyEvent-HTTP/description
msgid ""
"This module is an AnyEvent user, you need to make sure that you use and run "
"a supported event loop.\n"
"\n"
"This module implements a simple, stateless and non-blocking HTTP client. It "
"supports GET, POST and other request methods, cookies and more, all on a "
"very low level. It can follow redirects, supports proxies, and automatically "
"limits the number of connections to the values specified in the RFC.\n"
"\n"
"It should generally be a \"good client\" that is enough for most HTTP tasks. "
"Simple tasks should be simple, but complex tasks should still be possible as "
"the user retains control over request and response headers.\n"
"\n"
"The caller is responsible for authentication management, cookies (if the "
"simplistic implementation in this module doesn't suffice), referer and other "
"high-level protocol details for which this module offers only limited "
"support."
msgstr ""
"このモジュールは AnyEvent のユーザモジュールです。対応するイベントループを使用していることを必ずご確認の上、お使いください。\n"
"\n"
"このモジュールはシンプルで状態を維持せず、かつ非ブロッキングな HTTP クライアントです。 GET, POST のほか、その他のリクエストメソッドや "
"Cookie などに、非常に低レベルなものとして対応しています。リダイレクトに追随する機能のほか、プロキシサーバへの対応や RFC "
"で指定されている接続数の制限などに対応することができます。\n"
"\n"
"このモジュールは、ほとんどの HTTP 処理に対して十分な機能を提供する \"良質なクライアント\" "
"であるべきものです。シンプルな処理はシンプルに、複雑な処理もユーザがリクエストからレスポンスのヘッダに介在できる程度、使い物になることを目指しています。"
"\n"
"\n"
"呼び出し元は認証の管理や Cookie (このモジュール内の実装は最小限の実装で、不十分かもしれません) に対して対応する必要がありますが、 "
"Referer やその他の高レベルな詳細機能については、このモジュールでは不十分かもしれません。"

#. tumbleweed/perl-AnyEvent-I3/summary
#. tumbleweed/perl-AnyEvent-I3/description
#. leap/perl-AnyEvent-I3/summary
#. leap/perl-AnyEvent-I3/description
msgid "communicate with the i3 window manager"
msgstr "i3 ウインドウマネージャの制御"

#. tumbleweed/perl-Apache-AuthCookie/summary
#. leap/perl-Apache-AuthCookie/summary
msgid "Perl Authentication and Authorization via cookies"
msgstr "cookie を利用した Perl の認証／認可モジュール"

#. tumbleweed/perl-Apache-AuthCookie/description
#. leap/perl-Apache-AuthCookie/description
msgid ""
"*Apache::AuthCookie* allows you to intercept a user's first unauthenticated "
"access to a protected document. The user will be presented with a custom "
"form where they can enter authentication credentials. The credentials are "
"posted to the server where AuthCookie verifies them and returns a session "
"key.\n"
"\n"
"The session key is returned to the user's browser as a cookie. As a cookie, "
"the browser will pass the session key on every subsequent accesses. "
"AuthCookie will verify the session key and re-authenticate the user.\n"
"\n"
"All you have to do is write a custom module that inherits from AuthCookie. "
"Your module is a class which implements two methods:\n"
"\n"
"* 'authen_cred()'\n"
"\n"
"Verify the user-supplied credentials and return a session key. The session "
"key can be any string - often you'll use some string containing username, "
"timeout info, and any other information you need to determine access to "
"documents, and append a one-way hash of those values together with some "
"secret key.\n"
"\n"
"* 'authen_ses_key()'\n"
"\n"
"Verify the session key (previously generated by 'authen_cred()', possibly "
"during a previous request) and return the user ID. This user ID will be fed "
"to '$r->connection->user()' to set Apache's idea of who's logged in.\n"
"\n"
"By using AuthCookie versus Apache's built-in AuthBasic you can design your "
"own authentication system. There are several benefits.\n"
"\n"
"* 1.\n"
"\n"
"The client doesn't *have* to pass the user credentials on every subsequent "
"access. If you're using passwords, this means that the password can be sent "
"on the first request only, and subsequent requests don't need to send this "
"(potentially sensitive) information. This is known as \"ticket-based\" "
"authentication.\n"
"\n"
"* 2.\n"
"\n"
"When you determine that the client should stop using the credentials/session "
"key, the server can tell the client to delete the cookie. Letting users "
"\"log out\" is a notoriously impossible-to-solve problem of AuthBasic.\n"
"\n"
"* 3.\n"
"\n"
"AuthBasic dialog boxes are ugly. You can design your own HTML login forms "
"when you use AuthCookie.\n"
"\n"
"* 4.\n"
"\n"
"You can specify the domain of a cookie using PerlSetVar commands. For "
"instance, if your AuthName is 'WhatEver', you can put the command\n"
"\n"
" PerlSetVar WhatEverDomain .yourhost.com\n"
"\n"
"into your server setup file and your access cookies will span all hosts "
"ending in '.yourhost.com'.\n"
"\n"
"* 5.\n"
"\n"
"You can optionally specify the name of your cookie using the 'CookieName' "
"directive. For instance, if your AuthName is 'WhatEver', you can put the "
"command\n"
"\n"
" PerlSetVar WhatEverCookieName MyCustomName\n"
"\n"
"into your server setup file and your cookies for this AuthCookie realm will "
"be named MyCustomName. Default is AuthType_AuthName.\n"
"\n"
"* 6.\n"
"\n"
"By default users must satisfy ALL of the 'require' directives. If you want "
"authentication to succeed if ANY 'require' directives are met, use the "
"'Satisfy' directive. For instance, if your AuthName is 'WhatEver', you can "
"put the command\n"
"\n"
" PerlSetVar WhatEverSatisfy Any\n"
"\n"
"into your server startup file and authentication for this realm will succeed "
"if ANY of the 'require' directives are met.\n"
"\n"
"This is the flow of the authentication handler, less the details of the "
"redirects. Two REDIRECT's are used to keep the client from displaying the "
"user's credentials in the Location field. They don't really change "
"AuthCookie's model, but they do add another round-trip request to the "
"client.\n"
"\n"
" (-----------------------)     +---------------------------------+  "
"( Request a protected   )     | AuthCookie sets custom error    |  ( page, "
"but user hasn't )---->| document and returns            |  ( authenticated "
"(no     )     | FORBIDDEN. Apache abandons      |  ( session key "
"cookie)   )     | current request and creates sub |  "
"(-----------------------)     | request for the error document. |<-"
"+                                | Error document is a script that |  "
"|                                | generates a form where the user |  "
"|                  return        | enters authentication           |  "
"|           ^------------------->| credentials (login & password). |  "
"|          / \\      False        +---------------------------------+  "
"|         /   \\                                   |                   "
"|        /     \\                                  |                   "
"|       /       \\                                 V                   "
"|      /         \\               +---------------------------------+  "
"|     /   Pass    \\              | User's client submits this form |  "
"|    /   user's    \\             | to the LOGIN URL, which calls   |  |    "
"| credentials |<------------| AuthCookie->login().            |  |    \\     "
"to      /             +---------------------------------+  |     "
"\\authen_cred/                                                   |      \\ "
"function/                                                    |       "
"\\       /                                                     |        "
"\\     /                                                      |         "
"\\   /            +------------------------------------+     |          "
"\\ /   return    | Authen cred returns a session      |  +--+           "
"V------------->| key which is opaque to AuthCookie.*|  |                 "
"True     +------------------------------------+  "
"|                                               |                  "
"|                +--------------------+         |      +---------------"
"+                |                    |         |      | If we had a   "
"|                V                    |         V      | cookie, add   |   "
"+----------------------------+  r |         ^      | a Set-Cookie  |   | If "
"we didn't have a session|  e |T       / \\     | header to     |   | key "
"cookie, add a          |  t |r      /   \\    | override the  |   | Set-"
"Cookie header with this|  u |u     /     \\   | invalid cookie|   | session "
"key. Client then   |  r |e    /       \\  +---------------+   | returns "
"session key with   |  n |    /  pass   \\               ^   | successive "
"requests        |    |   /  session  \\              |   "
"+----------------------------+    |  /   key to    \\    return   "
"|                |                    +-| authen_ses_key|------------"
"+                V                       \\             /     False   "
"+-----------------------------------+ \\           /   | Tell Apache to set "
"Expires header,|  \\         /   | set user to user ID returned by   |   "
"\\       /   | authen_ses_key, set authentication|    \\     /   | to our "
"type (e.g. AuthCookie).    |     \\   /   "
"+-----------------------------------+      "
"\\ /                                               V          "
"(---------------------)              ^          ( Request a "
"protected )              |          ( page, user has a    )--------------"
"+          ( session key cookie  )          (---------------------)\n"
"\n"
"  *  The session key that the client gets can be anything you want.  For     "
"example, encrypted information about the user, a hash of the     username "
"and password (similar in function to Digest     authentication), or the user "
"name and password in plain text     (similar in function to HTTP Basic "
"authentication).\n"
"\n"
"    The only requirement is that the authen_ses_key function that you     "
"create must be able to determine if this session_key is valid and     map it "
"back to the originally authenticated user ID."
msgstr ""
"*Apache::AuthCookie* は、保護された文書に対して未認証のユーザが最初にアクセスする際、それを遮るための仕組みを提供します。ユーザに対し"
"て、認証情報を入力するための独自のフォームを提示することができます。認証情報はサーバに送信され、 AuthCookie "
"がそれを検証してセッション鍵を取得します。\n"
"\n"
"セッション鍵はユーザのブラウザに対して Cookie として返されます。 Cookie "
"を利用することで、ブラウザはその後のアクセスに対しセッション鍵を送信するようになります。 AuthCookie "
"はセッション鍵を検証することで、必要であれば再認証を実施することができます。\n"
"\n"
"このモジュールを利用することで、  AuthCookie を継承する独自のモジュールを作成すれば、認証機能が実現できます。モジュールは 2 "
"つのメソッドを実装するものとします:\n"
"\n"
"* 'authen_cred()'\n"
"\n"
"ユーザが提示した認証情報を検証し、セッション鍵を返します。セッション鍵は任意の文字列を指定することができますが、ここにはユーザ名とタイムアウトに関する情報"
"、および文書にアクセスするための様々な情報の情報源となるべきものです。また、機密鍵を用いた一方向関数によるハッシュ値を設定することもできます。\n"
"\n"
"* 'authen_ses_key()'\n"
"\n"
"セッション鍵 ('authen_cred()' で事前に生成された鍵、通常は以前のリクエストで処理したもの) を検証し、ユーザ ID を返します。ユーザ "
"ID は Apache 側でユーザ名を設定する目的で、'$r->connection->user()' に設定されます。\n"
"\n"
"AuthCookie は Apache の内蔵 AuthBasic "
"とは異なり、独自の認証システムを構築することができます。これにはいくつかの利点が存在します。\n"
"\n"
"* 1.\n"
"\n"
"クライアント側でユーザの認証情報を保持し続ける必要がなくなります。パスワードを利用している場合、このモジュールを利用すると、パスワード (機密情報) "
"は最初のリクエストまで保持しておけば十分で、その後のリクエストまで保持しておく必要がなくなります。これは \"チケットベースの\" "
"認証と呼ばれる仕組みです。\n"
"\n"
"* 2.\n"
"\n"
"クライアント側に認証情報やセッション鍵の使用を停止させたいとき、サーバ側から Cookie の削除を依頼することができます。 AuthBasic "
"を利用してしまうと、ユーザを明示的に \"ログアウト\" させることは不可能である、という厄介な問題があります。\n"
"\n"
"* 3.\n"
"\n"
"AuthBasic のダイアログボックスはわかりにくいものです。 AuthCookie を利用すれば、独自の HTML "
"ログインフォームを設定することができます。\n"
"\n"
"* 4.\n"
"\n"
"PerlSetVar コマンドを利用すれば、 Cookie のドメインを指定することができます。たとえば、 AuthName が 'WhatEver' "
"であるとすると、下記のようなコマンドになります:\n"
"\n"
" PerlSetVar WhatEverDomain .yourhost.com\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、 '.yourhost.com' で終わる全てのホストから Cookie "
"にアクセスできるようになります。\n"
"\n"
"* 5.\n"
"\n"
"必要であれば、 'CookieName' ディレクティブを利用して、 Cookie の名前を指定することができます。たとえば、 AuthName が "
"'WhatEver' であるとすると、下記のようなコマンドになります:\n"
"\n"
" PerlSetVar WhatEverCookieName MyCustomName\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、 AuthCookie の名前が MyCustomName になります。既定値は "
"AuthType_AuthName です。\n"
"\n"
"* 6.\n"
"\n"
"既定では、ユーザが全ての 'require' ディレクティブを満たさなければなりません。任意の 'require' "
"ディレクティブを満たすだけでアクセスを許可したい場合は、 'Satisfy' ディレクティブを使用します。たとえば、 AuthName が "
"'WhatEver' であるとすると、下記のようなコマンドになります:\n"
"\n"
" PerlSetVar WhatEverSatisfy Any\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、任意の 'require' ディレクティブを満たすことでアクセスを許可するようになります。\n"
"\n"
"下記は認証ハンドラの流れを図にしたものです (リダイレクトについての詳細は省いています) 。 2 つのリダイレクト (REDIRECT) は、"
"クライアントに対してユーザの認証情報を Location フィールドに表示させないための仕組みです。この方法では AuthCookie "
"のモデルを変更することはありませんが、クライアントとの往復回数が増えてしまいます。\n"
"\n"
" (-----------------------)     +---------------------------------+  ( "
"Request a protected   )     | AuthCookie sets custom error    |  ( page, but "
"user hasn't )---->| document and returns            |  ( authenticated ("
"no     )     | FORBIDDEN. Apache abandons      |  ( session key cookie)   )"
"     | current request and creates sub |  (-----------------------)     | "
"request for the error document. |<-+                                | Error "
"document is a script that |  |                                | generates a "
"form where the user |  |                  return        | enters "
"authentication           |  |           ^------------------->| credentials ("
"login & password). |  |          / \\      False        "
"+---------------------------------+  |         /   \\"
"                                   |                   |        /     \\"
"                                  |                   |       /       \\"
"                                 V                   |      /         \\"
"               +---------------------------------+  |     /   Pass    \\"
"              | User's client submits this form |  |    /   user's    \\"
"             | to the LOGIN URL, which calls   |  |    | credentials "
"|<------------| AuthCookie->login().            |  |    \\     to      /"
"             +---------------------------------+  |     \\authen_cred/"
"                                                   |      \\ function/"
"                                                    |       \\       /"
"                                                     |        \\     /"
"                                                      |         \\   /"
"            +------------------------------------+     |          \\ /   "
"return    | Authen cred returns a session      |  +--+           "
"V------------->| key which is opaque to AuthCookie.*|  |                 "
"True     +------------------------------------+  |"
"                                               |                  |"
"                +--------------------+         |      +---------------+"
"                |                    |         |      | If we had a   |"
"                V                    |         V      | cookie, add   |   "
"+----------------------------+  r |         ^      | a Set-Cookie  |   | If "
"we didn't have a session|  e |T       / \\     | header to     |   | key "
"cookie, add a          |  t |r      /   \\    | override the  |   | Set-"
"Cookie header with this|  u |u     /     \\   | invalid cookie|   | session "
"key. Client then   |  r |e    /       \\  +---------------+   | returns "
"session key with   |  n |    /  pass   \\               ^   | successive "
"requests        |    |   /  session  \\              |   "
"+----------------------------+    |  /   key to    \\    return   |"
"                |                    +-| authen_ses_key|------------+"
"                V                       \\             /     False   "
"+-----------------------------------+ \\           /   | Tell Apache to set "
"Expires header,|  \\         /   | set user to user ID returned by   |   \\"
"       /   | authen_ses_key, set authentication|    \\     /   | to our type "
"(e.g. AuthCookie).    |     \\   /   +-----------------------------------+"
"      \\ /                                               V          "
"(---------------------)              ^          ( Request a protected )"
"              |          ( page, user has a    )--------------+          ( "
"session key cookie  )          (---------------------)\n"
"\n"
"  *  クライアントが取得するセッション鍵は、任意のものでかまいません。たとえばユーザに関する情報を暗号化して保持してもかまいませんし、"
"ユーザ名とパスワードをハッシュ化したもの (Digest 認証のように) でもかまいません。もちろん、ユーザ名とパスワードをそのまま (HTTP "
"Basic 認証のように) 記述してもかまいません。\n"
"\n"
"    唯一の要件は、 authen_ses_key でセッション鍵の検証ができることと、セッション鍵から認証済みのユーザ ID "
"を参照できることだけです。"

#. tumbleweed/perl-Apache-DBI/summary
#. leap/perl-Apache-DBI/summary
msgid "Initiate a persistent database connection"
msgstr "持続性のあるデータベース接続の準備"

#. tumbleweed/perl-Apache-DBI/description
#. leap/perl-Apache-DBI/description
msgid ""
"This module initiates a persistent database connection.\n"
"\n"
"The database access uses Perl's DBI. For supported DBI drivers see:\n"
"\n"
" http://dbi.perl.org/\n"
"\n"
"When loading the DBI module (do not confuse this with the Apache::DBI "
"module) it checks if the environment variable 'MOD_PERL' has been set and if "
"the module Apache::DBI has been loaded. In this case every connect request "
"will be forwarded to the Apache::DBI module. This checks if a database "
"handle from a previous connect request is already stored and if this handle "
"is still valid using the ping method. If these two conditions are fulfilled "
"it just returns the database handle. The parameters defining the connection "
"have to be exactly the same, including the connect attributes! If there is "
"no appropriate database handle or if the ping method fails, a new connection "
"is established and the handle is stored for later re-use. There is no need "
"to remove the disconnect statements from your code. They won't do anything "
"because the Apache::DBI module overloads the disconnect method."
msgstr ""
"このモジュールは、データベースとの永続的な接続を行ないます。\n"
"\n"
"データベースへのアクセスは Perl の DBI を使用します。対応する DBI ドライバに"
"ついて、詳しくは下記をお読みください:\n"
"\n"
" http://dbi.perl.org/\n"
"\n"
"DBI モジュールを読み込む際 (Apache::DBI ではありません！) 、環境変数の "
"'MOD_PERL' が設定されているかどうかと、 Apache::DBI が読み込まれているかどう"
"かを確認します。それぞれのリクエストが Apache::DBI に渡るものと仮定すると、こ"
"れによって直前のリクエスト内で作成されたデータベースハンドルが存在するかどう"
"かを確認し、存在していれば ping メソッドで通信をチェックします。データベース"
"ハンドルが存在していて ping メソッドにも問題がなければ、そのデータベースハン"
"ドルをそのまま返します。接続の属性を含め、データベース接続の設定は全く同じに"
"なります。もしも適切なデータベースハンドルが存在していなかったり、 ping メ"
"ソッドが失敗したりした場合は、新しい接続を開いて、後からの再利用のためにその"
"ハンドルを保存します。もちろんお使いのコードから、disconnect ステートメントを"
"削除する必要もありません。 Apache::DBI 側でdisconnect リクエストをオーバライ"
"ドしていますので、何も心配する必要はありません。"

#. tumbleweed/perl-Apache-LogFormat-Compiler/summary
#. leap/perl-Apache-LogFormat-Compiler/summary
msgid "Compile a log format string to perl-code"
msgstr "ログ書式文字列からの Perl コードへのコンパイル"

#. tumbleweed/perl-Apache-LogFormat-Compiler/description
#. leap/perl-Apache-LogFormat-Compiler/description
msgid ""
"Compile a log format string to perl-code. For faster generation of "
"access_log lines."
msgstr "ログ書式文字列を Perl のコードにコンパイルします。 access_log の行をより高速に生成するための仕組みです。"

#. tumbleweed/perl-Apache-Session/summary
#. leap/perl-Apache-Session/summary
msgid "A persistence framework for session data"
msgstr "セッションデータ向け永続フレームワーク"

#. tumbleweed/perl-Apache-Session/description
#. leap/perl-Apache-Session/description
msgid ""
"Apache::Session is a persistence framework which is particularly useful for "
"tracking session data between httpd requests. Apache::Session is designed to "
"work with Apache and mod_perl, but it should work under CGI and other web "
"servers, and it also works outside of a web server altogether.\n"
"\n"
"Apache::Session consists of five components: the interface, the object "
"store, the lock manager, the ID generator, and the serializer. The interface "
"is defined in Session.pm, which is meant to be easily subclassed. The object "
"store can be the filesystem, a Berkeley DB, a MySQL DB, an Oracle DB, a "
"Postgres DB, Sybase, or Informix. Locking is done by lock files, semaphores, "
"or the locking capabilities of the various databases. Serialization is done "
"via Storable, and optionally ASCII-fied via MIME or pack(). ID numbers are "
"generated via MD5. The reader is encouraged to extend these capabilities to "
"meet his own requirements.\n"
"\n"
"A derived class of Apache::Session is used to tie together the three "
"following components. The derived class inherits the interface from Apache::"
"Session, and specifies which store and locker classes to use. Apache::"
"Session::MySQL, for instance, uses the MySQL storage class and also the "
"MySQL locking class. You can easily plug in your own object store or locker "
"class."
msgstr ""
"Apache::Session は httpd リクエスト間をまたがるセッションについて、それを追跡"
"するのに特に便利な永続フレームワークです。 Apache::Session は Apache と "
"mod_perl を利用するよう設計されていますが、他の CGI や Web サーバでも動作する"
"ほか、 Web サーバ外でも利用することができます。\n"
"\n"
"Apache::Session は 5 種類のコンポーネントから構成されています。それぞれイン"
"ターフェイス, オブジェクトストア, ロックマネージャ, ID 生成器, シリアライザで"
"す。インターフェイスは Session.pm 内で定義されていて、容易にサブクラス化がで"
"きるようになっています。オブジェクトストアはファイルシステムのほか、 "
"Berkeley DB や MySQL DB, Oracle DB, Postgres DB, Sybase, Informix などを利用"
"することができます。ロック機構はファイルロックのほか、セマフォやデータベース"
"に搭載されたロックを利用して提供されます。シリアライズは Storable のほか、オ"
"プションで MIME を利用した ASCII 化や pack() を利用することができます。 ID "
"は MD5 で生成されます。なお、これらの機能を拡張して必要な要件に合うようにして"
"ください。\n"
"\n"
"派生クラスである Apache::Session は、 3 種類のコンポーネントの組み合わせから"
"なっています。派生クラスは Apache::Session のインターフェイスを継承していて、"
"どのストアやロッカークラスを使用するのかを指定しています。たとえば Apache::"
"Session::MySQL は、 MySQL のストレージクラスとロック機構を使用しています。容"
"易に独自のオブジェクトストアやロッカークラスを使用することもできます。"

#. tumbleweed/perl-Apache2-AuthCookieDBI/summary
#. leap/perl-Apache2-AuthCookieDBI/summary
msgid "An AuthCookie module backed by a DBI database."
msgstr "DBI データベースをバックエンドとする AuthCookie モジュール"

#. tumbleweed/perl-Apache2-AuthCookieDBI/description
#. leap/perl-Apache2-AuthCookieDBI/description
msgid ""
"This module is an authentication handler that uses the basic mechanism "
"provided by Apache2::AuthCookie with a DBI database for ticket-based "
"protection. It is based on two tokens being provided, a username and "
"password, which can be any strings (there are no illegal characters for "
"either). The username is used to set the remote user as if Basic "
"Authentication was used.\n"
"\n"
"On an attempt to access a protected location without a valid cookie being "
"provided, the module prints an HTML login form (produced by a CGI or any "
"other handler; this can be a static file if you want to always send people "
"to the same entry page when they log in). This login form has fields for "
"username and password. On submitting it, the username and password are "
"looked up in the DBI database. The supplied password is checked against the "
"password in the database; the password in the database can be plaintext, or "
"a crypt() or md5_hex() checksum of the password. If this succeeds, the user "
"is issued a ticket. This ticket contains the username, an issue time, an "
"expire time, and an MD5 checksum of those and a secret key for the server. "
"It can optionally be encrypted before returning it to the client in the "
"cookie; encryption is only useful for preventing the client from seeing the "
"expire time. If you wish to protect passwords in transport, use an SSL-"
"encrypted connection. The ticket is given in a cookie that the browser "
"stores.\n"
"\n"
"After a login the user is redirected to the location they originally wished "
"to view (or to a fixed page if the login \"script\" was really a static "
"file).\n"
"\n"
"On this access and any subsequent attempt to access a protected document, "
"the browser returns the ticket to the server. The server unencrypts it if "
"encrypted tickets are enabled, then extracts the username, issue time, "
"expire time and checksum. A new checksum is calculated of the username, "
"issue time, expire time and the secret key again; if it agrees with the "
"checksum that the client supplied, we know that the data has not been "
"tampered with. We next check that the expire time has not passed. If not, "
"the ticket is still good, so we set the username.\n"
"\n"
"Authorization checks then check that any \"require valid-user\" or \"require "
"user jacob\" settings are passed. Finally, if a \"require group foo\" "
"directive was given, the module will look up the username in a groups "
"database and check that the user is a member of one of the groups listed. If "
"all these checks pass, the document requested is displayed.\n"
"\n"
"If a ticket has expired or is otherwise invalid it is cleared in the browser "
"and the login form is shown again."
msgstr ""
"このモジュールは、チケットベースの保護を DBI データベースを利用して実施する Apache2::AuthCookie "
"モジュールに対して、その基本的な機構を使用する認証ハンドラです。提供される 2 "
"つのトークン、具体的には二回の文字を利用することのできる、ユーザ名とパスワードをベースにしているものです。ユーザ名は、 Basic "
"認証を利用している際にリモートユーザとしても使用されるものです。\n"
"\n"
"正しい Cookie が提示されない状況下で保護された場所にアクセスが到達すると、このモジュールは HTML のログインフォームを表示します。"
"表示にあたっては CGI または任意のハンドラを利用することができるほか、ログイン時に個別のフォームを表示する必要がなければ、静的なファイルを表示すること"
"もできます。このログインフォームにはユーザ名とパスワードの閣フィールドが存在しているものとします。フォームを送信すると、 DBI "
"データベース内でユーザ名とパスワードを検索します。パスワードはデータベース内で検索を行ないますが、パスワードはプレーンテキスト "
"(何も暗号化していないテキスト) のほか、 crypt() や md5_hex() "
"でチェックサムとしてパスワードを検索することもできます。検索が成功すると、ユーザに対してチケットが発行されます。チケットにはユーザ名と発行日時のほか、"
"期限切れ日時とサーバの機密鍵に対する MD5 のチェックサムが含まれます。このほか、クライアントに Cookie を返す際に、それらを暗号化することもでき"
"ます。暗号化は期限切れ日時をクライアント側に隠蔽したりする際に便利な仕組みです。パスワードの送信を保護したい場合は、 SSL での暗号化を利用します。 "
"Cookie はブラウザ側に保存され、後続のリクエストで送信するようになります。\n"
"\n"
"ユーザがログインしたあとは、もともとユーザがリクエストしていたページに再転送されます "
"(ログインスクリプトが静的なファイルであった場合は、固定のページに戻ります) 。\n"
"\n"
"このアクセス、もしくは後続のアクセスで保護対象の文書が指定されると、ブラウザはサーバに対してチケットを送信します。サーバはチケットが暗号化されていればそれ"
"を解読し、ユーザ名と発行日時、期限切れ日時とチェックサムを取り出します。サーバ側では、ユーザ名と発行日時、期限切れ日時と機密鍵を利用してチェックサムを計算"
"し直します; もしもクライアントが送信したチェックサムとサーバ側で計算したチェックサムが正しければ、それらは改ざんされていないものと判断することができます"
"。また、期限切れの日時が過ぎていないかどうかもチェックします。\n"
"\n"
"認証チェックでは、まず \"require valid-user\" もしくは \"require user jacob\" "
"のような設定をチェックします。最後に \"require group foo\" のようなディレクティブが存在すれば、モジュールはグループデータベースを検"
"索して、指定されたグループのメンバー内に、ユーザが存在するかどうかを確認します。全てのチェックで問題がなければ、要求された文書が表示されます。\n"
"\n"
"チケットの期限が切れていたり、何らかの不整合が検出されると、ブラウザ内の Cookie は消去され、再度ログインフォームが表示されます。"

#. tumbleweed/perl-App-CELL/summary
#. leap/perl-App-CELL/summary
msgid "Configuration, Error-handling, Localization, and Logging"
msgstr "設定／エラー処理／ローカライズ／ログ"

#. tumbleweed/perl-App-CELL/description
msgid ""
"This is the top-level module of App::CELL, the Configuration, Error-"
"handling, Localization, and Logging framework for applications (or scripts) "
"written in Perl.\n"
"\n"
"For details, read the POD in the App::CELL distro. For an introduction, read "
"App::CELL::Guide."
msgstr ""
"これは App::CELL のトップレベルモジュールで、 Perl "
"で書かれたアプリケーション向けに設定やエラー処理、ローカライズやログ処理のフレームワークを提供するものです。\n"
"\n"
"詳しくは App::CELL 配布物の POD をお読みください。また、概要については App::CELL::Guide をお読みください。"

#. tumbleweed/perl-App-CLI/summary
#. leap/perl-App-CLI/summary
msgid "Dispatcher module for command line interface programs"
msgstr "コマンドラインインターフェイスプログラム向けディスパッチャモジュール"

#. tumbleweed/perl-App-CLI/description
#. leap/perl-App-CLI/description
msgid ""
"'App::CLI' dispatches CLI (command line interface) based commands into "
"command classes. It also supports subcommand and per-command options.\n"
"\n"
"get_opt([@config], %opt_map)         give options map, process by Getopt::"
"Long::Parser\n"
"\n"
"interface of dispatcher\n"
"\n"
"cmd_map($cmd)     find package name of subcommand in constant %alias\n"
"\n"
"    if it's finded, return ucfirst of the package name,\n"
"\n"
"    otherwise, return ucfirst of $cmd itself.\n"
"\n"
"get_cmd($cmd, @arg)     return subcommand of first level via $ARGV[0]"
msgstr ""
"'App::CLI' は CLI (コマンドラインインターフェイス) "
"ベースのコマンドをコマンドクラスに送信するためのモジュールです。サブコマンドやコマンド別のオプションにも対応しています。\n"
"\n"
"get_opt([@config], %opt_map)         オプションマップの取得 (Getopt::Long::Parser "
"で処理されます)\n"
"\n"
"cmd_map($cmd)     定数 %alias 内でサブコマンドのパッケージ名の検索。見つかった場合はパッケージ名の ucfirst が、"
"見つからなかった場合は $cmd 自身の ucfirst が返されます\n"
"\n"
"get_cmd($cmd, @arg)     $ARGV[0] を利用して最初のレベルのサブコマンドを返します"

#. tumbleweed/perl-App-Cmd/summary
#. leap/perl-App-Cmd/summary
msgid "Write Command Line Apps with Less Suffering"
msgstr "難なくコマンドラインアプリを作成するための仕組み"

#. tumbleweed/perl-App-Cmd/description
msgid ""
"App::Cmd is intended to make it easy to write complex command-line "
"applications without having to think about most of the annoying things "
"usually involved.\n"
"\n"
"For information on how to start using App::Cmd, see App::Cmd::Tutorial."
msgstr ""
"App::Cmd は複雑なコマンドラインアプリケーションを、よくある手間に悩まされることなく簡単に作成できるようにすることができるモジュールです。\n"
"\n"
"App::Cmd の使い始め方について、詳しくは App::Cmd::Tutorial をお読みください。"

#. tumbleweed/perl-App-Dochazka-CLI/summary
#. leap/perl-App-Dochazka-CLI/summary
#| msgid "The OpenLDAP commandline client tools"
msgid "Dochazka command line client"
msgstr "Dochazka コマンドラインクライアント"

#. tumbleweed/perl-App-Dochazka-CLI/description
msgid ""
"App::Dochazka::CLI is the Command Line Interface (CLI) component of the "
"Dochazka Attendance & Time Tracking system.\n"
"\n"
"In order to work, the CLI must be pointed at a running App::Dochazka::REST "
"(i.e., Dochazka REST server) instance by setting the 'MREST_CLI_URI_BASE' "
"meta configuration parameter.\n"
"\n"
"Detailed documentation covering configuration, deployment, and the commands "
"that can be used with the CLI can be found in App::Dochazka::CLI::Guide.\n"
"\n"
"This module is used to store some \"global\" package variables that are used "
"throughout the CLI code base."
msgstr ""
"App::Dochazka::CLI は Dochazka 会議管理／時間管理システムのコマンドラインインターフェイス (CLI) コンポーネントです。"
"\n"
"\n"
"このモジュールを動作させるには、 'MREST_CLI_URI_BASE' メタ設定パラメータを指定して、 CLI が App::Dochazka::"
"REST が実行されているマシン (Dochazka REST サーバ) を示すように設定しなければなりません。\n"
"\n"
"設定や配置、 CLI で利用可能なコマンドなどについて、詳しくは App::Dochzka::CLI::Guide をお読みください。\n"
"\n"
"このモジュールは、 CLI のコードベース内で使用されるいくつかの \"グローバル\" パッケージを保持しています。"

#. tumbleweed/perl-App-Dochazka-Common/summary
#. leap/perl-App-Dochazka-Common/summary
msgid "Dochazka Attendance and Time Tracking System shared modules"
msgstr "Dochazka 会議管理／時間管理共有モジュール"

#. tumbleweed/perl-App-Dochazka-Common/description
msgid ""
"This distro contains modules that are used by both the server App::Dochazka::"
"REST and the command-line client App::Dochazka::CLI."
msgstr ""
"この配布物には、サーバとして動作する App::Dochazka::REST とコマンドラインクライアントである App::Dochazka::CLI "
"の両方で使用される、共有モジュールが含まれています。"

#. tumbleweed/perl-App-Dochazka-REST/summary
msgid "Dochazka REST server"
msgstr "Dochazka REST サーバ"

#. tumbleweed/perl-App-Dochazka-REST/description
msgid ""
"This distribution, App::Dochazka::REST, including all the modules in 'lib/', "
"the scripts in 'bin/', and the configuration files in 'config/', constitutes "
"the REST server (API) component of Dochazka, the open-source Attendance/Time "
"Tracking (ATT) system.\n"
"\n"
"Dochazka as a whole aims to be a convenient, open-source ATT solution."
msgstr ""
"この配布物 (App::Dochazka::REST) には、 'lib/' 内に全てのモジュールが、 'bin/' 内にスクリプトが、 'config/"
"' 内に設定ファイルがそれぞれ含まれています。これにより、 Dochazka (オープンソースの会議管理／時間管理 (ATT) システム) の REST "
"サーバ (API) コンポーネントを構成します。\n"
"\n"
"Dochazka は便利なオープンソース ATT ソリューションを提供しています。"

#. tumbleweed/perl-App-Dochazka-WWW/summary
msgid "Dochazka Attendance & Time Tracking system web client"
msgstr "Dochazka 会議管理／時間管理システムの Web クライアント"

#. tumbleweed/perl-App-Dochazka-WWW/description
msgid ""
"This is the web client of the Dochazka Attendance & Time Tracking system. "
"For more information see the App::Dochazka::REST manpage and the App::MFILE::"
"WWW manpage."
msgstr ""
"これは Dochazka 会議管理／時間管理システムの Web クライアントです。詳しい情報は App::Dochazka::REST および "
"App::MFILE::WWW をご覧ください。"

#. tumbleweed/perl-App-FatPacker/summary
#. leap/perl-App-FatPacker/summary
msgid "Pack Your Dependencies Onto Your Script File"
msgstr "スクリプトファイル内への依存関係の取り込み"

#. tumbleweed/perl-App-FatPacker/description
#. leap/perl-App-FatPacker/description
msgid "pack your dependencies onto your script file"
msgstr "お使いのスクリプトファイル内に、依存関係となるものを取り込むことができます。"

#. tumbleweed/perl-App-MFILE/summary
#| msgid "CMake modules"
msgid "MFILE shared modules"
msgstr "MFILE 共有モジュール"

#. tumbleweed/perl-App-MFILE/description
msgid ""
"This distro consists of general, reusable modules. Currently, there is only "
"one module, App::MFILE::HTTP, which is used by App::MFILE::WWW, App::"
"Dochazka::WWW, and App::Dochazka::CLI."
msgstr ""
"この配布物には、汎用的で再利用性のあるモジュールが含まれています。現時点では、 App::MFILE::HTTP "
"と呼ばれるモジュールだけが含まれています。これはそれぞれ App::MFILE::WWW, App::Dochazka::WWW, "
"App::Dochazka::CLI で使用されています。"

#. tumbleweed/perl-App-MFILE-WWW/summary
msgid "Web UI development toolkit with prototype demo app"
msgstr "プロトタイプデモアプリが付属する Web UI 開発ツールキット"

#. tumbleweed/perl-App-MFILE-WWW/description
msgid ""
"This distro contains a foundation/framework/toolkit for developing the "
"\"front end\" portion of web applications.\n"
"\n"
"App::MFILE::WWW is a Plack application that provides a HTTP request-response "
"handler (based on Web::Machine), CSS and HTML source code for an in-browser "
"\"screen\", and JavaScript code for displaying various \"widgets\" (menus, "
"forms, etc.) in that screen and for processing user input from within those "
"widgets.\n"
"\n"
"In addition, infrastructure is included (but need not be used) for user "
"authentication, session management, and communication with a backend server "
"via AJAX calls.\n"
"\n"
"Front ends built with App::MFILE::WWW will typicaly be menu-driven, "
"consisting exclusively of fixed-width Unicode text, and capable of being "
"controlled from the keyboard, without the use of a mouse. The overall look-"
"and-feel is reminiscent of the text terminal era.\n"
"\n"
"The distro comes with a prototype (demo) application to illustrate how the "
"various widgets are used."
msgstr ""
"この配布物には、 Web アプリケーションの \"フロントエンド\" を開発するための基礎／フレームワーク／ツールキットが含まれています。\n"
"\n"
"App::MFILE::WWW は (Web::Machine をベースにして) HTTP のリクエスト／レスポンスヘッダや CSS, HTML "
"ソースコードをブラウザ内の \"画面\" として提供する Plack アプリケーションです。このほか、様々な \"ウイジェット\" を画面内に表示し、"
"それらに対してユーザからの入力を受け付けるための JavaScript コードも含まれています。\n"
"\n"
"これに加えて、ユーザ認証やセッション管理、 AJAX コールを介したバックエンドサーバとの通信などを行なうための、インフラストラクチャも含まれています。"
"\n"
"\n"
"App::MFILE::WWW で構築されたフロントエンドは一般に、等幅の Unicode テキストを利用して、マウス無しでもキーボードだけで操作すること"
"のできるメニューを中心に、動作する仕組みとなります。外観はテキストターミナルを使っていた時代のものを提供しています。\n"
"\n"
"この配布物には、様々なウイジェットに対する使用方法を説明するためのプロトタイプ (デモ) アプリケーションも含まれています。"

#. tumbleweed/perl-App-Nopaste/summary
#. leap/perl-App-Nopaste/summary
msgid "Easy access to any pastebin"
msgstr "任意の pastebin に対する簡易アクセス"

#. tumbleweed/perl-App-Nopaste/description
#. leap/perl-App-Nopaste/description
msgid ""
"Pastebins (also known as nopaste sites) let you post text, usually code, for "
"public viewing. They're used a lot in IRC channels to show code that would "
"normally be too long to give directly in the channel (hence the name "
"nopaste).\n"
"\n"
"Each pastebin is slightly different. When one pastebin goes down (I'm "
"looking at you, http://paste.husk.org), then you have to find a new one. And "
"if you usually use a script to publish text, then it's too much hassle.\n"
"\n"
"This module aims to smooth out the differences between pastebins, and "
"provides redundancy: if one site doesn't work, it just tries a different "
"one.\n"
"\n"
"It's also modular: you only need to put on CPAN a App::Nopaste::Service::Foo "
"module and anyone can begin using it."
msgstr ""
"pastebin (nopaste サイトとしても知られています) では、テキスト (主にソースコード) を投稿してそれを公開する機能を提供しています。"
"様々な IRC チャンネルでは、このサイトを利用することで、冗長なテキストをそのまま貼り付けてしまわないようにしています (そのような理由から、 \""
"nopaste\" (貼らないで) という名前がつけられています) 。\n"
"\n"
"各 pastebin のサイトは少しずつ異なります。いずれかの pastebin のサイトがダウンした場合 (たとえば http://"
"paste.husk.org など) "
"でも、別のサイトを利用することができますが、テキストを公開する際にスクリプトを利用しているような場合は、少し面倒です。\n"
"\n"
"このモジュールは、様々な pastebin サイトにおける差異を吸収し、冗長性を提供することを目的にしています: "
"いずれかのサイトがダウンしても、そのまま別のサイトを利用できるようにします。\n"
"\n"
"また、このモジュールはサブモジュールを作成することもできます。 CPAN に対して App::Nopaste::Service::Foo "
"のようなモジュールを投稿すれば、他の利用者から使うことができるようになります。"

#. tumbleweed/perl-App-cpanminus/summary
#. leap/perl-App-cpanminus/summary
msgid "Get, Unpack, Build and Install Modules From Cpan"
msgstr "CPAN 提供のモジュールの取得／展開／構築／インストール"

#. tumbleweed/perl-App-cpanminus/description
#. leap/perl-App-cpanminus/description
msgid ""
"cpanminus is a script to get, unpack, build and install modules from CPAN "
"and does nothing else.\n"
"\n"
"It's dependency free (can bootstrap itself), requires zero configuration, "
"and stands alone. When running, it requires only 10MB of RAM."
msgstr ""
"cpanminus は CPAN が提供するモジュールを取得し、展開し、構築し、インストールするためだけのモジュールです。\n"
"\n"
"依存関係が無く (ブートストラップとして利用できます) 、設定不要で単独動作します。また、実行中は 10MB 程度の RAM で動作します。"

#. tumbleweed/perl-App-perlbrew/summary
#. tumbleweed/perl-App-perlbrew/description
msgid "Manage perl installations in your C<$HOME>"
msgstr "C<$HOME> 内での Perl インストールの管理"

#. tumbleweed/perl-AppConfig/summary
#. leap/perl-AppConfig/summary
msgid ""
"Perl5 module for reading configuration files and parsing command line ar[cut]"
msgstr "設定ファイルの読み込みとコマンドライン引数を処理する Perl5 モジュール"

#. tumbleweed/perl-AppConfig/description
#. leap/perl-AppConfig/description
msgid ""
"Perl5 module for reading configuration files and parsing command line "
"arguments."
msgstr ""
"設定ファイルの読み込みとコマンドライン引数を処理する Perl5 モジュールです。"

#. tumbleweed/perl-Archive-Extract/summary
#. leap/perl-Archive-Extract/summary
msgid "Generic Archive Extracting Mechanism"
msgstr "汎用書庫抽出メカニズム"

#. tumbleweed/perl-Archive-Extract/description
#. leap/perl-Archive-Extract/description
msgid ""
"Archive::Extract is a generic archive extraction mechanism.\n"
"\n"
"It allows you to extract any archive file of the type .tar, .tar.gz, .gz, ."
"Z, tar.bz2, .tbz, .bz2, .zip, .xz,, .txz, .tar.xz or .lzma without having to "
"worry how it does so, or use different interfaces for each type by using "
"either perl modules, or commandline tools on your system.\n"
"\n"
"See the 'HOW IT WORKS' section further down for details."
msgstr ""
"Archive::Extract は汎用の書庫抽出メカニズムです。\n"
"\n"
"他の Perl モジュールのようにそれぞれ別々のインターフェイスやコマンドラインツールを利用したりすることなく、  .tar, .tar.gz, "
".gz, .Z, tar.bz2, .tbz, .bz2, .zip, .xz,, .txz, .tar.xz, .lzma "
"などの書庫を展開することができます。\n"
"\n"
"詳しくは 'HOW IT WORKS' セクションをお読みください。"

#. tumbleweed/perl-Archive-Peek/summary
#. leap/perl-Archive-Peek/summary
msgid "Peek into archives without extracting them"
msgstr "書庫を抽出せずにアクセスするモジュール"

#. tumbleweed/perl-Archive-Peek/description
#. leap/perl-Archive-Peek/description
msgid ""
"This module lets you peek into archives without extracting them. It "
"currently supports tar files and zip files. To support Bzip2- compressed "
"files, you should install IO::Uncompress::Bunzip2."
msgstr ""
"このモジュールは、書庫の内容に対して、それを抽出することなくアクセスする機能を提供します。現時点では tar, zip の各ファイルに対応しています。 "
"bzip2 圧縮ファイルに対応するには、 IO::Uncompresss::Bunzip2 をインストールする必要があります。"

#. tumbleweed/perl-Archive-Zip/summary
#. leap/perl-Archive-Zip/summary
msgid "Provide an interface to ZIP archive files"
msgstr "ZIP アーカイブファイルへのインターフェイス"

#. tumbleweed/perl-Archive-Zip/description
#. leap/perl-Archive-Zip/description
msgid ""
"The Archive::Zip module allows a Perl program to create, manipulate, read, "
"and write Zip archive files.\n"
"\n"
"Zip archives can be created, or you can read from existing zip files.\n"
"\n"
"Once created, they can be written to files, streams, or strings. Members can "
"be added, removed, extracted, replaced, rearranged, and enumerated. They can "
"also be renamed or have their dates, comments, or other attributes queried "
"or modified. Their data can be compressed or uncompressed as needed.\n"
"\n"
"Members can be created from members in existing Zip files, or from existing "
"directories, files, or strings.\n"
"\n"
"This module uses the Compress::Raw::Zlib library to read and write the "
"compressed streams inside the files.\n"
"\n"
"One can use Archive::Zip::MemberRead to read the zip file archive members as "
"if they were files."
msgstr ""
"Archive::Zip モジュールは、 Perl プログラムから zip の書庫形式を作成／操作／読み込み／書き込みするためのモジュールです。\n"
"\n"
"新しい zip ファイルを作成したり、既存の zip ファイルを読み込んだりすることもできます。\n"
"\n"
"zip 形式の書庫を作成するにあたっては、ファイルやストリーム、文字列をそれぞれ書き込み先として指定することができます。書庫内のファイルに対しては、追加や"
"削除、抽出や再配置、列挙などを行なうことができます。ファイル名の変更や日付の変更、コメントやその他の属性を問い合わせたり、修正したりすることもできます。こ"
"れらの付属データは、圧縮することができるほか、非圧縮でも保存することができます。\n"
"\n"
"このほか、書庫内のファイルを既存の zip ファイルから作成することができるほか、既存のディレクトリやファイル、文字列から作成することもできます。\n"
"\n"
"このモジュールは、ファイル内の圧縮済みストリームを読み書きするにあたって、 Compress::Raw::Zlib を使用しています。\n"
"\n"
"なお、書庫内のファイルについては、 Archive::Zip::MemberRead を利用することで読み込むこともできます。"

#. tumbleweed/perl-Array-Unique/summary
#. leap/perl-Array-Unique/summary
msgid "Tie-able array that allows only unique values"
msgstr "ユニーク値のみを許可する tie 可能な配列"

#. tumbleweed/perl-Array-Unique/description
#. leap/perl-Array-Unique/description
msgid ""
"This package lets you create an array which will allow only one occurrence "
"of any value.\n"
"\n"
"In other words no matter how many times you put in 42 it will keep only the "
"first occurrence and the rest will be dropped.\n"
"\n"
"You use the module via tie and once you tied your array to this module it "
"will behave correctly.\n"
"\n"
"Uniqueness is checked with the 'eq' operator so among other things it is "
"case sensitive.\n"
"\n"
"As a side effect the module does not allow undef as a value in the array."
msgstr ""
"このパッケージには、それぞれの値が一度だけ現われることを許可する配列の機能を提供します。\n"
"\n"
"たとえば 42 という値を何度も投入しても、最初の 1 つだけが保持され、残りは廃棄されます。\n"
"\n"
"このモジュールは tie を介しても使用することができますし、 tie を利用すれば適切に動作します。\n"
"\n"
"値の唯一性は 'eq' 演算子を利用してチェックされるため、大文字と小文字を区別して保存します。\n"
"\n"
"また、このモジュールは undef の値は許可していません。"

#. tumbleweed/perl-Authen-Passphrase/summary
#. leap/perl-Authen-Passphrase/summary
msgid "Hashed Passwords/Passphrases As Objects"
msgstr "オブジェクト形式でのハッシュ済みパスワード／パスフレーズ"

#. tumbleweed/perl-Authen-Passphrase/description
#. leap/perl-Authen-Passphrase/description
msgid ""
"This is the base class for a system of objects that encapsulate passphrases. "
"An object of this type is a passphrase recogniser: its job is to recognise "
"whether an offered passphrase is the right one. For security, such "
"passphrase recognisers usually do not themselves know the passphrase they "
"are looking for; they can merely recognise it when they see it. There are "
"many schemes in use to achieve this effect, and the intent of this class is "
"to provide a consistent interface to them all, hiding the details.\n"
"\n"
"The CPAN package Authen-Passphrase contains implementations of several "
"specific passphrase schemes in addition to the base class. See the specific "
"classes for notes on the security properties of each scheme. In new systems, "
"if there is a choice of which passphrase algorithm to use, it is recommended "
"to use the Authen::Passphrase::SaltedDigest manpage or the Authen::"
"Passphrase::BlowfishCrypt manpage. Most other schemes are too weak for new "
"applications, and should be used only for backward compatibility."
msgstr ""
"このモジュールは、パスフレーズをカプセル化するためのオブジェクトのベースクラスです。このタイプのオブジェクトはパスフレーズを認識するものとして動作し、保持"
"しているパスフレーズと入力されたパスフレーズが正しいかどうかを判断します。セキュリティ上の理由から、パスフレーズ認識用のオブジェクトは、自身のパスフレーズ"
"そのものは保持おらず、それが正しいかどうかのみを判断することができます。このような動作を実現するための方法は様々ありますが、このクラスはその方法の詳細に関"
"係なく、画一的なインターフェイスを提供することを目指しています。\n"
"\n"
"CPAN パッケージ Authen-Passphrase には、ベースクラスに加えていくつかの固有のパスフレーズ方式を実装しています。各方式におけるセキュ"
"リティ情報について、詳しくは各クラスのメモをお読みください。新しいシステムでは使用するパスフレーズ方式を選択することもできます。お勧めは "
"Authen::Passphrase::SaltedDigest もしくは Authen::Passphrase::BlowfishCrypt "
"です。それ以外の方式は新しいアプリケーション向けには脆弱なものであり、後方互換性のためだけに使用すべきものです。"

#. tumbleweed/perl-Authen-SASL/summary
#. leap/perl-Authen-SASL/summary
msgid "SASL Authentication framework"
msgstr "SASL 認証フレームワーク"

#. tumbleweed/perl-Authen-SASL/description
#. leap/perl-Authen-SASL/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols. *Authen::SASL* provides an implementation framework that all "
"protocols should be able to share.\n"
"\n"
"The framework allows different implementations of the connection class to be "
"plugged in. At the time of writing there were two such plugins.\n"
"\n"
"* Authen::SASL::Perl\n"
"\n"
"  This module implements several mechanisms and is implemented entirely in   "
"Perl.\n"
"\n"
"* Authen::SASL::XS\n"
"\n"
"  This module uses the Cyrus SASL C-library (both version 1 and 2 are   "
"supported).\n"
"\n"
"* Authen::SASL::Cyrus\n"
"\n"
"  This module is the predecessor to the Authen::SASL::XS manpage. It is   "
"reccomended to use the Authen::SASL::XS manpage\n"
"\n"
"By default the order in which these plugins are selected is Authen::SASL::"
"XS, Authen::SASL::Cyrus and then Authen::SASL::Perl.\n"
"\n"
"If you want to change it or want to specifically use one implementation only "
"simply do\n"
"\n"
" use Authen::SASL qw(Perl);\n"
"\n"
"or if you have another plugin module that supports the Authen::SASL API\n"
"\n"
" use Authen::SASL qw(My::SASL::Plugin);"
msgstr ""
"SASL は複数のネットワークプロトコルで利用される、認証用の汎用機構です。"
"*Authen::SASL* は、全てのプロトコルで共有可能な実装フレームワークを提供しま"
"す。\n"
"\n"
"フレームワークでは、プラグイン形式で接続可能な複数の実装を同時に提供すること"
"ができます。本書の記述時点では、下記のようなプラグインが存在しています。\n"
"\n"
"* Authen::SASL::Perl\n"
"\n"
"  このモジュールはいくつかの機構を実装しているもので、全てを Perl で実装して"
"います。\n"
"\n"
"* Authen::SASL::XS\n"
"\n"
"  このモジュールは Cyrus SASL と呼ばれる C 言語ライブラリ (バージョン 1 と"
"バージョン 2 の両方に対応しています) を使用しています。\n"
"\n"
"* Authen::SASL::Cyrus\n"
"\n"
"  このモジュールは Authen::SASL::XS の後継となるモジュールです。現在は"
"Authen::SASL::XS の使用を推奨します。\n"
"\n"
"既定では、プラグインの使用順序は Authen::SASL::XS が先で、 Authen::SASL::"
"Cyrus と Authen::SASL::Perl の順になっています。\n"
"\n"
"この順序を変更したい場合、もしくは単一の実装のみを使用したい場合は、下記のよ"
"うに実行します。\n"
"\n"
" use Authen::SASL qw(Perl);\n"
"\n"
"上記以外にも、 Authen::SASL API に対応するモジュールを指定する方法もありま"
"す。\n"
"\n"
" use Authen::SASL qw(My::SASL::Plugin);"

#. tumbleweed/perl-B-Hooks-EndOfScope/summary
#. leap/perl-B-Hooks-EndOfScope/summary
msgid "Execute code after a scope finished compilation"
msgstr "スコープのコンパイルが完了した時点でのコード実行"

#. tumbleweed/perl-B-Hooks-EndOfScope/description
#. leap/perl-B-Hooks-EndOfScope/description
msgid ""
"This module allows you to execute code when perl finished compiling the "
"surrounding scope."
msgstr ""
"このモジュールは、 Perl が指定したスコープのコンパイルが完了した際に、コード"
"を実行することができます。"

#. tumbleweed/perl-B-Keywords/summary
#. leap/perl-B-Keywords/summary
msgid "Lists of reserved barewords and symbol names"
msgstr "予約済みキーワードとシンボル名の一覧"

#. tumbleweed/perl-B-Keywords/description
#. leap/perl-B-Keywords/description
msgid ""
"'B::Keywords' supplies several arrays of exportable keywords: '@Scalars', "
"'@Arrays', '@Hashes', '@Filehandles', '@Symbols', '@Functions', "
"'@Barewords', '@TieIOMethods', '@UNIVERSALMethods' and '@ExporterSymbols'.\n"
"\n"
"The '@Symbols' array includes the contents of each of '@Scalars', '@Arrays', "
"'@Hashes', '@Functions' and '@Filehandles'.\n"
"\n"
"Similarly, '@Barewords' adds a few non-function keywords and operators to "
"the '@Functions' array.\n"
"\n"
"All additions and modifications are welcome.\n"
"\n"
"The perl parser uses a static list of keywords from _regen/keywords.pl_ "
"which constitutes the strict list of keywords @Functions and @Barewords, "
"though some @Functions are not functions in the strict sense. Several "
"library functions use more special symbols, handles and methods."
msgstr ""
"'B::Keywords' はいくつかの公開可能なキーワード配列を提供しています: '@Scalars', '@Arrays', '@Hashes', "
"'@Filehandles', '@Symbols', '@Functions', '@Barewords', '@TieIOMethods', '@"
"UNIVERSALMethods', '@ExporterSymbols'.\n"
"\n"
"'@Symbols' 配列には、 '@Scalars', '@Arrays', '@Hashes', '@Functions', '@"
"Filehandles' のそれぞれの内容が含まれています。\n"
"\n"
"このほか、 '@Barewords' には '@Functions' 配列に加えて非関数型のキーワードや演算子が追加されています。\n"
"\n"
"追加や修正があれば、その旨お知らせいただけると幸いです。\n"
"\n"
"Perl のパーサは _regen/keywords.pl_ が提供する固定のキーワードリストを使用していますが、これはそれぞれ @Functions "
"と @Barewords 内のキーワードのリストから構成されていますが、 @Functions "
"には厳密には関数ではないものも含まれています。また、ライブラリによっては追加で特別なシンボルやハンドル、メソッドなどを使用することもあります。"

#. tumbleweed/perl-Benchmark-Timer/summary
#. leap/perl-Benchmark-Timer/summary
msgid "Benchmarking with statistical confidence"
msgstr "統計的な信頼性のあるベンチマーク"

#. tumbleweed/perl-Benchmark-Timer/description
#. leap/perl-Benchmark-Timer/description
msgid ""
"The Benchmark::Timer class allows you to time portions of code conveniently, "
"as well as benchmark code by allowing timings of repeated trials. It is "
"perfect for when you need more precise information about the running time of "
"portions of your code than the Benchmark module will give you, but don't "
"want to go all out and profile your code.\n"
"\n"
"The methodology is simple; create a Benchmark::Timer object, and wrap "
"portions of code that you want to benchmark with 'start()' and 'stop()' "
"method calls. You can supply a tag to those methods if you plan to time "
"multiple portions of code. If you provide error and confidence values, you "
"can also use 'need_more_samples()' to determine, statistically, whether you "
"need to collect more data.\n"
"\n"
"After you have run your code, you can obtain information about the running "
"time by calling the 'results()' method, or get a descriptive benchmark "
"report by calling 'report()'. If you run your code over multiple trials, the "
"average time is reported. This is wonderful for benchmarking time-critical "
"portions of code in a rigorous way. You can also optionally choose to skip "
"any number of initial trials to cut down on initial case irregularities."
msgstr ""
"Benchmark::Timer クラスはコードの処理時間を計測することのできるモジュールで、繰り返して処理することによりベンチマークとしても使用すること"
"ができる仕組みです。ベンチマークというよりは処理時間を計測する目的で実行する場合は、より正確な時間を算出することができますが、プロファイリングとしてはあま"
"り有用ではありません。\n"
"\n"
"使い方はシンプルで、 Benchmark::Timer オブジェクトを作成したあとは、 'start()' と 'stop()' の間に計測対象のコードを"
"挟み込むだけです。このほか、コード内の複数の箇所で時間を測定したい場合は、それらのメソッドにタグを設定することもできます。また、エラーや信頼値を設定するこ"
"とで、さらなるデータ収集のために 'need_more_samples()' を使用することもできます。\n"
"\n"
"コードを実行した後は、 'results()' メソッドを利用することで、実行にかかった時間に関する情報を取得することができるほか、 'report()"
"' を実行することでベンチマーク結果を出力することもできます。何回もコードをテストすれば、平均時間も取得することができます。これは厳格な方法で時間に厳しい"
"箇所のテストを実施するには、最適な仕組みです。必要であれば、不規則になりやすい初めのうちのデータを飛ばすこともできます。"

#. tumbleweed/perl-Browser-Open/summary
#. leap/perl-Browser-Open/summary
msgid "Open a browser in a given URL"
msgstr "指定した URL をブラウザで開くモジュール"

#. tumbleweed/perl-Browser-Open/description
#. leap/perl-Browser-Open/description
msgid ""
"The functions optionaly exported by this module allows you to open URLs in "
"the user browser.\n"
"\n"
"A set of known commands per OS-name is tested for presence, and the first "
"one found is executed. With an optional parameter, all known commands are "
"checked.\n"
"\n"
"The the \"open_browser\" manpage uses the 'system()' function to execute the "
"command. If you want more control, you can get the command with the the "
"\"open_browser_cmd\" manpage or the \"open_browser_cmd_all\" manpage "
"functions and then use whatever method you want to execute it."
msgstr ""
"ユーザのブラウザ内で指定した URL を開くことのできる関数を、任意で公開しています。\n"
"\n"
"OS 名ごとの既知のコマンド複数個設定されていて、それらのうちで最初に見つかったものが実行されます。オプションのバラメータを指定することで、すべての既知の"
"コマンドをチェックすることもできます。\n"
"\n"
"\"open_browser\" では 'system()' 関数を利用してコマンドを実行しています。さらに細かい制御を行ないたい場合は、 \""
"open_browser_cmd\" や \"open_browser_cmd_all\" 関数をそれぞれお使いになることもできます。"

#. tumbleweed/perl-Business-ISBN/summary
#. leap/perl-Business-ISBN/summary
msgid "Work with International Standard Book Numbers"
msgstr "国際標準図書番号 (ISBN) の処理のためのモジュール"

#. tumbleweed/perl-Business-ISBN/description
#. leap/perl-Business-ISBN/description
msgid ""
"This modules handles International Standard Book Numbers, including ISBN-10 "
"and ISBN-13."
msgstr "このモジュールは、国際標準図書番号 (ISBN-10, ISBN-13) を処理することができます。"

#. tumbleweed/perl-Business-ISBN-Data/summary
msgid "Data Pack for Business::Isbn"
msgstr "Business::Isbn 向けデータパック"

#. tumbleweed/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. 'Business::ISBN' "
"will load it when it loads.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. You can retrieve this yourself at https://www.isbn-"
"international.org/range_file_generation. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/Data/"
"RangeMessage.xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data is "
"likely to be older data. If it does not find that file, it looks for "
"_RangeMessage.xml_ in the current directory.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""
"ほとんどの場合、このモジュールを直接読み込む必要はありません。また、このモジュールを読み込むと、 'Business::ISBN' も読み込みます。\n"
"\n"
"これらのデータは ISBN エージェンシーが提供する _RangeMessage.xml_ から生成されたもので、一般的には https://www"
".isbn-international.org/range_file_generation "
"で提供されています。このファイルは配布物の一部として同梱されており、 _~lib/Business/ISBN/Data/"
"RangeMessage.xml_ にインストールされます。\n"
"\n"
"これとは異なる _RangeMessage.xml_ ファイルを利用したい場合は、  'Business::ISBN' を読み込む前に "
"'ISBN_RANGE_MESSAGE' "
"環境変数に場所を指定してください。この方法が用意されていることにより、このモジュール自身の更新を待ったり、インストールしたりすることなく、最新の "
"(もしくは古い) データを利用することができます。\n"
"\n"
"既定の _RangeMessage.xml_ が存在せず、代替の場所にも見つからなかった場合は、 _Data.pm_ "
"内にあるデータを使用します。しかしながら、このデータはより古いデータになってしまっています。また、カレントディレクトリ内の "
"_RangeMessage.xml_ も検索対象になっています。\n"
"\n"
"また、データは '%Business::ISBN::country_data' (\"country\" は歴史上の経緯で設定されているものです) "
"にあります。どこからのデータであるのかを知りたい場合は、  '$Business::ISBN::country_data{_source}' "
"をご確認ください。"

#. tumbleweed/perl-Business-ISMN/summary
#. tumbleweed/perl-Business-ISMN/description
#. leap/perl-Business-ISMN/summary
#. leap/perl-Business-ISMN/description
msgid "work with International Standard Music Numbers"
msgstr "国際標準楽曲番号 (ISMN) の処理のためのモジュール"

#. tumbleweed/perl-Business-ISSN/summary
#. leap/perl-Business-ISSN/summary
msgid "Perl extension for International Standard Serial Numbers"
msgstr "国際標準逐次刊行物番号 (ISSN) の処理のためのモジュール"

#. tumbleweed/perl-Business-ISSN/description
#. leap/perl-Business-ISSN/description
msgid ""
"* new($issn)\n"
"\n"
"  The constructor accepts a scalar representing the ISSN.\n"
"\n"
"  The string representing the ISSN may contain characters other than   "
"[0-9xX], although these will be removed in the internal representation.   "
"The resulting string must look like an ISSN - the first seven characters   "
"must be digits and the eighth character must be a digit, 'x', or 'X'.\n"
"\n"
"  The string passed as the ISSN need not be a valid ISSN as long as it   "
"superficially looks like one. This allows one to use the 'fix_checksum'   "
"method.\n"
"\n"
"  One should check the validity of the ISSN with 'is_valid()' rather than   "
"relying on the return value of the constructor.\n"
"\n"
"  If all one wants to do is check the validity of an ISSN, one can skip "
"the   object-oriented interface and use the c<is_valid_checksum()> "
"function   which is exportable on demand."
msgstr ""
"* new($issn)\n"
"\n"
"  コンストラクタでは、 ISSN を表わすスカラ値を受け付けます。\n"
"\n"
"  ISSN を表わす文字列には [0-9xX] 以外の文字が含まれることがありますが、それらは国際表記では削除されます。また、 ISSN "
"はそれとわかるように文字列を生成します。最初の 7 桁はそれぞれ数字で、 8 桁目は数字もしくは 'x', 'X' のいずれかでなければなりません。\n"
"\n"
"  ISSN に渡される文字列は、 ISSN であると判断できれば必ずしも正しい形式でなくてもかまいません。この仕組みにより、 "
"'fix_checksum' メソッドを利用することができます。\n"
"\n"
"  なお、 ISSN の値が正しいかどうかを判断したい場合は、コンストラクタに値を渡すのではなく、 'is_valid()' で検証してください。\n"
"\n"
"  ISSN のチェックだけを行なう目的であれば、オブジェクト志向のインターフェイスではなく、 C<is_valid_checksum()> "
"関数を利用することもできます。こちらは必要に応じて公開される関数です。"

#. tumbleweed/perl-CDDB_get/summary
#. leap/perl-CDDB_get/summary
msgid "Read the CDDB entry for an audio CD in your drive"
msgstr ""
"お使いのドライブ内のオーディオ CD について CDDB の項目を参照するライブラリ"

#. tumbleweed/perl-CDDB_get/description
#. leap/perl-CDDB_get/description
msgid ""
"This module/script gets the CDDB info for an audio cd. You need LINUX, SUNOS "
"or *BSD, a cdrom drive and an active internet connection in order to do that."
msgstr ""
"このモジュールとスクリプトは、オーディオ CD の CDDB 情報を取得するためのもの"
"です。 このモジュールを動作させるには、 LINUX, SUNOS, *BSD のいずれかの環境"
"と CD-ROM ドライブ、 有効なインターネット接続がそれぞれ必要です。"

#. tumbleweed/perl-CGI/summary
#. leap/perl-CGI/summary
msgid "Handle Common Gateway Interface requests and responses"
msgstr "Common Gateway Interface (CGI) のリクエストと応答の処理"

#. tumbleweed/perl-CGI/description
#. leap/perl-CGI/description
msgid ""
"CGI.pm is a stable, complete and mature solution for processing and "
"preparing HTTP requests and responses. Major features including processing "
"form submissions, file uploads, reading and writing cookies, query string "
"generation and manipulation, and processing and preparing HTTP headers.\n"
"\n"
"CGI.pm performs very well in a vanilla CGI.pm environment and also comes "
"with built-in support for mod_perl and mod_perl2 as well as FastCGI.\n"
"\n"
"It has the benefit of having developed and refined over 20 years with input "
"from dozens of contributors and being deployed on thousands of websites. CGI."
"pm was included in the perl distribution from perl v5.4 to v5.20, however is "
"has now been removed from the perl core..."
msgstr ""
"CGI.pm は HTTP リクエストや応答を処理したり、準備したりすることのできる、安定"
"していて完全、そして円熟したソリューションです。フォームの送信やファイルの"
"アップロード、 Cookie の読み書きや問い合わせ文字列の生成／操作、 HTTP ヘッダ"
"の操作や処理など、各種のメジャー機能に対応しています。\n"
"\n"
"CGI.pm はそれ単体の環境だけでうまく動作しますし、 mod_perl, mod_perl2 向けの"
"内蔵サポートのほか、 FastCGI にも対応しています。\n"
"\n"
"20 年以上にわたって多くの貢献者の方々が開発を行ない、数千もの Web サイトに配"
"置されてきた実績があります。 CGI.pm は Perl 5.4 から 5.20 までの Perl 配布物"
"に含まれていましたが、 Perl の中枢からは削除されてしまいました..."

#. tumbleweed/perl-CGI-Ajax/summary
#. leap/perl-CGI-Ajax/summary
msgid "A perl-specific System for writing Asynchronous web Apps"
msgstr "非同期 Web アプリを作成するための Perl 固有システム"

#. tumbleweed/perl-CGI-Ajax/description
#. leap/perl-CGI-Ajax/description
msgid ""
"CGI::Ajax is an object-oriented module that provides a unique mechanism for "
"using perl code asynchronously from javascript- enhanced HTML pages. CGI::"
"Ajax unburdens the user from having to write extensive javascript, except "
"for associating an exported method with a document-defined event (such as "
"onClick, onKeyUp, etc). CGI::Ajax also mixes well with HTML containing more "
"complex javascript.\n"
"\n"
"CGI::Ajax supports methods that return single results or multiple results to "
"the web page, and supports returning values to multiple DIV elements on the "
"HTML page.\n"
"\n"
"Using CGI::Ajax, the URL for the HTTP GET/POST request is automatically "
"generated based on HTML layout and events, and the page is then dynamically "
"updated with the output from the perl function. Additionally, CGI::Ajax "
"supports mapping URL's to a CGI::Ajax function name, so you can separate "
"your code processing over multiple scripts.\n"
"\n"
"Other than using the Class::Accessor module to generate CGI::Ajax' accessor "
"methods, CGI::Ajax is completely self-contained - it does not require you to "
"install a larger package or a full Content Management System, etc.\n"
"\n"
"We have added _support_ for other CGI handler/decoder modules, like the CGI::"
"Simple manpage or the CGI::Minimal manpage, but we can't test these since we "
"run mod_perl2 only here. CGI::Ajax checks to see if a header() method is "
"available to the CGI object, and then uses it. If method() isn't available, "
"it creates it's own minimal header.\n"
"\n"
"A primary goal of CGI::Ajax is to keep the module streamlined and maximally "
"flexible. We are trying to keep the generated javascript code to a minimum, "
"but still provide users with a variety of methods for deploying CGI::Ajax. "
"And VERY little user javascript."
msgstr ""
"CGI::Ajax は単一の Perl コードを利用して、 JavaScript の有効化された HTML "
"ページの提供のようなユニークな仕組みをもたらす、オブジェクト志向のモジュールです。 CGI::Ajax は、ドキュメントで定義されるイベント ("
"onClick, onKeyUp など) を表わす公開メソッドへの関連づけを除き、面倒な JavaScript コードの作成の手間を省くことができます。 "
"CGI::Ajax は、 HTML 内によく複雑な JavaScript を組み込むこともできます。\n"
"\n"
"CGI::Ajax は Web ページに対して、 1 つまたは複数の結果を返すメソッドに対応しています。また、 HTMLページ内の複数の DIV "
"要素に対して、値を返すこともできます。\n"
"\n"
"CGI::Ajax を利用することで、 HTML のレイアウトやイベントに従って自動的に HTTP の GET/POST "
"リクエストを作成することができるほか、 Perl 関数の出力に従ってページを動的に更新することもできます。これに加えて、 CGI::Ajax では "
"URL と CGI::Ajax "
"の関数名との間でマッピング機能も提供されています。これにより、コード処理とスクリプトを分けて記述することができるようになります。\n"
"\n"
"CGI::Ajax のアクセサメソッドを生成するための Class::Accessor モジュールを利用する以外に、 CGI::Ajax "
"には自己完結型の仕組みも用意されています。巨大なパッケージや完全なコンテンツ管理システムなどを導入する必要もありません。\n"
"\n"
"他の CGI ハンドラ／デコーダモジュール、たとえば CGI::Simple や CGI::Minimal などのサポートも追加されていますが、我々は "
"mod_perl2 を利用しているため、これらはテストされていません。 CGI::Ajax では CGI オブジェクト内で header() "
"メソッドが利用可能かどうかを確認し、可能であればそれを使用します。利用できない場合は、独自に最小限のヘッダを生成します。 \n"
"\n"
"CGI::Ajax の主なゴールは、合理的で最大限に柔軟性のあるモジュールを維持し続けることにあります。生成された JavaScript "
"はできる限り小さくなるように作られていますが、 CGI::Ajax では様々なメソッドを提供しています。もちろんユーザ側で作成すべき "
"JavaScript もとても小さくなるようになっています。"

#. tumbleweed/perl-CGI-Application/summary
#. leap/perl-CGI-Application/summary
msgid "Framework for building reusable web-applications"
msgstr "再利用可能な Web アプリケーションを構築するためのフレームワーク"

#. tumbleweed/perl-CGI-Application/description
#. leap/perl-CGI-Application/description
msgid ""
"It is intended that your Application Module will be implemented as a sub-"
"class of CGI::Application. This is done simply as follows:\n"
"\n"
"    package My::App;     use base 'CGI::Application';\n"
"\n"
"*Notation and Conventions*\n"
"\n"
"For the purpose of this document, we will refer to the following "
"conventions:\n"
"\n"
"  WebApp.pm   The Perl module which implements your Application Module "
"class.   WebApp      Your Application Module class; a sub-class of CGI::"
"Application.   webapp.cgi  The Instance Script which implements your "
"Application Module.   $webapp     An instance (object) of your Application "
"Module class.   $c          Same as $webapp, used in instance methods to "
"pass around the               current object. (Sometimes referred as \"$self"
"\" in other code)"
msgstr ""
"お使いのアプリケーションモジュールを CGI::Application のサブクラスとして実装"
"してもらうことを目指したモジュールです。これは下記のようにすることで簡単に行"
"なうことができます:\n"
"\n"
"    package My::App;     use base 'CGI::Application';\n"
"\n"
"*表記と慣習*\n"
"\n"
"このドキュメントでは、下記のような表現を使用しています:\n"
"\n"
"WebApp.pm お使いのアプリケーションモジュールのクラスを実装する、 Perl モ"
"ジュール。 WebApp アプリケーションモジュール (CGI::Application のサブクラ"
"ス) 。 webapp.cgi アプリケーションモジュールを実装する、サンプルスクリプト。 "
"$webapp アプリケーションモジュールのインスタンス (オブジェクト) 。 $c "
"$wepapp と同じですが、現在のオブジェクトに対するメソッドを実行するのに使用す"
"るインスタンス (場合によっては \"$self\" と書く場合もあります) 。"

#. tumbleweed/perl-CGI-FastTemplate/summary
#. leap/perl-CGI-FastTemplate/summary
msgid ""
"Perl extension for managing templates, and performing variable interpolation"
msgstr "テンプレートの管理と変数補完を実施するための Perl 拡張"

#. tumbleweed/perl-CGI-FastTemplate/description
#. leap/perl-CGI-FastTemplate/description
msgid ""
"CGI::FastTemplate manages templates and parses templates replacing variable "
"names with values. It was designed for mid to large scale web applications "
"(CGI, mod_perl) where there are great benefits to separating the logic of an "
"application from the specific implementation details.\n"
"\n"
"Author:\tJason Moore <jmoore@sober.com>"
msgstr ""
"CGI::FastTemplate では変数を実際の値に置き換える処理を行なう、テンプレートモジュールです。中規模もしくは大規模の Web "
"アプリケーション (CGI, mod_perl) "
"に向けて設計されており、アプリケーションのロジックと特定の実装仕様とを分離するための素晴らしい仕組みを提供しています。\n"
"\n"
"Author:\tJason Moore <jmoore@sober.com>"

#. tumbleweed/perl-CGI-FormBuilder/summary
#. leap/perl-CGI-FormBuilder/summary
msgid "Easily generate and process stateful forms"
msgstr "状態遷移機能のあるフォームの簡単生成"

#. tumbleweed/perl-CGI-FormBuilder/description
#. leap/perl-CGI-FormBuilder/description
msgid ""
"The goal of CGI::FormBuilder (FormBuilder) is to provide an easy way for you "
"to generate and process entire CGI form-based applications. Its main "
"features are:\n"
"\n"
"Field Abstraction   Viewing fields as entities (instead of just params), "
"where the   HTML representation, CGI values, validation, and so on are   "
"properties of each field.\n"
"\n"
"DWIMmery   Lots of built-in \"intelligence\" (such as automatic field "
"typing),   giving you about a 4:1 ratio of the code it generates versus "
"what   you have to write.\n"
"\n"
"Built-in Validation   Full-blown regex validation for fields, even "
"including   JavaScript code generation.\n"
"\n"
"Template Support  Pluggable support for external template engines,   such as "
"HTML::Template, Text::Template, Template Toolkit,   and CGI::FastTemplate.\n"
"\n"
"Plus, the native HTML generated is valid XHTML 1.0 Transitional."
msgstr ""
"CGI::FormBuilder (FormBuilder) のゴールは、 CGI "
"フォームをベースにしたアプリケーションに対して、その作成と処理を簡単にする方法を提供することになります。主な機能は下記の通りです:\n"
"\n"
"フィールドの抽象化: フィールドを (単なるパラメータではなく) エンティティとして参照することができます。 HTML の表現や CGI "
"の値、検証などはそれぞれ各フィールドに対するプロパティとして設定します。\n"
"\n"
"直感性: 多数の \"便利機能\" (自動フィールド入力など) を内蔵しています。これにより、記述すべきコードが 1/5 になります。\n"
"\n"
"検証機能の内蔵化: 本格的な正規表現によるフィールド検証のほか、 JavaScript のコード生成機能なども用意されています。\n"
"\n"
"テンプレート対応: HTML::Template, Text::Template, Template ツールキット, CGI::FastTemplate "
"など、外部のテンプレートエンジンへのプラグインで対応しています。\n"
"\n"
"これに加えて、生成された HTML は正しい XHTML 1.0 Transitional 形式になっています。"

#. tumbleweed/perl-CGI-Session/summary
#. leap/perl-CGI-Session/summary
msgid "Persistent Session Data in Cgi Applications"
msgstr "CGI アプリケーション内での永続セッションデータ"

#. tumbleweed/perl-CGI-Session/description
#. leap/perl-CGI-Session/description
msgid ""
"CGI::Session provides an easy, reliable and modular session management "
"system across HTTP requests."
msgstr ""
"CGI:Session は、 HTTP リクエストをまたがって利用することのできる、簡単で信頼性のある、モジュール型のセッション管理機構を提供します。"

#. tumbleweed/perl-CGI-Simple/summary
#. leap/perl-CGI-Simple/summary
msgid "A Simple totally OO CGI interface that is CGI.pm compliant"
msgstr "CGI.pm に準拠するシンプルな完全 OO CGI インターフェイス"

#. tumbleweed/perl-CGI-Simple/description
#. leap/perl-CGI-Simple/description
msgid ""
"CGI::Simple provides a relatively lightweight drop in replacement for CGI."
"pm. It shares an identical OO interface to CGI.pm for parameter parsing, "
"file upload, cookie handling and header generation. This module is entirely "
"object oriented, however a complete functional interface is available by "
"using the CGI::Simple::Standard module.\n"
"\n"
"Essentially everything in CGI.pm that relates to the CGI (not HTML) side of "
"things is available. There are even a few new methods and additions to old "
"ones! If you are interested in what has gone on under the hood see the "
"Compatibility with CGI.pm section at the end.\n"
"\n"
"In practical testing this module loads and runs about twice as fast as CGI."
"pm depending on the precise task."
msgstr ""
"CGI::Simple は CGI.pm に対する比較的軽量な代替機能を提供します。パラメータの処理やファイルのアップロード、 Cookie "
"の処理やヘッダの生成など、 CGI.pm と等価な OO "
"インターフェイスを共有しています。このモジュールは全体的にオブジェクト志向の仕組みになっていますが、 CGI::Simple::Standard "
"モジュールを利用すれば、完全に関数型のインターフェイスを利用することもできます。\n"
"\n"
"本質的に CGI.pm に内蔵されているすべての CGI (HTML を除く) "
"関連機能が利用できます。このほか、新しいメソッドがいくつか追加されているほか、既存のメソッドにも追加の機能が用意されています。 CGI.pm "
"と比べて廃止された機能について詳しく知りたい方は、末尾のセクションをお読みください。\n"
"\n"
"このモジュールに対する実際のテストでは、正確な処理で CGI.pm の 2 倍速く読み込まれ、動作しています。"

#. tumbleweed/perl-CHI/summary
#. leap/perl-CHI/summary
msgid "Unified cache handling interface"
msgstr "統一キャッシュ処理インターフェイス"

#. tumbleweed/perl-CHI/description
#. leap/perl-CHI/description
msgid ""
"CHI provides a unified caching API, designed to assist a developer in "
"persisting data for a specified period of time.\n"
"\n"
"The CHI interface is implemented by driver classes that support fetching, "
"storing and clearing of data. Driver classes exist or will exist for the "
"gamut of storage backends available to Perl, such as memory, plain files, "
"memory mapped files, memcached, and DBI.\n"
"\n"
"CHI is intended as an evolution of DeWitt Clinton's Cache::Cache package, "
"adhering to the basic Cache API but adding new features and addressing "
"limitations in the Cache::Cache implementation."
msgstr ""
"CHI は統一的なキャッシュ API を提供するモジュールで、開発者に対して指定した期間だけデータを保持する仕組みを支援するためのものです。\n"
"\n"
"CHI のインターフェイスは、実際のデータの読み込みと保存、そして消去を行なうドライバクラスで実装されます。ドライバクラスはメモリや純粋なファイル、"
"もしくはメモリマップ型のファイルや memcached, DBI など、様々なストレージバックエンド向けに用意されているほか、用意される予定があります。"
"\n"
"\n"
"CHI は Dewitt Clinton 氏の Cache::Cache パッケージの進化版となるべく作られたモジュールで、基本的なキャッシュ API "
"を維持しながら、新しい機能を追加したり、 Cache::Cache の実装内の制限に対応すべく作られています。"

#. tumbleweed/perl-CLASS/summary
#. leap/perl-CLASS/summary
msgid "Alias for __PACKAGE__"
msgstr "__PACKAGE__ に対する別名"

#. tumbleweed/perl-CLASS/description
#. leap/perl-CLASS/description
msgid ""
"CLASS and $CLASS are both synonyms for __PACKAGE__. Easier to type.\n"
"\n"
"$CLASS has the additional benefit of working in strings."
msgstr ""
"CLASS および $CLASS はいずれも __PACKAGE__ に対する別名です。より入力しやすくなっています。\n"
"\n"
"$CLASS は、文字列内での処理にも利便性を提供します。"

#. tumbleweed/perl-CPAN-Changes/summary
msgid "Read and write Changes files"
msgstr "Changes ファイルの読み書き"

#. tumbleweed/perl-CPAN-Changes/description
msgid ""
"It is standard practice to include a Changes file in your distribution. The "
"purpose the Changes file is to help a user figure out what has changed since "
"the last release.\n"
"\n"
"People have devised many ways to write the Changes file. A preliminary "
"specification has been created (the CPAN::Changes::Spec manpage) to "
"encourage module authors to write clear and concise Changes.\n"
"\n"
"This module will help users programmatically read and write Changes files "
"that conform to the specification."
msgstr ""
"ご自身が開発されている配布物に Changes ファイルを含めるための、標準的な方法を"
"提供します。 Changes ファイルは、前回のリリースから何が変更されたのかを利用者"
"に示すために使用します。\n"
"\n"
"\n"
"Changes ファイルを作成は、人によってさまざまな方法で実施しています。既に予備"
"仕様 (CPAN::Changes::Spec) が作成されていて、これをもとに明確かつ簡潔な "
"Changes ファイルを作成できるようにしています。\n"
"\n"
"このモジュールは、そのような仕様に準拠した形でプログラムから Changes ファイル"
"を読み書きする方法を提供します。"

#. tumbleweed/perl-CPAN-DistnameInfo/summary
#. leap/perl-CPAN-DistnameInfo/summary
msgid "Extract distribution name and version from a distribution filename"
msgstr "配布物のファイル名からの名前とバージョンの抽出"

#. tumbleweed/perl-CPAN-DistnameInfo/description
#. leap/perl-CPAN-DistnameInfo/description
msgid ""
"Many online services that are centered around CPAN attempt to associate "
"multiple uploads by extracting a distribution name from the filename of the "
"upload. For most distributions this is easy as they have used ExtUtils::"
"MakeMaker or Module::Build to create the distribution, which results in a "
"uniform name. But sadly not all uploads are created in this way.\n"
"\n"
"'CPAN::DistnameInfo' uses heuristics that have been learnt by the http://"
"search.cpan.org/ manpage to extract the distribution name and version from "
"filenames and also report if the version is to be treated as a developer "
"release\n"
"\n"
"The constructor takes a single pathname, returning an object with the "
"following methods\n"
"\n"
"* cpanid\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the the CPAN id of the author.\n"
"\n"
"* dist\n"
"\n"
"  The name of the distribution\n"
"\n"
"* distvname\n"
"\n"
"  The file name with any suffix and leading directory names removed\n"
"\n"
"* filename\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the path to the file relative to the detected CPAN author   "
"directory. Otherwise it is the path that was passed in.\n"
"\n"
"* maturity\n"
"\n"
"  The maturity of the distribution. This will be either 'released' or   "
"'developer'\n"
"\n"
"* extension\n"
"\n"
"  The extension of the distribution, often used to denote the archive type   "
"(e.g. 'tar.gz')\n"
"\n"
"* pathname\n"
"\n"
"  The pathname that was passed to the constructor when creating the object.\n"
"\n"
"* properties\n"
"\n"
"  This will return a list of key-value pairs, suitable for assigning to a   "
"hash, for the known properties.\n"
"\n"
"* version\n"
"\n"
"  The extracted version"
msgstr ""
"CPAN を中心とした多数のオンラインサービスでは、アップロード時のファイル名から配布物の名前を抽出して、アップロードを関連づける処理を行なっています。多"
"くの配布物では、 その作成にあたって ExtUtils::MakeMaker や Module::Build を使用していますが、もしそうであれば簡単に唯"
"一の名前を抽出することができます。しかしながら、すべてのアップロードがこの方法で作成されているわけではありません。\n"
"\n"
"'CPAN::DistnameInfo' は http://search.cpan.org/ で提供されている情報を学ぶことによる経験を利用して、ファイル"
"名から配布物の名前とバージョンを抽出します。また、バージョンが開発者リリースであれば、その旨もレポートします。\n"
"\n"
"コンストラクタには 1 つのパス名を指定します。返されるオブジェクトには下記のメソッドを適用することができます:\n"
"\n"
"* cpanid\n"
"\n"
"  指定されたパスが CPAN のディレクトリパスであると考えられる場合は、 CPAN の作者名が設定されます。\n"
"\n"
"* dist\n"
"\n"
"  配布物の名前が設定されます。\n"
"\n"
"* distvname\n"
"\n"
"  任意の接頭辞と続くディレクトリ名が削除されたファイル名が設定されます。\n"
"\n"
"* filename\n"
"\n"
"  指定されたパスが CPAN のディレクトリパスであると考えられる場合は、検出された CPAN "
"ディレクトリからの相対ファイル名になります。それ以外の場合は、入力されたパスがそのまま設定されます。\n"
"\n"
"* maturity\n"
"\n"
"  配布物の成熟度が設定されます。 'released' (リリース版) または 'developer' (開発者版) のいずれかになります。\n"
"\n"
"* extension\n"
"\n"
"  配布物の拡張子が設定されます。通常は書庫のタイプ (例: 'tar.gz') になります。\n"
"\n"
"* pathname\n"
"\n"
"  オブジェクトを作成した際に渡されたパス名が設定されます。\n"
"\n"
"* properties\n"
"\n"
"  キー／値のペアのリストが設定されます。ハッシュなどの既知のプロパティが設定されます。\n"
"\n"
"* version\n"
"\n"
"  抽出されたバージョンが設定されます。"

#. tumbleweed/perl-CPAN-Meta/summary
#. leap/perl-CPAN-Meta/summary
msgid "The Distribution Metadata for a Cpan Dist"
msgstr "CPAN 配布物に対する配布メタデータ"

#. tumbleweed/perl-CPAN-Meta/description
msgid ""
"Software distributions released to the CPAN include a _META.json_ or, for "
"older distributions, _META.yml_, which describes the distribution, its "
"contents, and the requirements for building and installing the distribution. "
"The data structure stored in the _META.json_ file is described in CPAN::"
"Meta::Spec.\n"
"\n"
"CPAN::Meta provides a simple class to represent this distribution metadata "
"(or _distmeta_), along with some helpful methods for interrogating that "
"data.\n"
"\n"
"The documentation below is only for the methods of the CPAN::Meta object. "
"For information on the meaning of individual fields, consult the spec."
msgstr ""
"CPAN に公開されたソフトウエア配布物には、 _META.json_ または _META.yml_ (古い配布物の場合) "
"が存在していますが、これらは配布物の説明や内容物、そして構築やインストールを行なう際の依存関係が記されています。このデータ構造は CPAN::Meta::"
"Spec 内の _META.json_ ファイル内に保存されています。\n"
"\n"
"CPAN::Meta は配布物のメタデータ (もしくは _distmeta_) "
"を表わすシンプルなクラスを提供しているほか、それらのデータに問い合わせを行なうための便利なメソッドも用意されています。\n"
"\n"
"下記のドキュメンテーションは CPAN::Meta オブジェクトのメソッドのみが示されています。それぞれのフィールドに対する意味については、 spec "
"ファイルをお読みください。"

#. tumbleweed/perl-CPAN-Meta-Check/summary
#. leap/perl-CPAN-Meta-Check/summary
msgid "Verify requirements in a CPAN::Meta object"
msgstr "CPAN::Meta オブジェクト内での要件検証"

#. tumbleweed/perl-CPAN-Meta-Check/description
#. leap/perl-CPAN-Meta-Check/description
msgid ""
"This module verifies if requirements described in a CPAN::Meta object are "
"present."
msgstr "このモジュールは、 CPAN::Meta オブジェクト内に示されている要件が満たされているかどうかを検証します。"

#. tumbleweed/perl-CPAN-Meta-Requirements/summary
#. leap/perl-CPAN-Meta-Requirements/summary
msgid "Set of Version Requirements for a Cpan Dist"
msgstr "CPAN 配布物に対するバージョン要件の設定"

#. tumbleweed/perl-CPAN-Meta-Requirements/description
#. leap/perl-CPAN-Meta-Requirements/description
msgid ""
"A CPAN::Meta::Requirements object models a set of version constraints like "
"those specified in the _META.yml_ or _META.json_ files in CPAN "
"distributions, and as defined by CPAN::Meta::Spec; It can be built up by "
"adding more and more constraints, and it will reduce them to the simplest "
"representation.\n"
"\n"
"Logically impossible constraints will be identified immediately by thrown "
"exceptions."
msgstr ""
"CPAN::Meta::Requirements オブジェクトは、 CPAN の配布物内に存在し CPAN::Meta::Spec で定義されているほか、"
" _META.yml_ もしくは _META.json_ ファイルで指定されているような、バージョン制約のセットをモデル化するものです。追加の制約を追加し"
"ていくこともできるほか、シンプルにするためにそれらを縮小するようなこともできます。\n"
"\n"
"このほか、論理的に実現不可能な制約が現われた場合は、例外をスローする機能も用意されています。"

#. tumbleweed/perl-CPAN-Meta-YAML/summary
#. leap/perl-CPAN-Meta-YAML/summary
msgid "Read and write a subset of YAML for CPAN Meta files"
msgstr "CPAN メタファイル向けの YAML サブセットの読み書き"

#. tumbleweed/perl-CPAN-Meta-YAML/description
#. leap/perl-CPAN-Meta-YAML/description
msgid ""
"This module implements a subset of the YAML specification for use in reading "
"and writing CPAN metadata files like _META.yml_ and _MYMETA.yml_. It should "
"not be used for any other general YAML parsing or generation task.\n"
"\n"
"NOTE: _META.yml_ (and _MYMETA.yml_) files should be UTF-8 encoded. Users are "
"responsible for proper encoding and decoding. In particular, the 'read' and "
"'write' methods do *not* support UTF-8 and should not be used."
msgstr ""
"このモジュールは、 _META.yml_ や _MYMETA.yml_ のような CPAN メタデータファイルに対して、これを読み書きする際に使用する "
"YAML 仕様のサブセットを実装するものです。汎用的な YAML の処理や生成の処理に使用すべきではありません。\n"
"\n"
"注意: _META.yml_ (および _MYMETA.yml_) ファイルは UTF-8 "
"のエンコーディングであるべきものです。エンコーディングやデコーディングはユーザ側の責任で実施してください。特に UTF-8 に対応していない "
"'read', 'write' のメソッドは使用すべきではありません。"

#. tumbleweed/perl-CPAN-Mini/summary
#. leap/perl-CPAN-Mini/summary
msgid "Create a Minimal Mirror of Cpan"
msgstr "CPAN に対する最小ミラーの作成"

#. tumbleweed/perl-CPAN-Mini/description
#. leap/perl-CPAN-Mini/description
msgid ""
"CPAN::Mini provides a simple mechanism to build and update a minimal mirror "
"of the CPAN on your local disk. It contains only those files needed to "
"install the newest version of every distribution. Those files are:\n"
"\n"
"* *\n"
"\n"
"  01mailrc.txt.gz\n"
"\n"
"* *\n"
"\n"
"  02packages.details.txt.gz\n"
"\n"
"* *\n"
"\n"
"  03modlist.data.gz\n"
"\n"
"* *\n"
"\n"
"  the last non-developer release of every dist for every author"
msgstr ""
"CPAN::Mini は、お使いのディスク内に CPAN "
"の最小ミラーを構築し、それを更新するための機構を提供します。各配布物の最新バージョンをインストールするには、下記のファイルのみが必要です:\n"
"\n"
"* *\n"
"\n"
"  01mailrc.txt.gz\n"
"\n"
"* *\n"
"\n"
"  02packages.details.txt.gz\n"
"\n"
"* *\n"
"\n"
"  03modlist.data.gz\n"
"\n"
"* *\n"
"\n"
"  各作者の各配布物に対して、最新の非開発者向けリリースをダウンロードします。"

#. tumbleweed/perl-CPAN-Perl-Releases/summary
#. leap/perl-CPAN-Perl-Releases/summary
msgid "Mapping Perl releases on CPAN to the location of the tarballs"
msgstr "CPAN 内での Perl リリースからローカルの tar ボールへのマッピング"

#. tumbleweed/perl-CPAN-Perl-Releases/description
#. leap/perl-CPAN-Perl-Releases/description
msgid ""
"CPAN::Perl::Releases is a module that contains the mappings of all 'perl' "
"releases that have been uploaded to CPAN to the 'authors/id/' path that the "
"tarballs reside in.\n"
"\n"
"This is static data, but newer versions of this module will be made "
"available as new releases of 'perl' are uploaded to CPAN."
msgstr ""
"CPAN::Perl::Releases は、 tar ボールが存在する 'authors/id/' パスにアップロードしたすべての 'perl' "
"リリースのマッピングを含むものです。\n"
"\n"
"これは固定のデータではありますが、 'perl' の新しいリリースが CPAN "
"にアップロードされることで、このモジュールも新しいバージョンに更新されます。"

#. tumbleweed/perl-CPAN-Uploader/summary
#. leap/perl-CPAN-Uploader/summary
msgid "Upload Things to the Cpan"
msgstr "CPAN へのアップロード"

#. tumbleweed/perl-CPAN-Uploader/description
#. leap/perl-CPAN-Uploader/description
msgid "upload things to the CPAN"
msgstr "CPAN へのアップロード"

#. tumbleweed/perl-CSS-Tiny/summary
#. leap/perl-CSS-Tiny/summary
msgid "Read/Write .css files with as little code as possible"
msgstr "できる限り少ないコードでの .css ファイルの読み書き"

#. tumbleweed/perl-CSS-Tiny/description
#. leap/perl-CSS-Tiny/description
msgid ""
"'CSS::Tiny' is a perl class to read and write .css stylesheets with as "
"little code as possible, reducing load time and memory overhead. CSS.pm "
"requires about 2.6 meg or ram to load, which is a large amount of overhead "
"if you only want to do trivial things. Memory usage is normally scoffed at "
"in Perl, but in my opinion should be at least kept in mind.\n"
"\n"
"This module is primarily for reading and writing simple files, and anything "
"we write shouldn't need to have documentation/comments. If you need "
"something with more power, move up to CSS.pm. With the increasing complexity "
"of CSS, this is becoming more common, but many situations can still live "
"with simple CSS files."
msgstr ""
"'CSS::Tiny' はできる限り少ないコードで作成された .css "
"スタイルシートの読み書きクラスで、読み込み時間とメモリのオーバーヘッドが少なくなるように設計されています。 CSS.pm では読み込みの際に 2.6 "
"MB 程度のメモリ容量を必要としますが、これは複雑な処理を実施する際には馬鹿にできないサイズです。 Perl "
"を使用する場合、メモリの使用量を気にすることはあまりありませんが、念のため注意しておくべきだと考えております。\n"
"\n"
"このモジュールは、主にシンプルなファイルの読み書きを目指しているほか、ドキュメンテーションやコメントを読まなくても簡単に扱えることを目指しています。より高"
"性能なものをお求めの場合は、 CSS.pm をお使いください。 CSS が複雑化していくにあたって、左記のようなモジュールの必要性も高まっていますが、"
"まだ多くの場合においてシンプルな CSS ファイルも必要とされているはずです。"

#. tumbleweed/perl-Cache-Cache/summary
#. leap/perl-Cache-Cache/summary
msgid "The Cache Interface"
msgstr "キャッシュインターフェイス"

#. tumbleweed/perl-Cache-Cache/description
#. leap/perl-Cache-Cache/description
msgid ""
"The Cache modules are designed to assist a developer in persisting data for "
"a specified period of time. Often these modules are used in web applications "
"to store data locally to save repeated and redundant expensive calls to "
"remote machines or databases. People have also been known to use Cache::"
"Cache for its straightforward interface in sharing data between runs of an "
"application or invocations of a CGI-style script or simply as an easy to use "
"abstraction of the filesystem or shared memory.\n"
"\n"
"The Cache::Cache interface is implemented by classes that support the get, "
"set, remove, size, purge, and clear instance methods and their corresponding "
"static methods for persisting data across method calls."
msgstr ""
"Cache モジュールは開発者に対して、指定した期間だけデータの保持を行なう機能を提供します。これらのモジュールは、 Web "
"アプリケーション内でリモートのマシンやデータベースに繰り返し同じ問い合わせを実施しないようにするため、しばしば用いられます。 Cache::Cache "
"はアプリケーションや CGI スタイルのスクリプトなどから、直感的なインターフェイスを提供するものとしてすでに知られていますが、場合によってはファイルシス"
"テムや共有メモリを使用するだけの簡易な実装が用いられることもあります。\n"
"\n"
"Cache::Cache のインターフェイスは get, set, remove, size, purge, clear "
"の各インスタンスメソッドを提供するクラスで実装されているほか、メソッド呼び出しをまたがってデータを保持するため、関連する静的なメソッドも用意されています。"

#. tumbleweed/perl-Cache-LRU/summary
#. leap/perl-Cache-LRU/summary
msgid "Simple, Fast Implementation of Lru Cache in Pure Perl"
msgstr "純粋な Perl 内でのシンプルかつ高速な LRU キャッシュの実装"

#. tumbleweed/perl-Cache-LRU/description
#. leap/perl-Cache-LRU/description
msgid ""
"Cache::LRU is a simple, fast implementation of an in-memory LRU cache in "
"pure perl."
msgstr "Cache::LRU は Perl コードだけで作成された、シンプルで高速なメモリ内 LRU キャッシュの実装です。"

#. tumbleweed/perl-Calendar-Simple/summary
#. leap/perl-Calendar-Simple/summary
msgid "Perl extension to create simple calendars"
msgstr "シンプルなカレンダーを作成するための Perl 拡張"

#. tumbleweed/perl-Calendar-Simple/description
#. leap/perl-Calendar-Simple/description
msgid ""
"A very simple perl module that models a calendar month.\n"
"\n"
"This function returns a data structure representing the dates in a month. "
"The data structure returned is an array of array references. The first level "
"array represents the weeks in the month. The second level array contains the "
"actual days. By default, each week starts on a Sunday and the value in the "
"array is the date of that day. Any days at the beginning of the first week "
"or the end of the last week that are from the previous or next month have "
"the value undef."
msgstr ""
"月次カレンダーをモデルとした非常にシンプルな Perl モジュールです。\n"
"\n"
"この関数は月内での日付を表わすデータ構造を返します。返されるデータ構造は配列参照の配列になっていて、最初のレベルでは月内の週を表わし、 2 つめのレベルで"
"は実際の日を表わします。既定では各週は日曜日に始まるものとされていて、そのように配列内に格納されていますが、月内の最初の週や最終の週の場合、対応する曜日の"
"日が存在しない場合は、 undef が設定されます。"

#. tumbleweed/perl-Canary-Stability/summary
#. leap/perl-Canary-Stability/summary
msgid "Canary to Check Perl Compatibility for Schmorp's Modules"
msgstr "Schmorp 氏のモジュール向け Perl 互換性チェックモジュール"

#. tumbleweed/perl-Canary-Stability/description
#. leap/perl-Canary-Stability/description
msgid ""
"This module is used by Schmorp's modules during configuration stage to test "
"the installed perl for compatibility with his modules.\n"
"\n"
"It's not, at this stage, meant as a tool for other module authors, although "
"in principle nothing prevents them from subscribing to the same ideas.\n"
"\n"
"See the _Makefile.PL_ in Coro or AnyEvent for usage examples."
msgstr ""
"このモジュールは Schmorp 氏のモジュールで使用されているもので、設定ステージの間にインストールされている Perl "
"と対象モジュールとの互換性をテストするための仕組みです。\n"
"\n"
"現時点では他のモジュール作者に対して提供されているものではありませんが、実際のところどのモジュールでも利用は可能です。\n"
"\n"
"使用例について、詳しくは Coro 内の _Makefile.PL_ もしくは AnyEvent をお読みください。"

#. tumbleweed/perl-Capture-Tiny/summary
#. leap/perl-Capture-Tiny/summary
msgid "Capture STDOUT and STDERR from Perl, XS or external programs"
msgstr ""
"Perl, XS のほか、外部プログラムからの STDOUT/STDERR 出力を取り込むモジュール"

#. tumbleweed/perl-Capture-Tiny/description
#. leap/perl-Capture-Tiny/description
msgid ""
"Capture::Tiny provides a simple, portable way to capture almost anything "
"sent to STDOUT or STDERR, regardless of whether it comes from Perl, from XS "
"code or from an external program. Optionally, output can be teed so that it "
"is captured while being passed through to the original filehandles. Yes, it "
"even works on Windows (usually). Stop guessing which of a dozen capturing "
"modules to use in any particular situation and just use this one."
msgstr ""
"Capture::Tiny は STDOUT (標準出力) や STDERR (標準エラー出力) に送信されるほ"
"ぼすべてのデータを、シンプルで可搬性のある方法で取り込む機能を提供します。"
"Perl からの出力だけでなく、 XS コードからの出力や外部プログラムの出力を取り込"
"むことができます。また、必要であれば出力を複製し、取り込みとともに元の出力先"
"に流す機能も用意されています。もちろん Windows でも動作します。どのような場合"
"でも出力を取り込めますから、わざわざ考えることなく本モジュールを使用すること"
"をお勧めします。"

#. tumbleweed/perl-Carp-Always/summary
#. leap/perl-Carp-Always/summary
msgid "Warns and dies noisily with stack backtraces"
msgstr "スタックのバックトレースと共にうるさく警告およびエラー終了するモジュール"

#. tumbleweed/perl-Carp-Always/description
#. leap/perl-Carp-Always/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when warn()ing or die()ing.\n"
"\n"
"Here are how stack backtraces produced by this module looks:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
"arghh at -e line 1           main::f() called at -e line 1           main::"
"g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                            -e 'sub g { f(undef) }; g'   Use of "
"uninitialized value in array dereference at -e line 1           main::"
"f('undef') called at -e line 2           main::g() called at -e line 2\n"
"\n"
"In the implementation, the 'Carp' module does the heavy work, through "
"'longmess()'. The actual implementation sets the signal hooks "
"'$SIG{__WARN__}' and '$SIG{__DIE__}' to emit the stack backtraces.\n"
"\n"
"Oh, by the way, 'carp' and 'croak' when requiring/using the 'Carp' module "
"are also made verbose, behaving like 'cluck' and 'confess', respectively."
msgstr ""
"このモジュールはデバッグ目的で提供されているものです。 warn() や die() "
"の際に、スタックバックトレースを表示して詳細情報を出力できるようにします。\n"
"\n"
"このモジュールで生成されるバックトレースは下記のようになっています:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
"arghh at -e line 1           main::f() called at -e line 1           "
"main::g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' \\"
"                            -e 'sub g { f(undef) }; g'   Use of "
"uninitialized value in array dereference at -e line 1           "
"main::f('undef') called at -e line 2           main::g() called at -e line "
"2\n"
"\n"
"この実装では、 'Carp' モジュールの 'longmess()' を主に利用しています。また、スタックバックトレースを出力するにあたっては、 "
"'$SIG{__WARN__}' と '$SIG{__DIE__}' のフックを利用しています。\n"
"\n"
"ところで、 'Carp' モジュールを必要 (もしくは使用) する際、 'carp' と 'croak' を 'cluck' や 'confess' "
"のように冗長出力することもできます。"

#. tumbleweed/perl-Carp-Assert/summary
#. leap/perl-Carp-Assert/summary
msgid "executable comments"
msgstr "実行可能なコメント"

#. tumbleweed/perl-Carp-Assert/description
#. leap/perl-Carp-Assert/description
msgid ""
"    \"We are ready for any unforseen event that may or may not     occur."
"\"         - Dan Quayle\n"
"\n"
"Carp::Assert is intended for a purpose like the ANSI C library http://en."
"wikipedia.org/wiki/Assert.h. If you're already familiar with assert.h, then "
"you can probably skip this and go straight to the FUNCTIONS section.\n"
"\n"
"Assertions are the explicit expressions of your assumptions about the "
"reality your program is expected to deal with, and a declaration of those "
"which it is not. They are used to prevent your program from blissfully "
"processing garbage inputs (garbage in, garbage out becomes garbage in, error "
"out) and to tell you when you've produced garbage output. (If I was going to "
"be a cynic about Perl and the user nature, I'd say there are no user inputs "
"but garbage, and Perl produces nothing but...)\n"
"\n"
"An assertion is used to prevent the impossible from being asked of your "
"code, or at least tell you when it does. For example:\n"
"\n"
"         sub my_sqrt {         my($num) = shift;\n"
"\n"
"                 assert($num >= 0);\n"
"\n"
"        return sqrt $num;     }\n"
"\n"
"The assertion will warn you if a negative number was handed to your "
"subroutine, a reality the routine has no intention of dealing with.\n"
"\n"
"An assertion should also be used as something of a reality check, to make "
"sure what your code just did really did happen:\n"
"\n"
"    open(FILE, $filename) || die $!;     @stuff = <FILE>;     @stuff = "
"do_something(@stuff);\n"
"\n"
"         assert(@stuff > 0);\n"
"\n"
"The assertion makes sure you have some @stuff at the end. Maybe the file was "
"empty, maybe do_something() returned an empty list... either way, the "
"assert() will give you a clue as to where the problem lies, rather than 50 "
"lines down at when you wonder why your program isn't printing anything.\n"
"\n"
"Since assertions are designed for debugging and will remove themelves from "
"production code, your assertions should be carefully crafted so as to not "
"have any side-effects, change any variables, or otherwise have any effect on "
"your program. Here is an example of a bad assertation:\n"
"\n"
"    assert($error = 1 if $king ne 'Henry');  # Bad!\n"
"\n"
"It sets an error flag which may then be used somewhere else in your program. "
"When you shut off your assertions with the $DEBUG flag, $error will no "
"longer be set.\n"
"\n"
"Here's another example of *bad* use:\n"
"\n"
"    assert($next_pres ne 'Dan Quayle' or goto Canada);  # Bad!\n"
"\n"
"This assertion has the side effect of moving to Canada should it fail. This "
"is a very bad assertion since error handling should not be placed in an "
"assertion, nor should it have side-effects.\n"
"\n"
"In short, an assertion is an executable comment. For instance, instead of "
"writing this\n"
"\n"
"         $life = begin_life();\n"
"\n"
"you'd replace the comment with an assertion which *enforces* the comment.\n"
"\n"
"    $life = begin_life();     assert( $life =~ /!$/ );"
msgstr ""
"    \"起こりうる見えない問題にも、起こりえず見えない問題にも、準備ができてい"
"る。\"   - Dan Quayle\n"
"\n"
"Carp::Assert は ANSI C ライブラリにおける assert (http://en.wikipedia.org/"
"wiki/Assert.h) のような機能を提供することを目的にしています。既に assert.h を"
"ご存知の場合は、この章を読み飛ばして FUNCTIONS セクションをお読みください。\n"
"\n"
"アサーションとは、お使いのプログラムに対して期待する \"必ず成立すべき条件\" "
"を明記したもので、お使いのプログラム内での予期しない動作を防ぎ、期待しない入"
"力でもエラーにならないようにするための仕組みです (Perl やユーザの操作をあまり"
"信頼していないのであれば、まさにこれが重要になることでしょう...)\n"
"\n"
"アサーションとは、お使いのコード内で不正な状態を防ぐための仕組みで、少なくと"
"も不正を検知した場所で処理を停止します。たとえば下記のようなコードがあるとし"
"ます:\n"
"\n"
"         sub my_sqrt {         my($num) = shift;\n"
"\n"
"                 assert($num >= 0);\n"
"\n"
"        return sqrt $num;     }\n"
"\n"
"上記の例では、サブルーチンのパラメータに負の数を指定した場合に、警告メッセー"
"ジが表示されます。これは、このサブルーチン内で負の値を処理する意図がないため"
"です。\n"
"\n"
"アサーションは真実性のチェックを行なう際にも使用することができます。たとえば"
"下記のようなコードが考えられます:\n"
"\n"
"    open(FILE, $filename) || die $!;     @stuff = <FILE>;     @stuff = "
"do_something(@stuff);\n"
"\n"
"         assert(@stuff > 0);\n"
"\n"
"上記のアサーションは、最終的に @stuff 内に 1 つ以上の項目が入っていることを期"
"待するものです。ファイルが空であったような場合、通常であれば上記の sub は空の"
"リストを返しますが、 assert() を追加することにより、そこで処理を停止させるこ"
"とができますから、何も表示されずに処理が続行してしまうよりは、ずっと対応がや"
"りやすくなることでしょう。\n"
"\n"
"アサーションはデバッグ用途に設計されたもので、本番のコードでは削除しておくべ"
"きものです。そのため、 assert() を利用するにあたっては、それが思わぬ悪影響を"
"与えないように使用する必要があります。悪いアサーションの例としては、下記のよ"
"うなものがあります:\n"
"\n"
"    assert($error = 1 if $king ne 'Henry');  # Bad!\n"
"\n"
"上記は $error の値を設定していますので、プログラム内の他の場所で $error の値"
"を利用して何らかの処理を行なっていると、 $DEBUG フラグでアサーションを無効化"
"した場合とは処理が異なることになってしまいます。\n"
"\n"
"また、下記のような *悪い* 例もあります:\n"
"\n"
"    assert($next_pres ne 'Dan Quayle' or goto Canada);  # Bad!\n"
"\n"
"このアサーションは条件判断が偽であった場合、 Canada という位置までジャンプし"
"てしまいます。これはエラー処理では非常に悪い例で、本来の問題が何であったのか"
"がわかりにくくなってしまいます。\n"
"\n"
"簡単にいうと、アサーションとは実行可能なコメントです。たとえば下記のように記"
"述する場合:\n"
"\n"
"         $life = begin_life();\n"
"\n"
"下記のようにして実行可能なコメントを記述することができます:\n"
"\n"
"    $life = begin_life();     assert( $life =~ /!$/ );"

#. tumbleweed/perl-Carp-Assert-More/summary
#. leap/perl-Carp-Assert-More/summary
msgid "Convenience wrappers around Carp::Assert"
msgstr "Carp::Assert に対する便利なラッパー"

#. tumbleweed/perl-Carp-Assert-More/description
#. leap/perl-Carp-Assert-More/description
msgid ""
"Carp::Assert::More is a set of wrappers around the the Carp::Assert manpage "
"functions to make the habit of writing assertions even easier.\n"
"\n"
"Everything in here is effectively syntactic sugar. There's no technical "
"reason to use\n"
"\n"
"    assert_isa( $foo, 'HTML::Lint' );\n"
"\n"
"instead of\n"
"\n"
"    assert( defined $foo );     assert( ref($foo) eq 'HTML::Lint' );\n"
"\n"
"other than readability and simplicity of the code.\n"
"\n"
"My intent here is to make common assertions easy so that we as programmers "
"have no excuse to not use them."
msgstr ""
"Carp::Assert::More は Carp::Assert 機能に対するラッパー集で、日々 assert "
"を作成する際の手間を省くことができるものです。\n"
"\n"
"ここに記されているのはわかりやすい文法例です。たとえば\n"
"\n"
"    assert( defined $foo );     assert( ref($foo) eq 'HTML::Lint' );\n"
"\n"
"のようなコードを\n"
"\n"
"    assert_isa( $foo, 'HTML::Lint' );\n"
"\n"
"に書き換えれば、可読性が高まり、シンプルにもなります。\n"
"\n"
"私がこのモジュールを作成したのは、一般的な assert を簡単に作れるようにして、プログラマ側に余計な手間をかけさせない目的があります。"

#. tumbleweed/perl-Carp-Clan/summary
msgid "Report errors from perspective of caller of a \"clan\" of modules"
msgstr "モジュールの \"クラン\" (呼び出し構造) を見通してエラーをわかりやすくするモジュール"

#. tumbleweed/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, etcetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one."
msgstr ""
"このモジュールは Perl 5.005_03 における \"'Carp.pm'\" をベースにしたモジュールです。 \"use\" ステートメント内の "
"\"'qw()'\" 句 (またはパラメータリスト) で、パターンに該当するすべてのパッケージを飛ばす (スキップする) ように修正されています。\n"
"\n"
"たとえば \"Pack::A\", \"Pack::B\" 等のモジュールやクラスがあるものと仮定すると、それらのそれぞれで \"'Carp::Clan "
"qw(^Pack::);'\" を使用している場合があります (もしくは、それらのうちのいずれかでエラーや例外が発生した場合を想定します) 。\n"
"\n"
"このとき、たとえば \"tool.pl\" というスクリプトが \"Pack::A\" モジュールを呼び出し、 \"Pack::A\" が \""
"Pack::B\" を呼び出しているとすると、未修正の \"'Carp.pm'\" では、 \"Pack::B\" 内で発生した例外は、 \"tool."
"pl\" 内の \"Pack::A\" が呼び出された箇所を示す形になり、 \"Pack::B\" を呼び出していた \"Pack::A\" "
"を示すことはありません。\n"
"\n"
"これはたとえば、 \"Pack::B\" が \"Pack::C\" を呼び出していて、その中で例外が発生した場合も同様になります。\n"
"\n"
"これは、言い換えれば \"'Pack::*'\" モジュール内で発生したすべてのエラーが \"tool.pl\" のエラー (つまりあなたの間違い) "
"として報告されることになります。\n"
"\n"
"パターンを指定して、パッケージ内の該当する箇所 (またはファミリ) を飛ばすことは、これらのモジュールが互いに派生関係にない場合に必要となります "
"(そしてこの理由から、(元々の \"'Carp.pm'\" にあるような) '@ISA' を解釈してしまっては解決しません) 。\n"
"\n"
"このモジュールの目的とメリットは、互いにうまく動作するような \"集合\" "
"であることにあり、様々な場所で例外が発生した場合でも呼び出しの階層構造を表示し、一枚岩のブロックとして見える (それらが単一のモジュールであるかのように)"
" ことを目指しています。\n"
"\n"
"\"'use Carp::Clan'\" "
"を設定していて、単純に特定のモジュール内で発生したすべてのエラーメッセージについて、これらをすべて受け流すようにしたい場合、"
"つまりエラーメッセージや警告メッセージ (\"die\" または \"warn\") で表示される場所が、"
"モジュールを呼び出した場所ではなく実際に発生した場所であって欲しい場合 (通常は \"'use Carp;'\" を使用しますが) "
"は、パターンを設定する必要はなく、モジュールは自動的に正しい情報を提供します。\n"
"\n"
"これは何もパラメータを指定せずに \"'use Carp::Clan;'\" だけを使用し、 \"carp\" や\"croak\" "
"を適切に使用していれば、警告やエラーのメッセージは自動的に元の場所を示すようになるということです。\n"
"\n"
"これをさらに言い換えれば、パターンは特定のモジュールだけに対して動作させたい場合にのみ指定するものであると言えます。"

#. tumbleweed/perl-Carton/summary
#. leap/perl-Carton/summary
msgid "Perl module dependency manager (aka Bundler for Perl)"
msgstr "Perl モジュールの依存関係管理 (Bundler for Perl)"

#. tumbleweed/perl-Carton/description
#. leap/perl-Carton/description
msgid ""
"carton is a command line tool to track the Perl module dependencies for your "
"Perl application. Dependencies are declared using cpanfile format, and the "
"managed dependencies are tracked in a _cpanfile.snapshot_ file, which is "
"meant to be version controlled, and the snapshot file allows other "
"developers of your application will have the exact same versions of the "
"modules.\n"
"\n"
"For 'cpanfile' syntax, see cpanfile documentation."
msgstr ""
"carton はお使いの Perl アプリケーションで利用することのできる、 Perl モジュールの依存関係を追跡するためのコマンドラインツールです。"
"依存関係は cpanfile 形式で定義し、現在の依存関係の情報は _cpanfile.snapshot_ ファイルに保存されます。また、このモジュールは"
"バージョンの管理のほか、お使いのアプリケーションを開発する他の方から、厳密に同じバージョンのモジュールを指定できるようにもしています。\n"
"\n"
"'cpanfile' の文法について、詳しくは cpanfile のドキュメンテーションをご覧ください。"

#. tumbleweed/perl-Catalyst-Manual/summary
#. tumbleweed/perl-Catalyst-Manual/description
#. leap/perl-Catalyst-Manual/summary
#. leap/perl-Catalyst-Manual/description
msgid "The Catalyst developer's manual"
msgstr "Catalyst 開発者マニュアル"

#. tumbleweed/perl-Chart/summary
#. leap/perl-Chart/summary
msgid "Series of Charting Modules"
msgstr "グラフ作成モジュール集"

#. tumbleweed/perl-Chart/description
#. leap/perl-Chart/description
msgid ""
"These man-pages give you the most important information about Chart. There "
"is also a complete documentation (Documentation.pdf) within the Chart "
"package. Look at it to get more information. This module is an attempt to "
"build a general purpose graphing module that is easily modified and "
"expanded. I borrowed most of the API from Martien Verbruggen's GIFgraph "
"module. I liked most of GIFgraph, but I thought it was to difficult to "
"modify, and it was missing a few things that I needed, most notably legends. "
"So I decided to write a new module from scratch, and I've designed it from "
"the bottom up to be easy to modify. Like GIFgraph, Chart uses Lincoln "
"Stein's GD module for all of its graphics primitives calls."
msgstr ""
"これらのマニュアルページでは、 Chart モジュールに関する最も重要な情報を提供し"
"ています。ここには Chart パッケージ内にある完全なドキュメンテーション "
"(Documentation.pdf) も含まれています。このモジュールは、容易に修正したり拡張"
"したりすることのできる、汎用グラフ作成モジュールです。 API の多くは Martien "
"Verbruggen氏による GIFgraph モジュールを参考にしていて、作者自身も GIFgraph "
"を好んでいましたが、修正するための手間が多いことがわかっていて、必要な機能が"
"いくつか足りていないことがわかったため、新しいモジュールを新たに作成すること"
"にしました。Chart では Lincoln Stein 氏による GD モジュールを使用し、すべての"
"グラフィック処理を実施しています。"

#. tumbleweed/perl-Class-Accessor-Grouped/summary
#. leap/perl-Class-Accessor-Grouped/summary
msgid "Lets you build groups of accessors"
msgstr "アクセサのグループの構築"

#. tumbleweed/perl-Class-Accessor-Grouped/description
#. leap/perl-Class-Accessor-Grouped/description
msgid ""
"This class lets you build groups of accessors that will call different "
"getters and setters. The documentation of this module still requires a lot "
"of work (*volunteers welcome >.>*), but in the meantime you can refer to "
"http://lo-f.at/glahn/2009/08/WritingPowerfulAccessorsForPerlClasses.html for "
"more information."
msgstr ""
"このクラスは、様々な getter や setter を呼び出すアクセサのグループを構築します。このモジュールのドキュメンテーションはまだ作成途中で、"
"多くの作業が必要となっています (*ボランティア募集中*) が、詳しい情報については http://lo-f.at/glahn/2009/08/"
"WritingPowerfulAccessorsForPerlClasses.html をお読みください。"

#. tumbleweed/perl-Class-Accessor-Lite/summary
#. leap/perl-Class-Accessor-Lite/summary
msgid "Minimalistic Variant of Class::Accessor"
msgstr "Class::Accessor の最小形"

#. tumbleweed/perl-Class-Accessor-Lite/description
#. leap/perl-Class-Accessor-Lite/description
msgid ""
"The module is a variant of 'Class::Accessor'. It is fast and requires less "
"typing, has no dependencies to other modules, and does not mess up the @ISA."
msgstr ""
"このモジュールは 'Class::Accessor' から派生したクラスで、入力の手間を省きながらも他のモジュールへの依存関係が無く、かつ @ISA "
"の仕組みを壊さないモジュールになっています。"

#. tumbleweed/perl-Class-Adapter/summary
#. leap/perl-Class-Adapter/summary
msgid "Perl implementation of the \"Adapter\" Design Pattern"
msgstr "\"Adapter\" デザインパターンの Perl 実装"

#. tumbleweed/perl-Class-Adapter/description
#. leap/perl-Class-Adapter/description
msgid ""
"The 'Class::Adapter' class is intended as an abstract base class for "
"creating any sort of class or object that follows the _Adapter_ pattern."
msgstr ""
"'Class::Adapter' は、 _Adapter_ "
"パターンに従って様々な種類のクラスやオブジェクトを作成することができる、抽象化ベースクラスとなるべきものです。"

#. tumbleweed/perl-Class-Base/summary
#. leap/perl-Class-Base/summary
msgid "useful base class for deriving other modules"
msgstr "他のモジュールの派生モジュールを作るための便利なベースクラス"

#. tumbleweed/perl-Class-Base/description
#. leap/perl-Class-Base/description
msgid ""
"Please consider using the Badger::Base manpage instead which is the "
"successor of this module.\n"
"\n"
"This module implements a simple base class from which other modules can be "
"derived, thereby inheriting a number of useful methods such as 'new()', "
"'init()', 'params()', 'clone()', 'error()' and 'debug()'.\n"
"\n"
"For a number of years, I found myself re-writing this module for practically "
"every Perl project of any significant size. Or rather, I would copy the "
"module from the last project and perform a global search and replace to "
"change the names. Each time it got a little more polished and eventually, I "
"decided to Do The Right Thing and release it as a module in it's own right.\n"
"\n"
"It doesn't pretend to be an all-encompassing solution for every kind of "
"object creation problem you might encounter. In fact, it only supports "
"blessed hash references that are created using the popular, but by no means "
"universal convention of calling 'new()' with a list or reference to a hash "
"array of named parameters. Constructor failure is indicated by returning "
"undef and setting the '$ERROR' package variable in the module's class to "
"contain a relevant message (which you can also fetch by calling 'error()' as "
"a class method).\n"
"\n"
"e.g.\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello "
"World'     ) || die $My::Module::ERROR;\n"
"\n"
"or:\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello "
"World',     }) || die My::Module->error();\n"
"\n"
"The 'new()' method handles the conversion of a list of arguments into a hash "
"array and calls the 'init()' method to perform any initialisation. In many "
"cases, it is therefore sufficient to define a module like so:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::"
"Base );\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
"qw( FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"Then you can go right ahead and use it like this:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => "
"'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"Despite its limitations, Class::Base can be a surprisingly useful module to "
"have lying around for those times where you just want to create a regular "
"object based on a blessed hash reference and don't want to worry too much "
"about duplicating the same old code to bless a hash, define configuration "
"values, provide an error reporting mechanism, and so on. Simply derive your "
"module from 'Class::Base' and leave it to worry about most of the detail. "
"And don't forget, you can always redefine your own 'new()', 'error()', or "
"other method, if you don't like the way the Class::Base version works."
msgstr ""
"このモジュールは使用せず、後継モジュールである Badger::Base をお使いください。\n"
"\n"
"このモジュールは、他のモジュールが提供するクラスを派生させ、 'new()', 'init()', 'params()', 'clone()', "
"'error()', 'debug()' などの多くの便利なメソッドを継承することのできる、シンプルなベースクラスを実装しています。\n"
"\n"
"何年にもわたり、様々な規模の Perl プロジェクトに対して、このモジュールは書き直されてきました。というよりも、直近のプロジェクトからモジュールをコピー"
"して、名前を変更するためにグローバルに検索および置換が行なわれてきました。作業を行なうごとにそれは磨き上げられてきたことから、ここでようやくこれをモジュー"
"ルとして公開するに至りました。\n"
"\n"
"なお、このモジュールは、オブジェクトを作成するにあたって発生する様々な問題に対して、すべてを網羅するようには考えられていません。実際には、 'new()"
"' に対してリストや名前付きのパラメータが含まれるハッシュ参照を与えるような、よくあるブレス型のハッシュ参照のみをサポートしています。"
"コンストラクタにおけるエラーは undef を返すことによって表わされ、モジュール内にある '$ERROR' "
"というパッケージ変数に関連するメッセージが設定されます (クラスメソッドの 'error()' を呼び出しても同じ結果を得られます) 。\n"
"\n"
"具体的には、下記のいずれかのようになります:\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello "
"World'     ) || die $My::Module::ERROR;\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello "
"World',     }) || die My::Module->error();\n"
"\n"
"'new()' メソッドはパラメータの一覧をハッシュ参照に変換して 'init()' "
"メソッドを呼び出し、実際の初期化を行ないます。多くのクラスでは、下記のようにモジュールを定義するのがよいでしょう:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::Base );"
"\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, qw( "
"FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"モジュールを使用する場合は、下記のようにするだけです:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => "
"'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"制限事項もありますが、 Class::Base は驚くほど便利なモジュールで、通常のオブジェクトベースのブレス型参照を利用するような場合や、ハッシュをブレ"
"スするための同じような古いコードを繰り返してしまうような手間をかけたくない場合、もしくは設定値の定義やエラー報告の仕組みなど、様々な手間を省くことができま"
"す。単純に 'Class::Base' からお使いのモジュールに派生させれば、それだけで済みます。なお、 Class::Base "
"のバージョンの動作で支障がある場合は、忘れずに 'new()', 'error()' などのメソッドを定義してください。"

#. tumbleweed/perl-Class-C3/summary
#. leap/perl-Class-C3/summary
msgid "Pragma to Use the C3 Method Resolution Order Algorithm"
msgstr "C3 メソッド解決順序アルゴリズムを使用するプラグマ"

#. tumbleweed/perl-Class-C3/description
#. leap/perl-Class-C3/description
msgid ""
"This is pragma to change Perl 5's standard method resolution order from "
"depth-first left-to-right (a.k.a - pre-order) to the more sophisticated C3 "
"method resolution order.\n"
"\n"
"*NOTE:* YOU SHOULD NOT USE THIS MODULE DIRECTLY - The feature provided is "
"integrated into perl version >= 5.9.5, and you should use MRO::Compat "
"instead, which will use the core implementation in newer perls, but fallback "
"to using this implementation on older perls."
msgstr ""
"これは Perl 5 の標準のメソッド解決順序である、 depth-first left-to-right (別名: pre-order) "
"を変更するためのプラグマで、より洗練された C3 メソッド解決順序を使用するようにします。\n"
"\n"
"*注意*: このモジュールは直接使用すべきではありません - 提供される機能は Perl バージョン 5.9.5 以降で統合されているほか、 "
"使用する場合であっても MRO::Compat を使うべきです。こちらは新しい Perl 内にある中枢の実装を使用しますが、このモジュールでは古い "
"Perl でこの実装を使用することができるようになります。"

#. tumbleweed/perl-Class-C3-Adopt-NEXT/summary
#. leap/perl-Class-C3-Adopt-NEXT/summary
msgid "Make Next Suck Less"
msgstr "NEXT の騒ぎを収めるもの"

#. tumbleweed/perl-Class-C3-Adopt-NEXT/description
#. leap/perl-Class-C3-Adopt-NEXT/description
msgid ""
"the NEXT manpage was a good solution a few years ago, but isn't any more. "
"It's slow, and the order in which it re-dispatches methods appears random at "
"times. It also encourages bad programming practices, as you end up with code "
"to re-dispatch methods when all you really wanted to do was run some code "
"before or after a method fired.\n"
"\n"
"However, if you have a large application, then weaning yourself off 'NEXT' "
"isn't easy.\n"
"\n"
"This module is intended as a drop-in replacement for NEXT, supporting the "
"same interface, but using the Class::C3 manpage to do the hard work. You can "
"then write new code without 'NEXT', and migrate individual source files to "
"use 'Class::C3' or method modifiers as appropriate, at whatever pace you're "
"comfortable with."
msgstr ""
"NEXT は何年にもわたって良いソリューションではありましたが、現在はもうそうではありません。動作が遅く、メソッドの再発信は時によってランダムな順序で動作"
"してしまいます。これでは悪いプログラミングを推奨することになってしまい、結局は実際にやりたかったメソッドの再発信は、メソッドの実行前後で実行されてしまいま"
"す。\n"
"\n"
"しかしながら、巨大なアプリケーションを作成しているような場合、 'NEXT' から離れるのは簡単ではありません。\n"
"\n"
"このモジュールは NEXT を直接的に置き換える目的で開発されたモジュールで、同じインターフェイスに対応しながら、 Class::C3 "
"を利用して複雑な処理を実現しています。新しく作成するコードから 'NEXT' を使用しないようにし、既存の各ソースファイルは順次 'Class::C3' "
"を使用するように移行するか、適切であればメソッドの修飾子を設定することで、適切なペースで移行することができるようになります。"

#. tumbleweed/perl-Class-C3-Componentised/summary
#. leap/perl-Class-C3-Componentised/summary
msgid "Class::C3::Componentised Perl module"
msgstr "Class::C3::Componentised Perl モジュール"

#. tumbleweed/perl-Class-C3-Componentised/description
#. leap/perl-Class-C3-Componentised/description
msgid "Load mix-ins or components to your C3-based class."
msgstr "mix-in またはコンポーネントの C3 ベースのクラスへの読み込みを行ないます。"

#. tumbleweed/perl-Class-Container/summary
#. leap/perl-Class-Container/summary
msgid "Glues object frameworks together transparently"
msgstr "オブジェクト同士をフレームワークとして透過的に接続するモジュール"

#. tumbleweed/perl-Class-Container/description
#. leap/perl-Class-Container/description
msgid ""
"This class facilitates building frameworks of several classes that inter- "
"operate. It was first designed and built for HTML::Mason, in which the "
"Compiler, Lexer, Interpreter, Resolver, Component, Buffer, and several other "
"objects must create each other transparently, passing the appropriate "
"parameters to the right class, possibly substituting other subclasses for "
"any of these objects."
msgstr ""
"このクラスは、相互に運用のできる複数のクラスに対して、そのフレームワークの構築を支援します。最初のうちは HTML::Mason 向けに設計および構築され"
"てきましたが、コンパイラやレキサ、インタプリタや解決器、コンポーネントやバッファなど、様々なオブジェクトを相互に、かつ透過的に作成しなければならなくなった"
"ほか、正しいクラスに正しいパラメータが渡るようにしたり、これらのオブジェクト間で他のサブクラスを置き換えたりする必要が生じたことにより、作成されたものです"
"。"

#. tumbleweed/perl-Class-DBI/summary
#. tumbleweed/perl-Class-DBI/description
#. leap/perl-Class-DBI/summary
#. leap/perl-Class-DBI/description
msgid "Simple Database Abstraction"
msgstr "シンプルなデータベース抽象化機構"

#. tumbleweed/perl-Class-Data-Inheritable/summary
#. leap/perl-Class-Data-Inheritable/summary
msgid "Inheritable, overridable class data"
msgstr "継承可能でオーバーライド可能なクラスデータ"

#. tumbleweed/perl-Class-Data-Inheritable/description
#. leap/perl-Class-Data-Inheritable/description
msgid ""
"Class::Data::Inheritable is for creating accessor/mutators to class data. "
"That is, if you want to store something about your class as a whole (instead "
"of about a single object). This data is then inherited by your subclasses "
"and can be overriden.\n"
"\n"
"For example:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"will generate the method Suitcase() in the class Pere::Ubu.\n"
"\n"
"This new method can be used to get and set a piece of class data.\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"The interesting part happens when a class inherits from Pere::Ubu:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun inherits its Suitcase class data from Pere::Ubu.\n"
"\n"
"Inheritance of class data works analogous to method inheritance. As long as "
"Raygun does not \"override\" its inherited class data (by using Suitcase() "
"to set a new value) it will continue to use whatever is set in Pere::Ubu and "
"inherit further changes:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"However, should Raygun decide to set its own Suitcase() it has now "
"\"overridden\" Pere::Ubu and is on its own, just like if it had overriden a "
"method:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"Now that Raygun has overridden Pere::Ubu futher changes by Pere::Ubu no "
"longer effect Raygun.\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');"
msgstr ""
"Class::Data::Inheritable はクラスデータに対するアクセサやミューテータを作成す"
"ることができるモジュールです。つまり、 (専用のオブジェクトを作成するのではな"
"く) クラス内に情報を保存したい場合に使用します。このデータはサブクラスで継承"
"したりオーバーライドしたりすることもできます。\n"
"\n"
"例:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"は Suitcase() というメソッドを Pere::Ubu 内に作成します。\n"
"\n"
"この新しいメソッドは、クラス内のデータ断片を取り出したり設定したりするのに使"
"用します。\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"Pere::Ubu からクラスを継承すると、興味深いことが起きます:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun は Pere:Ubu のクラスデータである Suitcase を継承します。\n"
"\n"
"クラスデータの継承はメソッドの継承に似た仕組みで、 Raygun 側でクラスデータを"
"\"オーバーライド\" しない限り (Suitcase() に対して新しい値を設定しない限"
"り) 、Pere::Ubu に設定された内容やその後の変更を継承します:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"しかしながら、 Raygun 側で独自の Suitcase() を設定する必要が発生した場合、"
"Pere::Ubu のものを \"オーバーライド\" することができます:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"これで Raygun は Pere::Ubu のものをオーバーライドすることになります。今後の"
"Pere::Ubu に対する変更は、 Raygun 側には影響しなくなります。\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');"

#. tumbleweed/perl-Class-Factory-Util/summary
#. leap/perl-Class-Factory-Util/summary
msgid "Provide utility methods for factory classes"
msgstr "factory クラス向けのユーティリティメソッド"

#. tumbleweed/perl-Class-Factory-Util/description
#. leap/perl-Class-Factory-Util/description
msgid "This module exports a method that is useful for factory classes."
msgstr "このモジュールは、 factory クラスに対して便利なメソッドを公開します。"

#. tumbleweed/perl-Class-ISA/summary
#. leap/perl-Class-ISA/summary
msgid "report the search path for a class's ISA tree"
msgstr "クラスの ISA ツリーに対して検索パスを報告するモジュール"

#. tumbleweed/perl-Class-ISA/description
#. leap/perl-Class-ISA/description
msgid ""
"Suppose you have a class (like Food::Fish::Fishstick) that is derived, via "
"its @ISA, from one or more superclasses (as Food::Fish::Fishstick is from "
"Food::Fish, Life::Fungus, and Chemicals), and some of those superclasses may "
"themselves each be derived, via its @ISA, from one or more superclasses (as "
"above).\n"
"\n"
"When, then, you call a method in that class ($fishstick->calories), Perl "
"first searches there for that method, but if it's not there, it goes "
"searching in its superclasses, and so on, in a depth-first (or maybe "
"\"height-first\" is the word) search. In the above example, it'd first look "
"in Food::Fish, then Food, then Matter, then Life::Fungus, then Life, then "
"Chemicals.\n"
"\n"
"This library, Class::ISA, provides functions that return that list -- the "
"list (in order) of names of classes Perl would search to find a method, with "
"no duplicates."
msgstr ""
"Food::Fish::Fishstick のようなクラスがあったとして、それは @ISA を介して 1 つ"
"または複数のスーパークラス (たとえば Food::Fish::Fishstick は Food::Fish, "
"Life::Fungus, Chemicals など) から作成されたものとします。また、これらのスー"
"パークラス自身も @ISA を介して 1 つまたは複数のスーパークラスから作成されたも"
"のとします。\n"
"\n"
"この場合、そのクラスのメソッドを呼び出す ($fishstick->calories) 際、 Perl は"
"まずそのようなメソッドを検索します。存在しない場合、それらのスーパークラスを"
"検索していくことになりますが、検索は深さ順に行なわれます。上記の例では、"
"Food::Fish が検索対象になり、その後 Food, Matter, Life::Fungus, Life, "
"Chemicals. の順で検索を行ないます。\n"
"\n"
"このライブラリ Class::ISA は、このようなリストを返す関数を提供します。 Perl "
"クラスの名前配列として、検索順を重複することなく提供します。"

#. tumbleweed/perl-Class-Inner/summary
#. leap/perl-Class-Inner/summary
msgid "A perlish implementation of Java like inner classes"
msgstr "Java のインナークラスの Perl 版実装"

#. tumbleweed/perl-Class-Inner/description
#. leap/perl-Class-Inner/description
msgid ""
"Yet another implementation of an anonymous class with per object "
"overrideable methods, but with the added attraction of sort of working "
"dispatch to the parent class's method."
msgstr ""
"匿名クラスに対するもう 1 つの実装で、 Perl "
"のオブジェクトに対するオーバーライドも提供します。ただし、親クラスのメソッドの実行を促す仕組みはそのまま提供されます。"

#. tumbleweed/perl-Class-Inspector/summary
#. leap/perl-Class-Inspector/summary
msgid "Get information about a class and its structure"
msgstr "クラスに関する情報とその構造に関する情報を提供するモジュール"

#. tumbleweed/perl-Class-Inspector/description
#. leap/perl-Class-Inspector/description
msgid ""
"Class::Inspector allows you to get information about a loaded class. Most or "
"all of this information can be found in other ways, but they aren't always "
"very friendly, and usually involve a relatively high level of Perl wizardry, "
"or strange and unusual looking code. Class::Inspector attempts to provide an "
"easier, more friendly interface to this information."
msgstr ""
"Class::Inspector は読み込まれたクラスに関する情報を取得することができます。こ"
"の情報の大半もしくは全ては他の方法でも取得できますが、不便であるか比較的高い"
"難易度のコードを書かなければならず、見かけの良くない奇異なコードになってしま"
"いがちです。 Class::Inspector は、これらの情報についての使いやすく見やすいイ"
"ンターフェイスを提供します。"

#. tumbleweed/perl-Class-Load/summary
msgid "Working (Require \"Class::Name\") and More"
msgstr "(require \"Class::Name\") 以上の処理をするもの"

#. tumbleweed/perl-Class-Load/description
#. leap/perl-Class-Load/description
msgid ""
"'require EXPR' only accepts 'Class/Name.pm' style module names, not 'Class::"
"Name'. How frustrating! For that, we provide 'load_class 'Class::Name''.\n"
"\n"
"It's often useful to test whether a module can be loaded, instead of "
"throwing an error when it's not available. For that, we provide "
"'try_load_class 'Class::Name''.\n"
"\n"
"Finally, sometimes we need to know whether a particular class has been "
"loaded. Asking '%INC' is an option, but that will miss inner packages and "
"any class for which the filename does not correspond to the package name. "
"For that, we provide 'is_class_loaded 'Class::Name''."
msgstr ""
"'require EXPR' は 'Class/Name.pm' 形式のモジュール名のみを受け付け、'Class::"
"Name' 形式では受け付けません。そのため、 'load_class 'Class::Name'' というメ"
"ソッドを用意しています。\n"
"\n"
"モジュールの読み込みにあたって、読み込み失敗時にエラー終了するのではなく、読"
"み込み可能かどうかを調べる方法が必要な場合もあります。このような場合"
"は、'try_load_class 'Class::Name'' をお使いください。\n"
"\n"
"また、特定のクラスが読み込まれているかどうかを知りたい場合は、 '%INC' を調べ"
"る方法がありますが、このような場合は内部クラスやファイル名がパッケージ名を表"
"していないような場合にうまく動作しません。このような場合は、 "
"'is_class_loaded 'Class::Name'' をお使いください。"

#. tumbleweed/perl-Class-MakeMethods/summary
#. leap/perl-Class-MakeMethods/summary
msgid "Generate common types of methods"
msgstr "メソッドの汎用型の生成"

#. tumbleweed/perl-Class-MakeMethods/description
#. leap/perl-Class-MakeMethods/description
msgid ""
"The Class::MakeMethods framework allows Perl class developers to quickly "
"define common types of methods. When a module uses Class::MakeMethods or one "
"of its subclasses, it can select from a variety of supported method types, "
"and specify a name for each method desired. The methods are dynamically "
"generated and installed in the calling package."
msgstr ""
"Class::MakeMethods フレームワークは、 Perl クラスの開発者に対して、汎用型のメソッドを素早く作成できるようにします。"
"モジュール側で Class::MakeMethods やそのサブクラスを使用すると、対応する様々なメソッドタイプの中から必要なメソッドを選択できるようにな"
"ります。メソッドは動的に生成され、呼び出し元のパッケージにインストールされます。"

#. tumbleweed/perl-Class-Method-Modifiers/summary
#. leap/perl-Class-Method-Modifiers/summary
msgid "Provides Moose-like method modifiers"
msgstr "Moose のようなメソッド修飾子"

#. tumbleweed/perl-Class-Method-Modifiers/description
#. leap/perl-Class-Method-Modifiers/description
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self-"
">SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, "
"so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and "
"'after'. 'before' and 'after' are run just before and after the method they "
"modify, but can not really affect that original method. 'around' is run in "
"place of the original method, with a hook to easily call that original "
"method. See the 'MODIFIERS' section for more details on how the particular "
"modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define "
"multiple modifiers in a single namespace. These separate modifiers don't "
"need to know about each other. This makes top-down design easy. Have a base "
"class that provides the skeleton methods of each operation, and have plugins "
"modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means "
"you should be able to modify methods in _any_ subclass. See Term::VT102::"
"ZeroBased for an example of subclassing with 'Class::Method::Modifiers'.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you "
"call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than "
"Moose. See 'benchmark/method_modifiers.pl' in the Moose distribution.\n"
"\n"
"'Class::Method::Modifiers' also provides an additional \"modifier\" type, "
"'fresh'; see below."
msgstr ""
"メソッドの修飾子は CLOS (Common Lisp Object System) の世界では便利な機能です。\n"
"\n"
"もっとも基本的な形式では、メソッドの修飾子は '$self->SUPER::foo(@_)' を呼び出すだけのメソッドです。私は以前、そのような呼び出しの"
"問題に頭を抱えていましたが、これはクラス側でベースクラスに対して再発信を行なっていたためです。非常によろしくありません。\n"
"\n"
"'Class::Method::Modifiers' は 'before', 'around', 'after' の 3 種類の修飾子を提供します。 "
"'before' と 'after' は単純に対象のメソッドの呼び出し前後に実行される仕組みで、実際のメソッドの実行には影響がありません。 "
"'around' "
"は元のメソッドに立ち替わって実行されるもので、フックのようにして元のメソッドから呼び出されます。それぞれの修飾子がどのように動作するのかについて、"
"詳しくは 'MODIFIERS' セクションをお読みください。\n"
"\n"
"'Class::Method::Modifiers' を使用するにあたって、明らかな利点としてあげられるのは、単一のネームスペース内で複数の修飾子を設定で"
"きることです。それぞれの修飾はお互いを知っておく必要がありません。このような仕組みにより、トップダウン型の設計を簡単に作成することができます。各動作のメソ"
"ッドに対してスケルトンクラスを提供するベースクラスがあれば、プラグイン側で各メソッドの実際の動作を記述することができます。\n"
"\n"
"また、親クラス側でも 'Class::Method::Modifiers' "
"を知る必要はありません。これにより、どのようなサブクラス内のメソッドをも修正することができることになります。 'Class::Method::"
"Modifiers' を利用したサブクラスの使用例について、詳しくは Term::VT102::ZeroBased をお読みください。\n"
"\n"
"簡単に言うと、 'Class::Method::Modifiers' は '$self->SUPER::foo(@_)' "
"を確実に呼び出さなければならない問題を解決するもので、よりクリーンなインターフェイスを提供します。\n"
"\n"
"バージョン 1.00 では、場合によっては Moose に比べて 'Class::Method::Modifiers' "
"がより高速に動作するようになりました。 Moose 配布物内の 'benchmark/method_modifiers.pl' をご覧ください。\n"
"\n"
"また、 'Class::Method::Modifiers' では追加の \"修飾子\" タイプである 'fresh' "
"にも対応しています。詳しくは下記をお読みください。"

#. tumbleweed/perl-Class-Method-Modifiers-Fast/summary
#. leap/perl-Class-Method-Modifiers-Fast/summary
msgid "provides Moose-like method modifiers"
msgstr "Moose のようなメソッド修飾子"

#. tumbleweed/perl-Class-Method-Modifiers-Fast/description
#. leap/perl-Class-Method-Modifiers-Fast/description
msgid ""
"Method modifiers are a powerful feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"'Class::Method::Modifiers::Fast' provides three modifiers: 'before', "
"'around', and 'after'. 'before' and 'after' are run just before and after "
"the method they modify, but can not really affect that original method. "
"'around' is run in place of the original method, with a hook to easily call "
"that original method. See the 'MODIFIERS' section for more details on how "
"the particular modifiers work."
msgstr ""
"メソッドの修飾子は CLOS (Common Lisp Object System) の世界では便利な機能です。\n"
"\n"
"もっとも基本的な形式では、メソッドの修飾子は '$self->SUPER::foo(@_)' を呼び出すだけのメソッドです。私は以前、そのような呼び出しの"
"問題に頭を抱えていましたが、これはクラス側でベースクラスに対して再発信を行なっていたためです。非常によろしくありません。\n"
"\n"
"'Class::Method::Modifiers' は 'before', 'around', 'after' の 3 種類の修飾子を提供します。 "
"'before' と 'after' は単純に対象のメソッドの呼び出し前後に実行される仕組みで、実際のメソッドの実行には影響がありません。 "
"'around' "
"は元のメソッドに立ち替わって実行されるもので、フックのようにして元のメソッドから呼び出されます。それぞれの修飾子がどのように動作するのかについて、"
"詳しくは 'MODIFIERS' セクションをお読みください。"

#. tumbleweed/perl-Class-Mix/summary
#. leap/perl-Class-Mix/summary
msgid "Dynamic Class Mixing"
msgstr "動的なクラス混合"

#. tumbleweed/perl-Class-Mix/description
#. leap/perl-Class-Mix/description
msgid ""
"The 'mix_class' function provided by this module dynamically generates "
"`anonymous' classes with specified inheritance."
msgstr "このモジュールで提供されている 'mix_class' 関数は、指定した継承関係を持つ '匿名' クラスを動的に生成します。"

#. tumbleweed/perl-Class-ReturnValue/summary
#. leap/perl-Class-ReturnValue/summary
msgid ""
"Return-value object that lets you treat it as as a boolean, array or object"
msgstr "boolean, 配列, オブジェクトとして扱うことのできる返り値オブジェクト"

#. tumbleweed/perl-Class-ReturnValue/description
#. leap/perl-Class-ReturnValue/description
msgid ""
"Class::ReturnValue is a \"clever\" return value object that can allow code "
"calling your routine to expect: a boolean value (did it fail) or a list "
"(what are the return values)"
msgstr ""
"Class::ReturnValue は、お使いのルーチンからの呼び出しで、返り値のオブジェクトを設定するための \"賢い\" 方法を提供します: "
"boolean 値 (失敗したかどうか) やリスト (返り値) を設定することができます。"

#. tumbleweed/perl-Class-Singleton/summary
#. leap/perl-Class-Singleton/summary
msgid "Implementation of a \"Singleton\" class"
msgstr "\"シングルトン\" クラスの実装"

#. tumbleweed/perl-Class-Singleton/description
msgid ""
"This is the 'Class::Singleton' module. A Singleton describes an object class "
"that can have only one instance in any system. An example of a Singleton "
"might be a print spooler or system registry. This module implements a "
"Singleton class from which other classes can be derived. By itself, the "
"'Class::Singleton' module does very little other than manage the "
"instantiation of a single object. In deriving a class from 'Class::"
"Singleton', your module will inherit the Singleton instantiation method and "
"can implement whatever specific functionality is required.\n"
"\n"
"For a description and discussion of the Singleton class, see \"Design "
"Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2."
msgstr ""
"これは \"Class::Singleton\" モジュールです。シングルトンとは、システム内で1 "
"つだけのインスタンスを保持できるクラスのことを指します。シングルトンのオブ"
"ジェクトとしては、たとえば印刷用のスプールシステムや、システムのレジストリな"
"どが挙げられます。このモジュールは、そのようなシングルトンを他のクラスから派"
"生する形で作成することができます。なお、 \"Class::Singleton\" モジュールは、"
"単一のオブジェクトに対するインスタンス化を管理するよりも、非常に小さな処理し"
"か行ないません。 \"Class::Singleton\" からクラスを派生させて作成することで、"
"シングルトンのインスタンス化方式を継承し、必要な機能を実装することができるよ"
"うになります。\n"
"\n"
"シングルトンクラスに関する説明や議論について、詳しくは \"デザインパターン"
"\" (Gamma et al, Addison-Wesley, 1995, 原文 ISBN 0-201-63361-2, 日本語訳  "
"ISBN-10: 4797311126 ISBN-13: 978-4797311129) をお読みください。"

#. tumbleweed/perl-Class-Spiffy/summary
#. leap/perl-Class-Spiffy/summary
msgid "Spiffy Framework with No Source Filtering"
msgstr "ソースフィルタリング無しの Spiffy フレームワーク"

#. tumbleweed/perl-Class-Spiffy/description
#. leap/perl-Class-Spiffy/description
msgid ""
"\"Class::Spiffy\" is a framework and methodology for doing object oriented "
"(OO) programming in Perl. Class::Spiffy combines the best parts of Exporter."
"pm, base.pm, mixin.pm and SUPER.pm into one magic foundation class. It "
"attempts to fix all the nits and warts of traditional Perl OO, in a clean, "
"straightforward and (perhaps someday) standard way."
msgstr ""
"\"Class::Spiffy\" は、 Perl でオブジェクト指向 (OO) のプログラミングを行なうためのフレームワークと方法です。 Class::"
"Spiffy は Exporter.pm, base.pm, mixin.pm, SUPER.pm の各部品を組み合わせて、 1 "
"つの魔法のような基礎クラスとして組み立てています。既存の Perl オブジェクト指向に存在するバグの卵や不便なところをきれいに直し、素直で (いつかは) "
"標準的な方法になるよう目指しています。"

#. tumbleweed/perl-Class-Std/summary
#. leap/perl-Class-Std/summary
msgid "Support for creating standard \"inside-out\" classes"
msgstr "標準的な \"裏返し\" クラスのサポート"

#. tumbleweed/perl-Class-Std/description
#. leap/perl-Class-Std/description
msgid ""
"This module provides tools that help to implement the \"inside out object\" "
"class structure in a convenient and standard way.\n"
"\n"
"_Portions of the following code and documentation from \"Perl Best Practices"
"\" copyright (c) 2005 by O'Reilly Media, Inc. and reprinted with permission._"
msgstr ""
"このモジュールは \"裏返しオブジェクト\" のクラス構造の実装を、便利かつ標準的な方法で支援するツールを提供します。\n"
"\n"
"_下記のコード部分と \"Perl Best Practices\" からのドキュメンテーションは、 O'Reilly Media, Inc. "
"に著作権があり、許可を得て転載しています。_"

#. tumbleweed/perl-Class-Tiny/summary
#. leap/perl-Class-Tiny/summary
msgid "Minimalist class construction"
msgstr "最小限のクラス構築"

#. tumbleweed/perl-Class-Tiny/description
msgid ""
"This module offers a minimalist class construction kit in around 120 lines "
"of code. Here is a list of features:\n"
"\n"
"  * defines attributes via import arguments\n"
"\n"
"  * generates read-write accessors\n"
"\n"
"  * supports lazy attribute defaults\n"
"\n"
"  * supports custom accessors\n"
"\n"
"  * superclass provides a standard 'new' constructor\n"
"\n"
"  * 'new' takes a hash reference or list of key/value pairs\n"
"\n"
"  * 'new' supports providing 'BUILDARGS' to customize constructor options\n"
"\n"
"  * 'new' calls 'BUILD' for each class from parent to child\n"
"\n"
"  * superclass provides a 'DESTROY' method\n"
"\n"
"  * 'DESTROY' calls 'DEMOLISH' for each class from child to parent\n"
"\n"
"Multiple-inheritance is possible, with superclass order determined via mro::"
"get_linear_isa.\n"
"\n"
"It uses no non-core modules for any recent Perl. On Perls older than v5.10 "
"it requires MRO::Compat. On Perls older than v5.14, it requires Devel::"
"GlobalDestruction."
msgstr ""
"このモジュールは 120 行程度のコードで作られた、最小限のクラス構造を提供します。下記のような機能が用意されています:\n"
"\n"
"  * パラメータのインポートを経由した属性の定義\n"
"\n"
"  * 読み書きに対応するアクセサの生成\n"
"\n"
"  * 遅延属性の既定値への対応\n"
"\n"
"  * 独自のアクセサへの対応\n"
"\n"
"  * 標準的な 'new' コンストラクタを提供するスーパークラス\n"
"\n"
"  * 'new' におけるハッシュ参照やキー／値のペアに対するリストの受け付け\n"
"\n"
"  * 'new' における独自のコンストラクタオプションに対応するための 'BUILDARGS' に対応\n"
"\n"
"  * 'new' での親クラスからそれぞれの子クラスに対する 'BUILD' の呼び出し\n"
"\n"
"  * スーパークラスでの 'DESTROY' メソッドへの対応\n"
"\n"
"  * 'DESTROY' での親クラスからそれぞれの子クラスに対する 'DEMOLISH' の呼び出し\n"
"\n"
"多階層の継承にも対応しています。スーパークラスの判断は mro::get_linear_isa を使用します。\n"
"\n"
"最近の Perl では非中枢のモジュールを使用しています。 Perl のバージョンが 5.10 より前の場合は、 MRO::Compat "
"が必要となります。また、 5.14 より前の場合は、 Devel::GlobalDestruction が必要です。"

#. tumbleweed/perl-Class-Trigger/summary
#. leap/perl-Class-Trigger/summary
msgid "Mixin to add / call inheritable triggers"
msgstr "継承可能なトリガの追加または呼び出しの混在"

#. tumbleweed/perl-Class-Trigger/description
#. leap/perl-Class-Trigger/description
msgid ""
"Class::Trigger is a mixin class to add / call triggers (or hooks) that get "
"called at some points you specify."
msgstr ""
"Class::Trigger は指定した任意の箇所で呼び出しを実施することができる、トリガ (フックとも呼びます) "
"の追加や呼び出しを行なう混在クラスです。"

#. tumbleweed/perl-Class-Unload/summary
#. tumbleweed/perl-Class-Unload/description
#. leap/perl-Class-Unload/summary
#. leap/perl-Class-Unload/description
msgid "Unload a class"
msgstr "クラスのアップロード"

#. tumbleweed/perl-Class-XPath/summary
#. leap/perl-Class-XPath/summary
msgid "Adds xpath matching to object trees"
msgstr "オブジェクトツリーに対する XPath マッチングの追加"

#. tumbleweed/perl-Class-XPath/description
#. leap/perl-Class-XPath/description
msgid ""
"This module adds XPath-style matching to your object trees. This means that "
"you can find nodes using an XPath-esque query with 'match()' from anywhere "
"in the tree. Also, the 'xpath()' method returns a unique path to a given "
"node which can be used as an identifier.\n"
"\n"
"To use this module you must already have an OO implementation of a tree. The "
"tree must be a true tree - all nodes have a single parent and the tree must "
"have a single root node. Also, the order of children within a node must be "
"stable.\n"
"\n"
"*NOTE:* This module is not yet a complete XPath implementation. Over time I "
"expect the subset of XPath supported to grow. See the SYNTAX documentation "
"for details on the current level of support."
msgstr ""
"このモジュールは、お使いのオブジェクトツリーに XPath 形式のマッチング機能を提供します。これは、ツリー内のどこからでも match() "
"を使用することで XPath 風の問い合わせを行なって、ノードを発見できるようにするためのものです。もちろん xpath() "
"メソッドは、識別子として利用できるノードに対してユニークなパスを返却します。\n"
"\n"
"このモジュールを使用するには、ツリー内にオブジェクト指向の実装を導入していなければなりません。また、ツリー構造は真のツリー、つまり全てのノードが単一の親を"
"持ち、ツリーは単一のルートノードを持たなければなりません。さらに、ノード内の子は全て安定しなければなりません。\n"
"\n"
"*注意:* このモジュールは、現時点では完全な XPath 実装をしていません。今後対応済みの XPath "
"サブセットが追加されていく予定です。現時点での対応レベルについては、 SYNTAX (文法) ドキュメンテーションをお読みください。"

#. tumbleweed/perl-Clone-PP/summary
#. leap/perl-Clone-PP/summary
msgid "Recursively copy Perl datatypes"
msgstr "Perl データタイプを再帰的に複製するツール"

#. tumbleweed/perl-Clone-PP/description
#. leap/perl-Clone-PP/description
msgid ""
"This module provides a general-purpose clone function to make deep copies of "
"Perl data structures. It calls itself recursively to copy nested hash, "
"array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or "
"hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %;\n"
"\n"
"The clone() function also accepts an optional second parameter that can be "
"used to limit the depth of the copy. If you pass a limit of 0, clone will "
"return the same value you supplied; for a limit of 1, a shallow copy is "
"constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() "
"function checks for a couple of optional methods. If an object provides a "
"method named 'clone_self', it is called and the result returned without "
"further processing. Alternately, if an object provides a method named "
"'clone_init', it is called on the copied object before it is returned."
msgstr ""
"このモジュールは、 Perl のデータ構造の深いコピーを作成するための汎用クローン関数を提供します。入れ子になったハッシュや配列、スカラー値や参照型のほか"
"、タイ変数やオブジェクトにタイしても、再帰的に関数を呼び出してコピーすることができます。\n"
"\n"
"clone() 関数ではコピーするスカラー値を指定します。配列やハッシュをコピーしたい場合は、それを参照として指定します:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %;\n"
"\n"
"clone() 関数は 2 つめのパラメータとして、コピーの深さレベルを指定することができます。 0 を指定した場合は指定した値と同じ値が返されます。 "
"1 を指定した場合は浅いコピーが、 2 を指定した場合は 2 階層までのコピーが行なわれます。\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"オブジェクトにタイしてコピーの方法への介入を許可する目的で、 clone() 関数では複数のオプションメソッドをチェックします。オブジェクト内に "
"'clone_self' という名前のメソッドが存在した場合は、特に処理が行なわれることなく結果が返されます。また、 'clone_init' "
"という名前のメソッドが存在した場合は、コピーを返す前にその関数が呼び出されます。"

#. tumbleweed/perl-Config-Any/summary
#. leap/perl-Config-Any/summary
msgid "Load configuration from different file formats, transparently"
msgstr "様々な形式の設定ファイルを透過的に読み込むモジュール"

#. tumbleweed/perl-Config-Any/description
#. leap/perl-Config-Any/description
msgid ""
"Config::Any provides a facility for Perl applications and libraries to load "
"configuration data from multiple different file formats. It supports XML, "
"YAML, JSON, Apache-style configuration, Windows INI files, and even Perl "
"code.\n"
"\n"
"The rationale for this module is as follows: Perl programs are deployed on "
"many different platforms and integrated with many different systems. Systems "
"administrators and end users may prefer different configuration formats than "
"the developers. The flexibility inherent in a multiple format configuration "
"loader allows different users to make different choices, without generating "
"extra work for the developers. As a developer you only need to learn a "
"single interface to be able to use the power of different configuration "
"formats."
msgstr ""
"Config::Any は、 Perl のアプリケーションやライブラリに対して、様々なファイル形式の設定データを読み込むことができるようにする仕組みです。"
" XML や YAML のほか、 JSON や Apache 形式の設定、 Windows の INI ファイルや Perl "
"コードでさえも、設定ファイルとして読み込むことができます。\n"
"\n"
"このモジュールは下記のような理由によって作成されました: Perl のプログラムは様々なプラットフォーム上で動作し、様々なシステムに統合されます。システム"
"管理者やユーザは、開発者とは異なる設定スタイルを好む傾向にありますが、複数の形式に対応した設定モジュールが存在することで、開発者に追加の負担を強いることな"
"く、利用者の好きな方式を利用することができるようになります。開発者側の観点では、単一のインターフェイスが様々な設定ファイルの形式に対応するため、学習の負担"
"を減らすことができます。"

#. tumbleweed/perl-Config-Auto/summary
#. leap/perl-Config-Auto/summary
msgid "Magical config file parser"
msgstr "設定ファイル処理モジュール"

#. tumbleweed/perl-Config-Auto/description
#. leap/perl-Config-Auto/description
msgid ""
"This module was written after having to write Yet Another Config File Parser "
"for some variety of colon-separated config. I decided \"never again\".\n"
"\n"
"Config::Auto aims to be the most 'DWIM' config parser available, by "
"detecting configuration styles, include paths and even config filenames "
"automagically.\n"
"\n"
"See the the HOW IT WORKS manpage section below on implementation details."
msgstr ""
"このモジュールは、コロンで区切られた設定形式である Yet Another Config File Parser の作成後に作られたもので、 \""
"もう二度と同じようなモジュールは作らない\" ことを決めたことによるものです。\n"
"\n"
"Config::Auto はもっとも 'DWIM' (開発者の意図したとおりに使う) "
"の発想に近いものを目指して作られています。設定方式の検出やパス、設定のファイル名などを、自動でかつ魔法のように検出します。\n"
"\n"
"実装の詳細について、詳しくは 'HOW IT WORKS' のマニュアルページ内のセクションをお読みください。"

#. tumbleweed/perl-Config-AutoConf/summary
msgid "Module to Implement Some of Autoconf Macros in Pure Perl"
msgstr "純粋な Perl 内でいくつかの Autoconf マクロを実装するモジュール"

#. tumbleweed/perl-Config-AutoConf/description
msgid ""
"Config::AutoConf is intended to provide the same opportunities to Perl "
"developers as at http://www.gnu.org/software/autoconf/ does for Shell "
"developers.\n"
"\n"
"As Perl is the second most deployed language (mind: every Unix comes with "
"Perl, several mini-computers have Perl and even lot's of Windows machines "
"run Perl software - which requires deployed Perl there, too), this gives "
"wider support than Shell based probes.\n"
"\n"
"The API is leaned against GNU Autoconf, but we try to make the API "
"(especially optional arguments) more Perl'ish than m4 abilities allow to the "
"original."
msgstr ""
"Config::AutoConf は、シェルの開発者に対して作られた http://www.gnu.org/software/autoconf/ "
"(autoconf) と同じ仕組みを、 Perl の開発者に対して提供することを目指しているものです。\n"
"\n"
"Perl はコンピュータにインストールされる言語としては第二位の存在になっていて (注: Unix オペレーティングシステムでは標準的に Perl "
"がインストールされているほか、ミニコンピュータでは環境によって Perl がインストールされている場合もあり、 Windows "
"マシンでは必要な場合にのみインストールされています) 、シェルベースの検出よりはより広いサポートを提供することができます。\n"
"\n"
"API は GNU Autoconf を学んで作られたものですが、オリジナルの m4 版よりはより Perl の方針に近い (特にオプションのパラメータ)"
" 仕組みになるようにしています。"

#. tumbleweed/perl-Config-Crontab/summary
#. leap/perl-Config-Crontab/summary
msgid "Read/Write Vixie compatible crontab(5) files"
msgstr "Vixie 互換の crontab(5) ファイルの読み書き"

#. tumbleweed/perl-Config-Crontab/description
#. leap/perl-Config-Crontab/description
msgid ""
"*Config::Crontab* provides an object-oriented interface to Vixie-style "
"crontab(5) files for Perl.\n"
"\n"
"A *Config::Crontab* object allows you to manipulate an ordered set of\n"
"*Event*, *Env*, or *Comment* objects (also included with this package). "
"Descriptions of these packages may be found below.\n"
"\n"
"In short, *Config::Crontab* reads and writes crontab(5) files (and does a "
"little pretty-printing too) using objects. The general idea is that you "
"create a *Config::Crontab* object and associate it with a file (if "
"unassociated, it will work over a pipe to 'crontab -l'). From there, you can "
"add lines to your crontab object, change existing line attributes, and write "
"everything back to file.\n"
"\n"
"Now, to successfully navigate the module's ins and outs, we'll need a little "
"terminology lesson."
msgstr ""
"*Config::Crontab* は Vixie スタイルの crontab(5) ファイルについて、これを"
"Perl からアクセスできるようにするためのオブジェクト指向インターフェイスで"
"す。\n"
"\n"
"*Config::Crontab* オブジェクトでは、 *Event* *Env* *Comment* の各オブジェク"
"ト (それぞれこのパッケージに含まれています) の形で、順序どおりにアクセスする"
"機能が用意されています。これらのパッケージに関する説明も下記に示していま"
"す。\n"
"\n"
"端的に言うと *Config::Crontab* は、オブジェクト指向で crontab(5) ファイルを読"
"み書きすることができる (および見やすい表示を提供する) 仕組みです。一般的な考"
"え方としては、 *Config::Crontab* オブジェクトとそれに結びつけられたファイルを"
"作成します (もしも結びつけられていない場合は、 'crontab -l' へのパイプとして"
"動作します) 。ここから、 crontab オブジェクトに行を追加したり、行の属性を変更"
"したり、任意の項目を書き込んだりすることができます。\n"
"\n"
"あと、全てのモジュールの入出力を行なうには、用語について学ぶだけです。"

#. tumbleweed/perl-Config-GitLike/summary
#. leap/perl-Config-GitLike/summary
msgid "Git-Compatible Config File Parsing"
msgstr "Git 互換の設定ファイル処理"

#. tumbleweed/perl-Config-GitLike/description
#. leap/perl-Config-GitLike/description
msgid ""
"This module handles interaction with configuration files of the style used "
"by the version control system Git. It can both parse and modify these files, "
"as well as create entirely new ones.\n"
"\n"
"You only need to know a few things about the configuration format in order "
"to use this module. First, a configuration file is made up of key/value "
"pairs. Every key must be contained in a section. Sections can have "
"subsections, but they don't have to. For the purposes of setting and getting "
"configuration variables, we join the section name, subsection name, and "
"variable name together with dots to get a key name that looks like \"section."
"subsection.variable\". These are the strings that you'll be passing in to "
"'key' arguments.\n"
"\n"
"Configuration files inherit from each other. By default, 'Config::GitLike' "
"loads data from a system-wide configuration file, a per-user configuration "
"file, and a per-directory configuration file, but by subclassing and "
"overriding methods you can obtain any combination of configuration files. By "
"default, configuration files that don't exist are just skipped.\n"
"\n"
"See the http://www.kernel.org/pub/software/scm/git/docs/git-config."
"html#_configurat ion_file manpage for details on the syntax of git "
"configuration files. We won't waste pixels on the nitty gritty here.\n"
"\n"
"While the behavior of a couple of this module's methods differ slightly from "
"the 'git config' equivalents, this module can read any config file written "
"by git. The converse is usually true, but only if you don't take advantage "
"of this module's increased permissiveness when it comes to key names. (See "
"the DIFFERENCES FROM GIT-CONFIG manpage for details.)\n"
"\n"
"This is an object-oriented module using Moo. All subroutines are object "
"method calls.\n"
"\n"
"A few methods have parameters that are always used for the same purpose:"
msgstr ""
"このモジュールは、バージョン制御システムである Git "
"の設定ファイルの書式を扱うためのモジュールです。読み込みと修正の両方に対応しているほか、新しい設定を作成することもできます。\n"
"\n"
"このモジュールを使用するには、まず設定ファイルの書式についていくつか知っておく必要があります。最初に、設定ファイルはキーと値のペアから構成されています。各"
"キーはそれぞれセクションに所属しなければなりません。セクションにはサブセクションが存在する場合もありますが、必ずしもサブセクションが存在していなくてもかま"
"いません。設定値を設定したり取得したりするためには、セクション名とサブセクション名、変数名をそれぞれドットで繋げて \""
"(セクション名).(サブセクション名).(変数名)\" のようにします。これを 'key' パラメータに設定します。\n"
"\n"
"設定ファイルはお互いに継承関係にあります。既定では、 'Config::GitLike' はシステム全体の設定ファイルからデータを読み込み、その後ユーザご"
"との設定ファイルやディレクトリごとの設定ファイルを読み込みます。ただし、サブクラス化やメソッドのオーバーライドなどの方法で、設定ファイルの組み合わせを取得"
"することもできます。既定では存在しない設定ファイルは飛ばして作業します。\n"
"\n"
"git の設定ファイルの文法について、詳しくは http://www.kernel.org/pub/software/scm/git/docs/git-"
"config.html#_configuration_file をお読みください。ここでは詳しく説明しません。\n"
"\n"
"このモジュールは 'git config' とは異なる動作をしますが、このモジュールは git が書き込んだ任意の設定ファイルを読み込むことができます。"
"逆にこのモジュールが書き込んだ設定ファイルを git 側に読み込ませることもできますが、"
"このモジュールが追加した独自の拡張機能のメリットが受けられなくなってしまいます (詳しくは DIFFERENCES FROM GIT-CONFIG "
"をお読みください) 。\n"
"\n"
"このモジュールは Moo を利用したオブジェクト指向のモジュールです。すべてのサブルーチンはオブジェクトのメソッドを呼び出します。\n"
"\n"
"また、いくつかのメソッドには常に同じ目的で使用されるパラメータもあります:"

#. tumbleweed/perl-Config-Grammar/summary
#. leap/perl-Config-Grammar/summary
msgid "Grammar-Based, User-Friendly Config Parser"
msgstr "文法ベースでユーザにわかりやすい設定パーサ"

#. tumbleweed/perl-Config-Grammar/description
#. leap/perl-Config-Grammar/description
msgid ""
"Config::Grammar is a module to parse configuration files. The optional "
"second parameter to the parse() method can be used to specify the file "
"encoding to use for opening the file (see documentation for Perl's use open "
"pragma).\n"
"\n"
"The configuration may consist of multiple-level sections with assignments "
"and tabular data. The parsed data will be returned as a hash containing the "
"whole configuration. Config::Grammar uses a grammar that is supplied upon "
"creation of a Config::Grammar object to parse the configuration file and "
"return helpful error messages in case of syntax errors. Using the *makepod* "
"method you can generate documentation of the configuration file format.\n"
"\n"
"The *maketmpl* method can generate a template configuration file. If your "
"grammar contains regexp matches, the template will not be all that helpful "
"as Config::Grammar is not smart enough to give you sensible template data "
"based in regular expressions. The related function *maketmplmin* generates a "
"minimal configuration template without examples, regexps or comments and "
"thus allows an experienced user to fill in the configuration data more "
"efficiently."
msgstr ""
"Config::Grammar は設定ファイルを処理するためのモジュールです。 2 つめのパラメータはオプションで、"
"使用すべきファイルのエンコーディングを指定します (Perl が使用する open プラグマのドキュメンテーションをお読みください) 。\n"
"\n"
"設定ファイルには複数レベルのセクションを存在させることができるほか、単純な代入や表形式の値をとることもできます。処理されたデータは設定ファイル全体を含むハ"
"ッシュとして返されます。 Config::Grammer "
"はそのオブジェクトの作成時に、設定ファイルを処理するための文法を指定するほか、文法エラーが発生した際にはわかりやすいエラーメッセージを返します。 "
"*makepod* メソッドを利用することで、設定ファイルの書式に対してドキュメンテーションを生成することもできます。\n"
"\n"
"*maketmpl* メソッドでは、ひな形 (テンプレート) "
"となる設定ファイルを生成することができます。なお、文法内に正規表現マッチが含まれていた場合は、その仕組み上あまり役には立ちません。関連する関数である "
"*maketmplmin* "
"では、例や正規表現、コメントなどを提示することなく最小限の設定テンプレートを作成します。これにより、設定データをより効率的に入力できるようになります。"

#. tumbleweed/perl-Config-INI/summary
#. leap/perl-Config-INI/summary
msgid "Simple .Ini-File Format"
msgstr "シンプルな .ini ファイル形式"

#. tumbleweed/perl-Config-INI/description
#. leap/perl-Config-INI/description
msgid "simple .ini-file format"
msgstr "シンプルな .ini ファイル形式"

#. tumbleweed/perl-Config-IniFiles/summary
msgid "Module for Reading .Ini-Style Configuration Files"
msgstr "ini 形式の設定ファイルを読み込むためのライブラリ"

#. tumbleweed/perl-Config-IniFiles/description
#. leap/perl-Config-IniFiles/description
msgid ""
"Config::IniFiles provides a way to have readable configuration files outside "
"your Perl script. Configurations can be imported (inherited, stacked,...), "
"sections can be grouped, and settings can be accessed from a tied hash."
msgstr ""
"Config::IniFiles は Perl スクリプトとは別に設定ファイルを用意し、それを読み込"
"む手段を提供します。設定はインポート (継承／スタック) させることができるほ"
"か、セクションとしてグループ化したり、タイハッシュでアクセスしたりすることが"
"できます。"

#. tumbleweed/perl-Config-MVP/summary
#. leap/perl-Config-MVP/summary
msgid "Multivalue-Property Package-Oriented Configuration"
msgstr "プロパティに複数の値を設定することができるパッケージ指向の設定"

#. tumbleweed/perl-Config-MVP/description
#. leap/perl-Config-MVP/description
msgid ""
"MVP is a mechanism for loading configuration (or other information) for "
"libraries. It doesn't read a file or a database. It's a helper for things "
"that do.\n"
"\n"
"The idea is that you end up with a Config::MVP::Sequence object, and that "
"you can use that object to fully configure your library or application. The "
"sequence will contain a bunch of Config::MVP::Section objects, each of which "
"is meant to provide configuration for a part of your program. Most of these "
"sections will be directly related to a Perl library that you'll use as a "
"plugin or helper. Each section will have a name, and every name in the "
"sequence will be unique.\n"
"\n"
"This is a pretty abstract set of behaviors, so we'll provide some more "
"concrete examples that should help explain how things work."
msgstr ""
"MVP はライブラリ向けのモジュールで、設定 (またはその他の情報) "
"を読み込むための仕組みです。ファイルやデータベースから読み込むような機能はなく、単純にヘルパーとして動作します。\n"
"\n"
"考え方は Config::MVP::Sequence "
"オブジェクトをご覧になればわかるでしょう。このオブジェクトを利用して、ライブラリやアプリケーションの設定を扱うことができるようになります。 "
"sequence にはたくさんの Config::MVP::Section "
"オブジェクトが含まれていますが、それぞれはお使いのプログラムの設定箇所を表わしています。これらのセクションの多くは、プラグインやヘルパーとして使用する "
"Perl ライブラリに直接関係するはずのものです。各セクションには名前が設定され、 sequence 内の名前は唯一のものであるべきものです。\n"
"\n"
"個のモジュールは動作に対する抽象セットで、このモジュールの動作についての詳しい説明をお読みになれば、意図がわかるでしょう。"

#. tumbleweed/perl-Config-MVP-Reader-INI/summary
#. leap/perl-Config-MVP-Reader-INI/summary
msgid "an MVP config reader for .ini files"
msgstr ".ini ファイル向け MVP 設定読み込みモジュール"

#. tumbleweed/perl-Config-MVP-Reader-INI/description
#. leap/perl-Config-MVP-Reader-INI/description
msgid ""
"Config::MVP::Reader::INI reads _.ini_ files containing MVP-style "
"configuration."
msgstr "Config::MVP::Reader::INI は MVP 形式の設定を含む _.ini_ ファイルを読み込みます。"

#. tumbleweed/perl-Config-MySQL/summary
#. leap/perl-Config-MySQL/summary
msgid "Read and write MySQL-style configuration files"
msgstr "MySQL 形式の設定ファイルの読み書き"

#. tumbleweed/perl-Config-MySQL/description
#. leap/perl-Config-MySQL/description
msgid ""
"This module extends the Config::INI manpage to support reading and writing "
"MySQL-style configuration files. Although deceptively similar to standard '."
"INI' files, they can include bare boolean options with no value assignment "
"and additional features like '!include' and '!includedir'."
msgstr ""
"このモジュールは Config::INI を拡張するモジュールで、 MySQL 形式の設定ファイルを読みこんだり、書き込んだりすることができます。標準の "
"\".INI' ファイルと非常に似通っていますが、 MySQL では値を代入せずにブール値を設定できたり、 '!include' や "
"'!includedir' のような追加の機能が用意されています。"

#. tumbleweed/perl-Config-Std/summary
#. leap/perl-Config-Std/summary
msgid "Load and save configuration files in a standard format"
msgstr "標準の形式で設定ファイルを読み書きするモジュール"

#. tumbleweed/perl-Config-Std/description
#. leap/perl-Config-Std/description
msgid ""
"This module implements yet another damn configuration-file system.\n"
"\n"
"The configuration language is deliberately simple and limited, and the "
"module works hard to preserve as much information (section order, comments, "
"etc.) as possible when a configuration file is updated.\n"
"\n"
"The whole point of Config::Std is to encourage use of one standard layout "
"and syntax in config files. Damian says \"I could have gotten away with it, "
"I would have only allowed one separator. But it proved impossible to choose "
"between ':' and '=' (half the people I asked wanted one, half wanted the "
"other).\" Providing round-trip file re-write is the spoonful of sugar to "
"help the medicine go down. The supported syntax is within the general INI "
"file family\n"
"\n"
"See Chapter 19 of \"Perl Best Practices\" (O'Reilly, 2005) for more detail "
"on the rationale for this approach."
msgstr ""
"このモジュールは、もう 1 つの忌々しい設定ファイルシステムを実装するものです。\n"
"\n"
"設定の言語はわざとシンプルかつ制限のあるものに仕立て上げられていて、設定ファイルをアップロードした時点の情報 (セクションの順序、コメントなど) を、"
"できる限り多く 保持できるように様々な処理を行なっています。\n"
"\n"
"Config::Std は設定ファイルに対して唯一の標準レイアウトおよび文法を使用するように奨励するためのもので、 Damian 氏によると \""
"このモジュールからしばらく離れていたが、区切り文字は 1 種類のみにしたほうが良かった。しかし ':' と '=' "
"のどちらを選択するのかを決めるのは不可能 (おおよそユーザは半々に別れる) だ\" "
"と評しています。設定ファイルをいったん読み込んで書き出すことでも、これは解決できるためです。対応する文法は一般に、 INI "
"ファイルに類するものとされます。\n"
"\n"
"このアプローチの根拠について、詳しくは \"Perl Best Practices\" (O'Reilly, 2005) の第 19 章をお読みください。"

#. tumbleweed/perl-Config-Tiny/summary
#. leap/perl-Config-Tiny/summary
msgid "Read/Write .ini style files with as little code as possible"
msgstr "できる限り少ないコードでの .ini 形式のファイルの読み書き"

#. tumbleweed/perl-Config-Tiny/description
#. leap/perl-Config-Tiny/description
msgid ""
"'Config::Tiny' is a Perl class to read and write .ini style configuration "
"files with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules.\n"
"\n"
"The '*::Tiny' family of modules is specifically intended to provide an "
"ultralight alternative to the standard modules.\n"
"\n"
"This module is primarily for reading human written files, and anything we "
"write shouldn't need to have documentation/comments. If you need something "
"with more power move up to the Config::Simple manpage, the Config::General "
"manpage or one of the many other 'Config::*' modules.\n"
"\n"
"Lastly, the Config::Tiny manpage does *not* preserve your comments, "
"whitespace, or the order of your config file.\n"
"\n"
"See the Config::Tiny::Ordered manpage (and possibly others) for the "
"preservation of the order of the entries in the file."
msgstr ""

#. tumbleweed/perl-Const-Fast/summary
#. tumbleweed/perl-Const-Fast/description
#. leap/perl-Const-Fast/summary
#. leap/perl-Const-Fast/description
#, fuzzy
msgid "Facility for creating read-only scalars, arrays, and hashes"
msgstr "読み込みのみのスカラ値や配列、ハッシュなどを作成できる仕組み"

#. tumbleweed/perl-Context-Preserve/summary
#. leap/perl-Context-Preserve/summary
msgid ""
"run code after a subroutine call, preserving the context the subroutine "
"would have seen if it were the last statement in the caller"
msgstr ""

#. tumbleweed/perl-Context-Preserve/description
#. leap/perl-Context-Preserve/description
msgid ""
"Sometimes you need to call a function, get the results, act on the results, "
"then return the result of the function. This is painful because of contexts; "
"the original function can behave different if it's called in void, scalar, "
"or list context. You can ignore the various cases and just pick one, but "
"that's fragile. To do things right, you need to see which case you're being "
"called in, and then call the function in that context. This results in 3 "
"code paths, which is a pain to type in (and maintain).\n"
"\n"
"This module automates the process. You provide a coderef that is the "
"\"original function\", and another coderef to run after the original runs. "
"You can modify the return value (aliased to @_) here, and do whatever else "
"you need to do. 'wantarray' is correct inside both coderefs; in \"after\", "
"though, the return value is ignored and the value 'wantarray' returns is "
"related to the context that the original function was called in."
msgstr ""

#. tumbleweed/perl-Contextual-Return/summary
#. leap/perl-Contextual-Return/summary
msgid "Create context-sensitive return values"
msgstr ""

#. tumbleweed/perl-Contextual-Return/description
#. leap/perl-Contextual-Return/description
msgid ""
"Usually, when you need to create a subroutine that returns different values "
"in different contexts (list, scalar, or void), you write something like:\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (wantarray()) {             return "
"@server_data{ qw(name uptime load users) };         }         if (defined "
"wantarray()) {             return $server_data{load};         }         if (!"
"defined wantarray()) {             carp 'Useless use of get_server_status() "
"in void context';             return;         }         else "
"{             croak q{Bad context! No biscuit!};         }     }\n"
"\n"
"That works okay, but the code could certainly be more readable. In its "
"simplest usage, this module makes that code more readable by providing three "
"subroutines--'LIST()', 'SCALAR()', 'VOID()'--that are true only when the "
"current subroutine is called in the corresponding context:\n"
"\n"
"    use Contextual::Return;\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (LIST)   { return @server_data{ qw(name uptime "
"load users) } }         if (SCALAR) { return "
"$server_data{load}                         }         if (VOID)   { print "
"\"$server_data{load}\\n\"                      }         else        { croak "
"q{Bad context! No biscuit!}                 }     }"
msgstr ""

#. tumbleweed/perl-Convert-ASN1/summary
#. leap/perl-Convert-ASN1/summary
msgid "Asn.1 Encode/Decode Library"
msgstr "ASN.1 エンコード／デコードライブラリ"

#. tumbleweed/perl-Convert-ASN1/description
#. leap/perl-Convert-ASN1/description
msgid ""
"Convert::ASN1 encodes and decodes ASN.1 data structures using BER/DER rules."
msgstr ""
"Convert::ASN1 は BER/DER ルールを使用した ASN.1 データ構造を、エンコードした"
"りデコードしたりすることができます。"

#. tumbleweed/perl-Convert-BinHex/summary
#. leap/perl-Convert-BinHex/summary
msgid "Extract Data From Macintosh Binhex Files"
msgstr ""

#. tumbleweed/perl-Convert-BinHex/description
#. leap/perl-Convert-BinHex/description
msgid ""
"*BinHex* is a format used by Macintosh for transporting Mac files safely "
"through electronic mail, as short-lined, 7-bit, semi-compressed data "
"streams. Ths module provides a means of converting those data streams back "
"into into binary data."
msgstr ""
"BinHex は Macintosh で使用されるデータ形式で、電子メールを介して Mac のファイ"
"ルを安全にやりとりするためのものです。短い行で 7 ビットの、少し圧縮したデータ"
"ストリームになっています。このモジュールは、これらのデータストリームをバイナ"
"リデータに戻す処理を提供します。"

#. tumbleweed/perl-Convert-TNEF/summary
#. leap/perl-Convert-TNEF/summary
msgid "Perl module to read TNEF files"
msgstr "TNEF ファイルを読み込む Perl モジュール"

#. tumbleweed/perl-Convert-TNEF/description
#. leap/perl-Convert-TNEF/description
msgid ""
" TNEF stands for Transport Neutral Encapsulation Format, and if you've  ever "
"been unfortunate enough to receive one of these files as an email  "
"attachment, you may want to use this module.\n"
"\n"
" read() takes as its first argument any file handle open  for reading. The "
"optional second argument is a hash reference  which contains one or more of "
"the following keys:\n"
"\n"
" output_dir - Path for storing TNEF attribute data kept in files  (default: "
"current directory).\n"
"\n"
" output_prefix - File prefix for TNEF attribute data kept in files  "
"(default: 'tnef').\n"
"\n"
" output_to_core - TNEF attribute data will be saved in core memory unless  "
"it is greater than this many bytes (default: 4096). May also be set to  "
"'NONE' to keep all data in files, or 'ALL' to keep all data in core.\n"
"\n"
" buffer_size - Buffer size for reading in the TNEF file (default: 1024).\n"
"\n"
" debug - If true, outputs all sorts of info about what the read() function  "
"is reading, including the raw ascii data along with the data converted  to "
"hex (default: false).\n"
"\n"
" display_after_err - If debug is true and an error is encountered,  reads "
"and displays this many bytes of data following the error  (default: 32).\n"
"\n"
" debug_max_display - If debug is true then read and display at most  this "
"many bytes of data for each TNEF attribute (default: 1024).\n"
"\n"
" debug_max_line_size - If debug is true then at most this many bytes of  "
"data will be displayed on each line for each TNEF attribute  (default: 64).\n"
"\n"
" ignore_checksum - If true, will ignore checksum errors while parsing  data "
"(default: false).\n"
"\n"
" read() returns an object containing the TNEF 'attributes' read from the  "
"file and the data for those attributes. If all you want are the  "
"attachments, then this is mostly garbage, but if you're interested then  you "
"can see all the garbage by turning on debugging. If the garbage  proves "
"useful to you, then let me know how I can maybe make it more  useful.\n"
"\n"
" If an error is encountered, an undefined value is returned and the  package "
"variable $errstr is set to some helpful message.\n"
"\n"
" read_in() is a convienient front end for read() which takes a filename  "
"instead of a handle.\n"
"\n"
" read_ent() is another convient front end for read() which can take a  MIME::"
"Entity object (or any object with like methods, specifically  open(\"r\"), "
"read($buff,$num_bytes), and close ).\n"
"\n"
" purge() deletes any on-disk data that may be in the attachments of  the "
"TNEF object.\n"
"\n"
" message() returns the message portion of the tnef object, if any.  The "
"thing it returns is like an attachment, but its not an attachment.  For "
"instance, it more than likely does not have a name or any  attachment data.\n"
"\n"
" attachments() returns a list of the attachments that the given TNEF  object "
"contains. Returns a list ref if not called in array context.\n"
"\n"
" data() takes a TNEF attribute name, and returns a string value for that  "
"attribute for that attachment. Its your own problem if the string is too  "
"big for memory. If no argument is given, then the 'AttachData' attribute  is "
"assumed, which is probably the attachment data you're looking for.\n"
"\n"
" name() is the same as data(), except the attribute 'AttachTitle' is  the "
"default, which returns the 8 character + 3 character extension name  of the "
"attachment.\n"
"\n"
" longname() returns the long filename and extension of an attachment. This  "
"is embedded within a MAPI property of the 'Attachment' attribute data, so  "
"we attempt to extract the name out of that.\n"
"\n"
" size() takes an TNEF attribute name, and returns the size in bytes for  the "
"data for that attachment attribute.\n"
"\n"
" datahandle() is a method for attachments which takes a TNEF attribute  "
"name, and returns the data for that attribute as a handle which is  the same "
"as a MIME::Body handle.  See MIME::Body for all the applicable  methods. If "
"no argument is given, then 'AttachData' is assumed."
msgstr ""
" TNEF とは Transport Neutral Encapsulation Format (トランスポート中立型カプセ"
"ル化フォーマット) の略で、電子メールの添付ファイルを受信する際、不幸にもこの"
"ような形式で受信してしまったような場合に便利なモジュールです。\n"
"\n"
" read() は最初のパラメータとして、読み込むべきファイルのハンドルを指定しま"
"す。2 つめのパラメータは任意指定で、下記のようなキーを持つハッシュ参照を渡し"
"ます:\n"
"\n"
" output_dir - ファイル内に保持されている TNEF 属性データの保存先パス (既定"
"値: カレントディレクトリ)\n"
"\n"
" output_prefix - ファイル内に保持されている TNEF 属性データのファイルプレフィ"
"クス (既定値: 'tnef')\n"
"\n"
" output_to_core - ここで指定したバイト数を超えない限り、 TNEF の属性データを"
"コアメモリ内に保持するようにします (既定値: 4096) 。 'NONE' を指定するとすべ"
"てのデータをファイル内に保存し、 'ALL' を指定するとすべてのデータをコアメモリ"
"内に保持するようになります。\n"
"\n"
" buffer_size - TNEF ファイルを読み込む際のバッファサイズを指定します (既定"
"値: 1024)\n"
"\n"
" debug - true に設定すると、 read() 関数が読み込んだすべての情報を出力しま"
"す。これには未加工の ASCII データと、 16 進数への変換済みデータが含まれます "
"(既定値: false)\n"
"\n"
" display_after_err - debug 設定が true であり、何らかのエラーが発生した場合、"
"エラーに続くデータ出力をどれだけ行なうのかを指定します (既定値: 32)\n"
"\n"
" debug_max_display - debug 設定が true である場合、それぞれの TNEF 属性を読み"
"込むにあたって、最大でどれだけを読み込んで表示するのかを指定します (既定値: "
"1024)\n"
"\n"
"  debug_max_line_size - debug 設定が true である場合、それぞれの TNEF 属性の"
"行を最大でどれだけ表示するのかを指定します (既定値: 64)\n"
"\n"
" ignore_checksum - true に設定すると、データ処理時にチェックサムエラーを無視"
"するようになります (既定値: false)\n"
"\n"
" read() は、ファイルから読み込んだ TNEF '属性' と、それらの属性に関するデータ"
"を含むオブジェクトを返します。もしも必要な情報全てが添付ファイル内にある場"
"合、これはほとんど不要なものとなりますが、それらの情報からどのような情報が得"
"られるのかを知りたい場合は、 debug を true にするのがよいでしょう。このような"
"情報が本当に必要なものである場合は、それらをうまく処理する方法を報告していた"
"だけると助かります。\n"
"\n"
" エラーが発生した場合は未定義の値が返され、パッケージ変数 $errstr に有益な"
"メッセージが設定されます。\n"
"\n"
" read_in() は read() に対する便利なフロントエンドで、ファイルハンドルの代わり"
"にファイル名を受け付けます。\n"
"\n"
" read_ent() は read() に対するもう 1 つの便利なフロントエンドで、 MIME::"
"Entity オブジェクト (または open(\"r\"), read($buff,$num_bytes), close のよう"
"なメソッドを含むオブジェクト) をパラメータとして受け付けます。\n"
"\n"
" purge() は、 TNEF オブジェクトの添付として存在する可能性のあるディスクデータ"
"を削除します。\n"
"\n"
" message() は TNEF オブジェクトのメッセージ部分を返します。返される値は添付"
"ファイルのような形態をしたものかもしれませんし、そうではないかもしれません。"
"たとえばこれは、名前と添付データを持たないものかもしれません。\n"
"\n"
" attachments() は TNEF オブジェクト内にある添付ファイルの一覧を返します。アレ"
"イコンテキスト内で呼び出していない場合、返される値はリストへの参照になりま"
"す。\n"
"\n"
" data() は TNEF の属性名をパラメータにとり、添付ファイル内にある指定した属性"
"値を文字列で返却します。文字列を利用するため、メモリ内に保持するには大きすぎ"
"ることに注意してください。何もパラメータを指定しない場合、 'AttachData' 属性"
"が指定されたものとみなします。これはおそらく、必要な添付データを指す属性で"
"しょう。\n"
"\n"
" name() は data() と同じような機能ですが、既定では 'AttachTitle' という属性が"
"指定されたものとみなします。これは 8+3 文字のファイル名と拡張子を返します。\n"
"\n"
" longname() は、添付に対する長い形式のファイル名と拡張子を返します。これは "
"'Attachment' 属性データの MAPI プロパティ内に組み込まれた値で、これを抽出する"
"ことで実現しています。\n"
"\n"
" size() は TNEF の属性名をパラメータにとり、添付属性に対するデータサイズを返"
"します。\n"
"\n"
" datahandle() は TNEF の属性名をパラメータにとる添付ファイル向けの属性で、"
"MIME::Body ハンドルと同じハンドルとして、データを返却します。詳しくは MIME::"
"Body をお読みください。何もパラメータを指定しない場合、 'AttachData' が指定さ"
"れたものとみなします。"

#. tumbleweed/perl-Cookie-Baker/summary
#. leap/perl-Cookie-Baker/summary
msgid "Cookie string generator / parser"
msgstr ""

#. tumbleweed/perl-Cookie-Baker/description
#. leap/perl-Cookie-Baker/description
msgid "Cookie::Baker provides simple cookie string generator and parser."
msgstr ""

#. tumbleweed/perl-Crypt-CBC/summary
#. leap/perl-Crypt-CBC/summary
msgid "Encrypt Data with Cipher Block Chaining Mode"
msgstr "Cipher Block Chaining モードを使用したデータ暗号化"

#. tumbleweed/perl-Crypt-CBC/description
#. leap/perl-Crypt-CBC/description
msgid ""
"This module is a Perl-only implementation of the cryptographic cipher block "
"chaining mode (CBC). In combination with a block cipher such as DES or IDEA, "
"you can encrypt and decrypt messages of arbitrarily long length. The "
"encrypted messages are compatible with the encryption format used by the\n"
"*OpenSSL* package.\n"
"\n"
"To use this module, you will first create a Crypt::CBC cipher object with "
"new(). At the time of cipher creation, you specify an encryption key to use "
"and, optionally, a block encryption algorithm. You will then call the "
"start() method to initialize the encryption or decryption process, crypt() "
"to encrypt or decrypt one or more blocks of data, and lastly finish(), to "
"pad and encrypt the final block. For your convenience, you can call the "
"encrypt() and decrypt() methods to operate on a whole data value at once."
msgstr ""
"このモジュールは Perl のみで実装された、暗号ブロック連鎖 (CBC) の実装です。"
"DES や IDEA のようなブロック暗号と組み合わせて使用することで、任意の長さの"
"メッセージを暗号化したり、暗号を解読したりすることができます。暗号化された"
"メッセージは、 *OpenSSL* パッケージで使用される形式と互換性があります。\n"
"\n"
"このモジュールを使用するには、まず new() を利用して Crypt::CBC 暗号化オブジェ"
"クトを作成します。あとは暗号化データを作成する際に暗号鍵を指定し、必要であれ"
"ばブロック暗号化アルゴリズムを指定します。すると start() メソッドを呼び出すこ"
"とができるようになり、暗号化やその解読に対する処理が始まります。 crypt() は暗"
"号化や解読のデータを与える際に使用し、最後は finish() を呼び出して、最終ブ"
"ロックのパディングを実施します。また、データを一括で暗号化／解読できるメソッ"
"ドである encrypt(), decrypt() も用意されています。"

#. tumbleweed/perl-Crypt-PasswdMD5/summary
#. leap/perl-Crypt-PasswdMD5/summary
msgid "Provide interoperable MD5-based crypt() functions"
msgstr ""

#. tumbleweed/perl-Crypt-PasswdMD5/description
#. leap/perl-Crypt-PasswdMD5/description
msgid ""
"'apache_md5_crypt()' provides a function compatible with Apache's '."
"htpasswd' files. This was contributed by Bryan Hart <bryan@eai.com>. This "
"function is exported by default.\n"
"\n"
"The 'unix_md5_crypt()' provides a crypt()-compatible interface to the rather "
"new MD5-based crypt() function found in modern operating systems. It's based "
"on the implementation found on FreeBSD 2.2.[56]-RELEASE. This function is "
"also exported by default.\n"
"\n"
"For both functions, if a salt value is not supplied, a random salt will be "
"generated, using the function random_md5_salt(). This function is not "
"exported by default."
msgstr ""

#. tumbleweed/perl-Crypt-Rot13/summary
#. leap/perl-Crypt-Rot13/summary
#, fuzzy
msgid "Rot13 (Caesar) encryption for perl"
msgstr "Perl 向け Blowfish 暗号化ツール"

#. tumbleweed/perl-Crypt-Rot13/description
#. leap/perl-Crypt-Rot13/description
#, fuzzy
msgid "This package provides ROT13 Algorithm (Caesar) as a Perl module."
msgstr "このパッケージは、 Samba Python モジュールを提供しています。"

#. tumbleweed/perl-Crypt-SaltedHash/summary
#. leap/perl-Crypt-SaltedHash/summary
msgid "Perl interface to functions that assist in working"
msgstr "作業支援関数に対する Perl インターフェイス"

#. tumbleweed/perl-Crypt-SaltedHash/description
#. leap/perl-Crypt-SaltedHash/description
msgid ""
"The 'Crypt::SaltedHash' module provides an object oriented interface to "
"create salted (or seeded) hashes of clear text data. The original "
"formalization of this concept comes from RFC-3112 and is extended by the use "
"of different digital agorithms."
msgstr ""

#. tumbleweed/perl-CursesWidgets/summary
#. leap/perl-CursesWidgets/summary
#, fuzzy
msgid "CursesWidgets Perl module"
msgstr "Perl 向け Curses::Widgets モジュール"

#. tumbleweed/perl-CursesWidgets/description
#. leap/perl-CursesWidgets/description
msgid ""
"NOTE:  This is **NOT** backwards compatible with the pre-1.99 "
"versions.        This is entirely OO-based, hence any older scripts relying "
"on the        old versions will need to be rewritten."
msgstr ""

#. tumbleweed/perl-Cwd-Guard/summary
#. leap/perl-Cwd-Guard/summary
msgid "Temporary changing working directory (chdir)"
msgstr ""

#. tumbleweed/perl-Cwd-Guard/description
#. leap/perl-Cwd-Guard/description
msgid ""
"CORE::chdir Cwd:: Guard can change the current directory (chdir) using a "
"limited scope."
msgstr ""

#. tumbleweed/perl-DBD-CSV/summary
#. leap/perl-DBD-CSV/summary
msgid "DBI driver for CSV files"
msgstr "CSV ファイル向け DBI ドライバ"

#. tumbleweed/perl-DBD-CSV/description
#. leap/perl-DBD-CSV/description
msgid ""
"The DBD::CSV module is yet another driver for the DBI (Database independent "
"interface for Perl). This one is based on the SQL \"engine\" SQL::Statement "
"and the abstract DBI driver DBD::File and implements access to so-called CSV "
"files (Comma Separated Values). Such files are often used for exporting MS "
"Access and MS Excel data.\n"
"\n"
"See the DBI manpage for details on DBI, the SQL::Statement manpage for "
"details on SQL::Statement and the DBD::File manpage for details on the base "
"class DBD::File."
msgstr ""
"DBD::CSV モジュールは DBI (Perl 向けデータベース独立インターフェイス) 向けの"
"もう 1 つのドライバです。このドライバは SQL::Statement の SQL \"エンジン\" "
"と DBD::File の DBI 抽象ドライバをベースとし、いわゆる CSV ファイル (カンマ区"
"切り) ファイルへのアクセスを提供します。これらのファイルは MS Access や MS "
"Excel のデータとして広く使われています。\n"
"\n"
"DBI について詳しくは、 DBI のマニュアルページをお読みください。また、 SQL::"
"Statement や DBD::File のベースクラスについて、詳しくはそれぞれのマニュアル"
"ページをお読みください。"

#. tumbleweed/perl-DBD-XBase/summary
#. leap/perl-DBD-XBase/summary
msgid "Reads and writes XBase (dbf) files, includes DBI support"
msgstr ""

#. tumbleweed/perl-DBD-XBase/description
#. leap/perl-DBD-XBase/description
msgid ""
"DBI compliant driver for module XBase. Please refer to DBI(3) documentation "
"for how to actually use the module. In the *connect* call, specify the "
"directory containing the dbf files (and other, memo, etc.) as the third part "
"of the connect string. It defaults to the current directory.\n"
"\n"
"Note that with dbf, there is no database server that the driver would talk "
"to. This DBD::XBase calls methods from XBase.pm module to read and write the "
"files on the disk directly, so any limitations and features of XBase.pm "
"apply to DBD::XBase as well. DBD::XBase basically adds SQL, DBI compliant "
"interface to XBase.pm.\n"
"\n"
"The DBD::XBase doesn't make use of index files at the moment. If you really "
"need indexed access, check XBase(3) for notes about support for variour "
"index types."
msgstr ""

#. tumbleweed/perl-DBICx-TestDatabase/summary
#. leap/perl-DBICx-TestDatabase/summary
msgid "create a temporary database from a DBIx::Class::Schema"
msgstr ""

#. tumbleweed/perl-DBICx-TestDatabase/description
#. leap/perl-DBICx-TestDatabase/description
msgid ""
"This module creates a temporary SQLite database, deploys your DBIC schema, "
"and then connects to it. This lets you easily test your DBIC schema. Since "
"you have a fresh database for every test, you don't have to worry about "
"cleaning up after your tests, ordering of tests affecting failure, etc."
msgstr ""

#. tumbleweed/perl-DBIx-Class/summary
#. leap/perl-DBIx-Class/summary
msgid "Extensible and flexible object <-> relational mapper"
msgstr ""

#. tumbleweed/perl-DBIx-Class/description
#. leap/perl-DBIx-Class/description
msgid ""
"This is an SQL to OO mapper with an object API inspired by Class::DBI (with "
"a compatibility layer as a springboard for porting) and a resultset API that "
"allows abstract encapsulation of database operations. It aims to make "
"representing queries in your code as perl-ish as possible while still "
"providing access to as many of the capabilities of the database as possible, "
"including retrieving related records from multiple tables in a single query, "
"'JOIN', 'LEFT JOIN', 'COUNT', 'DISTINCT', 'GROUP BY', 'ORDER BY' and "
"'HAVING' support.\n"
"\n"
"DBIx::Class can handle multi-column primary and foreign keys, complex "
"queries and database-level paging, and does its best to only query the "
"database in order to return something you've directly asked for. If a "
"resultset is used as an iterator it only fetches rows off the statement "
"handle as requested in order to minimise memory usage. It has auto-increment "
"support for SQLite, MySQL, PostgreSQL, Oracle, SQL Server and DB2 and is "
"known to be used in production on at least the first four, and is fork- and "
"thread-safe out of the box (although your DBD may not be).\n"
"\n"
"This project is still under rapid development, so large new features may be "
"marked *experimental* - such APIs are still usable but may have edge bugs. "
"Failing test cases are _always_ welcome and point releases are put out "
"rapidly as bugs are found and fixed.\n"
"\n"
"We do our best to maintain full backwards compatibility for published APIs, "
"since DBIx::Class is used in production in many organisations, and even "
"backwards incompatible changes to non-published APIs will be fixed if "
"they're reported and doing so doesn't cost the codebase anything.\n"
"\n"
"The test suite is quite substantial, and several developer releases are "
"generally made to CPAN before the branch for the next release is merged back "
"to trunk for a major release."
msgstr ""

#. tumbleweed/perl-DBIx-Class-DeploymentHandler/summary
#. leap/perl-DBIx-Class-DeploymentHandler/summary
msgid "Extensible DBIx::Class deployment"
msgstr ""

#. tumbleweed/perl-DBIx-Class-DeploymentHandler/description
#. leap/perl-DBIx-Class-DeploymentHandler/description
msgid ""
"'DBIx::Class::DeploymentHandler' is, as its name suggests, a tool for "
"deploying and upgrading databases with the DBIx::Class manpage. It is "
"designed to be much more flexible than the DBIx::Class::Schema::Versioned "
"manpage, hence the use of the Moose manpage and lots of roles.\n"
"\n"
"'DBIx::Class::DeploymentHandler' itself is just a recommended set of roles "
"that we think will not only work well for everyone, but will also yield the "
"best overall mileage. Each role it uses has its own nuances and "
"documentation, so I won't describe all of them here, but here are a few of "
"the major benefits over how the DBIx::Class::Schema::Versioned manpage "
"worked (and the DBIx::Class::DeploymentHandler::Deprecated manpage tries to "
"maintain compatibility with):\n"
"\n"
"* *\n"
"\n"
"  Downgrades in addition to upgrades.\n"
"\n"
"* *\n"
"\n"
"  Multiple sql files files per upgrade/downgrade/install.\n"
"\n"
"* *\n"
"\n"
"  Perl scripts allowed for upgrade/downgrade/install.\n"
"\n"
"* *\n"
"\n"
"  Just one set of files needed for upgrade, unlike before where one might   "
"need to generate 'factorial(scalar @versions)', which is just silly.\n"
"\n"
"* *\n"
"\n"
"  And much, much more!\n"
"\n"
"That's really just a taste of some of the differences. Check out each role "
"for all the details."
msgstr ""

#. tumbleweed/perl-DBIx-Class-DynamicDefault/summary
#. leap/perl-DBIx-Class-DynamicDefault/summary
msgid "Automatically set and update fields"
msgstr ""

#. tumbleweed/perl-DBIx-Class-DynamicDefault/description
#. leap/perl-DBIx-Class-DynamicDefault/description
msgid "Automatically set and update fields with values calculated at runtime."
msgstr ""

#. tumbleweed/perl-DBIx-Class-Fixtures/summary
#. leap/perl-DBIx-Class-Fixtures/summary
msgid "Dump data and repopulate a database using rules"
msgstr ""

#. tumbleweed/perl-DBIx-Class-Fixtures/description
#. leap/perl-DBIx-Class-Fixtures/description
msgid ""
"Dump fixtures from source database to filesystem then import to another "
"database (with same schema) at any time. Use as a constant dataset for "
"running tests against or for populating development databases when "
"impractical to use production clones. Describe fixture set using relations "
"and conditions based on your DBIx::Class schema."
msgstr ""

#. tumbleweed/perl-DBIx-Class-InflateColumn-FS/summary
#. leap/perl-DBIx-Class-InflateColumn-FS/summary
msgid "Inflate/deflate columns to Path::Class::File objects"
msgstr ""

#. tumbleweed/perl-DBIx-Class-InflateColumn-FS/description
#. leap/perl-DBIx-Class-InflateColumn-FS/description
msgid ""
"Provides inflation to a Path::Class::File object allowing file system "
"storage of BLOBS.\n"
"\n"
"The storage path is specified with 'fs_column_path'. Each file receives a "
"unique name, so the storage for all FS columns can share the same path.\n"
"\n"
"Within the path specified by 'fs_column_path', files are stored in sub-"
"directories based on the first 2 characters of the unique file names. Up to "
"256 sub-directories will be created, as needed. Override '_fs_column_dirs' "
"in a derived class to change this behavior.\n"
"\n"
"'fs_new_on_update' will create a new file name if the file has been updated."
msgstr ""

#. tumbleweed/perl-DBIx-Class-IntrospectableM2M/summary
#. leap/perl-DBIx-Class-IntrospectableM2M/summary
msgid "Introspect many-to-many shortcuts"
msgstr ""

#. tumbleweed/perl-DBIx-Class-IntrospectableM2M/description
#. leap/perl-DBIx-Class-IntrospectableM2M/description
msgid ""
"Because the many-to-many relationships are not real relationships, they can "
"not be introspected with DBIx::Class. Many-to-many relationships are "
"actually just a collection of convenience methods installed to bridge two "
"relationships. This the DBIx::Class manpage component can be used to store "
"all relevant information about these non-relationships so they can later be "
"introspected and examined."
msgstr ""

#. tumbleweed/perl-DBIx-Class-OptimisticLocking/summary
#. tumbleweed/perl-DBIx-Class-OptimisticLocking/description
#. leap/perl-DBIx-Class-OptimisticLocking/summary
#. leap/perl-DBIx-Class-OptimisticLocking/description
msgid "Optimistic locking support for DBIx::Class"
msgstr ""

#. tumbleweed/perl-DBIx-Class-Schema-Config/summary
#. leap/perl-DBIx-Class-Schema-Config/summary
#, fuzzy
msgid "Credential Management for DBIx::Class"
msgstr "Samba 資格情報管理ライブラリ"

#. tumbleweed/perl-DBIx-Class-Schema-Config/description
#. leap/perl-DBIx-Class-Schema-Config/description
msgid ""
"DBIx::Class::Schema::Config is a subclass of DBIx::Class::Schema that allows "
"the loading of credentials & configuration from a file. The actual code "
"itself would only need to know about the name used in the configuration "
"file. This aims to make it simpler for operations teams to manage database "
"credentials.\n"
"\n"
"A simple tutorial that compliments this documentation and explains "
"converting an existing DBIx::Class Schema to use this software to manage "
"credentials can be found at the http://www.symkat.com/credential-management-"
"in-dbix-class manpage"
msgstr ""

#. tumbleweed/perl-DBIx-Class-Schema-Loader/summary
#. leap/perl-DBIx-Class-Schema-Loader/summary
msgid "Create a DBIx::Class::Schema based on a database"
msgstr ""

#. tumbleweed/perl-DBIx-Class-Schema-Loader/description
#. leap/perl-DBIx-Class-Schema-Loader/description
msgid ""
"DBIx::Class::Schema::Loader automates the definition of a DBIx::Class::"
"Schema by scanning database table definitions and setting up the columns, "
"primary keys, unique constraints and relationships.\n"
"\n"
"See dbicdump for the 'dbicdump' utility.\n"
"\n"
"DBIx::Class::Schema::Loader currently supports only the DBI storage type. It "
"has explicit support for DBD::Pg, DBD::mysql, DBD::DB2, DBD::Firebird, DBD::"
"InterBase, DBD::Informix, DBD::SQLAnywhere, DBD::SQLite, DBD::Sybase (for "
"Sybase ASE and MSSSQL), DBD::ODBC (for MSSQL, MSAccess, Firebird and SQL "
"Anywhere) DBD::ADO (for MSSQL and MSAccess) and DBD::Oracle. Other DBI "
"drivers may function to a greater or lesser degree with this loader, "
"depending on how much of the DBI spec they implement, and how standard their "
"implementation is.\n"
"\n"
"Patches to make other DBDs work correctly welcome.\n"
"\n"
"See DBIx::Class::Schema::Loader::DBI::Writing for notes on writing your own "
"vendor-specific subclass for an unsupported DBD driver.\n"
"\n"
"This module requires DBIx::Class 0.08127 or later, and obsoletes the older "
"DBIx::Class::Loader.\n"
"\n"
"See DBIx::Class::Schema::Loader::Base for available options."
msgstr ""

#. tumbleweed/perl-DBIx-Class-UUIDColumns/summary
#. leap/perl-DBIx-Class-UUIDColumns/summary
msgid "Implicit uuid columns"
msgstr ""

#. tumbleweed/perl-DBIx-Class-UUIDColumns/description
#. leap/perl-DBIx-Class-UUIDColumns/description
msgid ""
"This the DBIx::Class manpage component resembles the behaviour of the Class::"
"DBI::UUID manpage, to make some columns implicitly created as uuid.\n"
"\n"
"When loaded, 'UUIDColumns' will search for a suitable uuid generation module "
"from the following list of supported modules:\n"
"\n"
"  Data::UUID   APR::UUID*   UUID   Win32::Guidgen   Win32API::GUID\n"
"\n"
"If no supporting module can be found, an exception will be thrown.\n"
"\n"
"*APR::UUID will not be loaded under OpenBSD due to an as yet unidentified XS "
"issue.\n"
"\n"
"If you would like to use a specific module, you can set the /uuid_class "
"manpage:\n"
"\n"
"  __PACKAGE__->uuid_class('::Data::UUID');   __PACKAGE__-"
">uuid_class('MyUUIDGenerator');"
msgstr ""

#. tumbleweed/perl-DBIx-Connector/summary
#. tumbleweed/perl-DBIx-Connector/description
#. leap/perl-DBIx-Connector/summary
#. leap/perl-DBIx-Connector/description
msgid "Fast, safe DBI connection and transaction management"
msgstr ""

#. tumbleweed/perl-DBIx-ContextualFetch/summary
#. leap/perl-DBIx-ContextualFetch/summary
msgid "Add contextual fetches to DBI"
msgstr ""

#. tumbleweed/perl-DBIx-ContextualFetch/description
#. leap/perl-DBIx-ContextualFetch/description
msgid ""
"It always struck me odd that DBI didn't take much advantage of Perl's "
"context sensitivity. DBIx::ContextualFetch redefines some of the various "
"fetch methods to fix this oversight. It also adds a few new methods for "
"convenience (though not necessarily efficiency)."
msgstr ""

#. tumbleweed/perl-DBIx-Simple/summary
#. leap/perl-DBIx-Simple/summary
msgid "Very complete easy-to-use OO interface to DBI"
msgstr ""

#. tumbleweed/perl-DBIx-Simple/description
#. leap/perl-DBIx-Simple/description
msgid ""
"DBIx::Simple provides a simplified interface to DBI, Perl's powerful "
"database module.\n"
"\n"
"This module is aimed at rapid development and easy maintenance. Query "
"preparation and execution are combined in a single method, the result object "
"(which is a wrapper around the statement handle) provides easy row-by-row "
"and slurping methods.\n"
"\n"
"The 'query' method returns either a result object, or a dummy object. The "
"dummy object returns undef (or an empty list) for all methods and when used "
"in boolean context, is false. The dummy object lets you postpone (or skip) "
"error checking, but it also makes immediate error checking simply '$db-"
">query(...) or die $db->error'."
msgstr ""

#. tumbleweed/perl-DBM-Deep/summary
#. leap/perl-DBM-Deep/summary
msgid "Pure Perl Multi-Level Hash/Array Dbm That Supports Transactions"
msgstr ""

#. tumbleweed/perl-DBM-Deep/description
#. leap/perl-DBM-Deep/description
msgid ""
"A unique flat-file database module, written in pure perl. True multi-level "
"hash/array support (unlike MLDBM, which is faked), hybrid OO / tie() "
"interface, cross-platform FTPable files, ACID transactions, and is quite "
"fast. Can handle millions of keys and unlimited levels without significant "
"slow-down. Written from the ground-up in pure perl -- this is NOT a wrapper "
"around a C-based DBM. Out-of-the-box compatibility with Unix, Mac OS X and "
"Windows."
msgstr ""

#. tumbleweed/perl-Data-AMF/summary
#. leap/perl-Data-AMF/summary
msgid "Serialize/Deserialize AMF data"
msgstr ""

#. tumbleweed/perl-Data-AMF/description
#. leap/perl-Data-AMF/description
msgid ""
"This module is (de)serializer for Adobe's AMF (Action Message Format). Data::"
"AMF is core module and it recognize only AMF data, not AMF packet. If you "
"want to read/write AMF Packet, see Data::AMF::Packet instead."
msgstr ""

#. tumbleweed/perl-Data-Compare/summary
#, fuzzy
msgid "Compare Perl Data Structures"
msgstr "データ構造のみやすい表示"

#. tumbleweed/perl-Data-Compare/description
#. leap/perl-Data-Compare/description
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures "
"differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases:\n"
"\n"
"* Scalar::Properties objects\n"
"\n"
"  This has been moved into a plugin, although functionality remains the   "
"same as with the previous version. Full documentation is in the   Data::"
"Compare::Plugins::Scalar::Properties manpage.\n"
"\n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"  These are stringified before comparison, so the following will match:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  Sorry, that's the best we can do.\n"
"\n"
"* CODE and GLOB references\n"
"\n"
"  These are assumed not to match unless the references are identical - ie,   "
"both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a "
"hashref as a third parameter to the 'Compare()' function. This is not yet "
"available through the OO-ish interface. These options will be in force for "
"the *whole* of your comparison, so will apply to structures that are lurking "
"deep down in your data as well as at the top level, so beware!\n"
"\n"
"* ignore_hash_keys\n"
"\n"
"  an arrayref of strings. When comparing two hashes, any keys mentioned in   "
"this list will be ignored."
msgstr ""

#. tumbleweed/perl-Data-Dump/summary
#. leap/perl-Data-Dump/summary
msgid "Pretty printing of data structures"
msgstr "データ構造の見やすい表示"

#. tumbleweed/perl-Data-Dump/description
msgid ""
"This module provide a few functions that traverse their argument and "
"produces a string as its result. The string contains Perl code that, when "
"'eval'ed, produces a deep copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read.\n"
"\n"
"The following functions are provided (only the dd* functions are exported by "
"default):\n"
"\n"
"* dump( ... )\n"
"\n"
"* pp( ... )\n"
"\n"
"  Returns a string containing a Perl expression. If you pass this string "
"to   Perl's built-in eval() function it should return a copy of the "
"arguments   you passed to dump().\n"
"\n"
"  If you call the function with multiple arguments then the output will be   "
"wrapped in parenthesis \"( ..., ... )\". If you call the function with a   "
"single argument the output will not have the wrapping. If you call the   "
"function with a single scalar (non-reference) argument it will just   return "
"the scalar quoted if needed, but never break it into multiple   lines. If "
"you pass multiple arguments or references to arrays of hashes   then the "
"return value might contain line breaks to format it for easier   reading. "
"The returned string will never be \"\\n\" terminated, even if   contains "
"multiple lines. This allows code like this to place the   semicolon in the "
"expected place:\n"
"\n"
"     print '$obj = ', dump($obj), \";\\n\";\n"
"\n"
"  If dump() is called in void context, then the dump is printed on STDERR   "
"and then \"\\n\" terminated. You might find this useful for quick debug   "
"printouts, but the dd*() functions might be better alternatives for this.\n"
"\n"
"  There is no difference between dump() and pp(), except that dump() "
"shares   its name with a not-so-useful perl builtin. Because of this some "
"might   want to avoid using that name.\n"
"\n"
"* quote( $string )\n"
"\n"
"  Returns a quoted version of the provided string.\n"
"\n"
"  It differs from 'dump($string)' in that it will quote even numbers and   "
"not try to come up with clever expressions that might shorten the output.   "
"If a non-scalar argument is provided then it's just stringified instead   of "
"traversed.\n"
"\n"
"* dd( ... )\n"
"\n"
"* ddx( ... )\n"
"\n"
"  These functions will call dump() on their argument and print the result   "
"to STDOUT (actually, it's the currently selected output handle, but   STDOUT "
"is the default for that).\n"
"\n"
"  The difference between them is only that ddx() will prefix the lines it   "
"prints with \"# \" and mark the first line with the file and line number   "
"where it was called. This is meant to be useful for debug printouts of   "
"state within programs.\n"
"\n"
"* dumpf( ..., \\&filter )\n"
"\n"
"  Short hand for calling the dump_filtered() function of the   Data::Dump::"
"Filtered manpage. This works like dump(), but the last   argument should be "
"a filter callback function. As objects are visited the   filter callback is "
"invoked and it can modify how the objects are dumped."
msgstr ""

#. tumbleweed/perl-Data-Dumper-Concise/summary
#. leap/perl-Data-Dumper-Concise/summary
msgid "Less indentation and newlines plus sub deparsing"
msgstr ""

#. tumbleweed/perl-Data-Dumper-Concise/description
#. leap/perl-Data-Dumper-Concise/description
msgid ""
"This module always exports a single function, Dumper, which can be called "
"with an array of values to dump those values.\n"
"\n"
"It exists, fundamentally, as a convenient way to reproduce a set of Dumper "
"options that we've found ourselves using across large numbers of "
"applications, primarily for debugging output.\n"
"\n"
"The principle guiding theme is \"all the concision you can get while still "
"having a useful dump and not doing anything cleverer than setting Data::"
"Dumper options\" - it's been pointed out to us that Data::Dump::Streamer can "
"produce shorter output with less lines of code. We know. This is simpler and "
"we've never seen it segfault. But for complex/weird structures, it generally "
"rocks. You should use it as well, when Concise is underkill. We do.\n"
"\n"
"Why is deparsing on when the aim is concision? Because you often want to "
"know what subroutine refs you have when debugging and because if you were "
"planning to eval this back in you probably wanted to remove subrefs first "
"and add them back in a custom way anyway. Note that this -does- force using "
"the pure perl Dumper rather than the XS one, but I've never in my life seen "
"Data::Dumper show up in a profile so \"who cares?\"."
msgstr ""

#. tumbleweed/perl-Data-Entropy/summary
#. leap/perl-Data-Entropy/summary
#, fuzzy
msgid "Entropy (randomness) management"
msgstr "コントロールグループ管理ツール"

#. tumbleweed/perl-Data-Entropy/description
#. leap/perl-Data-Entropy/description
msgid ""
"This module maintains a concept of a current selection of entropy source. "
"Algorithms that require entropy, such as those in the Data::Entropy::"
"Algorithms manpage, can use the source nominated by this module, avoiding "
"the need for entropy source objects to be explicitly passed around. This is "
"convenient because usually one entropy source will be used for an entire "
"program run and so an explicit entropy source parameter would rarely vary. "
"There is also a default entropy source, avoiding the need to explicitly "
"configure a source at all.\n"
"\n"
"If nothing is done to set a source then it defaults to the use of Rijndael "
"(AES) in counter mode (see the Data::Entropy::RawSource::CryptCounter "
"manpage and the Crypt::Rijndael manpage), keyed using Perl's built-in 'rand' "
"function. This gives a data stream that looks like concentrated entropy, but "
"really only has at most the entropy of the 'rand' seed. Within a single run "
"it is cryptographically difficult to detect the correlation between parts of "
"the pseudo-entropy stream. If more true entropy is required then it is "
"necessary to configure a different entropy source."
msgstr ""

#. tumbleweed/perl-Data-Float/summary
#. leap/perl-Data-Float/summary
msgid "Details of the floating point data type"
msgstr ""

#. tumbleweed/perl-Data-Float/description
#. leap/perl-Data-Float/description
msgid ""
"This module is about the native floating point numerical data type. A "
"floating point number is one of the types of datum that can appear in the "
"numeric part of a Perl scalar. This module supplies constants describing the "
"native floating point type, classification functions, and functions to "
"manipulate floating point values at a low level."
msgstr ""

#. tumbleweed/perl-Data-Hexify/summary
#. leap/perl-Data-Hexify/summary
#, fuzzy
msgid "Perl extension for hexdumping arbitrary data"
msgstr "配列比較用の Perl 拡張"

#. tumbleweed/perl-Data-Hexify/description
#. leap/perl-Data-Hexify/description
msgid ""
"This module exports one subroutine: 'Hexify'.\n"
"\n"
"'Hexify' formats arbitrary (possible binary) data into a format suitable for "
"hex dumps in the style of 'xd' or 'hexl'.\n"
"\n"
"The first, or only, argument to 'Hexify' contains the data, or a reference "
"to the data, to be hexified. Hexify will return a string that prints as "
"follows:\n"
"\n"
"  0000: 70 61 63 6b 61 67 65 20 44 61 74 61 3a 3a 48 65  package Data::He   "
"0010: 78 69 66 79 3b 0a 0a 75 73 65 20 35 2e 30 30 36  xify;..use 5.006\n"
"\n"
"and so on. At the left is the (hexadecimal) index of the data, then a number "
"of hex bytes, followed by the chunk of data with unprintables replaced by "
"periods.\n"
"\n"
"The optional second argument to 'Hexify' must be a hash or a hash reference, "
"containing values for any of the following parameters:\n"
"\n"
"* first\n"
"\n"
"  The first byte of the data to be processed. Default is to start from the   "
"beginning of the data.\n"
"\n"
"* length\n"
"\n"
"  The number of bytes to be processed. Default is to proceed all data.\n"
"\n"
"* chunk\n"
"\n"
"  The number of bytes to be processed per line of output. Default is 16.\n"
"\n"
"* group\n"
"\n"
"  The number of bytes to be grouped together. Default is 1 (no grouping).   "
"If used, it must be a divisor of the chunk size.\n"
"\n"
"* duplicates\n"
"\n"
"  When set, duplicate lines of output are suppressed and replaced by a   "
"single line reading '**SAME**'.\n"
"\n"
"  Duplicate suppression is enabled by default.\n"
"\n"
"* showdata\n"
"\n"
"  A reference to a subroutine that is used to produce a printable string   "
"from a chunk of data. By default, a subroutine is used that replaces   "
"unwanted bytes by periods.\n"
"\n"
"  The subroutine gets the chunk of data passed as argument, and should   "
"return a printable string of at most 'chunksize' characters.\n"
"\n"
"* align\n"
"\n"
"  Align the result to 'chunksize' bytes. This is relevant only when   "
"processing data not from the beginning. For example, when 'first' is 10,   "
"the result would become:\n"
"\n"
"    0000:                ...    74 61 3a 3a 48 65            ta::He     "
"0010: 78 69 66 79 3b ... 65 20 35 2e 30 30 36  xify;..use 5.006     ... and "
"so on ...\n"
"\n"
"  Alignment is on by default. Without alignment, the result would be:\n"
"\n"
"    000a: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"001a: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ...\n"
"\n"
"* start\n"
"\n"
"  Pretend that the data started at this byte (while in reality it starts "
"at   byte 'first'). The above example, with 'start => 0', becomes:\n"
"\n"
"    0000: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"0010: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ..."
msgstr ""

#. tumbleweed/perl-Data-Hierarchy/summary
#. leap/perl-Data-Hierarchy/summary
msgid "Handle data in a hierarchical structure"
msgstr "階層構造データの処理"

#. tumbleweed/perl-Data-Hierarchy/description
#. leap/perl-Data-Hierarchy/description
msgid ""
"the Data::Hierarchy manpage provides a simple interface for manipulating "
"inheritable data attached to a hierarchical environment (like a "
"filesystem).\n"
"\n"
"One use of the Data::Hierarchy manpage is to allow an application to "
"annotate paths in a real filesystem in a single compact data structure. "
"However, the hierarchy does not actually need to correspond to an actual "
"filesystem.\n"
"\n"
"Paths in a hierarchy are referred to in a Unix-like syntax; '\"/\"' is the "
"root \"directory\". (You can specify a different separator character than "
"the slash when you construct a Data::Hierarchy object.) With the exception "
"of the root path, paths should never contain trailing slashes. You can "
"associate properties, which are arbitrary name/value pairs, with any path. "
"(Properties cannot contain the undefined value.) By default, properties are "
"inherited by child paths: thus, if you store some data at '/some/path':\n"
"\n"
"    $tree->store('/some/path', {color => 'red'});\n"
"\n"
"you can fetch it again at a '/some/path/below/that':\n"
"\n"
"    print $tree->get('/some/path/below/that')->{'color'};     \n"
"\n"
"On the other hand, properties whose names begin with dots are uninherited, "
"or \"sticky\":\n"
"\n"
"    $tree->store('/some/path', {'.color' => 'blue'});     print $tree->get('/"
"some/path')->{'.color'};            # prints blue     print $tree->get('/"
"some/path/below/that')->{'.color'}; # undefined\n"
"\n"
"Note that you do not need to (and in fact, cannot) explicitly add \"files\" "
"or \"directories\" to the hierarchy; you simply add and delete properties to "
"paths."
msgstr ""

#. tumbleweed/perl-Data-Integer/summary
#. leap/perl-Data-Integer/summary
msgid "Details of the Native Integer Data Type"
msgstr ""

#. tumbleweed/perl-Data-Integer/description
#. leap/perl-Data-Integer/description
msgid ""
"This module is about the native integer numerical data type. A native "
"integer is one of the types of datum that can appear in the numeric part of "
"a Perl scalar. This module supplies constants describing the native integer "
"type.\n"
"\n"
"There are actually two native integer representations: signed and unsigned. "
"Both are handled by this module."
msgstr ""

#. tumbleweed/perl-Data-OptList/summary
#, fuzzy
msgid "Parse and Validate Simple Name/Value Option Pairs"
msgstr "シンプルな名前／値の対を処理／検証するモジュール"

#. tumbleweed/perl-Data-OptList/description
#. leap/perl-Data-OptList/description
msgid ""
"Hashes are great for storing named data, but if you want more than one entry "
"for a name, you have to use a list of pairs. Even then, this is really "
"boring to write:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz "
"=> { ... },   ];\n"
"\n"
"Just look at all those undefs! Don't worry, we can get rid of those:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => "
"{ ... },   ];\n"
"\n"
"Aaaauuugh! We've saved a little typing, but now it requires thought to read, "
"and thinking is even worse than typing... and it's got a bug! It looked "
"right, didn't it? Well, the 'xyz => { ... }' gets consumed by the map, and "
"we don't get the data we wanted.\n"
"\n"
"With Data::OptList, you can do this instead:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => "
"{ ... },   ]);\n"
"\n"
"This works by assuming that any defined scalar is a name and any reference "
"following a name is its value."
msgstr ""
"ハッシュは名前付きのデータを保存するには便利な仕組みですが、 1 つの名前に対し"
"て複数の値を入れたいような場合は、配列を利用することになってしまいます。たと"
"えば下記のようになります:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz "
"=> { ... },   ];\n"
"\n"
"このように undef だらけになってしまいました。心配はありません。下記のように\n"
"することができます:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => "
"{ ... },   ];\n"
"\n"
"少しだけ入力を省くことができましたが、相変わらず読むには不便なコードになって"
"しまいました。読むときに考え込んでしまうコードというのも、バグを引き起こしか"
"ねないものです。 'xyz => { ... }' をマップとして使用してしまっているため、必"
"要なデータにたどり着きにくくなっています。\n"
"\n"
"Data::OptList を使用すると、下記のように書き換えることができます:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => "
"{ ... },   ]);\n"
"\n"
"これは、任意の定義済みスカラーに名前を設定し、名前に続く任意の参照にはその値"
"が存在する形になります。"

#. tumbleweed/perl-Data-Page/summary
#. leap/perl-Data-Page/summary
msgid "Help when paging through sets of results"
msgstr ""

#. tumbleweed/perl-Data-Page/description
#. leap/perl-Data-Page/description
msgid ""
"When searching through large amounts of data, it is often the case that a "
"result set is returned that is larger than we want to display on one page. "
"This results in wanting to page through various pages of data. The maths "
"behind this is unfortunately fiddly, hence this module.\n"
"\n"
"The main concept is that you pass in the number of total entries, the number "
"of entries per page, and the current page number. You can then call methods "
"to find out how many pages of information there are, and what number the "
"first and last entries on the current page really are."
msgstr ""

#. tumbleweed/perl-Data-Perl/summary
#. leap/perl-Data-Perl/summary
msgid "Base classes wrapping fundamental Perl data types."
msgstr ""

#. tumbleweed/perl-Data-Perl/description
#. leap/perl-Data-Perl/description
msgid ""
"Data::Perl is a collection of classes that wrap fundamental data types that "
"exist in Perl. These classes and methods as they exist today are an attempt "
"to mirror functionality provided by Moose's Native Traits. One important "
"thing to note is all classes currently do no validation on constructor "
"input.\n"
"\n"
"Data::Perl is a container class for the following classes:\n"
"\n"
"* * the Data::Perl::Collection::Hash manpage\n"
"\n"
"* * the Data::Perl::Collection::Array manpage\n"
"\n"
"* * the Data::Perl::String manpage\n"
"\n"
"* * the Data::Perl::Number manpage\n"
"\n"
"* * the Data::Perl::Counter manpage\n"
"\n"
"* * the Data::Perl::Bool manpage\n"
"\n"
"* * the Data::Perl::Code manpage"
msgstr ""

#. tumbleweed/perl-Data-Printer/summary
#. leap/perl-Data-Printer/summary
#, fuzzy
msgid "Colored Pretty-Print of Perl Data Structures and Objects"
msgstr "データ構造の見やすい表示"

#. tumbleweed/perl-Data-Printer/description
#. leap/perl-Data-Printer/description
#, fuzzy
msgid "colored pretty-print of Perl data structures and objects"
msgstr "データ構造の見やすい表示"

#. tumbleweed/perl-Data-Section/summary
#. leap/perl-Data-Section/summary
msgid "read multiple hunks of data out of your DATA section"
msgstr ""

#. tumbleweed/perl-Data-Section/description
#. leap/perl-Data-Section/description
msgid ""
"Data::Section provides an easy way to access multiple named chunks of line-"
"oriented data in your module's DATA section. It was written to allow modules "
"to store their own templates, but probably has other uses."
msgstr ""

#. tumbleweed/perl-Data-Section-Simple/summary
#. leap/perl-Data-Section-Simple/summary
msgid "Read data from __DATA__"
msgstr ""

#. tumbleweed/perl-Data-Section-Simple/description
#. leap/perl-Data-Section-Simple/description
msgid ""
"Data::Section::Simple is a simple module to extract data from '__DATA__' "
"section of the file."
msgstr ""

#. tumbleweed/perl-Data-ShowTable/summary
#. leap/perl-Data-ShowTable/summary
msgid "routines to display tabular data in several formats."
msgstr ""

#. tumbleweed/perl-Data-ShowTable/description
#. leap/perl-Data-ShowTable/description
msgid ""
"The *ShowTable* module provides subroutines to display tabular data, "
"typially from a database, in nicely formatted columns, in several formats. "
"Its arguments can either be given in a fixed order, or, as a single, "
"anonymous hash-array.\n"
"\n"
"The output format for any one invocation can be one of four possible "
"styles:\n"
"\n"
"* Box\n"
"\n"
"  A tabular format, with the column titles and the entire table surrounded   "
"by a \"box\" of \"'+'\", \"'-'\", and \"'|'\" characters. See the "
"\"ShowBoxTable\"   manpage for details.\n"
"\n"
"* Table\n"
"\n"
"  A simple tabular format, with columns automatically aligned, with column   "
"titles. See the \"ShowSimpleTable\" manpage.\n"
"\n"
"* List\n"
"\n"
"  A _list_ style, where columns of data are listed as a _name_:_value_   "
"pair, one pair per line, with rows being one or more column values,   "
"separated by an empty line. See the \"ShowListTable\" manpage.\n"
"\n"
"* HTML\n"
"\n"
"  The data is output as an HTML _TABLE_, suitable for display through a   "
"_Web_-client. See the \"ShowHTMLTable\" manpage. Input can either be plain   "
"ASCII text, or text with embedded HTML elements, depending upon an   "
"argument or global parameter.\n"
"\n"
"The subroutines which perform these displays are listed below."
msgstr ""

#. tumbleweed/perl-Data-Uniqid/summary
#. leap/perl-Data-Uniqid/summary
#, fuzzy
msgid "Perl extension for simple genrating of unique id's"
msgstr "サブルーチンを簡単にオーバーライドできる Perl 拡張"

#. tumbleweed/perl-Data-Uniqid/description
#. leap/perl-Data-Uniqid/description
msgid ""
"Data::Uniqid provides three simple routines for generating unique ids. These "
"ids are coded with a Base62 systen to make them short and handy (e.g. to use "
"it as part of a URL).\n"
"\n"
"  suinqid     genrates a very short id valid only for the localhost and with "
"a     liftime of 1 day\n"
"\n"
"  uniqid     generates a short id valid on the local host\n"
"\n"
"  luniqid     generates a long id valid everywhere and ever"
msgstr ""

#. tumbleweed/perl-Data-Visitor/summary
#. leap/perl-Data-Visitor/summary
msgid "Visitor style traversal of Perl data structures"
msgstr ""

#. tumbleweed/perl-Data-Visitor/description
#. leap/perl-Data-Visitor/description
msgid ""
"This module is a simple visitor implementation for Perl values.\n"
"\n"
"It has a main dispatcher method, 'visit', which takes a single perl value "
"and then calls the methods appropriate for that value.\n"
"\n"
"It can recursively map (cloning as necessary) or just traverse most "
"structures, with support for per object behavior, circular structures, "
"visiting tied structures, and all ref types (hashes, arrays, scalars, code, "
"globs).\n"
"\n"
"the Data::Visitor manpage is meant to be subclassed, but also ships with a "
"callback driven subclass, the Data::Visitor::Callback manpage."
msgstr ""

#. tumbleweed/perl-Date-Calc/summary
msgid "Gregorian calendar date calculations"
msgstr "グレゴリオ暦カレンダー日付計算"

#. tumbleweed/perl-Date-Calc/description
msgid ""
"* *\n"
"\n"
"  'use Date::Calc qw( Days_in_Year Days_in_Month ... );'\n"
"\n"
"* *"
msgstr ""
"* *\n"
"\n"
"  'use Date::Calc qw( Days_in_Year Days_in_Month ... );'\n"
"\n"
"* *"

#. tumbleweed/perl-Date-Holidays-CZ/summary
#. leap/perl-Date-Holidays-CZ/summary
msgid "Determine Czech holidays"
msgstr ""

#. tumbleweed/perl-Date-Holidays-CZ/description
#. leap/perl-Date-Holidays-CZ/description
msgid ""
"This module exports a single function named *holidays()* which returns a "
"list of Czech holidays in a given year."
msgstr ""

#. tumbleweed/perl-Date-Manip/summary
#. leap/perl-Date-Manip/summary
msgid "Date manipulation routines"
msgstr "日付操作ルーチン"

#. tumbleweed/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Since many other date/time modules exist, some of which may do the specific "
"operation(s) you need faster, be sure to read Date::Manip::Misc/\"SHOULD I "
"USE DATE::MANIP\" before deciding which of the Date and Time modules from "
"CPAN is for you. However, if you want one module to do it all, Date::Manip "
"is the one to use.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data.\n"
"\n"
"* *dates*\n"
"\n"
"The word date is used extensively here and is somewhat misleading. In Date::"
"Manip, a date consists of three pieces of information: a calendar date, a "
"time of day, and time zone information. Calendar dates and times are fully "
"handled. Time zones are handled as well, but depending on how you use Date::"
"Manip, there may be some limitations as discussed below.\n"
"\n"
"* *delta*\n"
"\n"
"A delta is an amount of time (i.e. the amount of time between two different "
"dates). A delta refers only to an amount of time. It includes no information "
"about a starting or ending date/time. Most people will think of a delta as "
"an amount of time, but the term 'time' is already used so much in this "
"module that I didn't want to use it here in order to avoid confusion.\n"
"\n"
"* *recurrence*\n"
"\n"
"A recurring event is something which occurs on a regular recurring basis.\n"
"\n"
"* *holidays* and *events*\n"
"\n"
"Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to:\n"
"\n"
"* ***\n"
"\n"
"Enter a date in practically any format you choose.\n"
"\n"
"* ***\n"
"\n"
"Compare two dates, entered in widely different formats to determine which is "
"earlier.\n"
"\n"
"* ***\n"
"\n"
"Extract any information you want from a date using a format string similar "
"to the Unix date command.\n"
"\n"
"* ***\n"
"\n"
"Determine the amount of time between two dates, or add an amount of time to "
"a date to get a second date.\n"
"\n"
"* ***\n"
"\n"
"Work with dates with dates using international formats (foreign month names, "
"12/10/95 referring to October rather than December, etc.).\n"
"\n"
"* ***\n"
"\n"
"To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""

#. tumbleweed/perl-Date-Tiny/summary
#. tumbleweed/perl-DateTime-Tiny/summary
msgid "Date Object, with As Little Code As Possible"
msgstr ""

#. tumbleweed/perl-Date-Tiny/description
msgid ""
"*Date::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a date, "
"without any time data."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Builder/summary
#. leap/perl-DateTime-Format-Builder/summary
msgid "Create DateTime parser classes and objects."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Builder/description
#. leap/perl-DateTime-Format-Builder/description
msgid ""
"DateTime::Format::Builder creates DateTime parsers. Many string formats of "
"dates and times are simple and just require a basic regular expression to "
"extract the relevant information. Builder provides a simple way to do this "
"without writing reams of structural code.\n"
"\n"
"Builder provides a number of methods, most of which you'll never need, or at "
"least rarely need. They're provided more for exposing of the module's "
"innards to any subclasses, or for when you need to do something slightly "
"beyond what I expected.\n"
"\n"
"This creates the end methods. Coderefs die on bad parses, return 'DateTime' "
"objects on good parse."
msgstr ""

#. tumbleweed/perl-DateTime-Format-DateParse/summary
#. leap/perl-DateTime-Format-DateParse/summary
msgid "Parses Date::Parse compatible formats"
msgstr ""

#. tumbleweed/perl-DateTime-Format-DateParse/description
#. leap/perl-DateTime-Format-DateParse/description
msgid ""
"This module is a compatibility wrapper around Date::Parse.\n"
"\n"
"  Author:\tJoshua Hoblitt (JHOBLITT) <jhoblitt@cpan.org>"
msgstr ""

#. tumbleweed/perl-DateTime-Format-MySQL/summary
#. leap/perl-DateTime-Format-MySQL/summary
msgid "Parse and format MySQL dates and times"
msgstr ""

#. tumbleweed/perl-DateTime-Format-MySQL/description
#. leap/perl-DateTime-Format-MySQL/description
msgid ""
"This module understands the formats used by MySQL for its DATE, DATETIME, "
"TIME, and TIMESTAMP data types. It can be used to parse these formats in "
"order to create DateTime objects, and it can take a DateTime object and "
"produce a string representing it in the MySQL format."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Pg/summary
#. leap/perl-DateTime-Format-Pg/summary
#, fuzzy
msgid "Parse and format PostgreSQL dates and times"
msgstr "日付の文字列を値に変換するモジュール"

#. tumbleweed/perl-DateTime-Format-Pg/description
#. leap/perl-DateTime-Format-Pg/description
msgid ""
"This module understands the formats used by PostgreSQL for its DATE, TIME, "
"TIMESTAMP, and INTERVAL data types. It can be used to parse these formats in "
"order to create 'DateTime' or 'DateTime::Duration' objects, and it can take "
"a 'DateTime' or 'DateTime::Duration' object and produce a string "
"representing it in a format accepted by PostgreSQL."
msgstr ""

#. tumbleweed/perl-DateTime-Format-SQLite/summary
#. leap/perl-DateTime-Format-SQLite/summary
#, fuzzy
msgid "Parse and format SQLite dates and times"
msgstr "日付の文字列を値に変換するモジュール"

#. tumbleweed/perl-DateTime-Format-SQLite/description
#. leap/perl-DateTime-Format-SQLite/description
msgid ""
"This module understands the formats used by SQLite for its 'date', "
"'datetime' and 'time' functions. It can be used to parse these formats in "
"order to create the DateTime manpage objects, and it can take a DateTime "
"object and produce a timestring accepted by SQLite.\n"
"\n"
"*NOTE:* SQLite does not have real date/time types but stores everything as "
"strings. This module deals with the date/time strings as understood/returned "
"by SQLite's 'date', 'time', 'datetime', 'julianday' and 'strftime' SQL "
"functions. You will usually want to store your dates in one of these formats."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Strptime/summary
#. leap/perl-DateTime-Format-Strptime/summary
#, fuzzy
msgid "Parse and format strp and strf time patterns"
msgstr "日付の文字列を値に変換するモジュール"

#. tumbleweed/perl-DateTime-Format-Strptime/description
#. leap/perl-DateTime-Format-Strptime/description
msgid ""
"This module implements most of 'strptime(3)', the POSIX function that is the "
"reverse of 'strftime(3)', for 'DateTime'. While 'strftime' takes a "
"'DateTime' and a pattern and returns a string, 'strptime' takes a string and "
"a pattern and returns the 'DateTime' object associated."
msgstr ""

#. tumbleweed/perl-DateTime-Locale/summary
#. leap/perl-DateTime-Locale/summary
msgid "Localization support for DateTime.pm"
msgstr "DateTime.pm 向けローカライズサポート"

#. tumbleweed/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the 'DateTime::Locale::FromData' documentation."
msgstr ""
"DateTime::Locale は主に様々なロケールサブクラス向けのファクトリとなるクラスで"
"す。利用可能なすべてのロケールに対して、情報を取得するためのいくつかの関数が"
"提供されています。\n"
"\n"
"ロケールオブジェクトでどのようなメソッドを利用できるのかについては、 "
"'DateTime::Locale::FromData' のドキュメンテーションをお読みください。"

#. tumbleweed/perl-DateTime-TimeZone/summary
#. leap/perl-DateTime-TimeZone/summary
msgid "Time zone object base class and factory"
msgstr "タイムゾーンオブジェクトのベースクラスとファクトリ"

#. tumbleweed/perl-DateTime-TimeZone/description
#. leap/perl-DateTime-TimeZone/description
#, fuzzy
msgid ""
"This class is the base class for all time zone objects. A time zone is "
"represented internally as a set of observances, each of which describes the "
"offset from GMT for a given time period.\n"
"\n"
"Note that without the DateTime module, this module does not do much. It's "
"primary interface is through a DateTime object, and most users will not need "
"to directly use 'DateTime::TimeZone' methods."
msgstr ""
"このクラスはすべてのタイムゾーンオブジェクトに対するベースクラスです。タイム"
"ゾーンは内部的には慣例集として表されるもので、各時刻を GMT からのオフセットと"
"して表記しています。\n"
"\n"
"なお、 DateTime モジュールがない場合、本モジュールは多くのことを実現できませ"
"ん。主なインターフェイスは DateTime オブジェクトを通して利用する仕組みである"
"ため、多くのユーザは 'DateTime::TimeZone' のメソッドを直接使用する必要はない"
"はずです。"

#. tumbleweed/perl-DateTime-Tiny/description
msgid ""
"*DateTime::Tiny* is a most prominent member of the DateTime::Tiny suite of "
"time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a datetime."
msgstr ""

#. tumbleweed/perl-Debug-Trace/summary
#. leap/perl-Debug-Trace/summary
#, fuzzy
msgid "Perl extension to trace subroutine calls"
msgstr "サブルーチンを簡単にオーバーライドできる Perl 拡張"

#. tumbleweed/perl-Debug-Trace/description
#. leap/perl-Debug-Trace/description
msgid ""
"Debug::Trace instruments subroutines to provide tracing information upon "
"every call and return.\n"
"\n"
"Using Debug::Trace does not require any changes to your sources. Most often, "
"it will be used from the command line:\n"
"\n"
"  perl -MDebug::Trace=foo,bar yourprogram.pl\n"
"\n"
"This will have your subroutines foo() and bar() printing call and return "
"information.\n"
"\n"
"Subroutine names may be fully qualified to denote subroutines in other "
"packages than the default main::.\n"
"\n"
"By default, the trace information is output using the standard warn() "
"function."
msgstr ""

#. tumbleweed/perl-Declare-Constraints-Simple/summary
#. leap/perl-Declare-Constraints-Simple/summary
#, fuzzy
msgid "Declarative Validation of Data Structures"
msgstr "データ構造のみやすい表示"

#. tumbleweed/perl-Declare-Constraints-Simple/description
#. leap/perl-Declare-Constraints-Simple/description
msgid ""
"The main purpose of this module is to provide an easy way to build a profile "
"to validate a data structure. It does this by giving you a set of "
"declarative keywords in the importing namespace."
msgstr ""

#. tumbleweed/perl-Devel-CheckBin/summary
#. leap/perl-Devel-CheckBin/summary
msgid "Check That a Command Is Available"
msgstr ""

#. tumbleweed/perl-Devel-CheckBin/description
#. leap/perl-Devel-CheckBin/description
msgid ""
"Devel::CheckBin is a perl module that checks whether a particular command is "
"available."
msgstr ""

#. tumbleweed/perl-Devel-CheckCompiler/summary
#. leap/perl-Devel-CheckCompiler/summary
msgid "Check the compiler's availability"
msgstr ""

#. tumbleweed/perl-Devel-CheckCompiler/description
#. leap/perl-Devel-CheckCompiler/description
msgid "Devel::CheckCompiler is checker for compiler's availability."
msgstr ""

#. tumbleweed/perl-Devel-CheckOS/summary
#. leap/perl-Devel-CheckOS/summary
msgid "Check What Os We're Running On"
msgstr ""

#. tumbleweed/perl-Devel-CheckOS/description
#. leap/perl-Devel-CheckOS/description
msgid ""
"A learned sage once wrote on IRC:\n"
"\n"
"   $^O is stupid and ugly, it wears its pants as a hat\n"
"\n"
"Devel::CheckOS provides a more friendly interface to $^O, and also lets you "
"check for various OS \"families\" such as \"Unix\", which includes things "
"like Linux, Solaris, AIX etc.\n"
"\n"
"It spares perl the embarrassment of wearing its pants on its head by "
"covering them with a splendid Fedora."
msgstr ""

#. tumbleweed/perl-Devel-Confess/summary
#. leap/perl-Devel-Confess/summary
msgid "Include stack traces on all warnings and errors"
msgstr ""

#. tumbleweed/perl-Devel-Confess/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when 'warn()'ing or 'die()'ing. Unlike "
"other similar modules (e.g. Carp::Always), stack traces will also be "
"included when exception objects are thrown.\n"
"\n"
"The stack traces are generated using Carp, and will work for all types of "
"errors. Carp's 'carp' and 'croak' functions will also be made to include "
"stack traces.\n"
"\n"
"     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh "
"at -e line 1.           main::f() called at -e line 1           main::g() "
"called at -e line 1\n"
"\n"
"     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                                         -e 'sub g { f(undef) }; g'   Use "
"of uninitialized value $a in array dereference at -e line 1.           main::"
"f(undef) called at -e line 2           main::g() called at -e line 2\n"
"\n"
"Internally, this is implemented with $SIG{__WARN__} and $SIG{__DIE__} "
"hooks.\n"
"\n"
"Stack traces are also included if raw non-object references are thrown.\n"
"\n"
"This module is compatible with all perl versions back to 5.6.2, without "
"additional prerequisites. It contains workarounds for a number of bugs in "
"the perl interpreter, some of which effect comparatively simpler modules, "
"like Carp::Always."
msgstr ""

#. tumbleweed/perl-Devel-Cycle/summary
#. leap/perl-Devel-Cycle/summary
msgid "Find memory cycles in objects"
msgstr ""

#. tumbleweed/perl-Devel-Cycle/description
#. leap/perl-Devel-Cycle/description
msgid ""
"This is a simple developer's tool for finding circular references in objects "
"and other types of references. Because of Perl's reference-count based "
"memory management, circular references will cause memory leaks."
msgstr ""

#. tumbleweed/perl-Devel-FindPerl/summary
#. leap/perl-Devel-FindPerl/summary
msgid "Find the path to your perl"
msgstr ""

#. tumbleweed/perl-Devel-FindPerl/description
#. leap/perl-Devel-FindPerl/description
#, fuzzy
msgid ""
"This module tries to find the path to the currently running perl. It "
"(optionally) exports the following functions:"
msgstr "現在実行中の Perl に関する情報"

#. tumbleweed/perl-Devel-GlobalDestruction/summary
#. leap/perl-Devel-GlobalDestruction/summary
msgid "Provides function returning the equivalent of"
msgstr "古いバージョンの Perl における DESTRUCT と同等の機能"

#. tumbleweed/perl-Devel-GlobalDestruction/description
#. leap/perl-Devel-GlobalDestruction/description
msgid ""
"Perl's global destruction is a little tricky to deal with WRT finalizers "
"because it's not ordered and objects can sometimes disappear.\n"
"\n"
"Writing defensive destructors is hard and annoying, and usually if global "
"destruction is happening you only need the destructors that free up non "
"process local resources to actually execute.\n"
"\n"
"For these constructors you can avoid the mess by simply bailing out if "
"global destruction is in effect."
msgstr ""
"Perl のグローバルなデストラクタ処理は、その処理が順序通りにはいかず、オブジェ"
"クトが時折消えてしまうものであることから、 WRT ファイナライザを扱う場合に時折"
"トリッキーなものになります。\n"
"\n"
"保護型のデストラクタの作成は面倒で厄介なもので、通常はグローバルなデストラク"
"タ処理が発生する場合、実際に実行されるべき非プロセスのローカルリソースを開放"
"するデストラクタのみが必要となります。\n"
"\n"
"これらのコンストラクタのため、グローバルなデストラクタ処理が動作する際、単純"
"にそれらを除外することで問題を回避します。"

#. tumbleweed/perl-Devel-Hide/summary
#. leap/perl-Devel-Hide/summary
msgid "Forces the unavailability of specified Perl modules (for testing)"
msgstr ""

#. tumbleweed/perl-Devel-Hide/description
#. leap/perl-Devel-Hide/description
msgid ""
"Given a list of Perl modules/filenames, this module makes 'require' and "
"'use' statements fail (no matter the specified files/modules are installed "
"or not).\n"
"\n"
"They _die_ with a message like:\n"
"\n"
"    Can't locate Module/ToHide.pm (hidden)\n"
"\n"
"The original intent of this module is to allow Perl developers to test for "
"alternative behavior when some modules are not available. In a Perl "
"installation, where many modules are already installed, there is a chance to "
"screw things up because you take for granted things that may not be there in "
"other machines.\n"
"\n"
"For example, to test if your distribution does the right thing when a module "
"is missing, you can do\n"
"\n"
"    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
"\n"
"forcing 'Test::Pod' to not be found (whether it is installed or not).\n"
"\n"
"Another use case is to force a module which can choose between two "
"requisites to use the one which is not the default. For example, 'XML::"
"Simple' needs a parser module and may use 'XML::Parser' or 'XML::"
"SAX' (preferring the latter). If you have both of them installed, it will "
"always try 'XML::SAX'. But you can say:\n"
"\n"
"    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
"\n"
"NOTE. This module does not use the Carp manpage. As said before, denial "
"_dies_.\n"
"\n"
"This module is pretty trivial. It uses a code reference in @INC to get rid "
"of specific modules during require - denying they can be successfully loaded "
"and stopping the search before they have a chance to be found.\n"
"\n"
"There are three alternative ways to include modules in the hidden list:\n"
"\n"
"* *\n"
"\n"
"  setting @Devel::Hide::HIDDEN\n"
"\n"
"* *\n"
"\n"
"  environment variable DEVEL_HIDE_PM\n"
"\n"
"* *\n"
"\n"
"  import()\n"
"\n"
"Optionally, you can propagate the list of hidden modules to your process' "
"child processes, by passing '-from:children' as the first option when you "
"use() this module. This works by populating 'PERL5OPT', and is incompatible "
"with Taint mode, as explained in the perlrun manpage."
msgstr ""

#. tumbleweed/perl-Devel-OverloadInfo/summary
#. leap/perl-Devel-OverloadInfo/summary
msgid "Introspect Overloaded Operators"
msgstr "オーバーロードされた演算子の内部調査"

#. tumbleweed/perl-Devel-OverloadInfo/description
#. leap/perl-Devel-OverloadInfo/description
msgid ""
"Devel::OverloadInfo returns information about overload operators for a given "
"class (or object), including where in the inheritance hierarchy the "
"overloads are declared and where the code implementing it is."
msgstr ""
"Devel::OverloadInfo は指定したクラス (またはオブジェクト) のオーバーロードさ"
"れた演算子に関する情報を返します。オーバーロードの定義で継承における階層構造"
"のほか、実装コードも返すことができます。"

#. tumbleweed/perl-Devel-PartialDump/summary
#. leap/perl-Devel-PartialDump/summary
#, fuzzy
msgid "Partial dumping of data structures, optimized for argument printing"
msgstr "パラメータの表示に最適化されたデータ構造の部分ダンプ"

#. tumbleweed/perl-Devel-PartialDump/description
#. leap/perl-Devel-PartialDump/description
msgid ""
"This module is a data dumper optimized for logging of arbitrary parameters.\n"
"\n"
"It attempts to truncate overly verbose data, in a way that is hopefully more "
"useful for diagnostics warnings than\n"
"\n"
"    warn Dumper(@stuff);\n"
"\n"
"Unlike other data dumping modules there are no attempts at correctness or "
"cross referencing, this is only meant to provide a slightly deeper look into "
"the data in question.\n"
"\n"
"There is a default recursion limit, and a default truncation of long lists, "
"and the dump is formatted on one line (new lines in strings are escaped), to "
"aid in readability.\n"
"\n"
"You can enable it temporarily by importing functions like 'warn', 'croak' "
"etc to get more informative errors during development, or even use it as:\n"
"\n"
"    BEGIN { local $@; eval \"use Devel::PartialDump qw(...)\" }\n"
"\n"
"to get DWIM formatting only if it's installed, without introducing a "
"dependency."
msgstr ""
"このモジュールは、任意のパラメータを記録するために最適化されたデータダンパで"
"す。\n"
"\n"
"このモジュールはあまりにも冗長すぎるデータを出力したりはしないように作られて"
"いますが、下記のように実行した場合の警告メッセージよりはわかりやすいメッセー"
"ジになるように考えられています\n"
"\n"
"    warn Dumper(@stuff);\n"
"\n"
"他のデータダンパモジュールとは異なり、データの正しさや相互参照性は考慮されて"
"いません。データそのものに対して、比較的深い程度の参照機能を提供します。\n"
"\n"
"また、再帰処理には既定の制限値が設定されているほか、長いリストの場合は既定の"
"最大長も設定されています。出力は 1 行 (文字列内の改行はエスケープして出力され"
"ます) となりますので、読みやすくなるようになっています。\n"
"\n"
"開発作業でより詳しいエラー情報を取得するため、 'warn', 'croak' のようなイン"
"ポート型関数で一時的に使用したい場合は、下記のように使用することもできます:\n"
"\n"
"    BEGIN { local $@; eval \"use Devel::PartialDump qw(...)\" }\n"
"\n"
"なお、単純にデータを書式化するだけの場合、依存関係はありません。"

#. tumbleweed/perl-Devel-REPL/summary
msgid "Modern Perl Interactive Shell"
msgstr ""

#. tumbleweed/perl-Devel-REPL/description
msgid ""
"This is an interactive shell for Perl, commonly known as a REPL - Read, "
"Evaluate, Print, Loop. The shell provides for rapid development or testing "
"of code without the need to create a temporary source code file.\n"
"\n"
"Through a plugin system, many features are available on demand. You can also "
"tailor the environment through the use of profiles and run control files, "
"for example to pre-load certain Perl modules when working on a particular "
"project."
msgstr ""

#. tumbleweed/perl-Devel-StackTrace/summary
#. leap/perl-Devel-StackTrace/summary
msgid "An object representing a stack trace"
msgstr "スタックトレースを表現するオブジェクト"

#. tumbleweed/perl-Devel-StackTrace/description
#. leap/perl-Devel-StackTrace/description
#, fuzzy
msgid ""
"The 'Devel::StackTrace' module contains two classes, C,Devel::StackTrace> "
"and Devel::StackTrace::Frame. These objects encapsulate the information that "
"can retrieved via Perl's 'caller()' function, as well as providing a simple "
"interface to this data.\n"
"\n"
"The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::Frame' "
"objects, one for each level of the stack. The frames contain all the data "
"available from 'caller()'.\n"
"\n"
"This code was created to support my Exception::Class::Base class (part of "
"Exception::Class) but may be useful in other contexts."
msgstr ""
"'Devel::StackTrace' モジュールには 2 つのクラスが含まれています。それぞれ "
"Devel::StackTrace, Devel::StackTrace::Frame というクラスで、これらのオブジェ"
"クトは Perl の'caller()' 関数を介して取得することができる情報をカプセル化し、"
"このデータに対するシンプルなインターフェイスを提供します。\n"
"\n"
"'Devel::StackTrace' オブジェクトには、各スタックのレベルに対応した 'Devel::"
"StackTrace::Frame' オブジェクトが複数個含まれています。フレーム内には、 "
"'caller()' で提供されるすべてのデータが含まれています。\n"
"\n"
"このコードは、私が作成している Exception::Class::Base クラス (Exception::"
"Class の一部) に対応するために作ったものですが、他の箇所でも便利に使用するこ"
"とができます。"

#. tumbleweed/perl-Devel-StackTrace-AsHTML/summary
#. leap/perl-Devel-StackTrace-AsHTML/summary
msgid "Displays stack trace in HTML"
msgstr ""

#. tumbleweed/perl-Devel-StackTrace-AsHTML/description
#. leap/perl-Devel-StackTrace-AsHTML/description
msgid ""
"Devel::StackTrace::AsHTML adds 'as_html' method to Devel::StackTrace which "
"displays the stack trace in beautiful HTML, with code snippet context and "
"function parameters. If you call it on an instance of Devel::StackTrace::"
"WithLexicals, you even get to see the lexical variables of each stack frame."
msgstr ""

#. tumbleweed/perl-Devel-Symdump/summary
msgid "Dump Symbol Names or the Symbol Table"
msgstr "シンボル名やシンボルテーブルをダンプするツール"

#. tumbleweed/perl-Devel-Symdump/description
#. leap/perl-Devel-Symdump/description
msgid "This little package serves to access the symbol table of perl."
msgstr ""
"この小さなパッケージは、 Perl のシンボルテーブルにアクセスする手段を提供しま"
"す。"

#. tumbleweed/perl-Devel-TakeHashArgs/summary
#. leap/perl-Devel-TakeHashArgs/summary
msgid ""
"Make a Hash From @_ and Set Defaults in Subs While Checking That All Man[cut]"
msgstr ""

#. tumbleweed/perl-Devel-TakeHashArgs/description
#. leap/perl-Devel-TakeHashArgs/description
msgid ""
"The module is a short utility I made after being sick and tired of writing "
"redundant code to make a hash out of args when they are passed as key/value "
"pairs including setting their defaults and checking for mandatory arguments."
msgstr ""

#. tumbleweed/perl-Digest-HMAC/summary
#. leap/perl-Digest-HMAC/summary
msgid "Keyed-Hashing for Message Authentication"
msgstr "メッセージ認証向けのキーハッシュ"

#. tumbleweed/perl-Digest-HMAC/description
#. leap/perl-Digest-HMAC/description
msgid ""
"HMAC is used for message integrity checks between two parties that share a "
"secret key, and works in combination with some other Digest algorithm, "
"usually MD5 or SHA-1. The HMAC mechanism is described in RFC 2104.\n"
"\n"
"HMAC follow the common 'Digest::' interface, but the constructor takes the "
"secret key and the name of some other simple 'Digest::' as argument."
msgstr ""
"HMAC は機密鍵を共有した 2 つの当事者でメッセージの整合性を確認するために 使用"
"されます。 HMAC は他のダイジェストアルゴリズム (主に MD5, SHA-1) と共に 使用"
"します。 HMAC の仕組みは RFC 2104 で説明されています。\n"
"HMAC は汎用の 'Digest::' インターフェイスに従って作られていますが、コンストラ"
"クタではパラメータとして、機密鍵と他のシンプルな 'Digest::' 以下の名前を指定"
"する必要があります。"

#. tumbleweed/perl-Digest-Perl-MD5/summary
#. leap/perl-Digest-Perl-MD5/summary
#, fuzzy
msgid "Perl implementation of Ron Rivests MD5 Algorithm"
msgstr "BiDi アルゴリズムのフリー実装"

#. tumbleweed/perl-Digest-Perl-MD5/description
#. leap/perl-Digest-Perl-MD5/description
msgid ""
"This modules has the same interface as the much faster 'Digest::MD5'. So you "
"can easily exchange them, e.g.\n"
"\n"
"\tBEGIN { \t  eval { \t    require Digest::MD5; \t    import Digest::MD5 "
"'md5_hex' \t  }; \t  if ($@) { # ups, no Digest::MD5 \t    require Digest::"
"Perl::MD5; \t    import Digest::Perl::MD5 'md5_hex' \t  } \t}\n"
"\n"
"If the 'Digest::MD5' module is available it is used and if not you take "
"'Digest::Perl::MD5'.\n"
"\n"
"You can also install the Perl part of Digest::MD5 together with Digest::"
"Perl::MD5 and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 "
"if it cannot load its object files.\n"
"\n"
"For a detailed Documentation see the 'Digest::MD5' module."
msgstr ""

#. tumbleweed/perl-Dist-CheckConflicts/summary
#. leap/perl-Dist-CheckConflicts/summary
msgid "declare version conflicts for your dist"
msgstr "配布物内のバージョン矛盾の定義"

#. tumbleweed/perl-Dist-CheckConflicts/description
#. leap/perl-Dist-CheckConflicts/description
msgid ""
"One shortcoming of the CPAN clients that currently exist is that they have "
"no way of specifying conflicting downstream dependencies of modules. This "
"module attempts to work around this issue by allowing you to specify "
"conflicting versions of modules separately, and deal with them after the "
"module is done installing.\n"
"\n"
"For instance, say you have a module 'Foo', and some other module 'Bar' uses "
"'Foo'. If 'Foo' were to change its API in a non-backwards-compatible way, "
"this would cause 'Bar' to break until it is updated to use the new API. "
"'Foo' can't just depend on the fixed version of 'Bar', because this will "
"cause a circular dependency (because 'Bar' is already depending on 'Foo'), "
"and this doesn't express intent properly anyway - 'Foo' doesn't use 'Bar' at "
"all. The ideal solution would be for there to be a way to specify "
"conflicting versions of modules in a way that would let CPAN clients update "
"conflicting modules automatically after an existing module is upgraded, but "
"until that happens, this module will allow users to do this manually.\n"
"\n"
"This module accepts a hash of options passed to its 'use' statement, with "
"these keys being valid:\n"
"\n"
"* -conflicts\n"
"\n"
"  A hashref of conflict specifications, where keys are module names, and   "
"values are the last broken version - any version greater than the   "
"specified version should work.\n"
"\n"
"* -also\n"
"\n"
"  Additional modules to get conflicts from (potentially recursively). This   "
"should generally be a list of modules which use Dist::CheckConflicts,   "
"which correspond to the dists that your dist depends on. (In an ideal   "
"world, this would be intuited directly from your dependency list, but the   "
"dependency list isn't available outside of build time).\n"
"\n"
"* -dist\n"
"\n"
"  The name of the distribution, to make the error message from   "
"check_conflicts more user-friendly.\n"
"\n"
"The methods listed below are exported by this module into the module that "
"uses it, so you should call these methods on your module, not Dist::"
"CheckConflicts.\n"
"\n"
"As an example, this command line can be used to update your modules, after "
"installing the 'Foo' dist (assuming that 'Foo::Conflicts' is the module in "
"the 'Foo' dist which uses Dist::CheckConflicts):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_-"
">{package} } Foo::Conflicts->calculate_conflicts' | cpanm\n"
"\n"
"As an added bonus, loading your conflicts module will provide warnings at "
"runtime if conflicting modules are detected (regardless of whether they are "
"loaded before or afterwards)."
msgstr ""
"現在存在する CPAN クライアントの欠点のうちの 1 つに、モジュール間のダウンスト"
"リーム側の矛盾解決方法がない、という点があります。このモジュールは、このよう"
"な問題に対応するため、個別のモジュールに対して矛盾するバージョン指定を許可"
"し、モジュールのインストール完了後にそれらを解決します。\n"
"\n"
"たとえばモジュール 'Foo' がインストール済みで、それとは異なるモジュール "
"'Bar' が 'Foo' を利用している場合、 'Foo' が後方互換性のない方法で API の変更"
"を行なってしまうと、 'Bar' は 'Foo' の新しいバージョンを利用するように書き換"
"えないかぎり、利用できなくなってしまいます。また、 'Foo' を 'Bar' の特定の"
"バージョンに依存させてしまうと、それは依存関係の循環になってしまい (なぜなら "
"'Bar' は既に 'Foo' の依存関係下にあるので) 、結果として 'Foo' は 'Bar' を全く"
"利用できなくなってしまいます。これに対する現実的な解決方法としては、特定のモ"
"ジュールから別のモジュールに対して、矛盾するバージョンを指定する方法を用意"
"し、 CPAN クライアントが既存のモジュールをアップグレードしたタイミングで、矛"
"盾するモジュールも更新させるようにします。今のところ、アップグレードの処理は"
"自動的に行なうことはできず、手作業で実施する必要があります。\n"
"\n"
"このモジュールは、 'use' ステートメントで渡されるオプションをハッシュ形式で受"
"け付けます。下記のようなキーが用意されています:\n"
"\n"
"* -conflicts\n"
"\n"
"  矛盾の一覧をハッシュ参照で指定します。このとき、キーをモジュール名、値を互"
"換性の異なる直近のバージョンとします。ここで指定した値よりも大きいバージョン"
"であれば、問題なく動作するものと判断されます。\n"
"\n"
"* -also\n"
"\n"
"  矛盾が発生する追加のモジュール (おそらく再帰的に利用するモジュール) を指定"
"します。これは一般に Dist::CheckConflicts を使用するモジュールの一覧で、対象"
"の配布物が依存する先の配布物です (実際にはお使いのモジュールが直接依存する先"
"ですが、構築するまでは依存関係の一覧がわからないためです) 。\n"
"\n"
"* -dist\n"
"\n"
"  配布物の名前を指定します。これは check_conflicts から出力されるメッセージを"
"わかりやすくする目的で指定します。\n"
"\n"
"上記に示したメソッドは、このモジュールから使用できるように公開されたものであ"
"るため、 Dist::CheckConflicts を直接呼び出すのではなく、これらのメソッドを呼"
"び出してください。\n"
"\n"
"たとえば下記のようなコマンドラインは、'Foo' の配布物をインストールしたあと、"
"お使いのモジュールを更新する際に利用することができるものです (ここで、'Foo::"
"Conflicts' は 'Foo' 配布物内にあるモジュールで、 Dist::CheckConflicts を使用"
"するモジュールであるものとします):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_-"
">{package} } Foo::Conflicts->calculate_conflicts' | cpanm\n"
"\n"
"上記に加えて、スクリプトの実行時に、矛盾するモジュールの読み込んだ段階で警告"
"を表示することができます (先に読み込んだものでも、後から読み込んだものでも動"
"作します) 。"

#. tumbleweed/perl-Dist-Zilla/summary
#. leap/perl-Dist-Zilla/summary
msgid "Distribution Builder; Installer Not Included!"
msgstr ""

#. tumbleweed/perl-Dist-Zilla/description
#. leap/perl-Dist-Zilla/description
msgid ""
"Dist::Zilla builds distributions of code to be uploaded to the CPAN. In this "
"respect, it is like ExtUtils::MakeMaker, Module::Build, or Module::Install. "
"Unlike those tools, however, it is not also a system for installing code "
"that has been downloaded from the CPAN. Since it's only run by authors, and "
"is meant to be run on a repository checkout rather than on published, "
"released code, it can do much more than those tools, and is free to make "
"much more ludicrous demands in terms of prerequisites.\n"
"\n"
"If you have access to the web, you can learn more and find an interactive "
"tutorial at *at http://dzil.org/*. If not, try Dist::Zilla::Tutorial."
msgstr ""

#. tumbleweed/perl-Email-Address/summary
#. leap/perl-Email-Address/summary
msgid "RFC 2822 Address Parsing and Creation"
msgstr ""

#. tumbleweed/perl-Email-Address/description
#. leap/perl-Email-Address/description
msgid ""
"This class implements a regex-based RFC 2822 parser that locates email "
"addresses in strings and returns a list of 'Email::Address' objects found. "
"Alternatively you may construct objects manually. The goal of this software "
"is to be correct, and very very fast."
msgstr ""

#. tumbleweed/perl-Email-Date-Format/summary
#. leap/perl-Email-Date-Format/summary
msgid "produce RFC 2822 date strings"
msgstr "RFC 2822 日付文字列の生成"

#. tumbleweed/perl-Email-Date-Format/description
#. leap/perl-Email-Date-Format/description
msgid ""
"This module provides a simple means for generating an RFC 2822 compliant "
"datetime string. (In case you care, they're not RFC 822 dates, because they "
"use a four digit year, which is not allowed in RFC 822.)"
msgstr ""
"このモジュールは RFC 2822 互換の日時文字列を生成するためのシンプルな方法を提"
"供します。 (なお、 RFC 822 形式の日付ではないことに注意してください。 RFC "
"822 では許可されない 4 桁の年を使用するためです)"

#. tumbleweed/perl-Email-MIME-ContentType/summary
#. tumbleweed/perl-Email-MIME-ContentType/description
#. leap/perl-Email-MIME-ContentType/summary
#. leap/perl-Email-MIME-ContentType/description
msgid "Parse a MIME Content-Type Header"
msgstr ""

#. tumbleweed/perl-Email-MIME-Encodings/summary
#. leap/perl-Email-MIME-Encodings/summary
#, fuzzy
msgid "A unified interface to MIME encoding and decoding"
msgstr "MIME メッセージのエンコードとデコードを行ないます。"

#. tumbleweed/perl-Email-MIME-Encodings/description
#. leap/perl-Email-MIME-Encodings/description
msgid ""
"This module simply wraps 'MIME::Base64' and 'MIME::QuotedPrint' so that you "
"can throw the contents of a 'Content-Transfer-Encoding' header at some text "
"and have the right thing happen.\n"
"\n"
"'MIME::Base64', 'MIME::QuotedPrint', 'Email::MIME'."
msgstr ""

#. tumbleweed/perl-Email-MessageID/summary
#. leap/perl-Email-MessageID/summary
msgid "Generate world unique message-ids"
msgstr ""

#. tumbleweed/perl-Email-MessageID/description
#. leap/perl-Email-MessageID/description
msgid ""
"Message-ids are optional, but highly recommended, headers that identify a "
"message uniquely. This software generates a unique message-id."
msgstr ""

#. tumbleweed/perl-Email-Simple/summary
#. leap/perl-Email-Simple/summary
msgid "Simple Parsing of Rfc2822 Message Format and Headers"
msgstr ""

#. tumbleweed/perl-Email-Simple/description
#. leap/perl-Email-Simple/description
msgid ""
"The Email:: namespace was begun as a reaction against the increasing "
"complexity and bugginess of Perl's existing email modules. 'Email::*' "
"modules are meant to be simple to use and to maintain, pared to the bone, "
"fast, minimal in their external dependencies, and correct."
msgstr ""

#. tumbleweed/perl-Email-Valid/summary
#. leap/perl-Email-Valid/summary
msgid "Check validity of Internet email addresses"
msgstr ""

#. tumbleweed/perl-Email-Valid/description
#. leap/perl-Email-Valid/description
msgid ""
"This module determines whether an email address is well-formed, and "
"optionally, whether a mail host exists for the domain.\n"
"\n"
"Please note that there is no way to determine whether an address is "
"deliverable without attempting delivery (for details, see at http://perldoc."
"perl.org/perlfaq9.html#How-do-I-check-a-valid-mail-address)."
msgstr ""

#. tumbleweed/perl-Encode-Locale/summary
#. leap/perl-Encode-Locale/summary
msgid "Determine the locale encoding"
msgstr "ロケールエンコードの判断"

#. tumbleweed/perl-Encode-Locale/description
msgid ""
"In many applications it's wise to let Perl use Unicode for the strings it "
"processes. Most of the interfaces Perl has to the outside world are still "
"byte based. Programs therefore need to decode byte strings that enter the "
"program from the outside and encode them again on the way out.\n"
"\n"
"The POSIX locale system is used to specify both the language conventions "
"requested by the user and the preferred character set to consume and output. "
"The 'Encode::Locale' module looks up the charset and encoding (called a "
"CODESET in the locale jargon) and arranges for the the Encode manpage module "
"to know this encoding under the name \"locale\". It means bytes obtained "
"from the environment can be converted to Unicode strings by calling 'Encode::"
"encode(locale => $bytes)' and converted back again with 'Encode::"
"decode(locale => $string)'.\n"
"\n"
"Where file systems interfaces pass file names in and out of the program we "
"also need care. The trend is for operating systems to use a fixed file "
"encoding that don't actually depend on the locale; and this module "
"determines the most appropriate encoding for file names. The the Encode "
"manpage module will know this encoding under the name \"locale_fs\". For "
"traditional Unix systems this will be an alias to the same encoding as "
"\"locale\".\n"
"\n"
"For programs running in a terminal window (called a \"Console\" on some "
"systems) the \"locale\" encoding is usually a good choice for what to expect "
"as input and output. Some systems allows us to query the encoding set for "
"the terminal and 'Encode::Locale' will do that if available and make these "
"encodings known under the 'Encode' aliases \"console_in\" and \"console_out"
"\". For systems where we can't determine the terminal encoding these will be "
"aliased as the same encoding as \"locale\". The advice is to use \"console_in"
"\" for input known to come from the terminal and \"console_out\" for output "
"to the terminal.\n"
"\n"
"In addition to arranging for various Encode aliases the following functions "
"and variables are provided:\n"
"\n"
"* decode_argv( )\n"
"\n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  This will decode the command line arguments to perl (the '@ARGV' array)   "
"in-place.\n"
"\n"
"  The function will by default replace characters that can't be decoded by   "
"\"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  Any argument provided is passed as CHECK to underlying Encode::decode()   "
"call. Pass the value 'Encode::FB_CROAK' to have the decoding croak if not   "
"all the command line arguments can be decoded. See the Encode/\"Handling   "
"Malformed Data\" manpage for details on other options for CHECK.\n"
"\n"
"* env( $uni_key )\n"
"\n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  Interface to get/set environment variables. Returns the current value as   "
"a Unicode string. The $uni_key and $uni_value arguments are expected to   be "
"Unicode strings as well. Passing 'undef' as $uni_value deletes the   "
"environment variable named $uni_key.\n"
"\n"
"  The returned value will have the characters that can't be decoded   "
"replaced by \"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  There is no interface to request alternative CHECK behavior as for   "
"decode_argv(). If you need that you need to call encode/decode yourself.   "
"For example:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK);\n"
"\n"
"* reinit( )\n"
"\n"
"* reinit( $encoding )\n"
"\n"
"  Reinitialize the encodings from the locale. You want to call this   "
"function if you changed anything in the environment that might influence   "
"the locale.\n"
"\n"
"  This function will croak if the determined encoding isn't recognized by   "
"the Encode module.\n"
"\n"
"  With argument force $ENCODING_... variables to set to the given value.\n"
"\n"
"* $ENCODING_LOCALE\n"
"\n"
"  The encoding name determined to be suitable for the current locale. the   "
"Encode manpage know this encoding as \"locale\".\n"
"\n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  The encoding name determined to be suitable for file system interfaces   "
"involving file names. the Encode manpage know this encoding as   \"locale_fs"
"\".\n"
"\n"
"* $ENCODING_CONSOLE_IN\n"
"\n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  The encodings to be used for reading and writing output to the a "
"console.   the Encode manpage know these encodings as \"console_in\" and   "
"\"console_out\"."
msgstr ""
"多くのアプリケーションでは、 Perl での文字列操作に Unicode を使用するのがよい"
"ものとされています。ただし Perl 以外の多くのインターフェイスでは現在もバイト"
"ベースのものが利用されているため、 Perl のプログラム側ではバイト文字列をデ"
"コードして取り込み、エンコードして取り出す作業が必要になります。\n"
"\n"
"POSIX のロケールシステムは、ユーザから要求のあった言語仕様と入出力に利用する"
"文字セットの間で使用するものです。 'Encode::Locale' モジュールは文字セット(ロ"
"ケール用語では CODESET とも言います) を参照してエンコードを行ない、このエン"
"コードを \"ロケール\" の名称で知るために Encode のモジュールを配置します。こ"
"れにより、この環境から取得できるバイトは、 'Encode::encode(locale => "
"$bytes)'で Unicode 文字列を変換したり、 'Encode::decode(locale => "
"$string)'で Unicode 文字列に戻したりすることができるようになります。\n"
"\n"
"ファイルシステムのインターフェイスでは、プログラムとのファイル名入出力に際し"
"てこのような処理を行なう必要があります。オペレーティングシステム側では一般"
"に、ロケールには依存しない固定のファイル名エンコーディングを行なうため、この"
"モジュールではファイル名に対して最も適切なエンコーディングを判断することがで"
"きます。Encode のマニュアルページでは、ファイル名用に最も適切なエンコーディン"
"グが\"locale_fs\" として書かれています。従来の Unix システムでは、 \"locale"
"\" と同じエンコーディングになっています。\n"
"\n"
"端末ウインドウ内で動作するプログラム (\"コンソール\" プログラムとも呼びます)"
"の場合、 \"locale\" エンコーディングは入出力に期待するものを判断するための材"
"料として利用することができます。システムによっては、端末側にエンコーディング"
"セットを問い合わせることができるものもあり、 'Encode::Locale' では可能な限り"
"これを使用して\"console_in\" と \"console_out\" の別名で 'Encode' 内のエン"
"コーディングを判断します。端末のエンコーディングを判断できないシステムの場合"
"は、 \"locale\" と同じエンコーディングを使用します。端末から入力されるデータ"
"に対しては \"console_in\" を使用し、端末に出力するデータに対しては "
"\"console_out\" を使用することをお勧めします。\n"
"\n"
"様々なエンコーディング別名を配置することができるほか、下記のような関数や変数"
"が提供されています:\n"
"\n"
"* decode_argv( )\n"
"\n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  上記の関数は、コマンドラインパラメータ ('@ARGV' 配列) を Perl に取り込む"
"際、   デコード処理を行ないます。\n"
"\n"
"  この関数は、既定ではデコードできない文字を \"\\x{FFFD}\" (Unicode の未定義"
"扱い  文字) に置き換えます。\n"
"\n"
"  指定されるパラメータは Encode::decode() を呼び出すことで CHECK (チェック) "
"が行なわれます。すべてのコマンドラインパラメータがデコードできない場合"
"は、'Encode::FB_CROAK' の値を渡すことで、デコード用の制御を行ないます。 "
"CHECK に対するその他のオプションについて、詳しくはEncode/\"Handling "
"Malformed Data\" のマニュアルページをお読みください。\n"
"\n"
"* env( $uni_key )\n"
"\n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  環境変数を設定したり取得したりするインターフェイスです。現在の値を Unicode "
"文字列として返却します。 $uni_key と $uni_value の値は、それぞれ Unicode 文字"
"列で指定します。また、 $uni_value に 'undef' を指定すると、 $uni_key で指定し"
"た環境変数を削除します。\n"
"\n"
"  返却された値のうち、デコードできない文字は \"\\x{FFFD}\" (Unicode の未定義"
"扱い  文字) に置き換えられます。\n"
"\n"
"  decode_argv() では、代替のチェック動作を要求するインターフェイスはありませ"
"ん。自分自身でエンコード／デコードを呼び出したい場合は、下記のようにします:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK);\n"
"\n"
"* reinit( )\n"
"\n"
"* reinit( $encoding )\n"
"\n"
"  ロケール情報からエンコーディングを再初期化します。ロケールに影響する設定を"
"変更したりしたような場合に、この関数を呼び出してください。\n"
"\n"
"  また、この関数は判断したエンコーディングが Encode モジュールで認識されない"
"場合にも使用します。\n"
"\n"
"  指定したロケールに変更したい場合は、 $ENCODING_... 変数をお使いください。\n"
"\n"
"* $ENCODING_LOCALE\n"
"\n"
"  現在のロケールに適切であると判断されたエンコーディング名が含まれます。"
"Encode のマニュアルページでは \"locale\" としてこのエンコーディングが書かれて"
"います。\n"
"\n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  ファイル名を含むファイルシステムのインターフェイスに対して、適切であると判"
"断されたエンコーディング名が含まれます。Encode のマニュアルページでは "
"\"locale\" としてこのエンコーディングが書かれています。\n"
"\n"
"* $ENCODING_CONSOLE_IN\n"
"\n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  コンソールとの入出力に使用されるエンコーディングです。Encode のマニュアル"
"ページでは \"locale\" としてこのエンコーディングが書かれています。"

#. tumbleweed/perl-Error/summary
#. leap/perl-Error/summary
msgid "Error/exception handling in an OO-ish way"
msgstr "オブジェクト指向のやり方でのエラー／例外処理"

#. tumbleweed/perl-Error/description
#. leap/perl-Error/description
msgid ""
"The 'Error' package provides two interfaces. Firstly 'Error' provides a "
"procedural interface to exception handling. Secondly 'Error' is a base class "
"for errors/exceptions that can either be thrown, for subsequent catch, or "
"can simply be recorded.\n"
"\n"
"Errors in the class 'Error' should not be thrown directly, but the user "
"should throw errors from a sub-class of 'Error'."
msgstr ""
"'Error' パッケージには 2 つのインターフェイスが存在します。 1 つめは例外処理"
"に対するプロシージャ型のインターフェイス、 2 つめは後でキャッチするためにス"
"ローしたり、単純に記録したりするためのエラー／例外用ベースクラスです。\n"
"\n"
"'Error' クラス内でのエラーは直接投げられるべきものですが、ユーザ側で"
"は'Error' のサブクラスからのエラーを投げるべきです。"

#. tumbleweed/perl-Eval-Closure/summary
#. leap/perl-Eval-Closure/summary
msgid "Safely and Cleanly Create Closures Via String Eval"
msgstr "文字列の eval で安全かつクリーンなクロージャを生成する方法"

#. tumbleweed/perl-Eval-Closure/description
#. leap/perl-Eval-Closure/description
msgid ""
"String eval is often used for dynamic code generation. For instance, 'Moose' "
"uses it heavily, to generate inlined versions of accessors and constructors, "
"which speeds code up at runtime by a significant amount. String eval is not "
"without its issues however - it's difficult to control the scope it's used "
"in (which determines which variables are in scope inside the eval), and it's "
"easy to miss compilation errors, since eval catches them and sticks them in "
"$@ instead.\n"
"\n"
"This module attempts to solve these problems. It provides an 'eval_closure' "
"function, which evals a string in a clean environment, other than a fixed "
"list of specified variables. Compilation errors are rethrown automatically."
msgstr ""
"文字列の eval は動的なコード生成で良く用いられる方法です。たとえば 'Moose' を"
"うまく使用することで、アクセサやコンストラクタをインラインで生成し、実行時の"
"速度を劇的に向上させるようなこともできます。ただし、 eval は問題を発生させや"
"すい仕組みであり、使用するスコープをうまく制御するのは難しい仕組みでもありま"
"す (eval 内でスコープ内にある変数は何か、など) 。また、コンパイルエラーを発生"
"させやすいものでもあるため、 eval で発生する問題を捉えて、問題があれば $@ に"
"その内容を出力するような仕組みもあります。\n"
"\n"
"このモジュールは、これらの問題への解法となるべきものです。 'eval_closure' と"
"いう関数は、変数を指定して与えるのではなく、指定された文字列をクリーンな環境"
"下で eval します。コンパイルエラーについても、自動的に再投入されます。"

#. tumbleweed/perl-Exception-Base/summary
#. leap/perl-Exception-Base/summary
#, fuzzy
msgid "Lightweight exceptions"
msgstr "軽量 OSC 実装"

#. tumbleweed/perl-Exception-Base/description
#. leap/perl-Exception-Base/description
msgid ""
"This class implements a fully OO exception mechanism similar to Exception::"
"Class or Class::Throwable. It provides a simple interface allowing "
"programmers to declare exception classes. These classes can be thrown and "
"caught. Each uncaught exception prints full stack trace if the default "
"verbosity is increased for debugging purposes.\n"
"\n"
"The features of 'Exception::Base':\n"
"\n"
"  * fast implementation of the exception class\n"
"\n"
"  * fully OO without closures and source code filtering\n"
"\n"
"  * does not mess with '$SIG{__DIE__}' and '$SIG{__WARN__}'\n"
"\n"
"  * no external run-time modules dependencies, requires core Perl modules "
"only\n"
"\n"
"  * the default behavior of exception class can be changed globally or just "
"for the thrown exception\n"
"\n"
"  * matching the exception by class, message or other attributes\n"
"\n"
"  * matching with string, regex or closure function\n"
"\n"
"  * creating automatically the derived exception classes (perlfunc/use "
"interface)\n"
"\n"
"  * easily expendable, see Exception::System class for example\n"
"\n"
"  * prints just an error message or dumps full stack trace\n"
"\n"
"  * can propagate (rethrow) an exception\n"
"\n"
"  * can ignore some packages for stack trace output\n"
"\n"
"  * some defaults (i.e. verbosity) can be different for different exceptions"
msgstr ""

#. tumbleweed/perl-Exception-Class/summary
#. leap/perl-Exception-Class/summary
msgid "Module That Allows You to Declare Real Exception Classes in Perl"
msgstr ""

#. tumbleweed/perl-Exception-Class/description
#. leap/perl-Exception-Class/description
msgid ""
"*RECOMMENDATION 1*: If you are writing modern Perl code with Moose or Moo I "
"highly recommend using Throwable instead of this module.\n"
"\n"
"*RECOMMENDATION 2*: Whether or not you use Throwable, you should use Try::"
"Tiny.\n"
"\n"
"Exception::Class allows you to declare exception hierarchies in your modules "
"in a \"Java-esque\" manner.\n"
"\n"
"It features a simple interface allowing programmers to 'declare' exception "
"classes at compile time. It also has a base exception class, Exception::"
"Class::Base, that can be easily extended.\n"
"\n"
"It is designed to make structured exception handling simpler and better by "
"encouraging people to use hierarchies of exceptions in their applications, "
"as opposed to a single catch-all exception class.\n"
"\n"
"This module does not implement any try/catch syntax. Please see the \"OTHER "
"EXCEPTION MODULES (try/catch syntax)\" section for more information on how "
"to get this syntax.\n"
"\n"
"You will also want to look at the documentation for Exception::Class::Base, "
"which is the default base class for all exception objects created by this "
"module."
msgstr ""

#. tumbleweed/perl-Expect/summary
#. leap/perl-Expect/summary
msgid ""
"Automate Interactions with Command Line Programs That Expose a Text Term[cut]"
msgstr ""

#. tumbleweed/perl-Expect/description
#. leap/perl-Expect/description
msgid ""
"The Expect module is a successor of Comm.pl and a descendent of Chat.pl. It "
"more closely resembles the Tcl Expect language than its predecessors. It "
"does not contain any of the networking code found in Comm.pl. I suspect this "
"would be obsolete anyway given the advent of IO::Socket and external tools "
"such as netcat.\n"
"\n"
"Expect.pm is an attempt to have more of a switch() & case feeling to make "
"decision processing more fluid. Three separate types of debugging have been "
"implemented to make code production easier.\n"
"\n"
"It is possible to interconnect multiple file handles (and processes) much "
"like Tcl's Expect. An attempt was made to enable all the features of Tcl's "
"Expect without forcing Tcl on the victim programmer :-) .\n"
"\n"
"Please, before you consider using Expect, read the FAQs about the /\"I want "
"to automate password entry for su/ssh/scp/rsh/...\" manpage and the /\"I "
"want to use Expect to automate [anything with a buzzword]...\" manpage"
msgstr ""

#. tumbleweed/perl-Exporter-Declare/summary
#. leap/perl-Exporter-Declare/summary
msgid "Exporting done right"
msgstr ""

#. tumbleweed/perl-Exporter-Declare/description
#. leap/perl-Exporter-Declare/description
msgid ""
"Exporter::Declare is a meta-driven exporting tool. Exporter::Declare tries "
"to adopt all the good features of other exporting tools, while throwing away "
"horrible interfaces. Exporter::Declare also provides hooks that allow you to "
"add options and arguments for import. Finally, Exporter::Declare's meta-"
"driven system allows for top-notch introspection."
msgstr ""

#. tumbleweed/perl-Exporter-Lite/summary
#. leap/perl-Exporter-Lite/summary
msgid "Lightweight Exporting of Functions and Variables"
msgstr ""

#. tumbleweed/perl-Exporter-Lite/description
#. leap/perl-Exporter-Lite/description
msgid ""
"Exporter::Lite is an alternative to Exporter, intended to provide a "
"lightweight subset of the most commonly-used functionality. It supports "
"'import()', '@EXPORT' and '@EXPORT_OK' and not a whole lot else.\n"
"\n"
"Unlike Exporter, it is not necessary to inherit from Exporter::Lite; Ie you "
"don't need to write:\n"
"\n"
" @ISA = qw(Exporter::Lite);\n"
"\n"
"Exporter::Lite simply exports its import() function into your namespace. "
"This might be called a \"mix-in\" or a \"role\".\n"
"\n"
"Setting up a module to export its variables and functions is simple:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT = qw($Foo bar);\n"
"\n"
"Functions and variables listed in the '@EXPORT' package variable are "
"automatically exported if you use the module and don't explicitly list any "
"imports. Now, when you 'use My::Module', '$Foo' and 'bar()' will show up.\n"
"\n"
"Optional exports are listed in the '@EXPORT_OK' package variable:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT_OK = qw($Foo bar);\n"
"\n"
"When My::Module is used, '$Foo' and 'bar()' will _not_ show up, unless you "
"explicitly ask for them:\n"
"\n"
"    use My::Module qw($Foo bar);\n"
"\n"
"Note that when you specify one or more functions or variables to import, "
"then you must also explicitly list any of the default symbols you want to "
"use. So if you have an exporting module:\n"
"\n"
"    package Games;     our @EXPORT    = qw/ pacman defender  /;     our "
"@EXPORT_OK = qw/ galaga centipede /;\n"
"\n"
"Then if you want to use both 'pacman' and 'galaga', then you'd write:\n"
"\n"
"    use Games qw/ pacman galaga /;"
msgstr ""

#. tumbleweed/perl-Exporter-Tidy/summary
#. leap/perl-Exporter-Tidy/summary
msgid "Another way of exporting symbols"
msgstr ""

#. tumbleweed/perl-Exporter-Tidy/description
#. leap/perl-Exporter-Tidy/description
msgid ""
"This module serves as an easy, clean alternative to Exporter. Unlike "
"Exporter, it is not subclassed, but it simply exports a custom import() into "
"your namespace.\n"
"\n"
"With Exporter::Tidy, you don't need to use any package global in your "
"module. Even the subs you export can be lexically scoped."
msgstr ""

#. tumbleweed/perl-Exporter-Tiny/summary
#. leap/perl-Exporter-Tiny/summary
msgid ""
"an exporter with the features of Sub::Exporter but only core dependencies"
msgstr ""
"Sub::Exporter の機能を持ちながら、中枢部にしか依存関係を持たないエクスポータ"

#. tumbleweed/perl-Exporter-Tiny/description
#. leap/perl-Exporter-Tiny/description
msgid ""
"Exporter::Tiny supports many of Sub::Exporter's external-facing features "
"including renaming imported functions with the '-as', '-prefix' and '-"
"suffix' options; explicit destinations with the 'into' option; and "
"alternative installers with the 'installler' option. But it's written in "
"only about 40% as many lines of code and with zero non-core dependencies.\n"
"\n"
"Its internal-facing interface is closer to Exporter.pm, with configuration "
"done through the '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' package "
"variables.\n"
"\n"
"Exporter::Tiny performs most of its internal duties (including resolution of "
"tag names to sub names, resolution of sub names to coderefs, and "
"installation of coderefs into the target package) as method calls, which "
"means they can be overridden to provide interesting behaviour."
msgstr ""
"Exporter::Tiny は、インポートされた関数の名前変更 ('-as', '-prefix', '-"
"suffix' オプションもあります) などの機能を含む Sub::Exporter の外部公開機能に"
"多数対応しています。 'into' オプションによる明示的な宛先指定や 'installer' オ"
"プションによる代替インストーラにも対応しています。ただし、コードの 40% 程度の"
"行数で書かれていて、中枢以外の依存関係を持たないのが特長です。\n"
"\n"
"内部向けのインターフェイスは Exporter.pm に似た構造で、 '@EXPORT', "
"'@EXPORT_OK', '%EXPORT_TAGS' などのパッケージ変数で設定を行なうことができま"
"す。\n"
"\n"
"Exporter::Tiny は内部向けの処理の多くをメソッドコールとして実施 (タグ名からサ"
"ブ名への解決やサブ名からコード参照への解決、コード参照のターゲットパッケージ"
"へのインストールなど) しているため、興味深いふるまいを上書きできるようになっ"
"ています。"

#. tumbleweed/perl-ExtUtils-CChecker/summary
#. leap/perl-ExtUtils-CChecker/summary
#, fuzzy
msgid "Configure-Time Utilities for Using C Headers,"
msgstr "nl80211 ベースの無線 LAN ドライバ向け設定ユーティリティ"

#. tumbleweed/perl-ExtUtils-CChecker/description
#. leap/perl-ExtUtils-CChecker/description
msgid ""
"Often Perl modules are written to wrap functionality found in existing C "
"headers, libraries, or to use OS-specific features. It is useful in the "
"_Build.PL_ or _Makefile.PL_ file to check for the existance of these "
"requirements before attempting to actually build the module.\n"
"\n"
"Objects in this class provide an extension around the ExtUtils::CBuilder "
"manpage to simplify the creation of a _.c_ file, compiling, linking and "
"running it, to test if a certain feature is present.\n"
"\n"
"It may also be necessary to search for the correct library to link against, "
"or for the right include directories to find header files in. This class "
"also provides assistance here."
msgstr ""

#. tumbleweed/perl-ExtUtils-Config/summary
#. leap/perl-ExtUtils-Config/summary
#, fuzzy
msgid "A wrapper for perl's configuration"
msgstr "設定ファイルを変更するためのライブラリ"

#. tumbleweed/perl-ExtUtils-Config/description
msgid ""
"ExtUtils::Config is an abstraction around the %Config hash. By itself it is "
"not a particularly interesting module by any measure, however it ties "
"together a family of modern toolchain modules."
msgstr ""

#. tumbleweed/perl-ExtUtils-Depends/summary
#. leap/perl-ExtUtils-Depends/summary
msgid "Easily build XS extensions that depend on XS extensions"
msgstr "XS 拡張に依存した構築しやすい XS 拡張"

#. tumbleweed/perl-ExtUtils-Depends/description
#. leap/perl-ExtUtils-Depends/description
msgid ""
"This module tries to make it easy to build Perl extensions that use "
"functions and typemaps provided by other perl extensions. This means that a "
"perl extension is treated like a shared library that provides also a C and "
"an XS interface besides the perl one.\n"
"\n"
"This works as long as the base extension is loaded with the RTLD_GLOBAL flag "
"(usually done with a\n"
"\n"
"\tsub dl_load_flags {0x01}\n"
"\n"
"in the main .pm file) if you need to use functions defined in the module.\n"
"\n"
"The basic scheme of operation is to collect information about a module in "
"the instance, and then store that data in the Perl library where it may be "
"retrieved later. The object can also reformat this information into the data "
"structures required by ExtUtils::MakeMaker's WriteMakefile function.\n"
"\n"
"For information on how to make your module fit into this scheme, see "
"\"hashref = ExtUtils::Depends::load (name)\".\n"
"\n"
"When creating a new Depends object, you give it a name, which is the name of "
"the module you are building. You can also specify the names of modules on "
"which this module depends. These dependencies will be loaded automatically, "
"and their typemaps, header files, etc merged with your new object's stuff. "
"When you store the data for your object, the list of dependencies are stored "
"with it, so that another module depending on your needn't know on exactly "
"which modules yours depends.\n"
"\n"
"For example:\n"
"\n"
"  Gtk2 depends on Glib\n"
"\n"
"  Gnome2::Canvas depends on Gtk2\n"
"\n"
"  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      this command "
"automatically brings in all the stuff needed      for Glib, since Gtk2 "
"depends on it.\n"
"\n"
"When the configuration information is saved, it also includes a class method "
"called 'Inline', inheritable by your module. This allows you in your module "
"to simply say at the top:\n"
"\n"
"  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit 'Inline' "
"method\n"
"\n"
"And users of 'Mymod' who want to write inline code (using Inline) will "
"simply be able to write:\n"
"\n"
"  use Inline with => 'Mymod';\n"
"\n"
"And all the necessary header files, defines, and libraries will be added for "
"them.\n"
"\n"
"The 'Mymod::Install::Files' will also implement a 'deps' method, which will "
"return a list of any modules that 'Mymod' depends on - you will not normally "
"need to use this:\n"
"\n"
"  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"
msgstr ""

#. tumbleweed/perl-ExtUtils-Helpers/summary
#. leap/perl-ExtUtils-Helpers/summary
msgid "Various portability utilities for module builders"
msgstr ""

#. tumbleweed/perl-ExtUtils-Helpers/description
#. leap/perl-ExtUtils-Helpers/description
msgid ""
"This module provides various portable helper functions for module building "
"modules."
msgstr ""

#. tumbleweed/perl-ExtUtils-InstallPaths/summary
#. leap/perl-ExtUtils-InstallPaths/summary
msgid "Build.PL install path logic made easy"
msgstr ""

#. tumbleweed/perl-ExtUtils-InstallPaths/description
#. leap/perl-ExtUtils-InstallPaths/description
msgid ""
"This module tries to make install path resolution as easy as possible.\n"
"\n"
"When you want to install a module, it needs to figure out where to install "
"things. The nutshell version of how this works is that default installation "
"locations are determined from the ExtUtils::Config manpage, and they may be "
"individually overridden by using the 'install_path' attribute. An "
"'install_base' attribute lets you specify an alternative installation root "
"like _/home/foo_ and 'prefix' does something similar in a rather different "
"(and more complicated) way. 'destdir' lets you specify a temporary "
"installation directory like _/tmp/install_ in case you want to create "
"bundled-up installable packages.\n"
"\n"
"The following types are supported by default.\n"
"\n"
"* * lib\n"
"\n"
"  Usually pure-Perl module files ending in _.pm_ or _.pod_.\n"
"\n"
"* * arch\n"
"\n"
"  \"Architecture-dependent\" module files, usually produced by compiling "
"XS,   the Inline manpage, or similar code.\n"
"\n"
"* * script\n"
"\n"
"  Programs written in pure Perl. In order to improve reuse, you may want "
"to   make these as small as possible - put the code into modules whenever   "
"possible.\n"
"\n"
"* * bin\n"
"\n"
"  \"Architecture-dependent\" executable programs, i.e. compiled C code or   "
"something. Pretty rare to see this in a perl distribution, but it   "
"happens.\n"
"\n"
"* * bindoc\n"
"\n"
"  Documentation for the stuff in 'script' and 'bin'. Usually generated "
"from   the POD in those files. Under Unix, these are manual pages belonging "
"to   the 'man1' category. Unless explicitly set, this is only available on   "
"platforms supporting manpages.\n"
"\n"
"* * libdoc\n"
"\n"
"  Documentation for the stuff in 'lib' and 'arch'. This is usually   "
"generated from the POD in _.pm_ and _.pod_ files. Under Unix, these are   "
"manual pages belonging to the 'man3' category. Unless explicitly set,   this "
"is only available on platforms supporting manpages.\n"
"\n"
"* * binhtml\n"
"\n"
"  This is the same as 'bindoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so.\n"
"\n"
"* * libhtml\n"
"\n"
"  This is the same as 'libdoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so."
msgstr ""

#. tumbleweed/perl-ExtUtils-LibBuilder/summary
#, fuzzy
msgid "Tool to Build C Libraries"
msgstr "共有ライブラリの構築ツール"

#. tumbleweed/perl-ExtUtils-LibBuilder/description
#. leap/perl-ExtUtils-LibBuilder/summary
#. leap/perl-ExtUtils-LibBuilder/description
#, fuzzy
msgid "A tool to build C libraries."
msgstr "共有ライブラリを構築するためのツール"

#. tumbleweed/perl-ExtUtils-MakeMaker/summary
#. leap/perl-ExtUtils-MakeMaker/summary
msgid "Create a module Makefile"
msgstr ""

#. tumbleweed/perl-ExtUtils-MakeMaker/description
#. leap/perl-ExtUtils-MakeMaker/description
msgid ""
"This utility is designed to write a Makefile for an extension module from a "
"Makefile.PL. It is based on the Makefile.SH model provided by Andy Dougherty "
"and the perl5-porters.\n"
"\n"
"It splits the task of generating the Makefile into several subroutines that "
"can be individually overridden. Each subroutine returns the text it wishes "
"to have written to the Makefile.\n"
"\n"
"As there are various Make programs with incompatible syntax, which use "
"operating system shells, again with incompatible syntax, it is important for "
"users of this module to know which flavour of Make a Makefile has been "
"written for so they'll use the correct one and won't have to face the "
"possibly bewildering errors resulting from using the wrong one.\n"
"\n"
"On POSIX systems, that program will likely be GNU Make; on Microsoft "
"Windows, it will be either Microsoft NMake, DMake or GNU Make. See the "
"section on the L</\"MAKE\"> parameter for details.\n"
"\n"
"ExtUtils::MakeMaker (EUMM) is object oriented. Each directory below the "
"current directory that contains a Makefile.PL is treated as a separate "
"object. This makes it possible to write an unlimited number of Makefiles "
"with a single invocation of WriteMakefile().\n"
"\n"
"All inputs to WriteMakefile are Unicode characters, not just octets. EUMM "
"seeks to handle all of these correctly. It is currently still not possible "
"to portably use Unicode characters in module names, because this requires "
"Perl to handle Unicode filenames, which is not yet the case on Windows."
msgstr ""

#. tumbleweed/perl-ExtUtils-MakeMaker-CPANfile/summary
#. leap/perl-ExtUtils-MakeMaker-CPANfile/summary
msgid "Cpanfile Support for Eumm"
msgstr ""

#. tumbleweed/perl-ExtUtils-MakeMaker-CPANfile/description
#. leap/perl-ExtUtils-MakeMaker-CPANfile/description
msgid ""
"ExtUtils::MakeMaker::CPANfile loads 'cpanfile' in your distribution and "
"modifies parameters for 'WriteMakefile' in your Makefile.PL. Just use it "
"instead of ExtUtils::MakeMaker (which should be loaded internally), and "
"prepare 'cpanfile'.\n"
"\n"
"As of version 0.03, ExtUtils::MakeMaker::CPANfile also removes WriteMakefile "
"parameters that the installed version of ExtUtils::MakeMaker doesn't know, "
"to avoid warnings."
msgstr ""

#. tumbleweed/perl-ExtUtils-MakeMaker-mini/summary
#. leap/perl-ExtUtils-MakeMaker-mini/summary
msgid "Dependency pkg for perl-ExtUtils-MakeMaker"
msgstr ""

#. tumbleweed/perl-ExtUtils-MakeMaker-mini/description
#. leap/perl-ExtUtils-MakeMaker-mini/description
msgid ""
"This package is a dependency package to keep track of perl Modules needed to "
"build perl-ExtUtils-MakeMaker. It is only used for build to avoid build "
"loops of perl-ExtUtils-MakeMaker and its dependent packages."
msgstr ""

#. tumbleweed/perl-ExtUtils-Manifest/summary
#. tumbleweed/perl-ExtUtils-Manifest/description
#. leap/perl-ExtUtils-Manifest/summary
#. leap/perl-ExtUtils-Manifest/description
msgid "utilities to write and check a MANIFEST file"
msgstr ""

#. tumbleweed/perl-ExtUtils-PkgConfig/summary
#. leap/perl-ExtUtils-PkgConfig/summary
msgid "Simplistic Interface to Pkg-Config"
msgstr "Pkg-Config に対する単純なインターフェイス"

#. tumbleweed/perl-ExtUtils-PkgConfig/description
#. leap/perl-ExtUtils-PkgConfig/description
msgid ""
"The pkg-config program retrieves information about installed libraries, "
"usually for the purposes of compiling against and linking to them.\n"
"\n"
"ExtUtils::PkgConfig is a very simplistic interface to this utility, intended "
"for use in the Makefile.PL of perl extensions which bind libraries that pkg-"
"config knows. It is really just boilerplate code that you would've written "
"yourself."
msgstr ""
"pkg-config プログラムはインストールされたライブラリに関する情報を取得します。"
"通常はそれらのライブラリを利用してコンパイルしたり、リンクしたりする際に使用"
"します。\n"
"\n"
"ExtUtils::PkgConfig はこのユーティリティに対するとてもシンプルなインターフェ"
"イスで、 Makefile.PL から pkg-config が知っているライブラリに対して、問い合わ"
"せを実施するのに使用します。これはご自分でも記述可能な、文例コードとしても利"
"用できます。"

#. tumbleweed/perl-ExtUtils-Typemaps-Default/summary
#. leap/perl-ExtUtils-Typemaps-Default/summary
msgid "A set of useful typemaps"
msgstr ""

#. tumbleweed/perl-ExtUtils-Typemaps-Default/description
#. leap/perl-ExtUtils-Typemaps-Default/description
msgid ""
"'ExtUtils::Typemaps::Default' is an 'ExtUtils::Typemaps' subclass that "
"provides a set of default mappings (in addition to what perl itself "
"provides). These default mappings are currently defined as the combination "
"of the mappings provided by the following typemap classes which are provided "
"in this distribution:\n"
"\n"
"the ExtUtils::Typemaps::ObjectMap manpage, the ExtUtils::Typemaps::STL "
"manpage, the ExtUtils::Typemaps::Basic manpage"
msgstr ""

#. tumbleweed/perl-Fennec-Lite/summary
#. leap/perl-Fennec-Lite/summary
msgid "Minimalist Fennec, the commonly used bits."
msgstr ""

#. tumbleweed/perl-Fennec-Lite/description
#. leap/perl-Fennec-Lite/description
msgid ""
"the Fennec manpage does a ton, but it may be hard to adopt it all at once. "
"It also is a large project, and has not yet been fully split into component "
"projects. Fennec::Lite takes a minimalist approach to do for Fennec what "
"Mouse does for Moose.\n"
"\n"
"Fennec::Lite is a single module file with no non-core dependencies. It can "
"easily be used by any project, either directly, or by copying it into your "
"project. The file itself is less than 300 lines of code at the time of this "
"writing, that includes whitespace.\n"
"\n"
"This module does not cover any of the more advanced features such as result "
"capturing or SPEC workflows. This module only covers test grouping and group "
"randomization. You can also use the FENNEC_ITEM variable with a group name "
"or line number to run a specific test group only. Test::Builder is used "
"under the hood for TAP output."
msgstr ""

#. tumbleweed/perl-File-BaseDir/summary
#. leap/perl-File-BaseDir/summary
#, fuzzy
msgid "Use the Freedesktop.org base directory specification"
msgstr "freedesktop.org デスクトップメニュー仕様を実装するライブラリ"

#. tumbleweed/perl-File-BaseDir/description
#. leap/perl-File-BaseDir/description
msgid ""
"This module can be used to find directories and files as specified by the "
"Freedesktop.org Base Directory Specification. This specifications gives a "
"mechanism to locate directories for configuration, application data and "
"cache data. It is suggested that desktop applications for e.g. the Gnome, "
"KDE or Xfce platforms follow this layout. However, the same layout can just "
"as well be used for non-GUI applications.\n"
"\n"
"This module forked from the File::MimeInfo manpage.\n"
"\n"
"This module follows version 0.6 of BaseDir specification."
msgstr ""

#. tumbleweed/perl-File-Copy-Recursive/summary
#. leap/perl-File-Copy-Recursive/summary
#, fuzzy
msgid "Perl extension for recursively copying files and directories"
msgstr "サブルーチンを簡単にオーバーライドできる Perl 拡張"

#. tumbleweed/perl-File-Copy-Recursive/description
#. leap/perl-File-Copy-Recursive/description
msgid ""
"This module copies and moves directories recursively (or single files, "
"well... singley) to an optional depth and attempts to preserve each file or "
"directory's mode."
msgstr ""

#. tumbleweed/perl-File-DesktopEntry/summary
#. leap/perl-File-DesktopEntry/summary
msgid "Object to handle .desktop files"
msgstr ""

#. tumbleweed/perl-File-DesktopEntry/description
#. leap/perl-File-DesktopEntry/description
msgid ""
"This module is designed to work with _.desktop_ files. The format of these "
"files is specified by the freedesktop \"Desktop Entry\" specification. This "
"module can parse these files but also knows how to run the applications "
"defined by these files.\n"
"\n"
"For this module version 1.0 of the specification was used.\n"
"\n"
"This module was written to support File::MimeInfo::Applications.\n"
"\n"
"Please remember: case is significant for the names of Desktop Entry keys."
msgstr ""

#. tumbleweed/perl-File-Find-Rule/summary
#. leap/perl-File-Find-Rule/summary
#, fuzzy
msgid "Alternative interface to File::Find"
msgstr "PulseAudio 向けクライアントインターフェイス"

#. tumbleweed/perl-File-Find-Rule/description
#. leap/perl-File-Find-Rule/description
msgid ""
"File::Find::Rule is a friendlier interface to File::Find. It allows you to "
"build rules which specify the desired files and directories."
msgstr ""

#. tumbleweed/perl-File-Find-Rule-Perl/summary
#. leap/perl-File-Find-Rule-Perl/summary
msgid "Common rules for searching for Perl things"
msgstr ""

#. tumbleweed/perl-File-Find-Rule-Perl/description
#. leap/perl-File-Find-Rule-Perl/description
msgid ""
"I write a lot of things that muck with Perl files. And it always annoyed me "
"that finding \"perl files\" requires a moderately complex the File::Find::"
"Rule manpage pattern.\n"
"\n"
"*File::Find::Rule::Perl* provides methods for finding various types Perl-"
"related files, or replicating search queries run on a distribution in "
"various parts of the CPAN ecosystem."
msgstr ""

#. tumbleweed/perl-File-HomeDir/summary
#. leap/perl-File-HomeDir/summary
#, fuzzy
msgid "Find your home and other directories on any platform"
msgstr "プラットフォームに依存せずお使いのホームディレクトリなどを取得"

#. tumbleweed/perl-File-HomeDir/description
#. leap/perl-File-HomeDir/description
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" "
"by a user (typicaly your user) and to solve the various issues that arise "
"trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, "
"making it relatively trivial to create Perl software that works elegantly "
"and correctly no matter where you run it.\n"
"\n"
"This module provides two main interfaces.\n"
"\n"
"The first is a modern the File::Spec manpage-style interface with a "
"consistent OO API and different implementation modules to support various "
"platforms. You are *strongly* recommended to use this interface.\n"
"\n"
"The second interface is for legacy support of the original 0.07 interface "
"that exported a 'home()' function by default and tied the '%~' variable.\n"
"\n"
"It is generally not recommended that you use this interface, but due to back-"
"compatibility reasons they will remain supported until at least 2010.\n"
"\n"
"The '%~' interface has been deprecated. Documentation was removed in 2009, "
"Unit test were removed in 2011, usage will issue warnings from 2012, and the "
"interface will be removed entirely in 2015 (in line with the general Perl "
"toolchain convention of a 10 year support period for legacy APIs that are "
"potentially or actually in common use)."
msgstr ""

#. tumbleweed/perl-File-Listing/summary
#. leap/perl-File-Listing/summary
msgid "parse directory listing"
msgstr "ディレクトリ一覧の処理"

#. tumbleweed/perl-File-Listing/description
#. leap/perl-File-Listing/description
msgid ""
"This module exports a single function called parse_dir(), which can be used "
"to parse directory listings.\n"
"\n"
"The first parameter to parse_dir() is the directory listing to parse. It can "
"be a scalar, a reference to an array of directory lines or a glob "
"representing a filehandle to read the directory listing from.\n"
"\n"
"The second parameter is the time zone to use when parsing time stamps in the "
"listing. If this value is undefined, then the local time zone is assumed.\n"
"\n"
"The third parameter is the type of listing to assume. Currently supported "
"formats are 'unix', 'apache' and 'dosftp'. The default value is 'unix'. "
"Ideally, the listing type should be determined automatically.\n"
"\n"
"The fourth parameter specifies how unparseable lines should be treated. "
"Values can be 'ignore', 'warn' or a code reference. Warn means that the perl "
"warn() function will be called. If a code reference is passed, then this "
"routine will be called and the return value from it will be incorporated in "
"the listing. The default is 'ignore'.\n"
"\n"
"Only the first parameter is mandatory.\n"
"\n"
"The return value from parse_dir() is a list of directory entries. In a "
"scalar context the return value is a reference to the list. The directory "
"entries are represented by an array consisting of [ $filename, $filetype, "
"$filesize, $filetime, $filemode ]. The $filetype value is one of the letters "
"'f', 'd', 'l' or '?'. The $filetime value is the seconds since Jan 1, 1970. "
"The $filemode is a bitmask like the mode returned by stat()."
msgstr ""
"このモジュールでは、ディレクトリ一覧を処理するために使用する parse_dir() と呼"
"ばれる関数を単独で公開しています。\n"
"\n"
"parse_dir() に対する最初のパラメータは、処理対象のディレクトリ一覧です。スカ"
"ラー値として指定することができるほか、ディレクトリ行の配列に対する参照や、"
"ディレクトリ一覧を読み込むファイルハンドルのグロブを指定することもできま"
"す。\n"
"\n"
"2 つめのパラメータは、一覧内でタイムスタンプを処理する際に使用するタイムゾー"
"ンを指定します。この値を undef にすると、ローカルのタイムゾーンを使用しま"
"す。\n"
"\n"
"3 つめのパラメータは、一覧のデータタイプを指定します。現時点でサポートされて"
"いる形式としては 'unix', 'apache', 'dosftp' があります。既定値は 'unix' で"
"す。理想的には自動的に一覧のデータタイプを判断すべきものです。\n"
"\n"
"4 つめのパラメータでは、処理不可能な行をどのように扱うのかを指定しま"
"す。'ignore', 'warn' またはコード参照として指定します。 'warn' を指定する"
"と、 Perl のwarn() 関数が呼び出されます。コード参照を指定した場合は、参照不可"
"能な行で指定したコードが呼び出され、返り値が一覧内に表示されます。既定値は "
"'ignore' です。\n"
"\n"
"最初のパラメータのみが必須で、それ以外は任意です。\n"
"\n"
"parse_dir() からの返り値はディレクトリ項目の一覧です。返り値はスカラー値で、"
"一覧への参照になっています。ディレクトリ項目はそれぞれ [ $filename (ファイル"
"名), $filetype (ファイルタイプ), $filesize (ファイルサイズ), $filetime (タイ"
"ムスタンプ), $filemode(ファイルモード) ] の配列になっています。 $filetime の"
"値は 1970/01/01 からの経過秒数で、 $filemode は stat() で返されるようなビット"
"マスク表記のモード値です。"

#. tumbleweed/perl-File-MMagic/summary
#. leap/perl-File-MMagic/summary
msgid "Guess file type"
msgstr "ファイルタイプの推測"

#. tumbleweed/perl-File-MMagic/description
#. leap/perl-File-MMagic/description
msgid ""
"checktype_filename(), checktype_filehandle() and checktype_contents returns "
"string contains file type with MIME mediatype format."
msgstr ""
"checktype_filename(), checktype_filehandle(), checktype_contents は、それぞ"
"れ MIME メディアタイプ形式でファイルの形式を返します。"

#. tumbleweed/perl-File-Mork/summary
#. leap/perl-File-Mork/summary
msgid "Module to Read Mozilla Url History Files"
msgstr ""

#. tumbleweed/perl-File-Mork/description
#. leap/perl-File-Mork/description
msgid ""
"This is a module that can read the Mozilla URL history file -- normally "
"$HOME/.mozilla/default/*.slt/history.dat -- and extract the id, url, name, "
"hostname, first visted dat, last visited date and visit count.\n"
"\n"
"To find your history file it might be worth using *Mozilla::Backup* which "
"has some platform-independent code for finding the profiles of various "
"Mozilla-isms (including Firefox, Camino, K-Meleon, etc.)."
msgstr ""

#. tumbleweed/perl-File-Path/summary
#. leap/perl-File-Path/summary
msgid "Create or remove directory trees"
msgstr ""

#. tumbleweed/perl-File-Path/description
#. leap/perl-File-Path/description
msgid ""
"This module provide a convenient way to create directories of arbitrary "
"depth and to delete an entire directory subtree from the filesystem."
msgstr ""

#. tumbleweed/perl-File-Path-Tiny/summary
#. leap/perl-File-Path-Tiny/summary
msgid ""
"Recursive Versions of Mkdir() and Rmdir() Without As Much Overhead As Fi[cut]"
msgstr ""

#. tumbleweed/perl-File-Path-Tiny/description
#. leap/perl-File-Path-Tiny/description
msgid ""
"The goal here is simply to provide recursive versions of mkdir() and rmdir() "
"with as little code and overhead as possible.\n"
"\n"
"This module is in no way meant to derogate File::Path and is in no way an "
"endorsement to go out and replace all use of File::Path with File::Path::"
"Tiny.\n"
"\n"
"File::Path is very good at what it does but there's simply a lot happening "
"that we can do without much of the time.\n"
"\n"
"Here are some things File::Path has/does that this module attempts to do "
"without:\n"
"\n"
"* * multiple interfaces\n"
"\n"
"Backwards compatibility brings in a lot of code and logic that we don't need "
"from here on out.\n"
"\n"
"* * chdir()s\n"
"\n"
"It does a ton of chdir()s which could leave you somewhere you're not "
"planning on being and requires much more overhead to do.\n"
"\n"
"* * can croak not allowing you to detect and handle failure\n"
"\n"
"Just let me handle errors how I want. Don't make my entire app die or have "
"to wrap it in an eval\n"
"\n"
"* * A well intentioned output system\n"
"\n"
"Just let me do the output how I want. (Nothing, As HTML, print to a "
"filehandle, etc...)\n"
"\n"
"* * A well intentioned and experimental (IE subject to change) error   "
"handling system.\n"
"\n"
"Just keep it simple and detect failure via a boolean check and do what I "
"want with the error. See \"How can I make/remove multiple paths?\"\n"
"\n"
"* * According to its POD, removing a tree is apparently not safe unless "
"you   tell it to be with the ‘safe’ or 'keep_root' attributes.\n"
"\n"
"Seems like that should just happen, I don't want to worry about accidentally "
"removing / when I pass it /tmp"
msgstr ""

#. tumbleweed/perl-Image-ExifTool/perl-File-RandomAccess/summary
#. leap/perl-Image-ExifTool/perl-File-RandomAccess/summary
#, fuzzy
msgid "Random access reads of sequential file or scalar"
msgstr "シーケンシャル形式のファイルやスカラ値をランダムアクセスするモジュール"

#. tumbleweed/perl-Image-ExifTool/perl-File-RandomAccess/description
#. leap/perl-Image-ExifTool/perl-File-RandomAccess/description
msgid ""
"Allows random access to sequential file by buffering the file if necessary. "
"Also allows access to data in memory to be accessed as if it were a file."
msgstr ""
"順次アクセスしかできないファイルに対して、必要であればバッファを設定してラン"
"ダムアクセスできるようにします。メモリ内のデータをファイルであるかのように扱"
"うこともできます。"

#. tumbleweed/perl-File-Remove/summary
#. leap/perl-File-Remove/summary
#, fuzzy
msgid "Remove files and directories"
msgstr "ファイルやレコードセットに対する差分検出"

#. tumbleweed/perl-File-Remove/description
#. leap/perl-File-Remove/description
msgid ""
"*File::Remove::remove* removes files and directories. It acts like\n"
"*/bin/rm*, for the most part. Although 'unlink' can be given a list of "
"files, it will not remove directories; this module remedies that. It also "
"accepts wildcards, * and ?, as arguments for filenames.\n"
"\n"
"*File::Remove::trash* accepts the same arguments as *remove*, with the "
"addition of an optional, infrequently used \"other platforms\" hashref."
msgstr ""

#. tumbleweed/perl-File-Rsync/summary
#. leap/perl-File-Rsync/summary
msgid "Perl Module Interface to Rsync(1) F<Http://Rsync.Samba.Org/Rsync/>"
msgstr ""

#. tumbleweed/perl-File-Rsync/description
#. leap/perl-File-Rsync/description
msgid ""
"Perl Convenience wrapper for the rsync(1) program. Written for _rsync-2.3.2_ "
"and updated for _rsync-3.1.1_ but should perform properly with most recent "
"versions."
msgstr ""

#. tumbleweed/perl-File-ShareDir/summary
#. leap/perl-File-ShareDir/summary
msgid "Locate per-dist and per-module shared files"
msgstr ""
"ディストリビューションごと、およびモジュールごとの共有ファイルの場所検索"

#. tumbleweed/perl-File-ShareDir/description
msgid ""
"The intent of the File::ShareDir manpage is to provide a companion to the "
"Class::Inspector manpage and the File::HomeDir manpage, modules that take a "
"process that is well-known by advanced Perl developers but gets a little "
"tricky, and make it more available to the larger Perl community.\n"
"\n"
"Quite often you want or need your Perl module (CPAN or otherwise) to have "
"access to a large amount of read-only data that is stored on the file-system "
"at run-time.\n"
"\n"
"On a linux-like system, this would be in a place such as /usr/share, however "
"Perl runs on a wide variety of different systems, and so the use of any one "
"location is unreliable.\n"
"\n"
"Perl provides a little-known method for doing this, but almost nobody is "
"aware that it exists. As a result, module authors often go through some very "
"strange ways to make the data available to their code.\n"
"\n"
"The most common of these is to dump the data out to an enormous Perl data "
"structure and save it into the module itself. The result are enormous multi-"
"megabyte .pm files that chew up a lot of memory needlessly.\n"
"\n"
"Another method is to put the data \"file\" after the __DATA__ compiler tag "
"and limit yourself to access as a filehandle.\n"
"\n"
"The problem to solve is really quite simple.\n"
"\n"
"  1. Write the data files to the system at install time.\n"
"\n"
"  2. Know where you put them at run-time.\n"
"\n"
"Perl's install system creates an \"auto\" directory for both every "
"distribution and for every module file.\n"
"\n"
"These are used by a couple of different auto-loading systems to store code "
"fragments generated at install time, and various other modules written by "
"the Perl \"ancient masters\".\n"
"\n"
"But the same mechanism is available to any dist or module to store any sort "
"of data."
msgstr ""
"File::ShareDir の目的は、 Class::Inspector や File::HomeDir に対する手引きと"
"なることです。これらのモジュールは Perl を利用する熟練した開発者がよく知るも"
"のですが、少し奇妙な仕組みであるため、より広い Perl のコミュニティに向けて作"
"られています。\n"
"\n"
"ファイルシステム内に保存された巨大なデータファイルに対して、読み込みのみの高"
"速なアクセスを行なう Perl モジュール (CPAN など) は、よく必要とされるもので"
"す。\n"
"\n"
"Linux 系のシステムでは、これらは /usr/share などのディレクトリに配置されます"
"が、Perl は幅広いシステムで使用されるものであるため、このディレクトリをそのま"
"ま利用することはできません。\n"
"\n"
"Perl はこれを行なうために少し知られた機能を提供していますが、それが存在してい"
"ることはあまり知られていません。結果として、モジュールの作者はコード内からそ"
"れらの共有データを使用する際、奇妙な方法を実装して実現している状況です。\n"
"\n"
"よくあるやり方としては、主に巨大な Perl のデータ構造を出力し、モジュール内に"
"保存するようなやり方です。出力結果は巨大な .pm ファイルになるため、不要なメモ"
"リを対象に消費することになってしまいます。\n"
"\n"
"もう 1 つの方法はコンパイラタグの __DATA__ を使用する方法で、データ \"ファイ"
"ル\" をその後ろに配置して、モジュール自身からのみアクセスできるようにしま"
"す。\n"
"\n"
"以上のことから、解決すべき問題は非常にシンプルです。\n"
"\n"
"  1. インストール時に、システム内にデータファイルを書き込む\n"
"\n"
"  2. 実行時にその場所を知ることができるようにする\n"
"\n"
"Perl のインストールシステムは、それぞれの配布物および各モジュールファイルに対"
"して、 \"auto\" というディレクトリを作成します。\n"
"\n"
"これらは様々な自動読み込みのシステムで使用しているもので、インストール時に"
"コード以外の残りを保存する、というやり方は、 \"長老\" とも呼ばれる様々な "
"Perl モジュールで記述されています。\n"
"\n"
"同様の仕組みを、任意の配布物やモジュールで利用できるようにしたものが本モ"
"ジュールです。"

#. tumbleweed/perl-File-ShareDir-Install/summary
#. leap/perl-File-ShareDir-Install/summary
msgid "Install shared files"
msgstr ""

#. tumbleweed/perl-File-ShareDir-Install/description
msgid ""
"File::ShareDir::Install allows you to install read-only data files from a "
"distribution. It is a companion module to File::ShareDir, which allows you "
"to locate these files after installation.\n"
"\n"
"It is a port of Module::Install::Share to ExtUtils::MakeMaker with the "
"improvement of only installing the files you want; '.svn', '.git' and other "
"source-control junk will be ignored.\n"
"\n"
"Please note that this module installs read-only data files; empty "
"directories will be ignored."
msgstr ""

#. tumbleweed/perl-File-ShareDir-ProjectDistDir/summary
#. tumbleweed/perl-File-ShareDir-ProjectDistDir/description
#. leap/perl-File-ShareDir-ProjectDistDir/summary
#. leap/perl-File-ShareDir-ProjectDistDir/description
msgid ""
"Simple set-and-forget using of a '/share' directory in your projects root"
msgstr ""

#. tumbleweed/perl-File-Slurp/summary
#. leap/perl-File-Slurp/summary
msgid "Simple and Efficient Reading/Writing of Complete Files"
msgstr "ファイル全体を読み込んだり書き込んだりするためのシンプルで効果的な方法"

#. tumbleweed/perl-File-Slurp/description
#. leap/perl-File-Slurp/description
msgid ""
"This module provides subs that allow you to read or write entire files with "
"one simple call. They are designed to be simple to use, have flexible ways "
"to pass in or get the file contents and to be very efficient. There is also "
"a sub to read in all the files in a directory other than '.' and '..'\n"
"\n"
"These slurp/spew subs work for files, pipes and sockets, stdio, pseudo-"
"files, and the DATA handle. Read more about why slurping files is a good "
"thing in the file 'slurp_article.pod' in the extras/ directory.\n"
"\n"
"If you are interested in how fast these calls work, check out the "
"slurp_bench.pl program in the extras/ directory. It compares many different "
"forms of slurping. You can select the I/O direction, context and file sizes. "
"Use the --help option to see how to run it."
msgstr ""
"このモジュールは、ファイルを一括で読み込んだり、書き込んだりするための sub を"
"提供しています。これらはシンプルで使いやすくなるように作られていて、読み込み"
"結果や書き込むべき内容は、柔軟で効果的に指定することができます。また、 '.' "
"や '..' を除くディレクトリについて、これらの中にあるファイルを読み込む機能も"
"用意されています。\n"
"\n"
"これらの slurp/spew サブは、ファイルのほかパイプやソケット、標準入出力や擬似"
"ファイル、データハンドルに対しても動作させることができます。ファイルの一括読"
"み込みがなぜ必要なのかについて、詳しくは extras/ ディレクトリ内にあ"
"る'slurp_article.pod' ファイルをお読みください。\n"
"\n"
"このコールがなぜこれだけ高速に動作するのかについて知りたい場合は、 extras/ "
"ディレクトリ内にある slurp_bench.pl プログラムをお読みください。ここでは様々"
"な形式での slurp 処理が記述されています。ここでは I/O の方向やコンテキスト、"
"ファイルサイズなども指定することができます。詳しくは --help オプションを実行"
"して、表示されるヘルプをお読みください。"

#. tumbleweed/perl-File-Slurp-Tiny/summary
#. leap/perl-File-Slurp-Tiny/summary
msgid "Simple, Sane and Efficient File Slurper [Discouraged]"
msgstr ""

#. tumbleweed/perl-File-Slurp-Tiny/description
#. tumbleweed/perl-File-Slurper/description
#. leap/perl-File-Slurp-Tiny/description
#. leap/perl-File-Slurper/description
msgid ""
"This module provides functions for fast and correct slurping and spewing. "
"All functions are optionally exported."
msgstr ""

#. tumbleweed/perl-File-Slurp-Unicode/summary
#. leap/perl-File-Slurp-Unicode/summary
msgid "Reading/Writing of Complete Files with Character Encoding Support"
msgstr ""

#. tumbleweed/perl-File-Slurp-Unicode/description
#. leap/perl-File-Slurp-Unicode/description
msgid ""
"This module wraps the File::Slurp manpage and adds character encoding "
"support through the *'encoding'* parameter. It exports the same functions "
"which take all the same parameters as File::Slurp. Please see the the File::"
"Slurp manpage documentation for basic usage; only the differences are "
"described from here on out."
msgstr ""

#. tumbleweed/perl-File-Slurper/summary
#. leap/perl-File-Slurper/summary
msgid "Simple, Sane and Efficient Module to Slurp a File"
msgstr ""

#. tumbleweed/perl-File-Tail/summary
#. leap/perl-File-Tail/summary
msgid "Perl extension for reading from continously updated files"
msgstr "継続的に更新されるファイルを読み込むための Perl 拡張"

#. tumbleweed/perl-File-Tail/description
#. leap/perl-File-Tail/description
msgid ""
"The primary purpose of File::Tail is reading and analysing log files while "
"they are being written, which is especialy usefull if you are monitoring the "
"logging process with a tool like Tobias Oetiker's MRTG.\n"
"\n"
"The module tries very hard NOT to \"busy-wait\" on a file that has little "
"traffic. Any time it reads new data from the file, it counts the number of "
"new lines, and divides that number by the time that passed since data were "
"last written to the file before that. That is considered the average time "
"before new data will be written. When there is no new data to read, 'File::"
"Tail' sleeps for that number of seconds. Thereafter, the waiting time is "
"recomputed dynamicaly. Note that 'File::Tail' never sleeps for more than the "
"number of seconds set by 'maxinterval'.\n"
"\n"
"If the file does not get altered for a while, 'File::Tail' gets suspicious "
"and startschecking if the file was truncated, or moved and recreated. If "
"anything like that had happened, 'File::Tail' will quietly reopen the file, "
"and continue reading. The only way to affect what happens on reopen is by "
"setting the reset_tail parameter (see below). The effect of this is that the "
"scripts need not be aware when the logfiles were rotated, they will just "
"quietly work on.\n"
"\n"
"Note that the sleep and time used are from Time::HiRes, so this module "
"should do the right thing even if the time to sleep is less than one "
"second.\n"
"\n"
"The logwatch script (also included) demonstrates several ways of calling the "
"methods."
msgstr ""
"File::Tail の主な目的は、今まさに書き込みが行なわれているログファイルに対し"
"て、読み込みや分析を行なうことにあります。特に Tobias Oetiker 氏の MRTG な"
"ど、プロセスを監視しているような場合に便利です。\n"
"\n"
"このモジュールは、システムに負荷をかけるような \"ビジーウエイト\" を使用しな"
"いように努力して作られています。ファイルに対して新しいデータが書き込まれる"
"と、新しい行の行数を数えて、その行数を前回の書き込み日時からの経過時間で割る"
"ことで、平均時間を計算します。新しいデータがない場合、 'File::Tail' は数秒程"
"度スリープします。このとき、待機時間は動的に計算されます。なお、 'File::"
"Tail' は 'maxinterval' で指定した値よりも長く待つことはありません。\n"
"\n"
"ファイルに対してしばらく書き込みがないと、 'File::Tail' はファイルが切り詰め"
"られてしまったり、移動や再作成されてしまったかどうかを疑い、チェックを行なう"
"ようになっています。切り詰め、移動、再作成のいずれかが発生していると、 "
"'File::Tail' は特にメッセージを表示することなくファイルを開き直し、処理を続行"
"します。開き直す処理に影響があるパラメータとして、唯一のものが reset_tail パ"
"ラメータとなります (下記をお読みください) 。ここで指定した値は、ログファイル"
"の切り替えなどのチェックを行なう間隔になります。\n"
"\n"
"なお、 sleep と time の各関数は Time::HiRes のものを使用しているため、スリー"
"プ時間が 1 秒未満の場合であったとしても、正しく動作するようになっています。\n"
"\n"
"logwatch スクリプト (添付) では、これらのメソッドを呼び出した場合の処理をデモ"
"ンストレーションしています。"

#. tumbleweed/perl-File-Temp/summary
#. leap/perl-File-Temp/summary
msgid "Return name and handle of a temporary file safely"
msgstr ""

#. tumbleweed/perl-File-Temp/description
#. leap/perl-File-Temp/description
msgid ""
"'File::Temp' can be used to create and open temporary files in a safe way. "
"There is both a function interface and an object-oriented interface. The "
"File::Temp constructor or the tempfile() function can be used to return the "
"name and the open filehandle of a temporary file. The tempdir() function can "
"be used to create a temporary directory.\n"
"\n"
"The security aspect of temporary file creation is emphasized such that a "
"filehandle and filename are returned together. This helps guarantee that a "
"race condition can not occur where the temporary file is created by another "
"process between checking for the existence of the file and its opening. "
"Additional security levels are provided to check, for example, that the "
"sticky bit is set on world writable directories. See the \"safe_level\" "
"manpage for more information.\n"
"\n"
"For compatibility with popular C library functions, Perl implementations of "
"the mkstemp() family of functions are provided. These are, mkstemp(), "
"mkstemps(), mkdtemp() and mktemp().\n"
"\n"
"Additionally, implementations of the standard POSIX tmpnam() and tmpfile() "
"functions are provided if required.\n"
"\n"
"Implementations of mktemp(), tmpnam(), and tempnam() are provided, but "
"should be used with caution since they return only a filename that was valid "
"when function was called, so cannot guarantee that the file will not exist "
"by the time the caller opens the filename.\n"
"\n"
"Filehandles returned by these functions support the seekable methods."
msgstr ""

#. tumbleweed/perl-File-Touch/summary
#. leap/perl-File-Touch/summary
msgid ""
"Update File Access and Modification Times, Optionally Creating Files If "
"Needed"
msgstr ""

#. tumbleweed/perl-File-Touch/description
#. leap/perl-File-Touch/description
msgid ""
"Here's a list of arguments that can be used with the object-oriented "
"contruction:\n"
"\n"
"* atime_only => [0|1]\n"
"\n"
"If nonzero, change only the access time of files. Default is zero.\n"
"\n"
"* mtime_only => [0|1]\n"
"\n"
"If nonzero, change only the modification time of files. Default is zero.\n"
"\n"
"* no_create => [0|1]\n"
"\n"
"If nonzero, do not create new files. Default is zero.\n"
"\n"
"* reference => $reference_file\n"
"\n"
"If defined, use timestamps from this file instead of current time. The "
"timestamps are read from the reference file when the object is created, not "
"when '<-'touch>> is invoked. Default is undefined.\n"
"\n"
"* time => $time\n"
"\n"
"If defined, then this value will be used for both access time and "
"modification time, whichever of those are set. This time is overridden by "
"the 'atime' and 'mtime' arguments, if you use them.\n"
"\n"
"* atime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"access time.\n"
"\n"
"* mtime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"modification time."
msgstr ""

#. tumbleweed/perl-File-Which/summary
#. leap/perl-File-Which/summary
msgid "Perl implementation of the which utility as an API"
msgstr "which ユーティリティを Perl API として実装したもの"

#. tumbleweed/perl-File-Which/description
#. leap/perl-File-Which/description
#, fuzzy
msgid ""
"File::Which finds the full or relative paths to executable programs on the "
"system. This is normally the function of 'which' utility. 'which' is "
"typically implemented as either a program or a built in shell command. On "
"some platforms, such as Microsoft Windows it is not provided as part of the "
"core operating system. This module provides a consistent API to this "
"functionality regardless of the underlying platform.\n"
"\n"
"The focus of this module is correctness and portability. As a consequence "
"platforms where the current directory is implicitly part of the search path "
"such as Microsoft Windows will find executables in the current directory, "
"whereas on platforms such as UNIX where this is not the case executables in "
"the current directory will only be found if the current directory is "
"explicitly added to the path.\n"
"\n"
"If you need a portable 'which' on the command line in an environment that "
"does not provide it, install App::pwhich which provides a command line "
"interface to this API."
msgstr ""
"File::Which はシステム上に存在する実行可能なプログラムを、絶対パスまたは相対"
"パスで返すモジュールです。通常は 'which' ユーティリティが実施する機能で、一般"
"的に単体のプログラムか、シェル内蔵コマンドとして提供されているものです。 "
"Microsoft Windows などのプラットフォームでは、オペレーティングシステムの中枢"
"としては提供されていないものです。このモジュールは、動作するプラットフォーム"
"とは無関係に、この機能を安定した API として提供します。\n"
"\n"
"このモジュールは、主に正しさと移植性を重視して作られています。そのため、 "
"Microsoft Windows などのようにカレントディレクトリを暗黙のうちに検索パスに入"
"れてしまうプラットフォームの場合は、カレントディレクトリも検索対象になりま"
"す。 UNIX のようなプラットフォームでは、明示的に指定しない限り、カレントディ"
"レクトリは検索対象とはなりません。\n"
"\n"
"コマンドライン環境で 'which' コマンドが提供されていないシステムで、そのコマン"
"ドを利用したい場合は、 App::pwhich モジュールをインストールしてお使いくださ"
"い。こちらは、この API のコマンドラインインターフェイスを提供します。"

#. tumbleweed/perl-File-chdir/summary
#. leap/perl-File-chdir/summary
msgid "More Sensible Way to Change Directories"
msgstr ""

#. tumbleweed/perl-File-chdir/description
#. leap/perl-File-chdir/description
msgid ""
"Perl's 'chdir()' has the unfortunate problem of being very, very, very "
"global. If any part of your program calls 'chdir()' or if any library you "
"use calls 'chdir()', it changes the current working directory for the\n"
"*whole* program.\n"
"\n"
"This sucks.\n"
"\n"
"File::chdir gives you an alternative, '$CWD' and '@CWD'. These two variables "
"combine all the power of 'chdir()', the File::Spec manpage and the Cwd "
"manpage."
msgstr ""

#. tumbleweed/perl-File-pushd/summary
msgid "Change Directory Temporarily for a Limited Scope"
msgstr ""

#. tumbleweed/perl-File-pushd/description
msgid ""
"File::pushd does a temporary 'chdir' that is easily and automatically "
"reverted, similar to 'pushd' in some Unix command shells. It works by "
"creating an object that caches the original working directory. When the "
"object is destroyed, the destructor calls 'chdir' to revert to the original "
"working directory. By storing the object in a lexical variable with a "
"limited scope, this happens automatically at the end of the scope.\n"
"\n"
"This is very handy when working with temporary directories for tasks like "
"testing; a function is provided to streamline getting a temporary directory "
"from File::Temp.\n"
"\n"
"For convenience, the object stringifies as the canonical form of the "
"absolute pathname of the directory entered.\n"
"\n"
"*Warning*: if you create multiple 'pushd' objects in the same lexical scope, "
"their destruction order is not guaranteed and you might not wind up in the "
"directory you expect."
msgstr ""

#. tumbleweed/perl-FileHandle-Unget/summary
#. leap/perl-FileHandle-Unget/summary
msgid "FileHandle which supports multi-byte unget"
msgstr "マルチバイトの unget に対応した FileHandle"

#. tumbleweed/perl-FileHandle-Unget/description
#. leap/perl-FileHandle-Unget/description
msgid ""
"FileHandle::Unget operates exactly the same as FileHandle, except that it "
"provides a version of ungetc that allows you to unget more than one "
"character. It also provides ungets to unget a string.\n"
"\n"
"This module is useful if the filehandle refers to a stream for which you "
"can't just 'seek()' backwards. Some operating systems support multi-byte "
"'ungetc()', but this is not guaranteed. Use this module if you want a "
"portable solution. In addition, on some operating systems, eof() will not be "
"reset if you ungetc after having read to the end of the file.\n"
"\n"
"NOTE: Using 'sysread()' with 'ungetc()' and other buffering functions is "
"still a bad idea."
msgstr ""
"FileHandle::Unget は FileHandle と全く同じ動作をするものですが、 ungetc で1 "
"文字以上の (文字列を含む) unget に対応しています。\n"
"\n"
"このモジュールは、ファイルハンドルがストリームを示すもので、 'seek()' で戻る"
"ことのできない場合に有用です。オペレーティングシステムによってはマルチバイト"
"の 'ungetc()' に対応していますが、これは保証されるものではありません。このモ"
"ジュールを使用することで移植性の高い unget を行なうことができるほか、オペレー"
"ティングシステムによっては、ファイルの終わりまで到達した場合に ungetc して"
"も、 eof() がリセットされない問題を回避することもできます。"

#. tumbleweed/perl-Filesys-Notify-Simple/summary
#. leap/perl-Filesys-Notify-Simple/summary
#, fuzzy
msgid "Simple and dumb file system watcher"
msgstr "シンプルなファイルシステムブラウザ"

#. tumbleweed/perl-Filesys-Notify-Simple/description
#. leap/perl-Filesys-Notify-Simple/description
msgid ""
"Filesys::Notify::Simple is a simple but unified interface to get "
"notifications of changes to a given filesystem path. It utilizes inotify2 on "
"Linux, fsevents on OS X, kqueue on FreeBSD and FindFirstChangeNotification "
"on Windows if they're installed, with a fallback to the full directory scan "
"if they're not available.\n"
"\n"
"There are some limitations in this module. If you don't like it, use the "
"File::ChangeNotify manpage.\n"
"\n"
"* *\n"
"\n"
"  There is no file name based filter. Do it in your own code.\n"
"\n"
"* *\n"
"\n"
"  You can not get types of events (created, updated, deleted).\n"
"\n"
"* *\n"
"\n"
"  Currently 'wait' method blocks.\n"
"\n"
"In return, this module doesn't depend on any non-core modules. Platform "
"specific optimizations with the Linux::Inotify2 manpage, the Mac::FSEvents "
"manpage, the Filesys::Notify::KQueue manpage and the Win32::ChangeNotify "
"manpage are truely optional.\n"
"\n"
"NOTE: Using the Win32::ChangeNotify manpage may put additional limitations.\n"
"\n"
"* *\n"
"\n"
"  the Win32::ChangeNotify manpage uses FindFirstChangeNotificationA so "
"that   Unicode characters can not be handled. On cygwin (1.7 or later), "
"Unicode   characters should be able to be handled when the Win32::"
"ChangeNotify   manpage is not used.\n"
"\n"
"* *\n"
"\n"
"  If more than 64 directories are included under the specified paths, an   "
"error occurrs."
msgstr ""

#. tumbleweed/perl-Finance-Quote/summary
#. leap/perl-Finance-Quote/summary
msgid "Get stock and mutual fund quotes from various exchanges"
msgstr ""

#. tumbleweed/perl-Finance-Quote/description
#. leap/perl-Finance-Quote/description
msgid ""
"This module gets stock quotes from various internet sources, including "
"Yahoo! Finance, Fidelity Investments, and the Australian Stock Exchange. "
"There are two methods of using this module -- a functional interface that is "
"deprecated, and an object-orientated method that provides greater "
"flexibility and stability.\n"
"\n"
"With the exception of straight currency exchange rates, all information is "
"returned as a two-dimensional hash (or a reference to such a hash, if called "
"in a scalar context). For example:\n"
"\n"
"    %info = $q->fetch(\"australia\",\"CML\");     print \"The price of CML "
"is \".$info{\"CML\",\"price\"};\n"
"\n"
"The first part of the hash (eg, \"CML\") is referred to as the stock. The "
"second part (in this case, \"price\") is referred to as the label."
msgstr ""

#. tumbleweed/perl-FindBin-Real/summary
#. leap/perl-FindBin-Real/summary
msgid "Locate directory of original perl script"
msgstr ""

#. tumbleweed/perl-FindBin-Real/description
#. leap/perl-FindBin-Real/description
msgid ""
"Locates the full path to the script bin directory to allow the use of paths "
"relative to the bin directory.\n"
"\n"
"This allows a user to setup a directory tree for some software with "
"directories <root>/bin and <root>/lib and then the above example will allow "
"the use of modules in the lib directory without knowing where the software "
"tree is installed.\n"
"\n"
"If perl is invoked using the *-e* option or the perl script is read from "
"'STDIN' then FindBin sets both 'Bin()' and 'RealBin()' return values to the "
"current directory."
msgstr ""

#. tumbleweed/perl-Font-TTF/summary
#. leap/perl-Font-TTF/summary
#, fuzzy
msgid "Perl module for TrueType Font hacking"
msgstr "MS True Type フォントのプレースホルダ"

#. tumbleweed/perl-Font-TTF/description
#. leap/perl-Font-TTF/description
msgid ""
"This module allows you to do almost anything to a TrueType/OpenType Font "
"including modify and inspect nearly all tables."
msgstr ""

#. tumbleweed/perl-Future/summary
#. leap/perl-Future/summary
msgid "Represent an Operation Awaiting Completion"
msgstr ""

#. tumbleweed/perl-Future/description
msgid ""
"A 'Future' object represents an operation that is currently in progress, or "
"has recently completed. It can be used in a variety of ways to manage the "
"flow of control, and data, through an asynchronous program.\n"
"\n"
"Some futures represent a single operation and are explicitly marked as ready "
"by calling the 'done' or 'fail' methods. These are called \"leaf\" futures "
"here, and are returned by the 'new' constructor.\n"
"\n"
"Other futures represent a collection of sub-tasks, and are implicitly marked "
"as ready depending on the readiness of their component futures as required. "
"These are called \"convergent\" futures here as they converge control and "
"data-flow back into one place. These are the ones returned by the various "
"'wait_*' and 'need_*' constructors.\n"
"\n"
"It is intended that library functions that perform asynchronous operations "
"would use future objects to represent outstanding operations, and allow "
"their calling programs to control or wait for these operations to complete. "
"The implementation and the user of such an interface would typically make "
"use of different methods on the class. The methods below are documented in "
"two sections; those of interest to each side of the interface.\n"
"\n"
"It should be noted however, that this module does not in any way provide an "
"actual mechanism for performing this asynchronous activity; it merely "
"provides a way to create objects that can be used for control and data flow "
"around those operations. It allows such code to be written in a neater, "
"forward-reading manner, and simplifies many common patterns that are often "
"involved in such situations.\n"
"\n"
"See also Future::Utils which contains useful loop-constructing functions, to "
"run a future-returning function repeatedly in a loop.\n"
"\n"
"Unless otherwise noted, the following methods require at least version "
"_0.08_."
msgstr ""

#. tumbleweed/perl-GD-Barcode/summary
#. leap/perl-GD-Barcode/summary
msgid "Create barcode image with GD"
msgstr ""

#. tumbleweed/perl-GD-Barcode/description
#. leap/perl-GD-Barcode/description
msgid ""
"GD::Barcode is a subclass of GD and allows you to create barcode image with "
"GD. This module based on \"Generate Barcode Ver 1.02 By Shisei Hanai "
"97/08/22\".\n"
"\n"
"From 1.14, you can use this module even if no GD (except plot method)."
msgstr ""

#. tumbleweed/perl-GDGraph/summary
#. leap/perl-GDGraph/summary
msgid "Package to generate charts, using Lincoln Stein's GD.pm"
msgstr "Lincoln Stein 氏の GD.pm を使用したグラフ生成パッケージ"

#. tumbleweed/perl-GDGraph/description
#. leap/perl-GDGraph/description
msgid ""
"This is GDGraph, a package to generate charts, using Lincoln Stein's GD.pm. "
"See the documentation for some history and more information."
msgstr ""
"これは GDGraph と呼ばれ、 Lincoln Stein 氏の GD.pm を使用したグラフ作成を 行"
"なうパッケージです。履歴と詳細情報についてはドキュメンテーションをお読みくだ"
"さい。"

#. tumbleweed/perl-GDTextUtil/summary
#. tumbleweed/perl-GDTextUtil/description
#. leap/perl-GDTextUtil/summary
#. leap/perl-GDTextUtil/description
msgid "GDTextUtil Perl module"
msgstr "GDTextUtil Perl モジュール"

#. tumbleweed/perl-Geo-Coordinates-UTM/summary
#. leap/perl-Geo-Coordinates-UTM/summary
#, fuzzy
msgid "Perl extension for Latitude Longitude conversions"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-Geo-Coordinates-UTM/description
#. leap/perl-Geo-Coordinates-UTM/description
msgid ""
"This module will translate latitude longitude coordinates to Universal "
"Transverse Mercator(UTM) coordinates and vice versa."
msgstr ""

#. tumbleweed/perl-Geography-Countries/summary
#. leap/perl-Geography-Countries/summary
msgid "2-letter, 3-letter, and numerical codes for countries"
msgstr ""

#. tumbleweed/perl-Geography-Countries/description
#. leap/perl-Geography-Countries/description
msgid ""
"This module maps country names, and their 2-letter, 3-letter and numerical "
"codes, as defined by the ISO-3166 maintenance agency [1], and defined by the "
"UNSD."
msgstr ""

#. tumbleweed/perl-Getopt-Long-Descriptive/summary
#. leap/perl-Getopt-Long-Descriptive/summary
msgid "Getopt::Long, but simpler and more powerful"
msgstr ""

#. tumbleweed/perl-Getopt-Long-Descriptive/description
#. leap/perl-Getopt-Long-Descriptive/description
msgid ""
"Getopt::Long::Descriptive is yet another Getopt library. It's built atop "
"Getopt::Long, and gets a lot of its features, but tries to avoid making you "
"think about its huge array of options.\n"
"\n"
"It also provides usage (help) messages, data validation, and a few other "
"useful features."
msgstr ""

#. tumbleweed/perl-Getopt-Tabular/summary
#. leap/perl-Getopt-Tabular/summary
msgid "table-driven argument parsing for Perl 5"
msgstr ""

#. tumbleweed/perl-Getopt-Tabular/description
#. leap/perl-Getopt-Tabular/description
msgid ""
"*Getopt::Tabular* is a Perl 5 module for table-driven argument parsing, "
"vaguely inspired by John Ousterhout's Tk_ParseArgv. All you really need to "
"do to use the package is set up a table describing all your command-line "
"options, and call &GetOptions with three arguments: a reference to your "
"option table, a reference to '@ARGV' (or something like it), and an optional "
"third array reference (say, to '@newARGV'). &GetOptions will process all "
"arguments in '@ARGV', and copy any leftover arguments (i.e. those that are "
"not options or arguments to some option) to the '@newARGV' array. (If the "
"'@newARGV' argument is not supplied, 'GetOptions' will replace '@ARGV' with "
"the stripped-down argument list.) If there are any invalid options, "
"'GetOptions' will print an error message and return 0.\n"
"\n"
"Before I tell you all about why Getopt::Tabular is a wonderful thing, let me "
"explain some of the terminology that will keep popping up here.\n"
"\n"
"* argument\n"
"\n"
"  any single word appearing on the command-line, i.e. one element of the   "
"'@ARGV' array.\n"
"\n"
"* option\n"
"\n"
"  an argument that starts with a certain sequence of characters; the   "
"default is \"-\". (If you like GNU-style options, you can change this to   "
"\"--\".) In most Getopt::Tabular-based applications, options can come   "
"anywhere on the command line, and their order is unimportant (unless one   "
"option overrides a previous option). Also, Getopt::Tabular will allow any   "
"non-ambiguous abbreviation of options.\n"
"\n"
"* option argument\n"
"\n"
"  (or _value_) an argument that immediately follows certain types of   "
"options. For instance, if '-foo' is a scalar-valued integer option, and   '-"
"foo 3' appears on the command line, then '3' will be the argument to   '-"
"foo'.\n"
"\n"
"* option type\n"
"\n"
"  controls how 'GetOptions' deals with an option and the arguments that   "
"follow it. (Actually, for most option types, the type interacts with the   "
"'num_values' field, which determines whether the option is scalar- or   "
"vector-valued. This will be fully explained in due course.)"
msgstr ""

#. tumbleweed/perl-Graph/summary
#. leap/perl-Graph/summary
msgid "Graph Data Structures and Algorithms"
msgstr ""

#. tumbleweed/perl-Graph/description
#. leap/perl-Graph/description
msgid "graph data structures and algorithms"
msgstr ""

#. tumbleweed/perl-GraphViz/summary
#. leap/perl-GraphViz/summary
msgid "Interface to AT&T's GraphViz. Deprecated. See GraphViz2"
msgstr ""

#. tumbleweed/perl-GraphViz/description
#. leap/perl-GraphViz/description
msgid ""
"This module provides an interface to layout and image generation of directed "
"and undirected graphs in a variety of formats (PostScript, PNG, etc.) using "
"the \"dot\", \"neato\", \"twopi\", \"circo\" and \"fdp\" programs from the "
"GraphViz project (http://www.graphviz.org/ or http://www.research.att.com/sw/"
"tools/graphviz/).\n"
"\n"
"GraphViz is deprecated in favour of the GraphViz2 manpage."
msgstr ""

#. tumbleweed/perl-Gravatar-URL/summary
#. leap/perl-Gravatar-URL/summary
msgid "Make URLs for Gravatars from an email address"
msgstr ""

#. tumbleweed/perl-Gravatar-URL/description
#. leap/perl-Gravatar-URL/description
msgid ""
"A Gravatar is a Globally Recognized Avatar for a given email address. This "
"allows you to have a global picture associated with your email address. You "
"can look up the Gravatar for any email address by constructing a URL to get "
"the image from the gravatar.com manpage. This module does that.\n"
"\n"
"Examples of use include the author faces on the http://search.cpan.org "
"manpage.\n"
"\n"
"See the http://gravatar.com manpage for more info."
msgstr ""

#. tumbleweed/perl-Growl-GNTP/summary
#. leap/perl-Growl-GNTP/summary
#, fuzzy
msgid "Perl implementation of GNTP Protocol (Client Part)"
msgstr "SCGI プロトコルの Python 実装"

#. tumbleweed/perl-Growl-GNTP/description
#. leap/perl-Growl-GNTP/description
msgid "Growl::GNTP is Perl implementation of GNTP Protocol (Client Part)"
msgstr ""

#. tumbleweed/perl-HTML-Element-Extended/summary
#. leap/perl-HTML-Element-Extended/summary
msgid "Extension for HTML::Element"
msgstr "HTML::Element に対する拡張"

#. tumbleweed/perl-HTML-Element-Extended/description
#. leap/perl-HTML-Element-Extended/description
msgid ""
"HTML-Element-Extended is a package of several enhanced HTML::Element "
"classes, most of which arose during the effort to implement an HTML::Element "
"based table class.\n"
"\n"
"The modules are:         HTML::ElementTable         HTML::"
"ElementSuper         HTML::ElementGlob         HTML::ElementRaw\n"
"\n"
"The resulting functionality enables:         tables         element "
"globs         element coordinates         content replacement         "
"content wrapping         element cloning         raw HTML string adoption"
msgstr ""
"HTML-Element-Extended は HTML::Element クラスに対するいくつかの拡張パッケージ"
"で、これらの多くは HTML::Element ベースのテーブルクラスを実装する際に生まれた"
"ものです。\n"
"\n"
"モジュールには下記のものがあります:          HTML::ElementTable         "
"HTML::ElementSuper         HTML::ElementGlob         HTML::ElementRaw\n"
"\n"
"上記を実装した結果、下記の機能が提供されています: 表, 要素, グロブ, 要素の座"
"標, 内容の置換, コンテンツのラッピング, 要素のクローン, HTML 文字列のありのま"
"まの追加"

#. tumbleweed/perl-HTML-FillInForm/summary
#. leap/perl-HTML-FillInForm/summary
msgid "Populates HTML Forms with data"
msgstr "HTML フォームへのデータ入力"

#. tumbleweed/perl-HTML-FillInForm/description
#. leap/perl-HTML-FillInForm/description
msgid ""
"This module fills in an HTML form with data from a Perl data structure, "
"allowing you to keep the HTML and Perl separate.\n"
"\n"
"Here are two common use cases:\n"
"\n"
"1. A user submits an HTML form without filling out a required field. You "
"want to redisplay the form with all the previous data in it, to make it easy "
"for the user to see and correct the error.\n"
"\n"
"2. You have just retrieved a record from a database and need to display it "
"in an HTML form."
msgstr ""
"このモジュールは、 Perl のデータ構造から HTML のフォームにデータを埋め込む処"
"理を行ないます。これにより、 HTML と Perl のコードを分離することができま"
"す。\n"
"\n"
"主な用途としては、下記のようなものがあります:\n"
"\n"
"1. ユーザが HTML のフォーム内に入力を行なったものの、必要な項目に記入がないよ"
"うな場合。フォームを再度表示するにあたって、入力済みの項目にはデータを入力し"
"たままの状態で表示するほうが便利であり、エラーの訂正も容易になります。\n"
"\n"
"2. データベースから特定のレコードを抽出して、それを HTML フォーム内に表示する"
"必要がある場合。"

#. tumbleweed/perl-HTML-Form/summary
#. leap/perl-HTML-Form/summary
msgid "Class that represents an HTML form element"
msgstr ""

#. tumbleweed/perl-HTML-Form/description
#. leap/perl-HTML-Form/description
msgid ""
"Objects of the 'HTML::Form' class represents a single HTML '<form> ... </"
"form>' instance. A form consists of a sequence of inputs that usually have "
"names, and which can take on various values. The state of a form can be "
"tweaked and it can then be asked to provide 'HTTP::Request' objects that can "
"be passed to the request() method of 'LWP::UserAgent'."
msgstr ""

#. tumbleweed/perl-HTML-FormHandler/summary
#. leap/perl-HTML-FormHandler/summary
msgid "HTML forms using Moose"
msgstr ""

#. tumbleweed/perl-HTML-FormHandler/description
#. leap/perl-HTML-FormHandler/description
msgid ""
"*** Although documentation in this file provides some overview, it is mainly "
"intended for API documentation. See HTML::FormHandler::Manual::Intro for an "
"introduction, with links to other documentation.\n"
"\n"
"HTML::FormHandler maintains a clean separation between form construction and "
"form rendering. It allows you to define your forms and fields in a number of "
"flexible ways. Although it provides renderers for HTML, you can define "
"custom renderers for any kind of presentation.\n"
"\n"
"HTML::FormHandler allows you to define form fields and validators. It can be "
"used for both database and non-database forms, and will automatically update "
"or create rows in a database. It can be used to process structured data that "
"doesn't come from an HTML form.\n"
"\n"
"One of its goals is to keep the controller/application program interface as "
"simple as possible, and to minimize the duplication of code. In most cases, "
"interfacing your controller to your form is only a few lines of code.\n"
"\n"
"With FormHandler you shouldn't have to spend hours trying to figure out how "
"to make a simple HTML change that would take one minute by hand. Because you "
"_can_ do it by hand. Or you can automate HTML generation as much as you "
"want, with template widgets or pure Perl rendering classes, and stay "
"completely in control of what, where, and how much is done automatically. "
"You can define custom renderers and display your rendered forms however you "
"want.\n"
"\n"
"You can split the pieces of your forms up into logical parts and compose "
"complete forms from FormHandler classes, roles, fields, collections of "
"validations, transformations and Moose type constraints. You can write "
"custom methods to process forms, add any attribute you like, and use Moose "
"method modifiers. FormHandler forms are Perl classes, so there's a lot of "
"flexibility in what you can do.\n"
"\n"
"HTML::FormHandler provides rendering through roles which are applied to form "
"and field classes (although there's no reason you couldn't write a renderer "
"as an external object either). There are currently two flavors: all-in-one "
"solutions like HTML::FormHandler::Render::Simple and HTML::FormHandler::"
"Render::Table that contain methods for rendering field widget classes, and "
"the HTML::FormHandler::Widget roles, which are more atomic roles which are "
"automatically applied to fields and form. See HTML::FormHandler::Manual::"
"Rendering for more details. (And you can easily use hand-built forms - "
"FormHandler doesn't care.)\n"
"\n"
"The typical application for FormHandler would be in a Catalyst, DBIx::Class, "
"Template Toolkit web application, but use is not limited to that. "
"FormHandler can be used in any Perl application.\n"
"\n"
"More Formhandler documentation and a tutorial can be found in the manual at "
"HTML::FormHandler::Manual."
msgstr ""

#. tumbleweed/perl-HTML-Format/summary
#. tumbleweed/perl-HTML-Format/description
#. leap/perl-HTML-Format/summary
#. leap/perl-HTML-Format/description
msgid "Base class for HTML formatters"
msgstr "HTML フォーマッタ向け基本クラス"

#. tumbleweed/perl-HTML-RewriteAttributes/summary
#. leap/perl-HTML-RewriteAttributes/summary
msgid "Concise attribute rewriting"
msgstr ""

#. tumbleweed/perl-HTML-RewriteAttributes/description
#. leap/perl-HTML-RewriteAttributes/description
msgid ""
"HTML::RewriteAttributes is designed for simple yet powerful HTML attribute "
"rewriting.\n"
"\n"
"You simply specify a callback to run for each attribute and we do the rest "
"for you.\n"
"\n"
"This module is designed to be subclassable to make handling special cases "
"eaiser. See the source for methods you can override.\n"
"\n"
"Author:\n"
"-------     Shawn M Moore, <sartak@bestpractical.com>"
msgstr ""

#. tumbleweed/perl-HTML-Scrubber/summary
#. leap/perl-HTML-Scrubber/summary
#, fuzzy
msgid "Perl extension for scrubbing/sanitizing html"
msgstr "OpenSSL を使用する Perl 拡張"

#. tumbleweed/perl-HTML-Scrubber/description
#. leap/perl-HTML-Scrubber/description
msgid ""
"If you want to \"scrub\" or \"sanitize\" html input in a reliable and "
"flexible fashion, then this module is for you.\n"
"\n"
"I wasn't satisfied with HTML::Sanitizer because it is based on HTML::"
"TreeBuilder, so I thought I'd write something similar that works directly "
"with HTML::Parser."
msgstr ""

#. tumbleweed/perl-HTML-TableExtract/summary
#. leap/perl-HTML-TableExtract/summary
msgid ""
"Perl module for extracting the content contained in tables within an HTM[cut]"
msgstr "HTML 文書の表に含まれる内容を抽出する Perl モジュール"

#. tumbleweed/perl-HTML-TableExtract/description
#, fuzzy
msgid ""
"HTML::TableExtract is a subclass of HTML::Parser that serves to extract the "
"information from tables of interest contained within an HTML document. The "
"information from each extracted table is stored in table objects. Tables can "
"be extracted as text, HTML, or HTML::ElementTable structures (for in-place "
"editing or manipulation).\n"
"\n"
"There are currently four constraints available to specify which tables you "
"would like to extract from a document: _Headers_, _Depth_, _Count_, and "
"_Attributes_.\n"
"\n"
"_Headers_, the most flexible and adaptive of the techniques, involves "
"specifying text in an array that you expect to appear above the data in the "
"tables of interest. Once all headers have been located in a row of that "
"table, all further cells beneath the columns that matched your headers are "
"extracted. All other columns are ignored: think of it as vertical slices "
"through a table. In addition, TableExtract automatically rearranges each row "
"in the same order as the headers you provided. If you would like to disable "
"this, set _automap_ to 0 during object creation, and instead rely on the "
"column_map() method to find out the order in which the headers were found. "
"Furthermore, TableExtract will automatically compensate for cell span issues "
"so that columns are really the same columns as you would visually see in a "
"browser. This behavior can be disabled by setting the _gridmap_ parameter to "
"0. HTML is stripped from the entire textual content of a cell before header "
"matches are attempted -- unless the _keep_html_ parameter was enabled.\n"
"\n"
"_Depth_ and _Count_ are more specific ways to specify tables in relation to "
"one another. _Depth_ represents how deeply a table resides in other tables. "
"The depth of a top-level table in the document is 0. A table within a top-"
"level table has a depth of 1, and so on. Each depth can be thought of as a "
"layer; tables sharing the same depth are on the same layer. Within each of "
"these layers, _Count_ represents the order in which a table was seen at that "
"depth, starting with 0. Providing both a _depth_ and a _count_ will uniquely "
"specify a table within a document.\n"
"\n"
"_Attributes_ match based on the attributes of the html <table> tag, for "
"example, border widths or background color.\n"
"\n"
"Each of the _Headers_, _Depth_, _Count_, and _Attributes_ specifications are "
"cumulative in their effect on the overall extraction. For instance, if you "
"specify only a _Depth_, then you get all tables at that depth (note that "
"these could very well reside in separate higher- level tables throughout the "
"document since depth extends across tables). If you specify only a _Count_, "
"then the tables at that _Count_ from all depths are returned (i.e., the "
"_n_th occurrence of a table at each depth). If you only specify _Headers_, "
"then you get all tables in the document containing those column headers. If "
"you have specified multiple constraints of _Headers_, _Depth_, _Count_, and "
"_Attributes_, then each constraint has veto power over whether a particular "
"table is extracted.\n"
"\n"
"If no _Headers_, _Depth_, _Count_, or _Attributes_ are specified, then all "
"tables match.\n"
"\n"
"When extracting only text from tables, the text is decoded with HTML::"
"Entities by default; this can be disabled by setting the _decode_ parameter "
"to 0."
msgstr ""
"HTML::TableExtract は HTML::Parser のサブクラスで、 HTML 文書内にある表 (テー"
"ブル)について、その中に含まれる情報を取り出すために使用します。それぞれ取り出"
"した情報は表オブジェクト内に保存されます。表はテキストとして取り出すことがで"
"きるほか、HTML や HTML::ElementTable の構造 (その場での操作や編集のため) とし"
"て取り出すことができます。\n"
"\n"
"文書から情報を取り出す表を指定するにあたっては、下記の 4 つの制約条件を指定す"
"ることができます: _Headers_, _Depth_, _Count_, _Attributes_.\n"
"\n"
"_Headers_ (ヘッダ) は、最も柔軟で他の技術との親和性が高い方法で、配列内にテキ"
"ストを指定することで、データを取り出す対象を指定します。該当の表に対する全て"
"のヘッダ行にアクセスすると、該当列の残りのセルを取り出すことができる仕組みで"
"す。つまり、表を縦に分断して取り出す方式です。それに加えて、 TableExtract は"
"指定した順序に並ぶように列を入れ替えます。この入れ替え処理を無効化したい場合"
"は、オブジェクト生成時 _automap_ に 0 を指定してください。この場合は "
"column_map() メソッドに依存して、ヘッダの順序が決められます。それに加えて、 "
"TableExtract ではセルの長さに関する問題を解決することができます。これにより、"
"ブラウザ内で見えているとおりにデータを取り出すことができます。この動作は "
"_gridmap_ パラメータを 0 にすることで無効化できます。なお、ヘッダの適合処理が"
"行なわれる前に HTML が解釈されることに注意してください。これは _keep_html_ パ"
"ラメータを有効にすることで回避できます。\n"
"\n"
"_Depth_ と _Count_ は 2 つの表の関連性をより厳密に指定できる方法です。 "
"_Depth_ は他の表内で対象の表がどれだけ深いものであるのかを指定します。文書内"
"でのトップレベルの (一番外側の) 表は 0 になります。トップレベル内にある表は "
"1 、その中にある表は 2 のようになります。それぞれの深さはレイヤ (層) としても"
"考えられるもので、同じ深さの表は同じレイヤにある表と言えます。このようなレイ"
"ヤの仕組みの中で、_Count_ は同じ深さの中での順序を指定します。これは 0 から始"
"まる値で、 _Depth_ と _Count_ を指定することで、文書内の表を厳密に指定するこ"
"とができます。\n"
"\n"
"_Attributes_ でのマッチングは、 html の <table> タグにおける属性 (アトリ"
"ビュート)を基準にして行なうものです。たとえば枠線の幅や背景色などです。\n"
"\n"
"_Headers_, _Depth_, _Count_, _Attributes_ の各指定は、組み合わせて指定するこ"
"ともできます。たとえば _Depth_ だけを指定した場合は、その深さの表全てを対象と"
"することになります (ただしそれぞれの親となる表が文書内でどこにあるのかをきち"
"んと把握しておく必要があります) 。また _Count_ だけを指定した場合、全ての深さ"
"にある表のうち、その位置 (順番) のものだけが返されます。 _Headers_ だけを指定"
"した場合も同様で、指定した列ヘッダのものだけを取り出します。 _Headers_, "
"_Depth_, _Count_, _Attributes_ を組み合わせて指定すると複数の組み合わせ条件と"
"なり、指定した条件全てに該当するものだけが返されます。\n"
"\n"
"逆に _Headers_, _Depth_, _Count_, _Attributes_ のいずれも指定しない場合は、全"
"ての表が該当することになります。\n"
"\n"
"表からテキストだけを取り出す場合、既定ではテキストは HTML::Entities でデコー"
"ドされます。これは _decode_ パラメータを 0 にすることで無効化できます。"

#. tumbleweed/perl-HTML-Tagset/summary
#. leap/perl-HTML-Tagset/summary
msgid "Data tables useful in parsing HTML"
msgstr "HTML を扱うための便利なデータテーブル"

#. tumbleweed/perl-HTML-Tagset/description
#. leap/perl-HTML-Tagset/description
msgid ""
"This module contains several data tables useful in various kinds of HTML "
"parsing operations.\n"
"\n"
"Note that all tag names used are lowercase.\n"
"\n"
"In the following documentation, a \"hashset\" is a hash being used as a set\n"
"-- the hash conveys that its keys are there, and the actual values "
"associated with the keys are not significant. (But what values are there, "
"are always true.)"
msgstr ""
"このモジュールには、 HTML 処理操作に利用する各種の便利なデータテーブルが含ま"
"れています。\n"
"\n"
"ただし、すべてのタグ名は小文字で処理されることに注意してください。\n"
"\n"
"付属のドキュメンテーションで、 \"ハッシュセット\" とはセットとして使用される"
"ハッシュのことを指し、キーとして存在するだけで値には意味を持たないものを指し"
"ます(通常は値が true になっています)"

#. tumbleweed/perl-HTML-Template/summary
#. leap/perl-HTML-Template/summary
msgid "Perl module to use HTML-like templating language"
msgstr "HTML に似たテンプレート言語を使用する Perl モジュール"

#. tumbleweed/perl-HTML-Template/description
#. leap/perl-HTML-Template/description
msgid ""
"This module attempts to make using HTML templates simple and natural. It "
"extends standard HTML with a few new HTML-esque tags - '<TMPL_VAR>' "
"'<TMPL_LOOP>', '<TMPL_INCLUDE>', '<TMPL_IF>', '<TMPL_ELSE>' and "
"'<TMPL_UNLESS>'. The file written with HTML and these new tags is called a "
"template. It is usually saved separate from your script - possibly even "
"created by someone else! Using this module you fill in the values for the "
"variables, loops and branches declared in the template. This allows you to "
"separate design - the HTML - from the data, which you generate in the Perl "
"script.\n"
"\n"
"This module is licensed under the same terms as Perl. See the LICENSE "
"section below for more details."
msgstr ""
"このモジュールは、 HTML のひな型をシンプルかつ中立に作成しようとしている試み"
"です。標準の HTML に対して、新しい HTML 風タグ ('<TMPL_VAR>' '<TMPL_LOOP>', "
"'<TMPL_INCLUDE>', '<TMPL_IF>', '<TMPL_ELSE>' and '<TMPL_UNLESS>') を導入し"
"て、ひな型の仕組みを構成しています。ひな形のファイル自身は HTML 形式で作成"
"し、新しいタグをテンプレートと呼びます。このような仕組みにより、たとえだれが"
"作ったものであっても、スクリプトとコンテンツを分離できるようになります。この"
"モジュールを使用することで、テンプレート内に定義されたとおりに値を設定した"
"り、ループや分岐などを作成することができます。また、 Perl においてデザイン "
"(HTML) とデータを分離することにもなります。\n"
"\n"
"このモジュールは Perl と同じライセンスで提供されています。詳しくはLICENSE セ"
"クションをお読みください。"

#. tumbleweed/perl-HTML-TokeParser-Simple/summary
#. leap/perl-HTML-TokeParser-Simple/summary
msgid "Easy to use C<HTML::TokeParser> interface"
msgstr "使いやすい C<HTML::TokeParser> インターフェイス"

#. tumbleweed/perl-HTML-TokeParser-Simple/description
#. leap/perl-HTML-TokeParser-Simple/description
msgid ""
"'HTML::TokeParser' is an excellent module that's often used for parsing "
"HTML. However, the tokens returned are not exactly intuitive to parse:\n"
"\n"
" [\"S\",  $tag, $attr, $attrseq, $text]  [\"E\",  $tag, $text]  [\"T\",  "
"$text, $is_data]  [\"C\",  $text]  [\"D\",  $text]  [\"PI\", $token0, "
"$text]\n"
"\n"
"To simplify this, 'HTML::TokeParser::Simple' allows the user ask more "
"intuitive (read: more self-documenting) questions about the tokens "
"returned.\n"
"\n"
"You can also rebuild some tags on the fly. Frequently, the attributes "
"associated with start tags need to be altered, added to, or deleted. This "
"functionality is built in.\n"
"\n"
"Since this is a subclass of 'HTML::TokeParser', all 'HTML::TokeParser' "
"methods are available. To truly appreciate the power of this module, please "
"read the documentation for 'HTML::TokeParser' and 'HTML::Parser'."
msgstr ""
"'HTML::TokeParser' は HTML を処理するにあたって、よく用いられる上品なモジュー"
"ルです。ですが、返却されるトークンはあまり直観的なものではありません:\n"
"\n"
" [\"S\",  $tag, $attr, $attrseq, $text]  [\"E\",  $tag, $text]  [\"T\",  "
"$text, $is_data]  [\"C\",  $text]  [\"D\",  $text]  [\"PI\", $token0, "
"$text]\n"
"\n"
"これを単純化するため、 'HTML::TokeParser::Simple' というモジュールでは、返却"
"されるトークンに対して、より直観的な質問を投げられるようになっています (詳し"
"くは内蔵のドキュメントをお読みください) 。\n"
"\n"
"また、本モジュールではその場でタグを再構築することができます。たとえば開始タ"
"グ内に結び付けられた属性を変更したり、追加や削除を行なったりすることができま"
"す。このような機能は内蔵機能で実現されています。\n"
"\n"
"このモジュールは 'HTML::TokeParser' のサブクラスであるため、 'HTML::"
"TokeParser' のすべてのメソッドが利用できます。このモジュールの真の威力を知る"
"には、 'HTML::TokeParser' と 'HTML::Parser' の各ドキュメンテーションをお読み"
"ください。"

#. tumbleweed/perl-HTML-Tree/summary
msgid "build and scan parse-trees of HTML"
msgstr "HTML ツリー構造の構築とスキャン"

#. tumbleweed/perl-HTML-Tree/description
msgid ""
"HTML-Tree is a suite of Perl modules for making parse trees out of HTML "
"source. It consists of mainly two modules, whose documentation you should "
"refer to: HTML::TreeBuilder and HTML::Element.\n"
"\n"
"HTML::TreeBuilder is the module that builds the parse trees. (It uses HTML::"
"Parser to do the work of breaking the HTML up into tokens.)\n"
"\n"
"The tree that TreeBuilder builds for you is made up of objects of the class "
"HTML::Element.\n"
"\n"
"If you find that you do not properly understand the documentation for HTML::"
"TreeBuilder and HTML::Element, it may be because you are unfamiliar with "
"tree-shaped data structures, or with object-oriented modules in general. "
"Sean Burke has written some articles for _The Perl Journal_ ('www.tpj.com') "
"that seek to provide that background. The full text of those articles is "
"contained in this distribution, as:\n"
"\n"
"* HTML::Tree::AboutObjects\n"
"\n"
"  \"User's View of Object-Oriented Modules\" from TPJ17.\n"
"\n"
"* HTML::Tree::AboutTrees\n"
"\n"
"  \"Trees\" from TPJ18\n"
"\n"
"* HTML::Tree::Scanning\n"
"\n"
"  \"Scanning HTML\" from TPJ19\n"
"\n"
"Readers already familiar with object-oriented modules and tree-shaped data "
"structures should read just the last article. Readers without that "
"background should read the first, then the second, and then the third."
msgstr ""
"HTML-Tree は、 HTML ソースを解釈し、その解釈結果をツリー構造に仕立てることのできる Perl モジュール集です。このモジュール集は主に "
"2 つのモジュールから構成され、それぞれ HTML::TreeBuilder と HTML::Element という名称です。\n"
"\n"
"HTML::TreeBuilder は処理ツリーを構成するモジュールです (このモジュールは HTML::Parser を利用して、 HTML "
"を部品ごとに分解しています) 。\n"
"\n"
"TreeBuilder におけるツリーは、複数の HTML::Element クラスのオブジェクトから構成されています。\n"
"\n"
"HTML::TreeBuilder や HTML::Element "
"のドキュメンテーションを読んでもうまく理解できない場合、それはツリー型のデータ構造やオブジェクト指向の構造に慣れていないためであると思われます。 "
"Sean Burke 氏は _The Perl Journal_ ('www.tpj.com') "
"向けにいくつかの記事を作成していて、そこで詳しい解説を行なっています。この記事の全文は下記の配布物に含まれています:\n"
"\n"
"* HTML::Tree::AboutObjects\n"
"\n"
"  TPJ17: \"User's View of Object-Oriented Modules\" "
"(オブジェクト指向のモジュールに関するユーザからの見た目)\n"
"\n"
"* HTML::Tree::AboutTrees\n"
"\n"
"  TPJ18: \"Trees\" (ツリー構造)\n"
"\n"
"* HTML::Tree::Scanning\n"
"\n"
"  TPJ19: \"Scanning HTML\" (HTML のスキャン)\n"
"\n"
"オブジェクト指向のモジュールやツリー構造のデータに慣れている場合は、最後の記事のみをお読みになるのがよいでしょう。慣れていない場合は最初の記事から順に読ん"
"でいくと良いでしょう。"

#. tumbleweed/perl-HTTP-Body/summary
#. leap/perl-HTTP-Body/summary
#, fuzzy
msgid "HTTP Body Parser"
msgstr "HTTP cookie jar"

#. tumbleweed/perl-HTTP-Body/description
#. leap/perl-HTTP-Body/description
msgid ""
"HTTP::Body parses chunks of HTTP POST data and supports application/octet-"
"stream, application/json, application/x-www-form-urlencoded, and multipart/"
"form-data.\n"
"\n"
"Chunked bodies are supported by not passing a length value to new().\n"
"\n"
"It is currently used by the Catalyst manpage to parse POST bodies."
msgstr ""

#. tumbleweed/perl-HTTP-Cookies/summary
#. leap/perl-HTTP-Cookies/summary
msgid "HTTP cookie jars"
msgstr "HTTP cookie jar"

#. tumbleweed/perl-HTTP-Cookies/description
#. leap/perl-HTTP-Cookies/description
msgid ""
"This class is for objects that represent a \"cookie jar\" -- that is, a "
"database of all the HTTP cookies that a given LWP::UserAgent object knows "
"about.\n"
"\n"
"Cookies are a general mechanism which server side connections can use to "
"both store and retrieve information on the client side of the connection. "
"For more information about cookies refer to <URL:http://curl.haxx.se/rfc/"
"cookie_spec.html> and <URL:http://www.cookiecentral.com/>. This module also "
"implements the new style cookies described in _RFC 2965_. The two variants "
"of cookies are supposed to be able to coexist happily.\n"
"\n"
"Instances of the class _HTTP::Cookies_ are able to store a collection of Set-"
"Cookie2: and Set-Cookie: headers and are able to use this information to "
"initialize Cookie-headers in _HTTP::Request_ objects. The state of a _HTTP::"
"Cookies_ object can be saved in and restored from files."
msgstr ""
"このクラスは \"cookie jar\" を表わすオブジェクト向けのものです。言い換えれ"
"ば、すべての LWP::UserAgent オブジェクトが知っているすべての HTTP Cookie の"
"データベースです。\n"
"\n"
"Cookie とは接続とは独立した仕組みで、サーバ側の接続情報をクライアント側に保存"
"したり、それを問い合わせたりするための仕組みです。 Cookie について、詳しくは"
"<URL:http://curl.haxx.se/rfc/cookie_spec.html> と <URL:http://www."
"cookiecentral.com/>をお読みください。また、このモジュールでは _RFC_2965_ で規"
"定される新しいスタイルのCookie も実装しています。 Cookie に対する 2 つの形式"
"は問題なく共存可能です。\n"
"\n"
"また、 _HTTP::Cookies_ クラスのインスタンスは、 Set-Cookie2: や Set-Cookie: "
"のヘッダを集めて保存することができるほか、この情報を利用して _HTTP::Request_ "
"オブジェクト内の Cookie ヘッダを初期化することもできます。 HTTP::Cookies_ オ"
"ブジェクトの状態は、ファイルに保存したり、ファイルから復元したりすることもで"
"きます。"

#. tumbleweed/perl-HTTP-DAV/summary
#. leap/perl-HTTP-DAV/summary
msgid "WebDAV client library for Perl5"
msgstr "Perl5 向け WebDAV クライアントライブラリ"

#. tumbleweed/perl-HTTP-DAV/description
#. leap/perl-HTTP-DAV/description
msgid ""
"HTTP::DAV is a Perl API for interacting with and modifying content on "
"webservers using the WebDAV protocol. Now you can LOCK, DELETE and PUT files "
"and much more on a DAV-enabled webserver."
msgstr ""
"HTTP:DAV は WebDAV プロトコルを使用する Web サーバに対して、内容の修正を行な"
"うための Perl ライブラリです。 DAV サーバ上でファイルに対して LOCK, DELETE, "
"PUT の各処理を行なうことが できるなどの機能を備えています。"

#. tumbleweed/perl-HTTP-Daemon/summary
#. leap/perl-HTTP-Daemon/summary
msgid "a simple http server class"
msgstr "シンプルな http サーバクラス"

#. tumbleweed/perl-HTTP-Daemon/description
#. leap/perl-HTTP-Daemon/description
msgid ""
"Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on a "
"socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
"Socket::INET', so you can perform socket operations directly on it too.\n"
"\n"
"The accept() method will return when a connection from a client is "
"available. The returned value will be an 'HTTP::Daemon::ClientConn' object "
"which is another 'IO::Socket::INET' subclass. Calling the get_request() "
"method on this object will read data from the client and return an 'HTTP::"
"Request' object. The ClientConn object also provide methods to send back "
"various responses."
msgstr ""
"'HTTP::Daemon' クラスのインスタンスは、要求を待ち受ける HTTP/1.1 サーバとなり"
"ます。 'HTTP::Daemon' は 'IO::Socket::INET' のサブクラスであるため、ソケット"
"に対する直接操作も実施することができます。\n"
"\n"
"クライアントからの接続が到着すると、 accept() メソッドの呼び出しが返却されま"
"す。返却された値は 'HTTP::Daemon::ClientConn' オブジェクトのインスタンスで、"
"こちらは 'IO::Socket::INET' のサブクラスです。このオブジェクトに対して "
"get_request() メソッドを呼び出すと、クライアントからのデータを読み込ん"
"で'HTTP::Request' のインスタンスを返却します。 ClientConn オブジェクトでは、"
"様々な応答を返すためのメソッドが用意されています。"

#. tumbleweed/perl-HTTP-Date/summary
#. leap/perl-HTTP-Date/summary
msgid "Date conversion routines"
msgstr "日付変換ルーチン"

#. tumbleweed/perl-HTTP-Date/description
#. leap/perl-HTTP-Date/description
msgid ""
"This module provides functions that deal the date formats used by the HTTP "
"protocol (and then some more). Only the first two functions, time2str() and "
"str2time(), are exported by default."
msgstr ""
"このモジュールは、 HTTP プロトコル (その他のものも含みます) で使用される日付"
"形式を扱う関数を提供しています。既定では time2str() and str2time() という 2 "
"種類の関数だけが公開されます。"

#. tumbleweed/perl-HTTP-Headers-ActionPack/summary
#. leap/perl-HTTP-Headers-ActionPack/summary
msgid "HTTP Action, Adventure and Excitement"
msgstr ""

#. tumbleweed/perl-HTTP-Headers-ActionPack/description
#. leap/perl-HTTP-Headers-ActionPack/description
msgid ""
"This is a module to handle the inflation and deflation of complex HTTP "
"header types. In many cases header values are simple strings, but in some "
"cases they are complex values with a lot of information encoded in them. The "
"goal of this module is to make the parsing and analysis of these headers as "
"easy as calling 'inflate' on a compatible object (see below for a list).\n"
"\n"
"This top-level class is basically a Factory for creating instances of the "
"other classes in this module. It contains a number of convenience methods to "
"help make common cases easy to write."
msgstr ""

#. tumbleweed/perl-HTTP-Headers-Fast/summary
#. leap/perl-HTTP-Headers-Fast/summary
#, fuzzy
msgid "Faster Implementation of Http::Headers"
msgstr "SOAP の Apache 実装"

#. tumbleweed/perl-HTTP-Headers-Fast/description
#. leap/perl-HTTP-Headers-Fast/description
msgid ""
"HTTP::Headers::Fast is a perl class for parsing/writing HTTP headers.\n"
"\n"
"The interface is same as HTTP::Headers."
msgstr ""

#. tumbleweed/perl-HTTP-Lite/summary
#. leap/perl-HTTP-Lite/summary
#, fuzzy
msgid "Lightweight HTTP implementation"
msgstr "軽量 OSC 実装"

#. tumbleweed/perl-HTTP-Lite/description
#. leap/perl-HTTP-Lite/description
msgid ""
"*Note:* you should look at the HTTP::Tiny manpage or the LWP manpage before "
"using this module.\n"
"\n"
"HTTP::Lite is a stand-alone lightweight HTTP/1.1 implementation for perl. It "
"is not intended as a replacement for the fully-featured LWP module. Instead, "
"it is intended for use in situations where it is desirable to install the "
"minimal number of modules to achieve HTTP support, or where LWP is not a "
"good candidate due to CPU overhead, such as slower processors. HTTP::Lite is "
"also significantly faster than LWP.\n"
"\n"
"HTTP::Lite is ideal for CGI (or mod_perl) programs or for bundling for "
"redistribution with larger packages where only HTTP GET and POST "
"functionality are necessary.\n"
"\n"
"HTTP::Lite supports basic POST and GET operations only. As of 0.2.1, HTTP::"
"Lite supports HTTP/1.1 and is compliant with the Host header, necessary for "
"name based virtual hosting. Additionally, HTTP::Lite now supports Proxies.\n"
"\n"
"As of 2.0.0 HTTP::Lite now supports a callback to allow processing of "
"request data as it arrives. This is useful for handling very large files "
"without consuming memory.\n"
"\n"
"If you require more functionality, such as FTP or HTTPS, please see "
"libwwwperl (LWP). LWP is a significantly better and more comprehensive "
"package than HTTP::Lite, and should be used instead of HTTP::Lite whenever "
"possible."
msgstr ""

#. tumbleweed/perl-HTTP-Message/summary
#. leap/perl-HTTP-Message/summary
msgid "HTTP style message (base class)"
msgstr "HTTP スタイルメッセージ (ベースクラス)"

#. tumbleweed/perl-HTTP-Message/description
msgid ""
"An 'HTTP::Message' object contains some headers and a content body. The "
"following methods are available:\n"
"\n"
"* $mess = HTTP::Message->new\n"
"\n"
"* $mess = HTTP::Message->new( $headers )\n"
"\n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"  This constructs a new message object. Normally you would want construct   "
"'HTTP::Request' or 'HTTP::Response' objects instead.\n"
"\n"
"  The optional $header argument should be a reference to an 'HTTP::"
"Headers'   object or a plain array reference of key/value pairs. If an   "
"'HTTP::Headers' object is provided then a copy of it will be embedded   into "
"the constructed message, i.e. it will not be owned and can be   modified "
"afterwards without affecting the message.\n"
"\n"
"  The optional $content argument should be a string of bytes.\n"
"\n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"  This constructs a new message object by parsing the given string.\n"
"\n"
"* $mess->headers\n"
"\n"
"  Returns the embedded 'HTTP::Headers' object.\n"
"\n"
"* $mess->headers_as_string\n"
"\n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"  Call the as_string() method for the headers in the message. This will be   "
"the same as\n"
"\n"
"      $mess->headers->as_string\n"
"\n"
"  but it will make your program a whole character shorter :-)\n"
"\n"
"* $mess->content\n"
"\n"
"* $mess->content( $bytes )\n"
"\n"
"  The content() method sets the raw content if an argument is given. If no   "
"argument is given the content is not touched. In either case the original   "
"raw content is returned.\n"
"\n"
"  Note that the content should be a string of bytes. Strings in perl can   "
"contain characters outside the range of a byte. The 'Encode' module can   be "
"used to turn such strings into a string of bytes.\n"
"\n"
"* $mess->add_content( $bytes )\n"
"\n"
"  The add_content() methods appends more data bytes to the end of the   "
"current content buffer.\n"
"\n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"  The add_content_utf8() method appends the UTF-8 bytes representing the   "
"string to the end of the current content buffer.\n"
"\n"
"* $mess->content_ref\n"
"\n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"  The content_ref() method will return a reference to content buffer   "
"string. It can be more efficient to access the content this way if the   "
"content is huge, and it can even be used for direct manipulation of the   "
"content, for instance:\n"
"\n"
"    ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"  This example would modify the content buffer in-place.\n"
"\n"
"  If an argument is passed it will setup the content to reference some   "
"external source. The content() and add_content() methods will   "
"automatically dereference scalar references passed this way. For other   "
"references content() will return the reference itself and add_content()   "
"will refuse to do anything.\n"
"\n"
"* $mess->content_charset\n"
"\n"
"  This returns the charset used by the content in the message. The charset   "
"is either found as the charset attribute of the 'Content-Type' header or   "
"by guessing.\n"
"\n"
"  See the http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding   "
"manpage for details about how charset is determined.\n"
"\n"
"* $mess->decoded_content( %options )\n"
"\n"
"  Returns the content with any 'Content-Encoding' undone and for textual   "
"content the raw content encoded to Perl's Unicode strings. If the   'Content-"
"Encoding' or 'charset' of the message is unknown this method   will fail by "
"returning 'undef'.\n"
"\n"
"  The following options can be specified.\n"
"\n"
"  * 'charset'\n"
"\n"
"    This override the charset parameter for text content. The value "
"'none'     can used to suppress decoding of the charset.\n"
"\n"
"  * 'default_charset'\n"
"\n"
"    This override the default charset guessed by content_charset() or if     "
"that fails \"ISO-8859-1\".\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"    If decoding fails because the charset specified in the Content-Type     "
"header isn't recognized by Perl's Encode module, then try decoding     using "
"this charset instead of failing. The 'alt_charset' might be     specified as "
"'none' to simply return the string without any decoding of     charset as "
"alternative.\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"    Abort decoding if malformed characters is found in the content. By     "
"default you get the substitution character (\"\\x{FFFD}\") in place of     "
"malformed characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"    If TRUE then raise an exception if not able to decode content. "
"Reason     might be that the specified 'Content-Encoding' or 'charset' is "
"not     supported. If this option is FALSE, then decoded_content() will "
"return     'undef' on errors, but will still set $@.\n"
"\n"
"  * 'ref'\n"
"\n"
"    If TRUE then a reference to decoded content is returned. This might "
"be     more efficient in cases where the decoded content is identical to "
"the     raw content as no data copying is required in this case.\n"
"\n"
"* $mess->decodable\n"
"\n"
"* HTTP::Message::decodable()\n"
"\n"
"  This returns the encoding identifiers that decoded_content() can "
"process.   In scalar context returns a comma separated string of "
"identifiers.\n"
"\n"
"  This value is suitable for initializing the 'Accept-Encoding' request   "
"header field.\n"
"\n"
"* $mess->decode\n"
"\n"
"  This method tries to replace the content of the message with the decoded   "
"version and removes the 'Content-Encoding' header. Returns TRUE if   "
"successful and FALSE if not.\n"
"\n"
"  If the message does not have a 'Content-Encoding' header this method "
"does   nothing and returns TRUE.\n"
"\n"
"  Note that the content of the message is still bytes after this method "
"has   been called and you still need to call decoded_content() if you want "
"to   process its content as a string.\n"
"\n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"  Apply the given encodings to the content of the message. Returns TRUE if   "
"successful. The \"identity\" (non-)encoding is always supported; other   "
"currently supported encodings, subject to availability of required   "
"additional modules, are \"gzip\", \"deflate\", \"x-bzip2\" and \"base64\".\n"
"\n"
"  A successful call to this function will set the 'Content-Encoding'   "
"header.\n"
"\n"
"  Note that 'multipart/*' or 'message/*' messages can't be encoded and "
"this   method will croak if you try.\n"
"\n"
"* $mess->parts\n"
"\n"
"* $mess->parts( @parts )\n"
"\n"
"* $mess->parts( \\@parts )\n"
"\n"
"  Messages can be composite, i.e. contain other messages. The composite   "
"messages have a content type of 'multipart/*' or 'message/*'. This method   "
"give access to the contained messages.\n"
"\n"
"  The argumentless form will return a list of 'HTTP::Message' objects. If   "
"the content type of $msg is not 'multipart/*' or 'message/*' then this   "
"will return the empty list. In scalar context only the first object is   "
"returned. The returned message parts should be regarded as read-only   "
"(future versions of this library might make it possible to modify the   "
"parent by modifying the parts).\n"
"\n"
"  If the content type of $msg is 'message/*' then there will only be one   "
"part returned.\n"
"\n"
"  If the content type is 'message/http', then the return value will be   "
"either an 'HTTP::Request' or an 'HTTP::Response' object.\n"
"\n"
"  If a @parts argument is given, then the content of the message will be   "
"modified. The array reference form is provided so that an empty list can   "
"be provided. The @parts array should contain 'HTTP::Message' objects. The   "
"@parts objects are owned by $mess after this call and should not be   "
"modified or made part of other messages.\n"
"\n"
"  When updating the message with this method and the old content type of   "
"$mess is not 'multipart/*' or 'message/*', then the content type is set   to "
"'multipart/mixed' and all other content headers are cleared.\n"
"\n"
"  This method will croak if the content type is 'message/*' and more than   "
"one part is provided.\n"
"\n"
"* $mess->add_part( $part )\n"
"\n"
"  This will add a part to a message. The $part argument should be another   "
"'HTTP::Message' object. If the previous content type of $mess is not   "
"'multipart/*' then the old content (together with all content headers)   "
"will be made part #1 and the content type made 'multipart/mixed' before   "
"the new part is added. The $part object is owned by $mess after this call   "
"and should not be modified or made part of other messages.\n"
"\n"
"  There is no return value.\n"
"\n"
"* $mess->clear\n"
"\n"
"  Will clear the headers and set the content to the empty string. There is   "
"no return value\n"
"\n"
"* $mess->protocol\n"
"\n"
"* $mess->protocol( $proto )\n"
"\n"
"  Sets the HTTP protocol used for the message. The protocol() is a string   "
"like 'HTTP/1.0' or 'HTTP/1.1'.\n"
"\n"
"* $mess->clone\n"
"\n"
"  Returns a copy of the message object.\n"
"\n"
"* $mess->as_string\n"
"\n"
"* $mess->as_string( $eol )\n"
"\n"
"  Returns the message formatted as a single string.\n"
"\n"
"  The optional $eol parameter specifies the line ending sequence to use.   "
"The default is \"\\n\". If no $eol is given then as_string will ensure "
"that   the returned string is newline terminated (even when the message "
"content   is not). No extra newline is appended if an explicit $eol is "
"passed.\n"
"\n"
"* $mess->dump( %opt )\n"
"\n"
"  Returns the message formatted as a string. In void context print the   "
"string.\n"
"\n"
"  This differs from '$mess->as_string' in that it escapes the bytes of the   "
"content so that it's safe to print them and it limits how much content to   "
"print. The escapes syntax used is the same as for Perl's double quoted   "
"strings. If there is no content the string \"(no content)\" is shown in "
"its   place.\n"
"\n"
"  Options to influence the output can be passed as key/value pairs. The   "
"following options are recognized:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"    How much of the content to show. The default is 512. Set this to 0 "
"for     unlimited.\n"
"\n"
"    If the content is longer then the string is chopped at the limit and     "
"the string \"...\\n(### more bytes not shown)\" appended.\n"
"\n"
"  * no_content => $str\n"
"\n"
"    Replaces the \"(no content)\" marker.\n"
"\n"
"  * prefix => $str\n"
"\n"
"    A string that will be prefixed to each line of the dump.\n"
"\n"
"All methods unknown to 'HTTP::Message' itself are delegated to the 'HTTP::"
"Headers' object that is part of every message. This allows convenient access "
"to these methods. Refer to the HTTP::Headers manpage for details of these "
"methods:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"
msgstr ""
"'HTTP::Message' オブジェクトには、いくつかのヘッダと内容が含まれています。下"
"記のようなメソッドを利用することができます:\n"
"\n"
"* $mess = HTTP::Message->new\n"
"\n"
"* $mess = HTTP::Message->new( $headers )\n"
"\n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"  これらのメソッドは、いずれも新しいメッセージオブジェクトを作成します。通常"
"はこのオブジェクトを直接作成することはなく、 'HTTP::Request' または 'HTTP::"
"Response' オブジェクトを作成します。\n"
"\n"
"  オプションで指定することのできる $header パラメータは、 'HTTP::Headers' オ"
"ブジェクトに対する参照を指定することができるほか、純粋にキーと値の対を持つ配"
"列参照を指定することもできます。なお、 'HTTP::Headers' オブジェクトを指定した"
"場合は、オブジェクトをコピーして保持するようになります。つまり、指定したオブ"
"ジェクトは、メッセージに影響することなく後から利用できることになります。\n"
"\n"
"  また、オプションで指定できる $content は、バイトデータの文字列を指定しま"
"す。\n"
"\n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"  このメソッドは、指定された文字列を処理して新しいメッセージオブジェクトを作"
"成します。\n"
"\n"
"* $mess->headers\n"
"\n"
"  取り込まれている 'HTTP::Headers' オブジェクトを返します。n\n"
"\n"
"* $mess->headers_as_string\n"
"\n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"  メッセージ内のヘッダに対して as_string() を呼び出します。下記のメソッドと同"
"じ意味になります:\n"
"\n"
"      $mess->headers->as_string\n"
"\n"
"  ただし、 header_as_string のほうが幾分記述する文字数が少なくできます :-)\n"
"\n"
"* $mess->content\n"
"\n"
"* $mess->content( $bytes )\n"
"\n"
"  content() メソッドは、パラメータが指定されていた場合はその内容をそのまま保"
"存します。何もパラメータが指定されていない場合は、内容は変更されません。いず"
"れの場合も、内容のそのままのデータが返されます。\n"
"\n"
"  ただし、内容はバイトデータの文字列であるべきことに注意してください。 Perl "
"における文字列は、バイト範囲外の文字も含めることができてしまいますが、そのよ"
"うな場合は 'Encode' モジュールを利用して、文字列をバイトデータの文字列に変換"
"してください。\n"
"\n"
"* $mess->add_content( $bytes )\n"
"\n"
"  add_content() メソッドは、現在保存されている内容にデータバイトを追記しま"
"す。\n"
"\n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"  add_content_utf8() メソッドは、現在保存されている内容に UTF-8 形式で文字列"
"のバイトデータを追記します。\n"
"\n"
"* $mess->content_ref\n"
"\n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"  content_ref() メソッドは、現在保存されている内容を参照で返します。内容が巨"
"大なサイズである場合、この方法でアクセスしたほうがより効率的になる場合があり"
"ます。それは、下記のようにして直接的な操作を実施することができるためです:\n"
"\n"
"    ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"  上記の例では、内容バッファをその場で修正します。\n"
"\n"
"  パラメータを指定した場合は、その情報に対する参照を保存します。 content(), "
"add_content() メソッドでは、その方法で指定した参照を自動的に外します。その他"
"の参照の場合、 content() は参照それ自身を返すほか、 add_content() はいかなる"
"処理も拒否するようになってしまいます。\n"
"\n"
"* $mess->content_charset\n"
"\n"
"  このメソッドを実行すると、メッセージ内の内容で使用されている文字セットを返"
"します。文字セットはヘッダ内の 'Content-Type' ヘッダに記されたもののほか、推"
"測で返す場合もあります。\n"
"\n"
"  文字セットの判断について、詳しくは http://www.w3.org/TR/REC-html40/charset."
"html#spec-char-encoding をお読みください。\n"
"\n"
"* $mess->decoded_content( %options )\n"
"\n"
"  'Content-Encoding' によるエンコードを実施する前の内容で、かつ Perl の "
"Unicode 文字列にエンコードされた生データを返します。メッセージの 'Content-"
"Encoding' および 'charset' がわからない場合、このメソッドは 'undef' を返して"
"失敗を表します。\n"
"\n"
"  下記のオプションを指定することができます。\n"
"\n"
"  * 'charset'\n"
"\n"
"    このオプションを指定すると、 charset パラメータを上書きすることができま"
"す。 'none' を指定すると、文字セットのデコードを行なわなくなります。\n"
"\n"
"  * 'default_charset'\n"
"\n"
"    このオプションを指定すると、 content_charset() で既定の文字セットを推測す"
"るようになります。推測が失敗した場合は \"ISO-8859-1\" になります。\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"    Content-Type ヘッダ内に設定された文字セットが Perl の Encode モジュールで"
"認識されずに失敗した場合、ここで指定した文字セットでデコードを行なうようにな"
"ります。 'alt_charset' に 'none' を指定すると、代替の文字セットを判断すること"
"なく、デコード前の文字列をそのまま返すようになります。\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"    Abort decoding if malformed characters is found in the content. By     "
"default you get the substitution character (\"\\x{FFFD}\") in place of     "
"malformed characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"    TRUE を指定すると、内容をデコードできない場合に例外を発生させるようになり"
"ます。いずれの場合も、理由は 'Content-Encoding' または 'charset' が未対応のも"
"のであった場合です。 FALSE を指定すると、 decoded_content() はエラー時に "
"'undef' を返すようになりますが、 $@ にも値は設定されます。\n"
"\n"
"  * 'ref'\n"
"\n"
"    TRUE を指定すると、デコードされた内容の参照を返すようになります。これはデ"
"コードされた内容が元々の内容と同じで、データのコピーが不要となるような場合に"
"より効率的になります。\n"
"\n"
"* $mess->decodable\n"
"\n"
"* HTTP::Message::decodable()\n"
"\n"
"  このメソッドは、 decoded_content() が処理することのできる識別子を返します。"
"スカラー形式で、カンマ区切りの複数の識別子が返されます。\n"
"\n"
"  この値は、 'Accept-Encoding' リクエストヘッダを設定する際に便利です。\n"
"\n"
"* $mess->decode\n"
"\n"
"  このメソッドはメッセージの内容をデコードしたもので置き換え、 'Content-"
"Encoding' ヘッダを削除します。成功した場合は TRUE を、失敗した場合は FALSE を"
"返します。\n"
"\n"
"  メッセージ内に 'Content-Encoding' ヘッダが含まれていない場合、このメソッド"
"は何も実施せずに TRUE を返します。\n"
"\n"
"  ただし、このメッセージを呼び出しても、メッセージの内容がバイトデータのまま"
"であることに注意してください。文字列として内容を取り出すには、 "
"decoded_content() を呼び出す必要があります。\n"
"\n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"  指定したエンコーディングをメッセージの内容に適用します。成功した場合は "
"TRUE を返します。 \"identity\" (何もエンコードしない) 指定にも対応していま"
"す。その他のエンコーディング、具体的には \"gzip\", \"deflate\", \"x-bzip2\", "
"\"base64\" については、それぞれ追加のモジュールが必要となります。\n"
"\n"
"  このメソッドの呼び出しが成功すると、 'Content-Encoding' ヘッダが設定されま"
"す。\n"
"\n"
"  なお、 'multipart/*' や 'message/*' のメッセージはエンコードできません。こ"
"のメソッドを呼び出すと、 croak が実行されます。\n"
"\n"
"* $mess->parts\n"
"\n"
"* $mess->parts( @parts )\n"
"\n"
"* $mess->parts( \\@parts )\n"
"\n"
"  あるメッセージには他のメッセージを包含することができます。包含されたメッ"
"セージは 'multipart/*' または 'message/*' の Content-Type が設定されます。こ"
"のメソッドを利用することで、このような包含メッセージにアクセスすることができ"
"ます。\n"
"\n"
"  何もパラメータを指定しない場合は、 'HTTP::Message' のリストが返却されます。"
"メッセージの Content-Type が 'multipart/*' または 'message/*' のどちらでもな"
"い場合、このメソッドは空のリストを返します。スカラーコンテキストの場合は、最"
"初のオブジェクトのみを返します。なお、返却されたメッセージのパーツは、読み込"
"み専用で利用すべきものです (このライブラリの将来のバージョンでは、パーツを修"
"正することで元のオブジェクトを修正できるようになる予定です) 。\n"
"\n"
"  メッセージの Content-Type が 'message/*' である場合、 1 つのパートのみがあ"
"るものとみなされて返されます。\n"
"\n"
"  Content-Type が 'message/http' である場合、返却される値は 'HTTP::Request' "
"または 'HTTP::Response' オブジェクトのいずれかになります。\n"
"\n"
"  @parts パラメータを指定した場合は、メッセージの内容を修正します。配列の参照"
"で指定する場合は、空のリストも設定することができます。 @parts 配列は 'HTTP::"
"Message' のオブジェクトを含んでいるべきです。 @parts で指定したオブジェクト"
"は、このコール実行後に占有されることになりますので、後から変更したり他のメッ"
"セージの一部にしたりすべきではありません。\n"
"\n"
"  このメソッドを利用してメッセージを更新していて、古いほうの内容の Content-"
"Type が 'multipart/*' または 'message/*' のいずれでもない場合、 Content-Type "
"は 'multipart/mixed' に設定され、その他のすべての Content ヘッダが消去されま"
"す。\n"
"\n"
"  Content-Type が 'message/*' であり、 1 つ以上のパーツを指定した場合には "
"croak が実行されます。\n"
"\n"
"* $mess->add_part( $part )\n"
"\n"
"  このメソッドを実行すると、 $part をメッセージに追加します。 $part パラメー"
"タは他の 'HTTP::Message' オブジェクトであるべきです。メッセージの Content-"
"Type が 'multipart/*' でない場合、古い内容 (および内容関連のヘッダ) はパート "
"#1 として設定され、新しいパートを追加する前に Content-Type が 'multipart/"
"mixed' に設定されます。 $part で指定したオブジェクトは、このコール実行後に占"
"有されることになりますので、後から変更したり他のメッセージの一部にしたりすべ"
"きではありません。\n"
"\n"
"  このメソッドは何も値を返しません。\n"
"\n"
"* $mess->clear\n"
"\n"
"  ヘッダを消去し、内容を空の文字列に設定します。このメソッドは何も値を返しま"
"せん。\n"
"\n"
"* $mess->protocol\n"
"\n"
"* $mess->protocol( $proto )\n"
"\n"
"  メッセージで使用する HTTP プロトコルを指定します。 'HTTP/1.0' や "
"'HTTP/1.1' のような文字列を指定します。\n"
"\n"
"* $mess->clone\n"
"\n"
"  メッセージオブジェクトのコピーを返します。\n"
"\n"
"* $mess->as_string\n"
"\n"
"* $mess->as_string( $eol )\n"
"\n"
"  単一の文字列に変換してメッセージを返します。\n"
"\n"
"  オプションの $eol パラメータを指定すると、使用すべき行末文字を設定すること"
"ができます。既定値は \"\\n\" で、何も $eol を指定しない場合は、この規定値を行"
"末の区切りとします (メッセージの内容がそうでなくても) 。明示的に $eol を指定"
"すると、その文字を行末の区切りとします。\n"
"\n"
"* $mess->dump( %opt )\n"
"\n"
"  メッセージを文字列に変換して返します。\n"
"\n"
"  '$mess->as_string' との違いは内容の処理方法にあります。このメソッドでは、安"
"全に表示できない文字をエスケープ処理するほか、表示する最大の長さを指定するこ"
"ともできます。エスケープ処理は、 Perl の二重引用符内でのものと同じ方式です。"
"何も内容が設定されていない場合は、 \"(no content)\" と表示されます。\n"
"\n"
"  キー／値の対で、オプションパラメータを指定することもできます。それぞれ下記"
"のオプションに対応しています:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"    表示すべき内容の最大長を指定します。既定値は 512 で、 0 を指定すると無制"
"限になります。\n"
"\n"
"    内容がこの値よりも長い場合は、文字列がそこで切られて、末尾に \"..."
"\\n(### more bytes not shown)\" が付加されます。\n"
"\n"
"  * no_content => $str\n"
"\n"
"    \"(no content)\" の置き換えを指定します。\n"
"\n"
"  * prefix => $str\n"
"\n"
"    各ダンプ行の冒頭に、指定した文字列を表示します。\n"
"\n"
"なお、 'HTTP::Message' 自身で理解できないすべてのメソッドは、各メッセージにあ"
"る 'HTTP::Headers' オブジェクトに転送されます。これにより、メソッドにアクセス"
"しやすく作られています。下記のメソッドについての詳細は、 HTTP::Headers のマ"
"ニュアルページをお読みください:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy"

#. tumbleweed/perl-HTTP-Negotiate/summary
#. leap/perl-HTTP-Negotiate/summary
msgid "choose a variant to serve"
msgstr "HTTP Content Negotiation 仕様の実装"

#. tumbleweed/perl-HTTP-Negotiate/description
#. leap/perl-HTTP-Negotiate/description
msgid ""
"This module provides a complete implementation of the HTTP content "
"negotiation algorithm specified in _draft-ietf-http-v11-spec-00.ps_ chapter "
"12. Content negotiation allows for the selection of a preferred content "
"representation based upon attributes of the negotiable variants and the "
"value of the various Accept* header fields in the request.\n"
"\n"
"The variants are ordered by preference by calling the function choose().\n"
"\n"
"The first parameter is reference to an array of the variants to choose "
"among. Each element in this array is an array with the values [$id, $qs, "
"$content_type, $content_encoding, $charset, $content_language, "
"$content_length] whose meanings are described below. The $content_encoding "
"and $content_language can be either a single scalar value or an array "
"reference if there are several values.\n"
"\n"
"The second optional parameter is either a HTTP::Headers or a HTTP::Request "
"object which is searched for \"Accept*\" headers. If this parameter is "
"missing, then the accept specification is initialized from the CGI "
"environment variables HTTP_ACCEPT, HTTP_ACCEPT_CHARSET, HTTP_ACCEPT_ENCODING "
"and HTTP_ACCEPT_LANGUAGE.\n"
"\n"
"In an array context, choose() returns a list of [variant identifier, "
"calculated quality, size] tuples. The values are sorted by quality, highest "
"quality first. If the calculated quality is the same for two variants, then "
"they are sorted by size (smallest first). _E.g._:\n"
"\n"
"  (['var1', 1, 2000], ['var2', 0.3, 512], ['var3', 0.3, 1024]);\n"
"\n"
"Note that also zero quality variants are included in the return list even if "
"these should never be served to the client.\n"
"\n"
"In a scalar context, it returns the identifier of the variant with the "
"highest score or 'undef' if none have non-zero quality.\n"
"\n"
"If the $HTTP::Negotiate::DEBUG variable is set to TRUE, then a lot of noise "
"is generated on STDOUT during evaluation of choose()."
msgstr ""
"このモジュールは、 _draft-ietf-http-v11-spec-00.ps_ 内の第 12 章 \"12. "
"Content negotiation\" として規定された、 HTTP content negotiation アルゴリズ"
"ムを実装したものです。この仕組みにより、クライアントからネゴシエーションとし"
"て送信された変数 (属性) やリクエスト内の Accept* ヘッダの内容を元に、サーバ側"
"で必要なコンテンツを選択する機能を提供します。\n"
"\n"
"複数のコンテンツは、 choose() 関数を呼び出すことで優先順位を指定することがで"
"きます。\n"
"\n"
"最初のパラメータには、選択範囲のコンテンツを示す、配列への参照を指定しま"
"す。\n"
"配列内の各要素はさらなる配列になっていて、 [$id, $qs, $content_type, "
"$content_encoding, $charset, $content_language, $content_length] を指定しま"
"す。$content_encoding と $content_language は単一のスカラー値を指定できるほ"
"か、複数の値がありうる場合は配列を指定することもできます。\n"
"\n"
"2 つめのパラメータは HTTP::Headers または HTTP::Request のオブジェクト"
"で、\"Accept*\" ヘッダを検索するためのものです。このパラメータの指定を省略す"
"ると、CGI 用の環境変数である HTTP_ACCEPT, HTTP_ACCEPT_CHARSET, "
"HTTP_ACCEPT_ENCODING, HTTP_ACCEPT_LANGUAGE の各変数から、 accept の値を設定し"
"ます。\n"
"\n"
"choose() の返り値を配列として見た場合、 [variant identifier, calculated "
"quality, size] のリストになっています。これらの値は品質順で並べ替えられたもの"
"で、最初の値が最も高い品質値を持つデータになっています。もしも複数の値が同じ"
"品質値が得られた場合は、その中はサイズで並べ替えられます (小さいものが先にな"
"ります) 。たとえば下記のようになります:\n"
"\n"
"  (['var1', 1, 2000], ['var2', 0.3, 512], ['var3', 0.3, 1024]);\n"
"\n"
"ここで、品質値が 0 のものは、アルゴリズム上クライアント側に返却されるべきでは"
"ないにも関わらず、返却される配列にはそれらが含まれることに注意してくださ"
"い。\n"
"\n"
"スカラー値として見た場合は、最も高い品質値を持つ要素の識別子になっています。"
"0 より大きいものがない場合は、 'undef' になります。\n"
"\n"
"また、 $HTTP::Negotiate::DEBUG 変数が TRUE に設定されている場合、 choose() の"
"処理を行なう際には、 STDOUT に多数の出力が生成されます。"

#. tumbleweed/perl-HTTP-Request-AsCGI/summary
#. leap/perl-HTTP-Request-AsCGI/summary
msgid "Set up a CGI environment from an HTTP::Request"
msgstr ""

#. tumbleweed/perl-HTTP-Request-AsCGI/description
#. leap/perl-HTTP-Request-AsCGI/description
msgid ""
"Provides a convenient way of setting up an CGI environment from an HTTP::"
"Request."
msgstr ""

#. tumbleweed/perl-HTTP-Server-Simple/summary
#. leap/perl-HTTP-Server-Simple/summary
msgid "Lightweight HTTP server"
msgstr ""

#. tumbleweed/perl-HTTP-Server-Simple/description
#. leap/perl-HTTP-Server-Simple/description
msgid ""
"This is a simple standalone HTTP server. By default, it doesn't thread or "
"fork. It does, however, act as a simple frontend which can be used to build "
"a standalone web-based application or turn a CGI into one.\n"
"\n"
"It is possible to use the Net::Server manpage classes to create forking, pre-"
"forking, and other types of more complicated servers; see the /net_server "
"manpage.\n"
"\n"
"By default, the server traps a few signals:\n"
"\n"
"* HUP\n"
"\n"
"  When you 'kill -HUP' the server, it lets the current request finish "
"being   processed, then uses the 'restart' method to re-exec itself. Please "
"note   that in order to provide restart-on-SIGHUP, HTTP::Server::Simple sets "
"a   SIGHUP handler during initialisation. If your request handling code "
"forks   you need to make sure you reset this or unexpected things will "
"happen if   somebody sends a HUP to all running processes spawned by your "
"app (e.g.   by \"kill -HUP <script>\")\n"
"\n"
"* PIPE\n"
"\n"
"  If the server detects a broken pipe while writing output to the client,   "
"it ignores the signal. Otherwise, a client closing the connection early   "
"could kill the server."
msgstr ""

#. tumbleweed/perl-HTTP-Thin/summary
#. leap/perl-HTTP-Thin/summary
msgid "A Thin Wrapper around HTTP::Tiny to play nice with HTTP::Message"
msgstr ""

#. tumbleweed/perl-HTTP-Thin/description
#. leap/perl-HTTP-Thin/description
msgid ""
"WARNING: This module is untested beyond the very basics. The implementation "
"is simple enough that it shouldn't do evil things but, yeah it's still not "
"approved for use by small children.\n"
"\n"
"'HTTP::Thin' is a thin wrapper around the HTTP::Tiny manpage adding the "
"ability to pass in the HTTP::Request manpage objects and get back the HTTP::"
"Response manpage objects. The maintainers of the HTTP::Tiny manpage, "
"justifiably, don't want to have to maintain compatibility but many other "
"projects already consume the the HTTP::Message manpage objects. This is just "
"glue code doing what it does best."
msgstr ""

#. tumbleweed/perl-HTTP-Tiny/summary
#. leap/perl-HTTP-Tiny/summary
msgid "Small, Simple, Correct Http/1.1 Client"
msgstr ""

#. tumbleweed/perl-HTTP-Tiny/description
#. leap/perl-HTTP-Tiny/description
msgid ""
"This is a very simple HTTP/1.1 client, designed for doing simple requests "
"without the overhead of a large framework like LWP::UserAgent.\n"
"\n"
"It is more correct and more complete than HTTP::Lite. It supports proxies "
"and redirection. It also correctly resumes after EINTR.\n"
"\n"
"If IO::Socket::IP 0.25 or later is installed, HTTP::Tiny will use it instead "
"of IO::Socket::INET for transparent support for both IPv4 and IPv6.\n"
"\n"
"Cookie support requires HTTP::CookieJar or an equivalent class."
msgstr ""

#. tumbleweed/perl-Hash-Merge/summary
#. leap/perl-Hash-Merge/summary
msgid "Merges arbitrarily deep hashes into a single hash"
msgstr ""

#. tumbleweed/perl-Hash-Merge/description
#. leap/perl-Hash-Merge/description
msgid ""
"Hash::Merge merges two arbitrarily deep hashes into a single hash. That is, "
"at any level, it will add non-conflicting key-value pairs from one hash to "
"the other, and follows a set of specific rules when there are key value "
"conflicts (as outlined below). The hash is followed recursively, so that "
"deeply nested hashes that are at the same level will be merged when the "
"parent hashes are merged. *Please note that self-referencing hashes, or "
"recursive references, are not handled well by this method.*\n"
"\n"
"Values in hashes are considered to be either ARRAY references, HASH "
"references, or otherwise are treated as SCALARs. By default, the data passed "
"to the merge function will be cloned using the Clone module; however, if "
"necessary, this behavior can be changed to use as many of the original "
"values as possible. (See 'set_clone_behavior').\n"
"\n"
"Because there are a number of possible ways that one may want to merge "
"values when keys are conflicting, Hash::Merge provides several preset "
"methods for your convenience, as well as a way to define you own."
msgstr ""

#. tumbleweed/perl-Hash-Merge-Simple/summary
#. leap/perl-Hash-Merge-Simple/summary
msgid "Recursively merge two or more hashes, simply"
msgstr ""

#. tumbleweed/perl-Hash-Merge-Simple/description
#. leap/perl-Hash-Merge-Simple/description
msgid ""
"Hash::Merge::Simple will recursively merge two or more hashes and return the "
"result as a new hash reference. The merge function will descend and merge "
"hashes that exist under the same node in both the left and right hash, but "
"doesn't attempt to combine arrays, objects, scalars, or anything else. The "
"rightmost hash also takes precedence, replacing whatever was in the left "
"hash if a conflict occurs.\n"
"\n"
"This code was pretty much taken straight from the Catalyst::Utils manpage, "
"and modified to handle more than 2 hashes at the same time."
msgstr ""

#. tumbleweed/perl-Hash-MoreUtils/summary
#. leap/perl-Hash-MoreUtils/summary
#, fuzzy
msgid "Provide the stuff missing in Hash::Util"
msgstr "List::Util では提供されていない機能の提供"

#. tumbleweed/perl-Hash-MoreUtils/description
#. leap/perl-Hash-MoreUtils/description
msgid ""
"Similar to 'List::MoreUtils', 'Hash::MoreUtils' contains trivial but "
"commonly-used functionality for hashes."
msgstr ""

#. tumbleweed/perl-Hash-MultiValue/summary
#. leap/perl-Hash-MultiValue/summary
msgid "Store multiple values per key"
msgstr ""

#. tumbleweed/perl-Hash-MultiValue/description
#. leap/perl-Hash-MultiValue/description
msgid ""
"Hash::MultiValue is an object (and a plain hash reference) that may contain "
"multiple values per key, inspired by MultiDict of WebOb."
msgstr ""

#. tumbleweed/perl-Hash-Util-FieldHash-Compat/summary
#. leap/perl-Hash-Util-FieldHash-Compat/summary
msgid "Use Hash::Util::FieldHash or ties, depending on availability"
msgstr ""

#. tumbleweed/perl-Hash-Util-FieldHash-Compat/description
#. leap/perl-Hash-Util-FieldHash-Compat/description
msgid ""
"Under older perls this module provides a drop-in compatible API to Hash::"
"Util::FieldHash using perltie. When Hash::Util::FieldHash is available it "
"will use that instead.\n"
"\n"
"This way code requiring field hashes can benefit from fast, robust field "
"hashes on Perl 5.10 and newer, but still run on older perls that don't ship "
"with that module.\n"
"\n"
"See Hash::Util::FieldHash for all the details of the API."
msgstr ""

#. tumbleweed/perl-Hook-LexWrap/summary
#. leap/perl-Hook-LexWrap/summary
msgid "Lexically scoped subroutine wrappers"
msgstr ""

#. tumbleweed/perl-Hook-LexWrap/description
#. leap/perl-Hook-LexWrap/description
msgid ""
"Hook::LexWrap allows you to install a pre- or post-wrapper (or both) around "
"an existing subroutine. Unlike other modules that provide this capacity (e."
"g. Hook::PreAndPost and Hook::WrapSub), Hook::LexWrap implements wrappers in "
"such a way that the standard 'caller' function works correctly within the "
"wrapped subroutine.\n"
"\n"
"To install a prewrappers, you write:\n"
"\n"
"        use Hook::LexWrap;\n"
"\n"
"        wrap 'subroutine_name', pre => \\&some_other_sub;\n"
"\n"
"   \n"
"\n"
"The first argument to 'wrap' is a string containing the name of the "
"subroutine to be wrapped (or the typeglob containing it, or a reference to "
"it). The subroutine name may be qualified, and the subroutine must already "
"be defined. The second argument indicates the type of wrapper being applied "
"and must be either ''pre'' or ''post''. The third argument must be a "
"reference to a subroutine that implements the wrapper.\n"
"\n"
"To install a post-wrapper, you write:\n"
"\n"
"        wrap 'subroutine_name', post => \\&yet_another_sub;\n"
"\n"
"   \n"
"\n"
"To install both at once:\n"
"\n"
"        wrap 'subroutine_name',              pre  => "
"\\&some_other_sub,              post => \\&yet_another_sub;\n"
"\n"
"or:\n"
"\n"
"        wrap *subroutine_name,              post => \\&yet_another_sub,  # "
"order in which wrappers are              pre  => \\&some_other_sub;   # "
"specified doesn't matter\n"
"\n"
"Once they are installed, the pre- and post-wrappers will be called before "
"and after the subroutine itself, and will be passed the same argument list.\n"
"\n"
"The pre- and post-wrappers and the original subroutine also all see the same "
"(correct!) values from 'caller' and 'wantarray'."
msgstr ""

#. tumbleweed/perl-IO-All/summary
#. leap/perl-IO-All/summary
msgid "IO::All to Larry Wall!"
msgstr ""

#. tumbleweed/perl-IO-All/description
#. leap/perl-IO-All/description
msgid ""
"IO::All combines all of the best Perl IO modules into a single nifty object "
"oriented interface to greatly simplify your everyday Perl IO idioms. It "
"exports a single function called 'io', which returns a new IO::All object. "
"And that object can do it all!\n"
"\n"
"The IO::All object is a proxy for IO::File, IO::Dir, IO::Socket, Tie::File, "
"File::Spec, File::Path, File::MimeInfo and File::ReadBackwards; as well as "
"all the DBM and MLDBM modules. You can use most of the methods found in "
"these classes and in IO::Handle (which they inherit from). IO::All adds "
"dozens of other helpful idiomatic methods including file stat and "
"manipulation functions.\n"
"\n"
"IO::All is pluggable, and modules like the IO::All::LWP manpage and the IO::"
"All::Mailto manpage add even more functionality. Optionally, every IO::All "
"object can be tied to itself. This means that you can use most perl IO "
"builtins on it: readline, '<>', getc, print, printf, syswrite, sysread, "
"close.\n"
"\n"
"The distinguishing magic of IO::All is that it will automatically open (and "
"close) files, directories, sockets and other IO things for you. You never "
"need to specify the mode ('<', '>>', etc), since it is determined by the "
"usage context. That means you can replace this:\n"
"\n"
"    open STUFF, '<', './mystuff'       or die \"Can't open './mystuff' for "
"input:\\n$!\";     local $/;     my $stuff = <STUFF>;     close STUFF;\n"
"\n"
"with this:\n"
"\n"
"    my $stuff < io './mystuff';\n"
"\n"
"And that is a *good thing*!"
msgstr ""

#. tumbleweed/perl-IO-Async/summary
#. leap/perl-IO-Async/summary
msgid "Asynchronous event-driven programming"
msgstr ""

#. tumbleweed/perl-IO-Async/description
#. leap/perl-IO-Async/description
msgid ""
"This collection of modules allows programs to be written that perform "
"asynchronous filehandle IO operations. A typical program using them would "
"consist of a single subclass of the IO::Async::Loop manpage to act as a "
"container of other objects, which perform the actual IO work required by the "
"program. As well as IO handles, the loop also supports timers and signal "
"handlers, and includes more higher-level functionality built on top of these "
"basic parts.\n"
"\n"
"Because there are a lot of classes in this collection, the following "
"overview gives a brief description of each."
msgstr ""

#. tumbleweed/perl-IO-CaptureOutput/summary
#. leap/perl-IO-CaptureOutput/summary
msgid "Capture STDOUT and STDERR from Perl code, subprocesses or XS"
msgstr ""

#. tumbleweed/perl-IO-CaptureOutput/description
msgid ""
"*This module is no longer recommended by the maintainer* - see the Capture::"
"Tiny manpage instead.\n"
"\n"
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. 'system()', 'fork()') and from XS or "
"C modules."
msgstr ""

#. tumbleweed/perl-IO-Digest/summary
#. leap/perl-IO-Digest/summary
msgid "Calculate digests while reading or writing"
msgstr "読み込み時や書き込み時にダイジェスト値を計算するモジュール"

#. tumbleweed/perl-IO-Digest/description
#, fuzzy
msgid ""
"This module allows you to calculate digests while reading or writing from/to "
"file handles. This avoids having to reread the same content to compute the "
"digests after having written a file."
msgstr ""
"このモジュールは、ファイルハンドルに対する読み込みや書き込みの際にダイジェス"
"ト値を計算することができるものです。このモジュールを利用することで、ファイル"
"への書き込み後に再度読み出しを行なってダイジェスト値を計算したりする手間を省"
"くことができます。"

#. tumbleweed/perl-IO-HTML/summary
#. leap/perl-IO-HTML/summary
msgid "Open an HTML file with automatic charset detection"
msgstr "キャラクタセットを自動検出して HTML ファイルを開くモジュール"

#. tumbleweed/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.2 of the draft standard.\n"
"\n"
"The algorithm as implemented here is:\n"
"\n"
"* 1.\n"
"\n"
"  If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE,   "
"or UTF-8, then that is the encoding.\n"
"\n"
"* 2.\n"
"\n"
"  If the first 1024 bytes of the file contain a '<meta>' tag that "
"indicates   the charset, and Encode recognizes the specified charset name, "
"then that   is the encoding. (This portion of the algorithm is implemented "
"by   'find_charset_in'.)\n"
"\n"
"  The '<meta>' tag can be in one of two formats:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  The search is case-insensitive, and the order of attributes within the   "
"tag is irrelevant. Any additional attributes of the tag are ignored. The   "
"first matching tag with a recognized encoding ends the search.\n"
"\n"
"* 3.\n"
"\n"
"  If the first 1024 bytes of the file are valid UTF-8 (with at least 1   non-"
"ASCII character), then the encoding is UTF-8.\n"
"\n"
"* 4.\n"
"\n"
"  If all else fails, use the default character encoding. The HTML5 "
"standard   suggests the default encoding should be locale dependent, but "
"currently   it is always 'cp1252' unless you set '$IO::HTML::"
"default_encoding' to a   different value. Note: 'sniff_encoding' does not "
"apply this step; only   'html_file' does that."
msgstr ""
"IO::HTML は HTML を含むファイルを開くための簡単な方法で、エンコード方式を自動"
"的に判別することができます。 HTML5 のドラフト標準内のセクション 8.2.2.2 で規"
"定されたエンコード検出アルゴリズムを利用しています。\n"
"\n"
"アルゴリズムは下記のように実装されています:\n"
"\n"
"* 1.\n"
"\n"
"  ファイルの冒頭が UTF-16LE, UTF-16BE, UTF-8 の各バイトオーダーマークであった"
"場合は、そのエンコード方式を採用する。\n"
"\n"
"* 2.\n"
"\n"
"  ファイルの冒頭 1024 バイト内に '<meta>' タグが含まれていて、そこにキャラク"
"タセットと対応するエンコード方式が書かれている場合、そのエンコード方式を採用"
"する (アルゴリズムのうち、この部分は 'find_charset_in' で実装しています) 。\n"
"\n"
"  '<meta>' タグは下記の 2 つのうちのいずれかの形式であるものとする:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  検索時、大文字と小文字は区別しないほか、タグ内での属性出現順序は気にしない"
"ものとする。また、タグに付けられたその他の属性は無視するものとする。エンコー"
"ドを認識可能な最初のタグが見つかった場合は、その時点で検索を終了する。\n"
"\n"
"* 3.\n"
"\n"
"  ファイルの冒頭 1024 バイトが UTF-8 として正当なものである (少なくとも 1 文"
"字以上の非 ASCII 文字がある) 場合、エンコード方式を UTF-8 とする。\n"
"\n"
"* 4.\n"
"\n"
"  これまでの処理のすべてが失敗した場合は、既定の文字エンコード方式を利用す"
"る。HTML5 標準では既定のエンコード方式はロケール依存であるが、 '$IO::HTML::"
"default_encoding' で異なる値を指定していない限り、エンコード方式は常に "
"'cp1252' であるものとみなされる。注意: 'sniff_encoding' は上記までの手順を実"
"施せず、'html_file' のみが上記の手順を実施することに注意すること。"

#. tumbleweed/perl-IO-Handle-Util/summary
#. leap/perl-IO-Handle-Util/summary
msgid "Functions for working with L<IO::Handle> like objects"
msgstr ""

#. tumbleweed/perl-IO-Handle-Util/description
#. leap/perl-IO-Handle-Util/description
msgid ""
"This module provides a number of helpful routines to manipulate or create "
"the IO::Handle manpage like objects."
msgstr ""

#. tumbleweed/perl-IO-Interactive/summary
#. leap/perl-IO-Interactive/summary
#, fuzzy
msgid "Utilities for interactive I/O"
msgstr "GNU shar ユーティリティのユーザインターフェイステキスト"

#. tumbleweed/perl-IO-Interactive/description
#. leap/perl-IO-Interactive/description
msgid ""
"This module provides three utility subroutines that make it easier to "
"develop interactive applications...\n"
"\n"
"* 'is_interactive()'\n"
"\n"
"This subroutine returns true if '*ARGV' and the currently selected "
"filehandle (usually '*STDOUT') are connected to the terminal. The test is "
"considerably more sophisticated than:\n"
"\n"
"    -t *ARGV && -t *STDOUT\n"
"\n"
"as it takes into account the magic behaviour of '*ARGV'.\n"
"\n"
"You can also pass 'is_interactive' a writable filehandle, in which case it "
"requires that filehandle be connected to a terminal (instead of the "
"currently selected). The usual suspect here is '*STDERR':\n"
"\n"
"    if ( is_interactive(*STDERR) ) {         carp $warning;     }\n"
"\n"
"* 'interactive()'\n"
"\n"
"This subroutine returns '*STDOUT' if 'is_interactive' is true. If "
"'is_interactive()' is false, 'interactive' returns a filehandle that does "
"not print.\n"
"\n"
"This makes it easy to create applications that print out only when the "
"application is interactive:\n"
"\n"
"    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
"\n"
"You can also pass 'interactive' a writable filehandle, in which case it "
"writes to that filehandle if it is connected to a terminal (instead of "
"writing to '*STDOUT'). Once again, the usual suspect is '*STDERR':\n"
"\n"
"    print {interactive(*STDERR)} $warning;\n"
"\n"
"* 'busy {...}'\n"
"\n"
"This subroutine takes a block as its single argument and executes that "
"block. Whilst the block is executed, '*ARGV' is temporarily replaced by a "
"closed filehandle. That is, no input from '*ARGV' is possible in a 'busy' "
"block. Furthermore, any attempts to send input into the 'busy' block through "
"'*ARGV' is intercepted and a warning message is printed to '*STDERR'. The "
"'busy' call returns a filehandle that contains the intercepted input.\n"
"\n"
"A 'busy' block is therefore useful to prevent attempts at input when the "
"program is busy at some non-interactive task."
msgstr ""

#. tumbleweed/perl-IO-Multiplex/summary
#. leap/perl-IO-Multiplex/summary
msgid "Manage IO on many file handles"
msgstr "多数のファイルハンドルの管理"

#. tumbleweed/perl-IO-Multiplex/description
#. leap/perl-IO-Multiplex/description
msgid ""
"It is object oriented in design, and will notify you of significant events "
"by calling methods on an object that you supply. If you are not using "
"objects, you can simply supply '__PACKAGE__' instead of an object "
"reference.\n"
"\n"
"You may have one callback object registered for each file handle, or one "
"global one. Possibly both -- the per-file handle callback object will be "
"used instead of the global one.\n"
"\n"
"Each file handle may also have a timer associated with it. A callback "
"function is called when the timer expires."
msgstr ""

#. tumbleweed/perl-IO-Pager/summary
#. leap/perl-IO-Pager/summary
#, fuzzy
msgid "Select a pager and pipe text to it if destination is a TTY"
msgstr ""
"出力先が TTY であった場合にページャを選択し、オプションでパイプ出力するモ"
"ジュール"

#. tumbleweed/perl-IO-Pager/description
#. leap/perl-IO-Pager/description
msgid ""
"IO::Pager can be used to locate an available pager and set the _PAGER_ "
"environment variable (see the /NOTES manpage). It is also a factory for "
"creating I/O objects such as the IO::Pager::Buffered manpage and the IO::"
"Pager::Unbuffered manpage.\n"
"\n"
"IO::Pager subclasses are designed to programmatically decide whether or not "
"to pipe a filehandle's output to a program specified in _PAGER_. Subclasses "
"may implement only the IO handle methods desired and inherit the remainder "
"of those outlined below from IO::Pager. For anything else, YMMV. See the "
"appropriate subclass for implementation specific details."
msgstr ""

#. tumbleweed/perl-IO-Pipely/summary
#. leap/perl-IO-Pipely/summary
msgid "Portably create pipe() or pipe-like handles, one way or another."
msgstr ""

#. tumbleweed/perl-IO-Pipely/description
#. leap/perl-IO-Pipely/description
msgid ""
"Pipes are troublesome beasts because there are a few different, incompatible "
"ways to create them. Not all platforms support all ways, and some platforms "
"may have hidden difficulties like incomplete or buggy support.\n"
"\n"
"IO::Pipely provides a couple functions to portably create one- and two-way "
"pipes and pipe-like socket pairs. It acknowledges and works around known "
"platform issues so you don't have to.\n"
"\n"
"On the other hand, it doesn't work around unknown issues, so please report "
"any problems early and often.\n"
"\n"
"IO::Pipely currently understands pipe(), UNIX-domain socketpair() and "
"regular IPv4 localhost sockets. This covers every platform tested so far, "
"but it's hardly complete. Please help support other mechanisms, such as INET-"
"domain socketpair() and IPv6 localhost sockets.\n"
"\n"
"IO::Pipely will use different kinds of pipes or sockets depending on the "
"operating system's capabilities and the number of directions requested. The "
"autodetection may be overridden by specifying a particular pipe type."
msgstr ""

#. tumbleweed/perl-IO-SessionData/summary
#. leap/perl-IO-SessionData/summary
msgid "Supporting module for SOAP::Lite"
msgstr "SOAP::Lite 向けのサポートモジュール"

#. tumbleweed/perl-IO-SessionData/description
#. leap/perl-IO-SessionData/description
msgid "supporting module for SOAP::Lite"
msgstr "SOAP::Lite サポートモジュール"

#. tumbleweed/perl-IO-Socket-INET6/summary
#. leap/perl-IO-Socket-INET6/summary
msgid "Object interface for AF_INET/AF_INET6 domain sockets"
msgstr "AF_INET/AF_INET6 ドメインソケット向けオブジェクトインターフェイス"

#. tumbleweed/perl-IO-Socket-INET6/description
#. leap/perl-IO-Socket-INET6/description
msgid ""
"IO::Socket::INET6 provides an object interface to creating and using    "
"sockets in either AF_INET or AF_INET6 domains. It is built upon the    IO::"
"Socket interface and inherits all the methods defined by IO::Socket."
msgstr ""
"IO::Socket::INET6 は、 AF_INET と AF_INET6 の両方において、ソケットを作成した"
"り 使用したりするためのオブジェクトインターフェイスを提供します。 IO::Socket "
"インターフェイスを ベースに構築され、このインターフェイスで定義された全てのメ"
"ソッドを継承しています。"

#. tumbleweed/perl-IO-Socket-PortState/summary
#. leap/perl-IO-Socket-PortState/summary
msgid "Perl extension for checking the open or closed status of a port."
msgstr ""

#. tumbleweed/perl-IO-Socket-PortState/description
#. leap/perl-IO-Socket-PortState/description
msgid ""
"You can use it to check if a port is open or closed for a given host and "
"protocol."
msgstr ""

#. tumbleweed/perl-IO-Socket-SSL/summary
msgid "Nearly transparent SSL encapsulation for IO::Socket::INET"
msgstr "IO::Socket::INET に対するほぼ透過的な SSL カプセル化"

#. tumbleweed/perl-IO-Socket-SSL/description
#, fuzzy
msgid ""
"IO::Socket::SSL makes using SSL/TLS much easier by wrapping the necessary "
"functionality into the familiar IO::Socket interface and providing secure "
"defaults whenever possible. This way, existing applications can be made SSL-"
"aware without much effort, at least if you do blocking I/O and don't use "
"select or poll.\n"
"\n"
"But, under the hood, SSL is a complex beast. So there are lots of methods to "
"make it do what you need if the default behavior is not adequate. Because it "
"is easy to inadvertently introduce critical security bugs or just hard to "
"debug problems, I would recommend studying the following documentation "
"carefully.\n"
"\n"
"The documentation consists of the following parts:\n"
"\n"
"* * \"Essential Information About SSL/TLS\"\n"
"\n"
"* * \"Basic SSL Client\"\n"
"\n"
"* * \"Basic SSL Server\"\n"
"\n"
"* * \"Common Usage Errors\"\n"
"\n"
"* * \"Common Problems with SSL\"\n"
"\n"
"* * \"Using Non-Blocking Sockets\"\n"
"\n"
"* * \"Advanced Usage\"\n"
"\n"
"* * \"Integration Into Own Modules\"\n"
"\n"
"* * \"Description Of Methods\"\n"
"\n"
"Additional documentation can be found in\n"
"\n"
"* * IO::Socket::SSL::Intercept - Doing Man-In-The-Middle with SSL\n"
"\n"
"* * IO::Socket::SSL::Utils - Useful functions for certificates etc"
msgstr ""
"IO::Socket::SSL はわかりやすい IO::Socket のインターフェイス内に SSL/TLS で必"
"要な機能をラッピングして、可能な限り既定のままで機密な接続となるように作られ"
"ている仕組みです。このモジュールを利用することで、既存のアプリケーションがブ"
"ロッキング I/O を利用していて select や poll を利用していないような場合でも、"
"手間をかけることなく SSL 機能を追加できるようになります。\n"
"\n"
"しかしながら、 SSL は複雑な仕組みです。既定の動作では不十分な場合は、多数のメ"
"ソッドを呼び出して対応する必要があります。不注意によってセキュリティ上のバグ"
"を作り出してしまったり、単にデバッグが難しかったりすることがありますので、下"
"記のドキュメンテーションをよくお読みになり、学習することをお勧めします。\n"
"\n"
"ドキュメンテーションには下記の章があります:\n"
"\n"
"* * \"SSL/TLS に関する概要\"\n"
"\n"
"* * \"基本的な SSL クライアント\"\n"
"\n"
"* * \"基本的な SSL サーバ\"\n"
"\n"
"* * \"一般的な使用時エラー\"\n"
"\n"
"* * \"SSL を利用する際の一般的な問題\"\n"
"\n"
"* * \"非ブロッキングソケットの使用\"\n"
"\n"
"* * \"高度な使い方\"\n"
"\n"
"* * \"独自のモジュールとの統合\"\n"
"\n"
"* * \"メソッドの説明\"\n"
"\n"
"追加のドキュメンテーションはそれぞれ下記の場所にあります:\n"
"\n"
"* * IO::Socket::Intercept - SSL で Man-In-The-Middle を実施\n"
"\n"
"* * IO::Socket::SSL::Utils - 証明書などの便利な関数集"

#. tumbleweed/perl-IO-Socket-Timeout/summary
#. leap/perl-IO-Socket-Timeout/summary
msgid "IO::Socket with read/write timeout"
msgstr ""

#. tumbleweed/perl-IO-Socket-Timeout/description
#. leap/perl-IO-Socket-Timeout/description
msgid ""
"'IO::Socket' provides a way to set a timeout on the socket, but the timeout "
"will be used only for connection, not for reading / writing operations.\n"
"\n"
"This module provides a way to set a timeout on read / write operations on an "
"'IO::Socket' instance, or any 'IO::Socket::*' modules, like 'IO::Socket::"
"INET'."
msgstr ""

#. tumbleweed/perl-IO-Stty/summary
#. leap/perl-IO-Stty/summary
msgid "IO::Stty Perl module"
msgstr "IO::Stty  Perl モジュール"

#. tumbleweed/perl-IO-Stty/description
#. leap/perl-IO-Stty/description
msgid "This is the PERL POSIX compliant stty."
msgstr "これは PERL POSIX 準拠ライブラリです。"

#. tumbleweed/perl-IO-TieCombine/summary
#. leap/perl-IO-TieCombine/summary
msgid "Produce Tied (and Other) Separate but Combined Variables"
msgstr ""

#. tumbleweed/perl-IO-TieCombine/description
#. leap/perl-IO-TieCombine/description
msgid "produce tied (and other) separate but combined variables"
msgstr ""

#. tumbleweed/perl-IO-stringy/summary
#. tumbleweed/perl-IO-stringy/description
#. leap/perl-IO-stringy/summary
#. leap/perl-IO-stringy/description
msgid "IO::stringy Perl module"
msgstr "IO::stringy Perl モジュール"

#. tumbleweed/perl-IP-Country/summary
#. leap/perl-IP-Country/summary
msgid "Fast Lookup of Country Codes From Ip Addresses"
msgstr ""

#. tumbleweed/perl-IP-Country/description
#. leap/perl-IP-Country/description
msgid ""
"Finding the home country of a client using only the IP address can be "
"difficult. Looking up the domain name associated with that address can "
"provide some help, but many IP address are not reverse mapped to any useful "
"domain, and the most common domain (.com) offers no help when looking for "
"country.\n"
"\n"
"This module comes bundled with a database of countries where various IP "
"addresses have been assigned. Although the country of assignment will "
"probably be the country associated with a large ISP rather than the client "
"herself, this is probably good enough for most log analysis applications, "
"and under test has proved to be as accurate as reverse-DNS and WHOIS lookup."
msgstr ""

#. tumbleweed/perl-IPC-Run/summary
#. leap/perl-IPC-Run/summary
msgid "System() and Background Procs W/ Piping, Redirs, Ptys (Unix, Win32)"
msgstr ""
"パイプ、リダイレクト、擬似端末 (Unix, Win32) に対応した system() とバックグラ"
"ウンドプロシージャ"

#. tumbleweed/perl-IPC-Run/description
#. leap/perl-IPC-Run/description
msgid ""
"IPC::Run allows you to run and interact with child processes using files, "
"pipes, and pseudo-ttys. Both system()-style and scripted usages are "
"supported and may be mixed. Likewise, functional and OO API styles are both "
"supported and may be mixed.\n"
"\n"
"Various redirection operators reminiscent of those seen on common Unix and "
"DOS command lines are provided."
msgstr ""
"IPC::Run は、ファイルやパイプ、擬似 tty を使用して子プロセスを起動し、それら"
"と通信を行なうことができるモジュールです。 system() 形式とスクリプト形式の使"
"用の両方に対応し、混在させることもできます。また、関数形式とオブジェクト指向"
"の API の 両方に対応し、混在させることもできます。\n"
"\n"
"Unix や DOS のコマンドラインを連想されるような、さまざまなリダイレクト演算子"
"機能も提供されています。"

#. tumbleweed/perl-IPC-Run3/summary
#. leap/perl-IPC-Run3/summary
#, fuzzy
msgid "Run a Subprocess with Input/Ouput Redirection"
msgstr "入出力の転送機能付きサブプロセス実行"

#. tumbleweed/perl-IPC-Run3/description
#. leap/perl-IPC-Run3/description
msgid ""
"This module allows you to run a subprocess and redirect stdin, stdout, and/"
"or stderr to files and perl data structures. It aims to satisfy 99% of the "
"need for using 'system', 'qx', and 'open3' with a simple, extremely Perlish "
"API.\n"
"\n"
"Speed, simplicity, and portability are paramount. (That's speed of Perl "
"code; which is often much slower than the kind of buffered I/O that this "
"module uses to spool input to and output from the child command.)"
msgstr ""
"このモジュールは、サブプロセスを起動してそれらの標準入力や標準出力、標準エ"
"ラー出力などをファイルや Perl のデータ構造に転送することができます。 "
"'system' や'qx', 'open3' などを利用するための 99% の要件を満たすことを目指し"
"ていて、シンプルかつ Perl 風の API になっています。\n"
"\n"
"速度 (Perl コードの速度です; よくある仕組みではバッファされた I/O よりもずっ"
"と遅いですが、子プロセスからの入出力をスプールとして処理することにより解決し"
"ています) とシンプルさは最も重要です。"

#. tumbleweed/perl-IPC-System-Simple/summary
#. leap/perl-IPC-System-Simple/summary
msgid "Run commands simply, with detailed diagnostics"
msgstr ""

#. tumbleweed/perl-IPC-System-Simple/description
#. leap/perl-IPC-System-Simple/description
msgid ""
"Calling Perl's in-built 'system()' function is easy, determining if it was "
"successful is _hard_. Let's face it, '$?' isn't the nicest variable in the "
"world to play with, and even if you _do_ check it, producing a well-"
"formatted error string takes a lot of work.\n"
"\n"
"'IPC::System::Simple' takes the hard work out of calling external commands. "
"In fact, if you want to be really lazy, you can just write:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"and all of your 'system' commands will either succeed (run to completion and "
"return a zero exit value), or die with rich diagnostic messages.\n"
"\n"
"The 'IPC::System::Simple' module also provides a simple replacement to "
"Perl's backticks operator. Simply write:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"and then use the the /capture() manpage command just like you'd use "
"backticks. If there's an error, it will die with a detailed description of "
"what went wrong. Better still, you can even use 'capturex()' to run the "
"equivalent of backticks, but without the shell:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"If you want more power than the basic interface, including the ability to "
"specify which exit values are acceptable, trap errors, or process "
"diagnostics, then read on!"
msgstr ""

#. tumbleweed/perl-IRI/summary
#. leap/perl-IRI/summary
#, fuzzy
msgid "Internationalized Resource Identifiers"
msgstr "国際化ユーティリティ"

#. tumbleweed/perl-IRI/description
#. leap/perl-IRI/description
msgid ""
"The IRI module provides an object representation for Internationalized "
"Resource Identifiers (IRIs) as defined by http://www.ietf.org/rfc/rfc3987."
"txt and supports their parsing, serializing, and base resolution."
msgstr ""

#. tumbleweed/perl-Ima-DBI/summary
#. leap/perl-Ima-DBI/summary
#, fuzzy
msgid "Database connection caching and organization"
msgstr "Mono 向けデータベース接続"

#. tumbleweed/perl-Ima-DBI/description
#. leap/perl-Ima-DBI/description
msgid ""
"Ima::DBI attempts to organize and facilitate caching and more efficient use "
"of database connections and statement handles by storing DBI and SQL "
"information with your class (instead of as seperate objects). This allows "
"you to pass around just one object without worrying about a trail of DBI "
"handles behind it.\n"
"\n"
"One of the things I always found annoying about writing large programs with "
"DBI was making sure that I didn't have duplicate database handles open. I "
"was also annoyed by the somewhat wasteful nature of the prepare/execute/"
"finish route I'd tend to go through in my subroutines. The new DBI-"
">connect_cached and DBI->prepare_cached helped a lot, but I still had to "
"throw around global datasource, username and password information.\n"
"\n"
"So, after a while I grew a small library of DBI helper routines and "
"techniques. Ima::DBI is the culmination of all this, put into a nice(?), "
"clean(?) class to be inherited from."
msgstr ""

#. tumbleweed/perl-Image-ExifTool/summary
#. leap/perl-Image-ExifTool/summary
msgid "Perl module to read and write meta information"
msgstr "メタデータを読み書きする Perl モジュール"

#. tumbleweed/perl-Image-ExifTool/description
#. leap/perl-Image-ExifTool/description
#, fuzzy
msgid ""
"ExifTool is a customisable set of Perl modules plus a full-featured "
"application for reading and writing meta information in a wide variety of "
"files, including the maker note information of many digital cameras by "
"various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
"Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/Leica, "
"Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony."
msgstr ""
"ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書きす"
"るアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応してい"
"て、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, コダック, "
"Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パナソニック／"
"ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サンヨー, Sigma/"
"Foveon, SONY などに対応しています。"

#. tumbleweed/perl-Image-Info/summary
#. leap/perl-Image-Info/summary
#, fuzzy
msgid "Extract meta information from image files"
msgstr "Macintosh BinHex ファイルからのデータ抽出"

#. tumbleweed/perl-Image-Info/description
#. leap/perl-Image-Info/description
#, fuzzy
msgid ""
"This module provide functions to extract various kinds of meta information "
"from image files."
msgstr ""
"このモジュールは、時間範囲を曖昧な形で／正確な形で表現する機能を提供します。"

#. tumbleweed/perl-Image-Size/summary
#. leap/perl-Image-Size/summary
msgid "Read the Dimensions of an Image in Several Popular Formats"
msgstr "いくつかの有名な形式に対応した画像のサイズ読み込み"

#. tumbleweed/perl-Image-Size/description
#. leap/perl-Image-Size/description
msgid ""
"The *Image::Size* library is based upon the 'wwwis' script written by Alex "
"Knowles _(alex@ed.ac.uk)_, a tool to examine HTML and add 'width' and "
"'height' parameters to image tags. The sizes are cached internally based on "
"file name, so multiple calls on the same file name (such as images used in "
"bulleted lists, for example) do not result in repeated computations."
msgstr ""
"*Image::Size* ライブラリは、 Alex Knowles _(alex@ed.ac.uk)_ 氏作成の \"wwwis"
"\" スクリプトをベースにしたもので、 HTML を参照して画像タグに '幅' と '高さ' "
"のパラメータを追加するユーティリティです。大きさはファイル名をベースにして内"
"部的に記憶されるため、同じファイル名に対する複数の参照が存在した場合 (たとえ"
"ば箇条書きで冒頭に書く点の画像など) は、計算処理を繰り返さずに出力されます。"

#. tumbleweed/perl-Import-Into/summary
#. leap/perl-Import-Into/summary
msgid "Import packages into other packages"
msgstr ""

#. tumbleweed/perl-Import-Into/description
#. leap/perl-Import-Into/description
msgid ""
"Writing exporters is a pain. Some use the Exporter manpage, some use the "
"Sub::Exporter manpage, some use the Moose::Exporter manpage, some use the "
"Exporter::Declare manpage ... and some things are pragmas.\n"
"\n"
"Exporting on someone else's behalf is harder. The exporters don't provide a "
"consistent API for this, and pragmas need to have their import method called "
"directly, since they effect the current unit of compilation.\n"
"\n"
"'Import::Into' provides global methods to make this painless."
msgstr ""

#. tumbleweed/perl-Inline/summary
#. leap/perl-Inline/summary
msgid "Write Perl Subroutines in Other Programming Languages"
msgstr "他のプログラミング言語で Perl のサブルーチンを作成するモジュール"

#. tumbleweed/perl-Inline/description
#. leap/perl-Inline/description
msgid ""
"The Inline module allows you to put source code from other programming "
"languages directly \"inline\" in a Perl script or module. The code is "
"automatically compiled as needed, and then loaded for immediate access from "
"Perl.\n"
"\n"
"Inline saves you from the hassle of having to write and compile your own "
"glue code using facilities like XS or SWIG. Simply type the code where you "
"want it and run your Perl as normal. All the hairy details are handled for "
"you. The compilation and installation of your code chunks all happen "
"transparently; all you will notice is the delay of compilation on the first "
"run.\n"
"\n"
"The Inline code only gets compiled the first time you run it (or whenever it "
"is modified) so you only take the performance hit once. Code that is Inlined "
"into distributed modules (like on the CPAN) will get compiled when the "
"module is installed, so the end user will never notice the compilation "
"time.\n"
"\n"
"Best of all, it works the same on both Unix and Microsoft Windows. See the "
"Inline- Support manpage for support information."
msgstr ""
"Inline モジュールは、 Perl スクリプトまたはモジュールの中に直接他の言語のソー"
"スコードを \"インライン\" で埋め込むモジュールです。コードは必要に応じて自動"
"的にコンパイルされ、 Perl から即時にアクセスできるよう読み込まれます。\n"
"\n"
"Inline は XS や SWIG のような機構を使用したグルーコードを作成してコンパイルす"
"る手間を省くことができます。必要なコードを中に記述して、 Perl を通常通りに実"
"行するだけです。難しい処理は Inline が行ないます。コードチャンクのコンパイル"
"とインストールは透過的に行なわれます; 初回の起動時にコンパイルが動作するた"
"め、その時にのみ遅いと感じる程度でしょう。\n"
"\n"
"Inline のコードは初回の実行時 (および変更時) にのみコンパイルされるため、性能"
"の劣化もその時だけです。 Inline で記述されたコードは (CPAN などで) モジュール"
"内で配布することもできますので、モジュールを読み込んだ時にコンパイルが行なわ"
"れ、エンドユーザは何もすることなくそのまま実行できるようになります。\n"
"\n"
"Unix および Microsoft Windows で同じように動作します。サポート情報について、"
"詳しくは Inline- Support のマニュアルページをお読みください。"

#. tumbleweed/perl-Iterator/summary
#. leap/perl-Iterator/summary
#, fuzzy
msgid "A general-purpose iterator class"
msgstr "汎用ライブラリ"

#. tumbleweed/perl-Iterator/description
#. leap/perl-Iterator/description
msgid ""
"This module is meant to be the definitive implementation of iterators, as "
"popularized by Mark Jason Dominus's lectures and recent book (_Higher Order "
"Perl_, Morgan Kauffman, 2005).\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. When "
"you need a value to operate on, you pull it from the iterator. If it depends "
"on other iterators, it pulls values from them when it needs to. Iterators "
"can be chained together (see the Iterator::Util manpage for functions that "
"help you do just that), queueing up work to be done but _not actually doing "
"it_ until a value is needed at the front end of the chain. At that time, one "
"data value is pulled through the chain.\n"
"\n"
"Contrast this with ordinary array processing, where you load or compute all "
"of the input values at once, then loop over them in memory. It's analogous "
"to the difference between looping over a file one line at a time, and "
"reading the entire file into an array of lines before operating on it.\n"
"\n"
"Iterator.pm provides a class that simplifies creation and use of these "
"iterator objects. Other 'Iterator::' modules (see the /\"SEE ALSO\" manpage) "
"provide many general-purpose and special-purpose iterator functions.\n"
"\n"
"Some iterators are infinite (that is, they generate infinite sequences), and "
"some are finite. When the end of a finite sequence is reached, the iterator "
"code block should throw an exception of the type 'Iterator::X::"
"Am_Now_Exhausted'; this is usually done via the the /is_done manpage "
"function.. This will signal the Iterator class to mark the object as "
"exhausted. The the /is_exhausted manpage method will then return true, and "
"the the /isnt_exhausted manpage method will return false. Any further calls "
"to the the /value manpage method will throw an exception of the type "
"'Iterator::X::Exhausted'. See the /DIAGNOSTICS manpage.\n"
"\n"
"Note that in many, many cases, you will not need to explicitly create an "
"iterator; there are plenty of iterator generation and manipulation functions "
"in the other associated modules. You can just plug them together like "
"building blocks."
msgstr ""

#. tumbleweed/perl-Iterator-Util/summary
#. leap/perl-Iterator-Util/summary
msgid "Essential utilities for the Iterator class"
msgstr ""

#. tumbleweed/perl-Iterator-Util/description
#. leap/perl-Iterator-Util/description
msgid ""
"This module implements many useful functions for creating and manipulating "
"iterator objects.\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. For "
"further information, including a tutorial on using iterator objects, see the "
"the Iterator manpage documentation."
msgstr ""

#. tumbleweed/perl-JSON/summary
#. leap/perl-JSON/summary
msgid "JSON (JavaScript Object Notation) encoder/decoder"
msgstr "JSON (JavaScript オブジェクト表記) エンコーダ／デコーダ"

#. tumbleweed/perl-JSON/description
#. leap/perl-JSON/description
msgid ""
" *************************** CAUTION **************************************  "
"*                                                                        *  "
"* INCOMPATIBLE CHANGE (JSON::XS version 2.90)                            *  "
"*                                                                        *  "
"* JSON.pm had patched JSON::XS::Boolean and JSON::PP::Boolean internally *  "
"* on loading time for making these modules inherit JSON::Boolean.        *  "
"* But since JSON::XS v3.0 it use Types::Serialiser as boolean class.     *  "
"* Then now JSON.pm breaks boolean classe overload features and           *  "
"* -support_by_pp if JSON::XS v3.0 or later is installed.                 *  "
"*                                                                        *  "
"* JSON::true and JSON::false returned JSON::Boolean objects.             *  "
"* For workaround, they return JSON::PP::Boolean objects in this version. *  "
"*                                                                        *  "
"*     isa_ok(JSON::true, 'JSON::PP::Boolean');                           *  "
"*                                                                        *  "
"* And it discards a feature:                                             *  "
"*                                                                        *  "
"*     ok(JSON::true eq 'true');                                          *  "
"*                                                                        *  "
"* In other word, JSON::PP::Boolean overload numeric only.                *  "
"*                                                                        *  "
"*     ok( JSON::true == 1 );                                             *  "
"*                                                                        *  "
"**************************************************************************\n"
"\n"
" ************************** CAUTION ********************************  * This "
"is 'JSON module version 2' and there are many differences  *  * to version 1."
"xx                                                 *  * Please check your "
"applications using old version.              *  *   See to 'INCOMPATIBLE "
"CHANGES TO OLD VERSION'                  *  "
"*******************************************************************\n"
"\n"
"JSON (JavaScript Object Notation) is a simple data format. See to the http://"
"www.json.org/ manpage and 'RFC4627'(the http://www.ietf.org/rfc/rfc4627.txt "
"manpage).\n"
"\n"
"This module converts Perl data structures to JSON and vice versa using "
"either the JSON::XS manpage or the JSON::PP manpage.\n"
"\n"
"JSON::XS is the fastest and most proper JSON module on CPAN which must be "
"compiled and installed in your environment. JSON::PP is a pure-Perl module "
"which is bundled in this distribution and has a strong compatibility to "
"JSON::XS.\n"
"\n"
"This module try to use JSON::XS by default and fail to it, use JSON::PP "
"instead. So its features completely depend on JSON::XS or JSON::PP.\n"
"\n"
"See to the BACKEND MODULE DECISION manpage.\n"
"\n"
"To distinguish the module name 'JSON' and the format type JSON, the former "
"is quoted by C<> (its results vary with your using media), and the latter is "
"left just as it is.\n"
"\n"
"Module name : 'JSON'\n"
"\n"
"Format type : JSON"
msgstr ""
" **************************** 注 意 ***************************************  "
"*                                                                        *  "
"* 互換性の維持されない変更 (JSON::XS バージョン 2.90)                    *  "
"*                                                                        *  "
"* JSON.pm では、その読み込み時に修正が適用された版の JSON::XS::Boolean   *  "
"* と JSON::PP::Boolean を使用していて、これらは JSON::Boolean を継承する *  "
"* ものになっています。しかし、 JSON::XS v3.0 からは、 boolean クラスに   *  "
"* Types::Serialiser を使用しています。そのため、 JSON::XS v3.0 または    *  "
"* それ以降のバージョンをインストールした場合、 JSON.pm は boolean クラス *  "
"* のオーバーロード機能と、 support_by_pp の機能を破壊します。            *  "
"*                                                                        *  "
"* JSON::Boolean は JSON::true と JSON::false のいずれかを返しますが、    *  "
"* 回避するには、このバージョンの JSON::PP::Boolean オブジェクトを返却    *  "
"* してください。                                                         *  "
"*                                                                        *  "
"*     isa_ok(JSON::true, 'JSON::PP::Boolean');                           *  "
"*                                                                        *  "
"* また、下記のようにして機能を無効化してください:                        *  "
"*                                                                        *  "
"*     ok(JSON::true eq 'true');                                          *  "
"*                                                                        *  "
"* JSON::PP::Boolean を数値でオーバーロードすることもできます:            *  "
"*                                                                        *  "
"*     ok( JSON::true == 1 );                                             *  "
"*                                                                        *  "
"**************************************************************************\n"
"\n"
" *************************** 注意 *********************************  * これ"
"は 'JSON モジュールバージョン 2' で、バージョン 1 と比べて *  * 多数の違いが"
"存在します。                                       *  "
"*                                                                *  * アプリ"
"ケーションが古いバージョンを利用している場合は、         *  * 'INCOMPATIBLE "
"CHANGES TO OLD VERSION' (互換性の維持されない    *  * 変更) をお読みくださ"
"い。                                       *  "
"******************************************************************\n"
"\n"
"JSON (JavaScript Object Notation) はシンプルなデータフォーマットです。詳しく"
"は http://www.json.org/ にあるマニュアルページ、もしくは 'RFC4627' (http://"
"www.ietf.org/rfc/rfc4627.txt) をお読みください。\n"
"\n"
"このモジュールは、 JSON::XS または JSON:PP のいずれかを利用して、 Perl のデー"
"タ構造を JSON に変換したり、その逆の変換を行なったりします。\n"
"\n"
"JSON::XS は CPAN モジュールの中で最も高速で適切な JSON モジュールで、お使いの"
"環境にコンパイルしてインストールしておくべきものです。 JSON:PP は純粋な Perl "
"モジュールで、本ディストリビューションにバンドルされ、 JSON::XS との強い互換"
"性を維持しています。\n"
"\n"
"このモジュールは、既定では JSON::XS を使用しますが、これがうまく動作しない場"
"合は JSON:PP を利用します。そのため、機能面は JSON::XS または JSON:PP に完全"
"に依存した形になっています。\n"
"\n"
"詳しくはマニュアルページ内 BACKEND MODULE DECISION の項をお読みください。\n"
"\n"
"モジュール名の 'JSON' とフォーマット形式の JSON を区別するため、前者について"
"は C<> で括って表現し (お使いのメディアによっては表示形態が異なります) 、後者"
"はそのまま表現しています。\n"
"\n"
"モジュール名 : 'JSON'\n"
"\n"
"フォーマットの種類 : JSON"

#. tumbleweed/perl-JSON-Any/summary
#. leap/perl-JSON-Any/summary
msgid "(DEPRECATED) Wrapper Class for the various JSON classes"
msgstr ""

#. tumbleweed/perl-JSON-Any/description
#. leap/perl-JSON-Any/description
msgid ""
"This module tries to provide a coherent API to bring together the various "
"JSON modules currently on CPAN. This module will allow you to code to any "
"JSON API and have it work regardless of which JSON module is actually "
"installed.\n"
"\n"
"    use JSON::Any;\n"
"\n"
"    my $j = JSON::Any->new;\n"
"\n"
"    $json = $j->objToJson({foo=>'bar', baz=>'quux'});     $obj = $j-"
">jsonToObj($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->encode({foo=>'bar', baz=>'quux'});     $obj = $j-"
">decode($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->Dump({foo=>'bar', baz=>'quux'});     $obj = $j-"
">Load($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->to_json({foo=>'bar', baz=>'quux'});     $obj = $j-"
">from_json($json);\n"
"\n"
"or without creating an object:\n"
"\n"
"    $json = JSON::Any->objToJson({foo=>'bar', baz=>'quux'});     $obj = "
"JSON::Any->jsonToObj($json);\n"
"\n"
"On load, JSON::Any will find a valid JSON module in your @INC by looking for "
"them in this order:\n"
"\n"
"    Cpanel::JSON::XS     JSON::XS     JSON::PP     JSON     JSON::DWIW\n"
"\n"
"And loading the first one it finds.\n"
"\n"
"You may change the order by specifying it on the 'use JSON::Any' line:\n"
"\n"
"    use JSON::Any qw(DWIW XS CPANEL JSON PP);\n"
"\n"
"Specifying an order that is missing modules will prevent those module from "
"being used:\n"
"\n"
"    use JSON::Any qw(CPANEL PP); # same as JSON::MaybeXS\n"
"\n"
"This will check in that order, and will never attempt to load the JSON::XS "
"manpage, the JSON.pm/JSON manpage, or the JSON::DWIW manpage. This can also "
"be set via the '$ENV{JSON_ANY_ORDER}' environment variable.\n"
"\n"
"the JSON::Syck manpage has been deprecated by its author, but in the attempt "
"to still stay relevant as a \"Compatibility Layer\" JSON::Any still supports "
"it. This support however has been made optional starting with JSON::Any "
"1.19. In deference to a bug request starting with JSON 1.20, the JSON::Syck "
"manpage and other deprecated modules will still be installed, but only as a "
"last resort and will now include a warning.\n"
"\n"
"    use JSON::Any qw(Syck XS JSON);\n"
"\n"
"or\n"
"\n"
"    $ENV{JSON_ANY_ORDER} = 'Syck XS JSON';\n"
"\n"
"At install time, JSON::Any will attempt to install the JSON::PP manpage as a "
"reasonable fallback if you do not appear have *any* backends installed on "
"your system.\n"
"\n"
"WARNING: If you call JSON::Any with an empty list\n"
"\n"
"    use JSON::Any ();\n"
"\n"
"It will skip the JSON package detection routines and will die loudly that it "
"couldn't find a package."
msgstr ""

#. tumbleweed/perl-JSON-MaybeXS/summary
#. leap/perl-JSON-MaybeXS/summary
msgid "Use L<Cpanel::JSON::XS> with a fallback to L<JSON::XS> and L<JSON::PP>"
msgstr ""

#. tumbleweed/perl-JSON-MaybeXS/description
#. leap/perl-JSON-MaybeXS/description
msgid ""
"This module first checks to see if either the Cpanel::JSON::XS manpage or "
"the JSON::XS manpage is already loaded, in which case it uses that module. "
"Otherwise it tries to load the Cpanel::JSON::XS manpage, then the JSON::XS "
"manpage, then the JSON::PP manpage in order, and either uses the first "
"module it finds or throws an error.\n"
"\n"
"It then exports the 'encode_json' and 'decode_json' functions from the "
"loaded module, along with a 'JSON' constant that returns the class name for "
"calling 'new' on.\n"
"\n"
"If you're writing fresh code rather than replacing JSON usage, you might "
"want to pass options as constructor args rather than calling mutators, so we "
"provide our own 'new' method that supports that."
msgstr ""

#. tumbleweed/perl-JSON-RPC/summary
#. leap/perl-JSON-RPC/summary
#, fuzzy
msgid "JSON RPC 2.0 Server Implementation"
msgstr "初期設定管理"

#. tumbleweed/perl-JSON-RPC/description
#. leap/perl-JSON-RPC/description
msgid ""
"JSON::RPC is a set of modules that implement JSON RPC 2.0 protocol.\n"
"\n"
"    If you are using old JSON::RPC code (up to 0.96), DO NOT EXPECT     YOUR "
"CODE TO WORK WITH THIS VERSION. THIS VERSION IS     ****BACKWARDS "
"INCOMPATIBLE****"
msgstr ""

#. tumbleweed/perl-LWP-MediaTypes/summary
#. leap/perl-LWP-MediaTypes/summary
msgid "guess media type for a file or a URL"
msgstr "ファイルや URL からメディアの種類を推測する"

#. tumbleweed/perl-LWP-MediaTypes/description
#. leap/perl-LWP-MediaTypes/description
msgid ""
"This module provides functions for handling media (also known as MIME) types "
"and encodings. The mapping from file extensions to media types is defined by "
"the _media.types_ file. If the _~/.media.types_ file exists it is used "
"instead. For backwards compatibility we will also look for _~/.mime.types_.\n"
"\n"
"The following functions are exported by default:\n"
"\n"
"* guess_media_type( $filename )\n"
"\n"
"* guess_media_type( $uri )\n"
"\n"
"* guess_media_type( $filename_or_uri, $header_to_modify )\n"
"\n"
"  This function tries to guess media type and encoding for a file or a "
"URI.   It returns the content type, which is a string like '\"text/html\"'. "
"In   array context it also returns any content encodings applied (in the "
"order   used to encode the file). You can pass a URI object reference, "
"instead of   the file name.\n"
"\n"
"  If the type can not be deduced from looking at the file name, then   "
"guess_media_type() will let the '-T' Perl operator take a look. If this   "
"works (and '-T' returns a TRUE value) then we return _text/plain_ as the   "
"type, otherwise we return _application/octet-stream_ as the type.\n"
"\n"
"  The optional second argument should be a reference to a HTTP::Headers   "
"object or any object that implements the $obj->header method in a similar   "
"way. When it is present the values of the 'Content-Type' and   'Content-"
"Encoding' will be set for this header.\n"
"\n"
"* media_suffix( $type, ... )\n"
"\n"
"  This function will return all suffixes that can be used to denote the   "
"specified media type(s). Wildcard types can be used. In a scalar context   "
"it will return the first suffix found. Examples:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"The following functions are only exported by explicit request:\n"
"\n"
"* add_type( $type, @exts )\n"
"\n"
"  Associate a list of file extensions with the given media type. Example:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml));\n"
"\n"
"* add_encoding( $type, @ext )\n"
"\n"
"  Associate a list of file extensions with an encoding type. Example:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\");\n"
"\n"
"* read_media_types( @files )\n"
"\n"
"  Parse media types files and add the type mappings found there. Example:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"
msgstr ""
"このモジュールは、メディアタイプ (MIME とも呼ばれます) とエンコーディングを処"
"理する関数を提供します。ファイルの拡張子からメディアタイプへの割り当ては、 "
"_media.types_ ファイルで指定します。 _~/.media.types_ ファイルが存在する場合"
"は、このファイルが優先的に使われます。また、後方互換性のため、 _~/.mime."
"types_ にも対応しています。\n"
"\n"
"既定では、下記の関数が公開されています:\n"
"\n"
"* guess_media_type( $filename )\n"
"\n"
"* guess_media_type( $uri )\n"
"\n"
"* guess_media_type( $filename_or_uri, $header_to_modify )\n"
"\n"
"  この関数は、ファイルまたは URI に対するメディアタイプとエンコーディングを推"
"測します。返り値は Content-Type の値で、たとえば '\"text/html\"' のような文字"
"列になります。配列のコンテキストであれば、コンテンツに対するエンコーディング"
"も返されます (ファイルをエンコードする際に利用していたもの) 。また、ファイル"
"の代わりに URI オブジェクトの参照を指定したりすることもできます。\n"
"\n"
"  ファイル名を見ただけではタイプを判別できない場合、 guess_media_type() は'-"
"T' の Perl 演算子を利用して、内容を参照します。これがうまく動作した場合 (か"
"つ '-T' が TRUE を返した場合) は、タイプに _text/plain_ を設定しますが、うま"
"く動作しなかった場合は、タイプとして _application/octet-stream_ を設定しま"
"す。\n"
"\n"
"  任意で指定できる 2 つめのパラメータは、 HTTP::Headers オブジェクトの参照ま"
"たは似たような方法で $obj->header メソッドを実装するオブジェクトを指定するこ"
"とができます。それぞれ 'Content-Type' や 'Content-Encoding' の値が存在する場"
"合、これらの値が書き換えられます。\n"
"\n"
"* media_suffix( $type, ... )\n"
"\n"
"  この関数は、指定したメディアタイプを示す接尾辞を返却します。ワイルドカード"
"での指定も行なうことができます。スカラーコンテキストの場合、最初に見つかった"
"接尾辞を返します。たとえば下記のようになります:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"下記の関数は、明示的に要求した場合にのみ公開されます:\n"
"\n"
"* add_type( $type, @exts )\n"
"\n"
"  メディアタイプに対して、ファイルの拡張子の一覧を割り当てます。たとえば下記"
"のようになります:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml));\n"
"\n"
"* add_encoding( $type, @ext )\n"
"\n"
"  エンコーディングタイプに対して、ファイルの拡張子の一覧を割り当てます。たと"
"えば下記のようになります:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\");\n"
"\n"
"* read_media_types( @files )\n"
"\n"
"  メディアタイプを処理して、見つかったタイプマップを追加します。たとえば下記"
"のようになります:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"

#. tumbleweed/perl-LWP-Online/summary
#. leap/perl-LWP-Online/summary
msgid "Does your process have access to the web"
msgstr ""

#. tumbleweed/perl-LWP-Online/description
#. leap/perl-LWP-Online/description
msgid ""
"This module attempts to answer, as accurately as it can, one of the nastiest "
"technical questions there is.\n"
"\n"
"*Am I on the internet?*\n"
"\n"
"The answer is useful in a wide range of decisions. For example...\n"
"\n"
"_Should my test scripts run the online portion of the tests or just skip "
"them?_\n"
"\n"
"_Do I try to fetch fresh data from the server?_\n"
"\n"
"_If my request to the server breaks, is it because I'm offline, or because "
"the server is offline?_\n"
"\n"
"And so on, and so forth.\n"
"\n"
"But a host of networking and security issues make this problem very "
"difficult. There are firewalls, proxies (both well behaved and badly "
"behaved). We might not have DNS. We might not have a network card at all!\n"
"\n"
"You might have network access, but only to a for-money wireless network that "
"responds to ever HTTP request with a page asking you to enter your credit "
"card details for paid access. Which means you don't \"REALLY\" have access.\n"
"\n"
"The mere nature of the question makes it practically unsolvable.\n"
"\n"
"But with the answer being so useful, and the only other alternative being to "
"ask the user \"duh... are you online?\" (when you might not have a user at "
"all) it's my gut feeling that it is worthwhile at least making an attempt to "
"solve the problem, if only in a limited way."
msgstr ""

#. tumbleweed/perl-LWP-Protocol-https/summary
#. leap/perl-LWP-Protocol-https/summary
msgid "Provide https support for LWP::UserAgent"
msgstr "LWP::UserAgent 向けの https サポート"

#. tumbleweed/perl-LWP-Protocol-https/description
#. leap/perl-LWP-Protocol-https/description
msgid ""
"The LWP::Protocol::https module provides support for using https schemed "
"URLs with LWP. This module is a plug-in to the LWP protocol handling, so you "
"don't use it directly. Once the module is installed LWP is able to access "
"sites using HTTP over SSL/TLS.\n"
"\n"
"If hostname verification is requested by LWP::UserAgent's 'ssl_opts', and "
"neither 'SSL_ca_file' nor 'SSL_ca_path' is set, then 'SSL_ca_file' is "
"implied to be the one provided by Mozilla::CA. If the Mozilla::CA module "
"isn't available SSL requests will fail. Either install this module, set up "
"an alternative 'SSL_ca_file' or disable hostname verification.\n"
"\n"
"This module used to be bundled with the libwww-perl, but it was unbundled in "
"v6.02 in order to be able to declare its dependencies properly for the CPAN "
"tool-chain. Applications that need https support can just declare their "
"dependency on LWP::Protocol::https and will no longer need to know what "
"underlying modules to install."
msgstr ""
"LWP::Protocol::https モジュールは、 https スキームを利用する URL 向けのLWP モ"
"ジュールです。このモジュールは LWP プロトコルハンドらに対するプラグインとして"
"動作するものであり、直接使用してはなりません。このモジュールをインストールす"
"ることで、 LWP から HTTP over SSL/TLS を利用してアクセスできるようになりま"
"す。\n"
"\n"
"LWP::UserAgent の 'ssl_opts' でホスト名検証が要求された場合で、 "
"'SSL_ca_file' と 'SSL_ca_path' のいずれも指定されない場合は、 'SSL_ca_file' "
"は Mozilla::CA が提供するものを利用します。 Mozilla::CA モジュールが利用でき"
"ない場合は、 SSL 要求は失敗します。そのモジュールをインストールするか、 "
"'SSL_ca_file' で代替の CA ファイルを指定するか、もしくはホスト名検証を無効化"
"してください。\n"
"\n"
"このモジュールは libwww-perl と共に同梱して使用するように作られていますが、"
"v6.02 以降のバージョンでは、 CPAN のツールチェインに対して正しい依存関係を提"
"供する目的で、同梱されないようになりました。 https サポートを必要とするアプリ"
"ケーションは、依存関係情報として LWP::Protocol::https を定義するだけで、これ"
"を利用するためのモジュールは定義不要になっています。"

#. tumbleweed/perl-Lexical-Persistence/summary
#. leap/perl-Lexical-Persistence/summary
msgid "Persistent lexical variable values for arbitrary calls."
msgstr ""

#. tumbleweed/perl-Lexical-Persistence/description
#. leap/perl-Lexical-Persistence/description
msgid ""
"Lexical::Persistence does a few things, all related. Note that all the "
"behaviors listed here are the defaults. Subclasses can override nearly every "
"aspect of Lexical::Persistence's behavior.\n"
"\n"
"Lexical::Persistence lets your code access persistent data through lexical "
"variables. This example prints \"some value\" because the value of $x "
"persists in the $lp object between setter() and getter().\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->call(\\&setter); \t$lp-"
">call(\\&getter);\n"
"\n"
"\tsub setter { my $x = \"some value\" } \tsub getter { print my $x, \"\\n"
"\" }\n"
"\n"
"Lexicals with leading underscores are not persistent.\n"
"\n"
"By default, Lexical::Persistence supports accessing data from multiple "
"sources through the use of variable prefixes. The set_context() member sets "
"each data source. It takes a prefix name and a hash of key/value pairs. By "
"default, the keys must have sigils representing their variable types.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( pi => "
"{ '$member' => 3.141 } ); \t$lp->set_context( e => { '@member' => [ 2, '.', "
"7, 1, 8 ] } ); \t$lp->set_context( \t\tanimal => { \t\t\t'%member' => { cat "
"=> \"meow\", dog => \"woof\" } \t\t} \t);\n"
"\n"
"\t$lp->call(\\&display);\n"
"\n"
"\tsub display { \t\tmy ($pi_member, @e_member, %animal_member);\n"
"\n"
"\t\tprint \"pi = $pi_member\\n\"; \t\tprint \"e = @e_member\\n\"; \t\twhile "
"(my ($animal, $sound) = each %animal_member) { \t\t\tprint \"The $animal "
"goes... $sound!\\n\"; \t\t} \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tpi = 3.141 \te = 2 . 7 1 8 \tThe cat goes... meow! \tThe dog goes... "
"woof!\n"
"\n"
"By default, call() takes a single subroutine reference and an optional list "
"of named arguments. The arguments will be passed directly to the called "
"subroutine, but Lexical::Persistence also makes the values available from "
"the \"arg\" prefix.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy %animals = ( \t\tsnake => \"hiss\", \t\tplane => \"I'm Cartesian\", "
"\t);\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \twhile (my ($animal, $sound) = each "
"%animals) { \t\t$lp->call(\\&display, animal => $animal, sound => $sound); "
"\t}\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe plane goes... I'm Cartesian! \tThe snake goes... hiss!\n"
"\n"
"Sometimes you want to call functions normally. The wrap() method will wrap "
"your function in a small thunk that does the call() for you, returning a "
"coderef.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \tmy $thunk = $lp-"
">wrap(\\&display);\n"
"\n"
"\t$thunk->(animal => \"squirrel\", sound => \"nuts\");\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe squirrel goes... nuts!\n"
"\n"
"Prefixes are the characters leading up to the first underscore in a lexical "
"variable's name. However, there's also a default context named underscore. "
"It's literally \"_\" because the underscore is not legal in a context name "
"by default. Variables without prefixes, or with prefixes that have not been "
"previously defined by set_context(), are stored in that context.\n"
"\n"
"The get_context() member returns a hash for a named context. This allows "
"your code to manipulate the values within a persistent context.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( \t\t_ => { \t\t"
"\t'@mind' => [qw(My mind is going. I can feel it.)] \t\t} \t);\n"
"\n"
"\twhile (1) { \t\t$lp->call(\\&display); \t\tmy $mind = $lp->get_context(\"_"
"\")->{'@mind'}; \t\tsplice @$mind, rand(@$mind), 1; \t\tlast unless @$mind; "
"\t}\n"
"\n"
"\tsub display { \t\tmy @mind; \t\tprint \"@mind\\n\"; \t}\n"
"\n"
"Displays something like:\n"
"\n"
"\tMy mind is going. I can feel it. \tMy is going. I can feel it. \tMy is "
"going. I feel it. \tMy going. I feel it. \tMy going. I feel \tMy I feel \tMy "
"I \tMy\n"
"\n"
"It's possible to create multiple Lexical::Persistence objects, each with a "
"unique state.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp_1 = Lexical::Persistence->new(); \t$lp_1->set_context( _ => "
"{ '$foo' => \"context 1's foo\" } );\n"
"\n"
"\tmy $lp_2 = Lexical::Persistence->new(); \t$lp_2->set_context( _ => "
"{ '$foo' => \"the foo in context 2\" } );\n"
"\n"
"\t$lp_1->call(\\&display); \t$lp_2->call(\\&display);\n"
"\n"
"\tsub display { \t\tprint my $foo, \"\\n\"; \t}\n"
"\n"
"Gets you this output:\n"
"\n"
"\tcontext 1's foo \tthe foo in context 2\n"
"\n"
"You can also compile and execute perl code contained in plain strings in a a "
"lexical environment that already contains the persisted variables.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new();\n"
"\n"
"\t$lp->do( 'my $message = \"Hello, world\" );\n"
"\n"
"\t$lp->do( 'print \"$message\\n\"' );\n"
"\n"
"Which gives the output:\n"
"\n"
"\tHello, world\n"
"\n"
"If you come up with other fun uses, let us know."
msgstr ""

#. tumbleweed/perl-Lingua-EN-FindNumber/summary
#. leap/perl-Lingua-EN-FindNumber/summary
msgid "Locate (written) numbers in English text"
msgstr ""

#. tumbleweed/perl-Lingua-EN-FindNumber/description
#. leap/perl-Lingua-EN-FindNumber/description
msgid ""
"This module provides a regular expression for finding numbers in English "
"text. It also provides functions for extracting and manipulating such "
"numbers."
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect/summary
#. leap/perl-Lingua-EN-Inflect/summary
msgid "Convert singular to plural. Select \"a\" or \"an\""
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect/description
#. leap/perl-Lingua-EN-Inflect/description
msgid ""
"*[_Note:_ This module is strictly in maintenance mode now. If you're mostly "
"interested in singular/plural and a/an inflections, take a look at the newer "
"Lingua::EN::Inflexion module, which offers a cleaner and more convenient "
"interface, has many more features (including plural->singular inflexions), "
"and is also much better tested.]*\n"
"\n"
"The exportable subroutines of Lingua::EN::Inflect provide plural "
"inflections, \"a\"/\"an\" selection for English words, and manipulation of "
"numbers as words\n"
"\n"
"Plural forms of all nouns, most verbs, and some adjectives are provided. "
"Where appropriate, \"classical\" variants (for example: \"brother\" -> "
"\"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n"
"\n"
"Pronunciation-based \"a\"/\"an\" selection is provided for all English "
"words, and most initialisms.\n"
"\n"
"It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd) "
"and to English words (\"one\", \"two\", \"three).\n"
"\n"
"In generating these inflections, Lingua::EN::Inflect follows the Oxford "
"English Dictionary and the guidelines in Fowler's Modern English Usage, "
"preferring the former where the two disagree.\n"
"\n"
"The module is built around standard British spelling, but is designed to "
"cope with common American variants as well. Slang, jargon, and other English "
"dialects are _not_ explicitly catered for.\n"
"\n"
"Where two or more inflected forms exist for a single word (typically a "
"\"classical\" form and a \"modern\" form), Lingua::EN::Inflect prefers the "
"more common form (typically the \"modern\" one), unless \"classical\" "
"processing has been specified (see the \"MODERN VS CLASSICAL INFLECTIONS\" "
"manpage)."
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect-Number/summary
#. leap/perl-Lingua-EN-Inflect-Number/summary
msgid "Force number of words to singular or plural"
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect-Number/description
#. leap/perl-Lingua-EN-Inflect-Number/description
msgid ""
"This module extends the functionality of Lingua::EN::Inflect with three new "
"functions available for export:"
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect-Phrase/summary
#. leap/perl-Lingua-EN-Inflect-Phrase/summary
msgid "Inflect short English Phrases"
msgstr ""

#. tumbleweed/perl-Lingua-EN-Inflect-Phrase/description
#. leap/perl-Lingua-EN-Inflect-Phrase/description
msgid ""
"Attempts to pluralize or singularize short English phrases.\n"
"\n"
"Does not throw exceptions at present, if you attempt to pluralize an already "
"pluralized phrase, it will leave it unchanged (and vice versa.)\n"
"\n"
"The behavior of this module is subject to change as I tweak the heuristics, "
"as some things get fixed others might regress. The processing of natural "
"language is a messy business.\n"
"\n"
"If it doesn't work, please email or submit to RT the example you tried, and "
"I'll try to fix it."
msgstr ""

#. tumbleweed/perl-Lingua-EN-Number-IsOrdinal/summary
#. leap/perl-Lingua-EN-Number-IsOrdinal/summary
msgid "detect if English number is ordinal or cardinal"
msgstr ""

#. tumbleweed/perl-Lingua-EN-Number-IsOrdinal/description
#. leap/perl-Lingua-EN-Number-IsOrdinal/description
msgid ""
"This module will tell you if a number, either in words or as digits, is a "
"cardinal or the ordinal number|http://www.ego4u.com/en/cram-up/vocabulary/"
"numbers/ordinal manpage.\n"
"\n"
"This is useful if you e.g. want to distinguish these types of numbers found "
"with the Lingua::EN::FindNumber manpage and take different actions."
msgstr ""

#. tumbleweed/perl-Lingua-EN-Sentence/summary
#, fuzzy
msgid "Split Text Into Sentences"
msgstr "テキストを文賞に分解するためのモジュール"

#. tumbleweed/perl-Lingua-EN-Sentence/description
#, fuzzy
msgid ""
"The 'Lingua::EN::Sentence' module contains the function get_sentences, which "
"splits text into its constituent sentences, based on a regular expression "
"and a list of abbreviations (built in and given).\n"
"\n"
"Certain well know exceptions, such as abbreviations, may cause incorrect "
"segmentations. But some of them are already integrated into this code and "
"are being taken care of. Still, if you see that there are words causing the "
"get_sentences() to fail, you can add those to the module, so it notices them."
msgstr ""
"'Lingua::EN::Sentence' モジュールでは、 get_sentences と呼ばれる関数が提供さ"
"れています。この関数は、正規表現と略称一覧 (内蔵のものを使用することができる"
"ほか、指定することもできます) を利用して、テキストを文章ごとに分割することが"
"できます。\n"
"\n"
"このようなモジュールは、略称などがあるとうまく動作せず、正しくない分割などが"
"行なわれてしまうことが知られていますが、これらのうちのいくつかは既にコード内"
"で対応済みで、配慮されるようになっています。ただし、場合によっては "
"get_sentences()で失敗することがありますので、モジュールに対して追加することで"
"対応できるようになっています。"

#. tumbleweed/perl-Lingua-EN-Words2Nums/summary
#. leap/perl-Lingua-EN-Words2Nums/summary
#, fuzzy
msgid "convert English text to numbers"
msgstr "フィンランド語 ispell 辞書"

#. tumbleweed/perl-Lingua-EN-Words2Nums/description
#. leap/perl-Lingua-EN-Words2Nums/description
msgid ""
"This module converts English text into numbers. It supports both ordinal and "
"cardinal numbers, negative numbers, and very large numbers.\n"
"\n"
"The main subroutine, which is exported by default, is words2nums(). This "
"subroutine, when fed a string, will attempt to convert it into a number. If "
"it succeeds, the number will be returned. If it fails, it returns undef."
msgstr ""

#. tumbleweed/perl-Lingua-PT-Stemmer/summary
#. leap/perl-Lingua-PT-Stemmer/summary
msgid "Portuguese language stemming"
msgstr ""

#. tumbleweed/perl-Lingua-PT-Stemmer/description
#. leap/perl-Lingua-PT-Stemmer/description
msgid ""
"This module implements a Portuguese stemming algorithm proposed in the paper "
"*A Stemming Algorithm for the Portuguese Language* by *Moreira, V.* and "
"*Huyck, C.*\n"
"\n"
"The eight steps of stemming algorithm are listed as follows:\n"
"\n"
"* * Plural Reduction\n"
"\n"
"* * Feminine Reduction\n"
"\n"
"* * Adverb Reduction\n"
"\n"
"* * Augmentative/Diminutive Reduction\n"
"\n"
"* * Noun Suffix Reduction\n"
"\n"
"* * Verb Suffix Reduction\n"
"\n"
"* * Vowel Reduction\n"
"\n"
"* * Accents Removal"
msgstr ""

#. tumbleweed/perl-Lingua-Stem/summary
#. leap/perl-Lingua-Stem/summary
msgid "Stemming of words in various languages"
msgstr ""

#. tumbleweed/perl-Lingua-Stem/description
#. leap/perl-Lingua-Stem/description
msgid ""
"This routine applies stemming algorithms to its parameters, returning the "
"stemmed words as appropriate to the selected locale.\n"
"\n"
"You can import some or all of the class methods.\n"
"\n"
"use Lingua::Stem qw (stem clear_stem_cache stem_caching add_exceptions "
"delete_exceptions get_exceptions set_locale get_locale :all :locale :"
"exceptions :stem :caching);\n"
"\n"
" :all        - imports  stem add_exceptions delete_exceptions "
"get_exceptions                set_locale get_locale  :stem       - imports  "
"stem  :caching    - imports  stem_caching clear_stem_cache  :locale     - "
"imports  set_locale get_locale  :exceptions - imports  add_exceptions "
"delete_exceptions get_exceptions\n"
"\n"
"Currently supported locales are:\n"
"\n"
"      DA          - Danish       DE          - German       EN          - "
"English (also EN-US and EN-UK)       FR          - French       GL          "
"- Galician       IT          - Italian       NO          - Norwegian       "
"PT          - Portuguese       RU          - Russian (also RU-RU and RU-RU."
"KOI8-R)       SV          - Swedish\n"
"\n"
"If you have the memory and lots of stemming to do, I *strongly* suggest "
"using cache level 2 and processing lists in 'big chunks' (long lists) for "
"best performance."
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Fr/summary
#. leap/perl-Lingua-Stem-Fr/summary
msgid "Perl French Stemming"
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Fr/description
#. leap/perl-Lingua-Stem-Fr/description
msgid ""
"This module use the a modified version of the Porter Stemming Algorithm to "
"return a stemmed words."
msgstr ""

#. tumbleweed/perl-Lingua-Stem-It/summary
#. leap/perl-Lingua-Stem-It/summary
msgid "Porter's stemming algorithm for Italian"
msgstr ""

#. tumbleweed/perl-Lingua-Stem-It/description
#. leap/perl-Lingua-Stem-It/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly (I hope :-) as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/italian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the the Lingua::"
"Stem manpage module by Benjamin Franz, from which I've also borrowed some "
"functionalities (caching and exception list)."
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Ru/summary
#. leap/perl-Lingua-Stem-Ru/summary
msgid "Porter's stemming algorithm for Russian (KOI8-R only)"
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Ru/description
#. leap/perl-Lingua-Stem-Ru/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/russian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the Lingua::Stem "
"module by Benjamin Franz. This stemmer is also based on the work of Aldo "
"Capini, see Lingua::Stem::It."
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Snowball-Da/summary
#. leap/perl-Lingua-Stem-Snowball-Da/summary
msgid "Porters stemming algorithm for Denmark"
msgstr ""

#. tumbleweed/perl-Lingua-Stem-Snowball-Da/description
#. leap/perl-Lingua-Stem-Snowball-Da/description
msgid ""
"The stem function takes a scalar as a parameter and stems the word according "
"to Martin Porters Danish stemming algorithm, which can be found at the "
"Snowball website: http://snowball.tartarus.org/."
msgstr ""

#. tumbleweed/perl-Lingua-Translit/summary
#. leap/perl-Lingua-Translit/summary
msgid "Transliterates Text Between Writing Systems"
msgstr ""

#. tumbleweed/perl-Lingua-Translit/description
#. leap/perl-Lingua-Translit/description
msgid ""
"Lingua::Translit can be used to convert text from one writing system to "
"another, based on national or international transliteration tables. Where "
"possible a reverse transliteration is supported.\n"
"\n"
"The term 'transliteration' describes the conversion of text from one writing "
"system or alphabet to another one. The conversion is ideally unique, mapping "
"one character to exactly one character, so the original spelling can be "
"reconstructed. Practically this is not always the case and one single letter "
"of the original alphabet can be transcribed as two, three or even more "
"letters.\n"
"\n"
"Furthermore there is more than one transliteration scheme for one writing "
"system. Therefore it is an important and necessary information, which scheme "
"will be or has been used to transliterate a text, to work integrative and be "
"able to reconstruct the original data.\n"
"\n"
"Reconstruction is a problem though for non-unique transliterations, if no "
"language specific knowledge is available as the resulting clusters of "
"letters may be ambiguous. For example, the Greek character \"PSI\" maps to "
"\"ps\", but \"ps\" could also result from the sequence \"PI\", \"SIGMA\" "
"since \"PI\" maps to \"p\" and \"SIGMA\" maps to s. If a transliteration "
"table leads to ambiguous conversions, the provided table cannot be used "
"reverse.\n"
"\n"
"Otherwise the table can be used in both directions, if appreciated. So if "
"ISO 9 is originally created to convert Cyrillic letters to the Latin "
"alphabet, the reverse transliteration will transform Latin letters to "
"Cyrillic."
msgstr ""

#. tumbleweed/perl-List-AllUtils/summary
msgid ""
"Combines List::Util, List::SomeUtils and List::UtilsBy in one bite-sized[cut]"
msgstr ""

#. tumbleweed/perl-List-AllUtils/description
msgid ""
"Are you sick of trying to remember whether a particular helper is defined in "
"List::Util, List::SomeUtils or List::UtilsBy? I sure am. Now you don't have "
"to remember. This module will export all of the functions that either of "
"those three modules defines.\n"
"\n"
"Note that all function documentation has been shamelessly copied from List::"
"Util, List::SomeUtils and List::UtilsBy."
msgstr ""

#. tumbleweed/perl-List-SomeUtils/description
#. leap/perl-List-SomeUtils/description
#, fuzzy
msgid ""
"*List::SomeUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""
"*List::MoreUtils* は、リストに対する機能のうち List::Util には取り入れられな"
"かった、細かくも一般的に必要となるだろう機能が含まれています。\n"
"\n"
"下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、これ"
"らのモジュールが提供する機能は、全てを C 言語で実装した場合と同じくらい比較的"
"高速に動作します。これらの機能の純粋な Perl 版は、このモジュールが対象のマシ"
"ンでコンパイルできなかった場合のフォールバックとしてのみ動作します。"

#. tumbleweed/perl-List-UtilsBy/summary
#. leap/perl-List-UtilsBy/summary
#, fuzzy
msgid "Higher-Order List Utility Functions"
msgstr "Gtk 向けユーティリティ機能"

#. tumbleweed/perl-List-UtilsBy/description
#. leap/perl-List-UtilsBy/description
msgid ""
"This module provides a number of list utility functions, all of which take "
"an initial code block to control their behaviour. They are variations on "
"similar core perl or 'List::Util' functions of similar names, but which use "
"the block to control their behaviour. For example, the core Perl function "
"'sort' takes a list of values and returns them, sorted into order by their "
"string value. The 'sort_by' function sorts them according to the string "
"value returned by the extra function, when given each value.\n"
"\n"
" my @names_sorted = sort @names;\n"
"\n"
" my @people_sorted = sort_by { $_->name } @people;"
msgstr ""

#. tumbleweed/perl-Locale-Maketext-Gettext/summary
#. leap/perl-Locale-Maketext-Gettext/summary
msgid "Joins the gettext and Maketext frameworks"
msgstr ""

#. tumbleweed/perl-Locale-Maketext-Gettext/description
#. leap/perl-Locale-Maketext-Gettext/description
msgid ""
"Locale::Maketext::Gettext joins the GNU gettext and Maketext frameworks. It "
"is a subclass of Locale::Maketext(3) that follows the way GNU gettext works. "
"It works seamlessly, both in the sense of GNU gettext and Maketext. As a "
"result, you enjoy both their advantages, and get rid of both their problems, "
"too."
msgstr ""

#. tumbleweed/perl-Locale-Maketext-Lexicon/summary
#. leap/perl-Locale-Maketext-Lexicon/summary
msgid "Use other catalog formats in Maketext"
msgstr "Maketext で他のカタログ形式を使用するモジュール"

#. tumbleweed/perl-Locale-Maketext-Lexicon/description
#. leap/perl-Locale-Maketext-Lexicon/description
msgid ""
"This module provides lexicon-handling modules to read from other "
"localization formats, such as _Gettext_, _Msgcat_, and so on.\n"
"\n"
"If you are unfamiliar with the concept of lexicon modules, please consult "
"the Locale::Maketext manpage and the 'webl10n' HTML files in the 'docs/' "
"directory of this module.\n"
"\n"
"A command-line utility the xgettext.pl manpage is also installed with this "
"module, for extracting translatable strings from source files."
msgstr ""
"このモジュールは、他のローカライズ用フォーマット、たとえば _Gettext_ や "
"_Msgcat_ などの形式を読み込むことができる語彙処理モジュールです。\n"
"\n"
"語彙モジュールの考え方について詳しく知りたい場合は、 Locale::Maketext のマ"
"ニュアルページと、本モジュールの 'docs/' ディレクトリ以下にある 'webl10n' "
"HTML ファイルをお読みください。\n"
"\n"
"コマンドラインユーティリティ xgettext.pl のマニュアルページも、本モジュールと"
"ともにインストールされます。これはソースファイルから翻訳可能な文字列を取り出"
"す際に使用します。"

#. tumbleweed/perl-Locale-US/summary
#. leap/perl-Locale-US/summary
msgid ""
"Two letter codes for state identification in the United States and vice versa"
msgstr ""

#. tumbleweed/perl-Locale-US/description
#. leap/perl-Locale-US/description
msgid ""
"Two letter codes for state identification in the United States and vice "
"versa."
msgstr ""

#. tumbleweed/perl-Log-Any/summary
#. leap/perl-Log-Any/summary
msgid "Bringing loggers and listeners together"
msgstr ""

#. tumbleweed/perl-Log-Any/description
#. leap/perl-Log-Any/description
msgid ""
"'Log::Any' provides a standard log production API for modules. Log::Any::"
"Adapter allows applications to choose the mechanism for log consumption, "
"whether screen, file or another logging mechanism like Log::Dispatch or Log::"
"Log4perl.\n"
"\n"
"Many modules have something interesting to say. Unfortunately there is no "
"standard way for them to say it - some output to STDERR, others to 'warn', "
"others to custom file logs. And there is no standard way to get a module to "
"start talking - sometimes you must call a uniquely named method, other times "
"set a package variable.\n"
"\n"
"This being Perl, there are many logging mechanisms available on CPAN. Each "
"has their pros and cons. Unfortunately, the existence of so many mechanisms "
"makes it difficult for a CPAN author to commit his/her users to one of them. "
"This may be why many CPAN modules invent their own logging or choose not to "
"log at all.\n"
"\n"
"To untangle this situation, we must separate the two parts of a logging API. "
"The first, _log production_, includes methods to output logs (like '$log-"
">debug') and methods to inspect whether a log level is activated (like '$log-"
">is_debug'). This is generally all that CPAN modules care about. The second, "
"_log consumption_, includes a way to configure where logging goes (a file, "
"the screen, etc.) and the code to send it there. This choice generally "
"belongs to the application.\n"
"\n"
"A CPAN module uses 'Log::Any' to get a log producer object. An application, "
"in turn, may choose one or more logging mechanisms via Log::Any::Adapter, or "
"none at all.\n"
"\n"
"'Log::Any' has a very tiny footprint and no dependencies beyond Perl 5.8.1, "
"which makes it appropriate for even small CPAN modules to use. It defaults "
"to 'null' logging activity, so a module can safely log without worrying "
"about whether the application has chosen (or will ever choose) a logging "
"mechanism.\n"
"\n"
"See http://www.openswartz.com/2007/09/06/standard-logging-api/ for the "
"original post proposing this module."
msgstr ""

#. tumbleweed/perl-Log-Contextual/summary
#. leap/perl-Log-Contextual/summary
msgid "Simple logging interface with a contextual log"
msgstr ""

#. tumbleweed/perl-Log-Contextual/description
#. leap/perl-Log-Contextual/description
msgid ""
"Major benefits:\n"
"\n"
"* * Efficient\n"
"\n"
"The logging functions take blocks, so if a log level is disabled, the block "
"will not run:\n"
"\n"
"   log_debug { \"the new count in the database is \" . $rs->count };\n"
"\n"
"Similarly, the 'D' prefixed methods only 'Dumper' the input if the level is "
"enabled.\n"
"\n"
"* * Handy\n"
"\n"
"The logging functions return their arguments, so you can stick them in the "
"middle of expressions:\n"
"\n"
" for (log_debug { \"downloading:\\n\" . join qq(\\n), @_ } @urls) { ... }\n"
"\n"
"* * Generic\n"
"\n"
"'Log::Contextual' is an interface for all major loggers. If you log through "
"'Log::Contextual' you will be able to swap underlying loggers later.\n"
"\n"
"* * Powerful\n"
"\n"
"'Log::Contextual' chooses which logger to use based on user defined "
"'CodeRef's. Normally you don't need to know this, but you can take advantage "
"of it when you need to later.\n"
"\n"
"* * Scalable\n"
"\n"
"If you just want to add logging to your basic application, start with Log::"
"Contextual::SimpleLogger and then as your needs grow you can switch to Log::"
"Dispatchouli or Log::Dispatch or Log::Log4perl or whatever else.\n"
"\n"
"This module is a simple interface to extensible logging. It exists to "
"abstract your logging interface so that logging is as painless as possible, "
"while still allowing you to switch from one logger to another.\n"
"\n"
"It is bundled with a really basic logger, Log::Contextual::SimpleLogger, but "
"in general you should use a real logger instead. For something more serious "
"but not overly complicated, try Log::Dispatchouli (see SYNOPSIS for example.)"
msgstr ""

#. tumbleweed/perl-Log-Dispatch/summary
#. leap/perl-Log-Dispatch/summary
msgid "Dispatches messages to one or more outputs"
msgstr "メッセージを 1 つまたは複数の宛先に出力するモジュール"

#. tumbleweed/perl-Log-Dispatch/description
#. leap/perl-Log-Dispatch/description
msgid ""
"This module manages a set of Log::Dispatch::* output objects that can be "
"logged to via a unified interface.\n"
"\n"
"The idea is that you create a Log::Dispatch object and then add various "
"logging objects to it (such as a file logger or screen logger). Then you "
"call the 'log' method of the dispatch object, which passes the message to "
"each of the objects, which in turn decide whether or not to accept the "
"message and what to do with it.\n"
"\n"
"This makes it possible to call single method and send a message to a log "
"file, via email, to the screen, and anywhere else, all with very little code "
"needed on your part, once the dispatching object has been created."
msgstr ""
"このモジュールは Log::Dispatch::* の出力オブジェクトを管理するもので、単一の"
"インターフェイスからログ機能を提供します。\n"
"\n"
"Log::Dispatch オブジェクトを作成し、様々なログオブジェクトをそれに追加します"
"(たとえばファイルロガーや画面ロガーなど) 。それらは Dispatch オブジェクト"
"の'log' メソッドで呼び出すことができ、メッセージを受け渡すことができます。ロ"
"グオブジェクト側ではメッセージを受け取るかどうかを判断したり、それらを処理し"
"たりします。\n"
"\n"
"このような仕組みにより、単一のメソッドからファイルやメール、画面などの出力先"
"に送信することができるため、独自に作成するコードを非常に小さくすることができ"
"ます。"

#. tumbleweed/perl-Log-Dispatch-Array/summary
#. leap/perl-Log-Dispatch-Array/summary
msgid "log events to an array (reference)"
msgstr ""

#. tumbleweed/perl-Log-Dispatch-Array/description
#. leap/perl-Log-Dispatch-Array/description
msgid ""
"This provides a Log::Dispatch log output system that appends logged events "
"to an array reference. This is probably only useful for testing the logging "
"of your code."
msgstr ""

#. tumbleweed/perl-Log-Dispatch-Config/summary
#. leap/perl-Log-Dispatch-Config/summary
#, fuzzy
msgid "Log4j for Perl"
msgstr "Perl 向け log4j 実装"

#. tumbleweed/perl-Log-Dispatch-Config/description
#. leap/perl-Log-Dispatch-Config/description
msgid ""
"Log::Dispatch::Config is a subclass of Log::Dispatch and provides a way to "
"configure Log::Dispatch object with configulation file (default, in "
"AppConfig format). I mean, this is log4j for Perl, not with all API "
"compatibility though."
msgstr ""

#. tumbleweed/perl-Log-Dispatchouli/summary
msgid "Simple Wrapper Around Log::Dispatch"
msgstr ""

#. tumbleweed/perl-Log-Dispatchouli/description
msgid ""
"Log::Dispatchouli is a thin layer above Log::Dispatch and meant to make it "
"dead simple to add logging to a program without having to think much about "
"categories, facilities, levels, or things like that. It is meant to make "
"logging just configurable enough that you can find the logs you want and "
"just easy enough that you will actually log things.\n"
"\n"
"Log::Dispatchouli can log to syslog (if you specify a facility), standard "
"error or standard output, to a file, or to an array in memory. That last one "
"is mostly useful for testing.\n"
"\n"
"In addition to providing as simple a way to get a handle for logging "
"operations, Log::Dispatchouli uses String::Flogger to process the things to "
"be logged, meaning you can easily log data structures. Basically: strings "
"are logged as is, arrayrefs are taken as (sprintf format, args), and "
"subroutines are called only if needed. For more information read the String::"
"Flogger docs."
msgstr ""

#. tumbleweed/perl-Log-Log4perl/summary
#. leap/perl-Log-Log4perl/summary
msgid "Log4j implementation for Perl"
msgstr "Perl 向け log4j 実装"

#. tumbleweed/perl-Log-Log4perl/description
#, fuzzy
msgid ""
"Log::Log4perl lets you remote-control and fine-tune the logging behaviour of "
"your system from the outside. It implements the widely popular (Java-based) "
"Log4j logging package in pure Perl.\n"
"\n"
"*For a detailed tutorial on Log::Log4perl usage, please read*\n"
"\n"
"http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"Logging beats a debugger if you want to know what's going on in your code "
"during runtime. However, traditional logging packages are too static and "
"generate a flood of log messages in your log files that won't help you.\n"
"\n"
"'Log::Log4perl' is different. It allows you to control the number of logging "
"messages generated at three different levels:\n"
"\n"
"  * At a central location in your system (either in a configuration file or "
"in the startup code) you specify _which components_ (classes, functions) of "
"your system should generate logs.\n"
"\n"
"  * You specify how detailed the logging of these components should be by "
"specifying logging _levels_.\n"
"\n"
"  * You also specify which so-called _appenders_ you want to feed your log "
"messages to (\"Print it to the screen and also append it to /tmp/my.log\") "
"and which format (\"Write the date first, then the file name and line "
"number, and then the log message\") they should be in.\n"
"\n"
"This is a very powerful and flexible mechanism. You can turn on and off your "
"logs at any time, specify the level of detail and make that dependent on the "
"subsystem that's currently executed.\n"
"\n"
"Let me give you an example: You might find out that your system has a "
"problem in the 'MySystem::Helpers::ScanDir' component. Turning on detailed "
"debugging logs all over the system would generate a flood of useless log "
"messages and bog your system down beyond recognition. With 'Log::Log4perl', "
"however, you can tell the system: \"Continue to log only severe errors to "
"the log file. Open a second log file, turn on full debug logs in the "
"'MySystem::Helpers::ScanDir' component and dump all messages originating "
"from there into the new log file\". And all this is possible by just "
"changing the parameters in a configuration file, which your system can re-"
"read even while it's running!"
msgstr ""
"Log::Log4perl は、お使いのシステムにおけるログ動作を、ソースコードの外側から"
"リモート制御／調整することのできるモジュールです。よく知られた (Java ベース"
"の)log4j ログパッケージを、純粋な Perl のみで作成したものといえます。\n"
"\n"
"*Log::Log4perl の使用方法について、詳しくは下記をお読みください*\n"
"\n"
"    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"ログ機能はデバッガにも匹敵する機能で、お使いのコードを実行する際、何が起こっ"
"ているのかを知ることができる機能です。従来のログパッケージは、あまりにも柔軟"
"性がなく、ログファイル内に大量のメッセージを出力してしまい、あまり助けにはな"
"りませんでした。\n"
"\n"
"'Log::Log4perl' はこのようなものではありません。 3 種類のレベルを用意し、生成"
"されるログメッセージの量を制御することができます。\n"
"\n"
"* *\n"
"\n"
"お使いのシステムにおける中枢となる場所 (設定ファイルまたは起動時のコード) "
"で、どのコンポーネント (クラス、関数) からのログを記録するのかを設定すること"
"ができます。\n"
"\n"
"* *\n"
"\n"
"また、ログレベルを設定することで、これらのコンポーネントから、どれだけ詳細な"
"ログを出力するのかを指定することもできます。\n"
"\n"
"* *\n"
"\n"
"これ以外にも、アペンダと呼ばれる仕組みを指定することもできます。これはログ"
"メッセージの出力先を指定する (\"画面に表示するのか、もしくは /tmp/my.log のよ"
"うなファイルに追記するのかなど\") ほか、書式 (\"日付を先に書いて、ファイル名"
"と行番号、メッセージなどが続く\") を指定することもできます。\n"
"\n"
"これはとてもパワフルで柔軟な仕組みです。任意の時点でログ機能を有効／無効に切"
"り替えることができるほか、ログの詳細さを指定したり、現在実行中のサブサブシス"
"テムを設定することもできます。\n"
"\n"
"たとえば下記のような例を考えてみます: お使いのシステムで、 'MySystem::"
"Helpers::ScanDir' というコンポーネントに問題があるものの、詳細なログ機能を有"
"効にしてしまうと、不要なログが大量に生成されてしまい、その問題について調べる"
"前にシステムをダウンさせてしまうような状況です。 'Log::Log4perl' を使用すれ"
"ば、システムに対して \"通常のログファイルには重大なエラーのみを記録するものと"
"する。 2 つめのログファイルには、 'MySystem::Helpers::ScanDir'コンポーネント"
"に関する完全なデバッグログを出力し、これを発生元とするメッセージはすべて新し"
"いログファイルに書き込む\" のような指定を行なうことができます。これらの設定は"
"すべて設定ファイルから行なうことができるほか、設定ファイルは実行中でも読み込"
"み直すように指示することができます。"

#. tumbleweed/perl-Log-Message/summary
#. leap/perl-Log-Message/summary
msgid "A generic message storing mechanism"
msgstr ""

#. tumbleweed/perl-Log-Message/description
#. leap/perl-Log-Message/description
msgid ""
"Log::Message is a generic message storage mechanism. It allows you to store "
"messages on a stack -- either shared or private -- and assign meta-data to "
"it. Some meta-data will automatically be added for you, like a timestamp and "
"a stack trace, but some can be filled in by the user, like a tag by which to "
"identify it or group it, and a level at which to handle the message (for "
"example, log it, or die with it)\n"
"\n"
"Log::Message also provides a powerful way of searching through items by "
"regexes on messages, tags and level."
msgstr ""

#. tumbleweed/perl-Log-Message-Simple/summary
#. leap/perl-Log-Message-Simple/summary
#, fuzzy
msgid "Simplified interface to Log::Message"
msgstr "PostgreSQL 向けシンプル C クライアントインターフェイス"

#. tumbleweed/perl-Log-Message-Simple/description
#. leap/perl-Log-Message-Simple/description
msgid ""
"This module provides standardized logging facilities using the 'Log::"
"Message' module."
msgstr ""

#. tumbleweed/perl-MIME-Charset/summary
#. leap/perl-MIME-Charset/summary
#, fuzzy
msgid "Charset Information for MIME"
msgstr "GNOME 向けネットワーク情報アプレット"

#. tumbleweed/perl-MIME-Charset/description
#. leap/perl-MIME-Charset/description
msgid ""
"MIME::Charset provides information about character sets used for MIME "
"messages on Internet."
msgstr ""

#. tumbleweed/perl-MIME-EncWords/summary
#. leap/perl-MIME-EncWords/summary
msgid "deal with RFC 2047 encoded words (improved)"
msgstr ""

#. tumbleweed/perl-MIME-EncWords/description
#. leap/perl-MIME-EncWords/description
msgid ""
"Fellow Americans, you probably won't know what the hell this module is for. "
"Europeans, Russians, et al, you probably do. ':-)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>       To: =?"
"ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>       CC: =?ISO-8859-1?Q?"
"Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>       Subject: =?ISO-8859-1?B?"
"SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=        =?ISO-8859-2?B?"
"dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=        =?US-ASCII?Q?.._cool!?=\n"
"\n"
"The fields basically decode to (sorry, I can only approximate the Latin "
"characters with 7 bit sequences /o and 'e):\n"
"\n"
"      From: Keith Moore <moore@cs.utk.edu>       To: Keld J/orn Simonsen "
"<keld@dkuug.dk>       CC: Andr'e  Pirard <PIRARD@vm1.ulg.ac.be>       "
"Subject: If you can read this you understand the example... cool!\n"
"\n"
"*Supplement*: Fellow Americans, Europeans, you probably won't know what the "
"hell this module is for. East Asians, et al, you probably do. '(^_^)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      Subject: =?EUC-KR?B?sNTAuLinKGxhemluZXNzKSwgwvzB9ri7seIoaW1w?=        "
"=?EUC-KR?B?YXRpZW5jZSksILGzuLgoaHVicmlzKQ==?=\n"
"\n"
"The fields basically decode to (sorry, I cannot approximate the non-Latin "
"multibyte characters with any 7 bit sequences):\n"
"\n"
"      Subject: ???(laziness), ????(impatience), ??(hubris)"
msgstr ""

#. tumbleweed/perl-MIME-Lite/summary
#. leap/perl-MIME-Lite/summary
msgid "low-calorie MIME generator"
msgstr "低カロリーの MIME 生成モジュール"

#. tumbleweed/perl-MIME-Lite/description
#. leap/perl-MIME-Lite/description
msgid ""
"In the never-ending quest for great taste with fewer calories, we proudly "
"present: _MIME::Lite_.\n"
"\n"
"MIME::Lite is intended as a simple, standalone module for generating (not "
"parsing!) MIME messages... specifically, it allows you to output a simple, "
"decent single- or multi-part message with text or binary attachments. It "
"does not require that you have the Mail:: or MIME:: modules installed, but "
"will work with them if they are.\n"
"\n"
"You can specify each message part as either the literal data itself (in a "
"scalar or array), or as a string which can be given to open() to get a "
"readable filehandle (e.g., \"<filename\" or \"somecommand|\").\n"
"\n"
"You don't need to worry about encoding your message data: this module will "
"do that for you. It handles the 5 standard MIME encodings."
msgstr ""
"小さな手まで大きな成果を得るための果てしない作業として、我々は _MIME::Lite_ "
"を提供します。\n"
"\n"
"MIME::Lite はシンプルな使い心地でありながら、 MIME メッセージを生成する (読み"
"取ることはできません) 単独動作のモジュールです。特に、シンプルで見苦しくない"
"テキストまたはバイナリ形式のシングルパート、またはマルチパートのメッセージを"
"生成することができます。 Mail:: や MIME:: の他のモジュールを必要とすることは"
"ありませんが、必要であればそれらと協調動作させることもできます。\n"
"\n"
"メッセージパートはリテラルデータそのもの (スカラー値または配列) で指定するこ"
"とができるほか、 open() でファイルハンドルを開くことのできる文字列(例: \"<"
"ファイル名\" または \"コマンド|\") を指定することもできます。\n"
"\n"
"メッセージデータのエンコード方法については、心配不要です。このモジュールは自"
"動的に判別して処理を行ないます。現時点で 5 種類の標準 MIME エンコーディングに"
"対応しています。"

#. tumbleweed/perl-MIME-Types/summary
#. leap/perl-MIME-Types/summary
msgid "Definition of MIME types"
msgstr "MIME タイプの定義"

#. tumbleweed/perl-MIME-Types/description
#. leap/perl-MIME-Types/description
msgid ""
"MIME types are used in many applications (for instance as part of e-mail and "
"HTTP traffic) to indicate the type of content which is transmitted. or "
"expected. See RFC2045 at _https://www.ietf.org/rfc/rfc2045.txt_\n"
"\n"
"Sometimes detailed knowledge about a mime-type is need, however this module "
"only knows about the file-name extensions which relate to some filetype. It "
"can also be used to produce the right format: types which are not registered "
"at IANA need to use 'x-' prefixes.\n"
"\n"
"This object administers a huge list of known mime-types, combined from "
"various sources. For instance, it contains *all IANA* types and the "
"knowledge of Apache. Probably the most complete table on the net!"
msgstr ""
"MIME タイプは多数のアプリケーションが使用する仕組み (例えば電子メールや HTTP "
"トラフィックなど) で、転送していたり期待していたりする際のコンテンツの種類を"
"示すものです。 MIME は RFC2045 (_https://www.ietf.org/rfc/rfc2045.txt_) で規"
"定されています。\n"
"\n"
"MIME タイプに関する詳しい知識が必要となる場合がありますが、このモジュールは"
"ファイル名の拡張子とファイルタイプを知っているだけの存在です。正しい形式を生"
"成する際に使用することもできるものであるほか、 IANA に登録されていないタイプ"
"の場合は、 'x-' の接頭辞で始まる値を使用することもできます。\n"
"\n"
"このオブジェクトは既知の MIME タイプに対する巨大なリストで、さまざまな情報源"
"からのものを組み合わせて作られています。たとえば *すべての IANA* タイプや "
"Apache の情報が含まれています。おそらくはネット上で最も完全なリストであること"
"でしょう。"

#. tumbleweed/perl-MIME-tools/summary
#. tumbleweed/perl-MIME-tools/description
#. leap/perl-MIME-tools/summary
#. leap/perl-MIME-tools/description
msgid "Tools to manipulate MIME messages"
msgstr "MIME メッセージを扱うためのモジュール"

#. tumbleweed/perl-MLDBM/summary
#. leap/perl-MLDBM/summary
msgid "store multi-level Perl hash structure in single level tied hash"
msgstr "多階層 Perl ハッシュ構造からの単一階層のタイハッシュへの保存"

#. tumbleweed/perl-MLDBM/description
#. leap/perl-MLDBM/description
msgid ""
"This module can serve as a transparent interface to any TIEHASH package that "
"is required to store arbitrary perl data, including nested references. Thus, "
"this module can be used for storing references and other arbitrary data "
"within DBM databases.\n"
"\n"
"It works by serializing the references in the hash into a single string. In "
"the underlying TIEHASH package (usually a DBM database), it is this string "
"that gets stored. When the value is fetched again, the string is "
"deserialized to reconstruct the data structure into memory.\n"
"\n"
"For historical and practical reasons, it requires the *Data::Dumper* "
"package, available at any CPAN site. *Data::Dumper* gives you really nice-"
"looking dumps of your data structures, in case you wish to look at them on "
"the screen, and it was the only serializing engine before version 2.00. "
"However, as of version 2.00, you can use any of *Data::Dumper*,\n"
"*FreezeThaw* or *Storable* to perform the underlying serialization, as "
"hinted at by the the SYNOPSIS manpage overview above. Using *Storable* is "
"usually much faster than the other methods.\n"
"\n"
"See the the BUGS manpage section for important limitations."
msgstr ""
"このモジュールは、任意の TIEHASH パッケージに対する透過型インターフェイスで、"
"入れ子構造の参照を含む任意の Perl データを保存する際に必要となるものです。そ"
"のため、このモジュールは参照のほか DBM データベース内の任意のデータを保存する"
"のに利用することができます。\n"
"\n"
"このモジュールは、ハッシュ内の参照を単一の文字列に直列化 (シリアライズ) する"
"ことで処理を行なっています。裏で動作している TIEHASH パッケージ (一般に DBM "
"データベース) 内では、これは保存されるべき文字列になっています。値に再アクセ"
"スした場合は、文字列は逆変換 (デシリアライズ) されて、データ構造をメモリ内に"
"再構成します。\n"
"\n"
"過去の経緯や現実面の問題により、本パッケージは *Data::Dumper* パッケージを必"
"要とします (CPAN サイトで公開されています) 。 *Data::Dumper* は、指定したデー"
"タ構造にわかりやすくアクセスする機能を提供し、それを画面内に表示したりするこ"
"とができるほか、バージョン 2.00 以降では任意の *Data::Dumper* に対して"
"*FreezeThaw* や *Storable* を実行して、マニュアルページ内の SYNOPSIS にヒント"
"が書かれているとおり、裏のシリアライズを実施しています。 *Storable* は通常、"
"他のメソッドを使用する場合に比べてとても高速に動作します。\n"
"\n"
"重要な制限事項について、詳しくはマニュアルページの BUGS セクションをお読みく"
"ださい。"

#. tumbleweed/perl-MRO-Compat/summary
#. leap/perl-MRO-Compat/summary
msgid "mro::* interface compatibility for Perls < 5.9.5"
msgstr "Perl < 5.9.5 向けの mro::* インターフェイス互換性モジュール"

#. tumbleweed/perl-MRO-Compat/description
#. leap/perl-MRO-Compat/description
msgid ""
"The \"mro\" namespace provides several utilities for dealing with method "
"resolution order and method caching in general in Perl 5.9.5 and higher.\n"
"\n"
"This module provides those interfaces for earlier versions of Perl (back to "
"5.6.0 anyways).\n"
"\n"
"It is a harmless no-op to use this module on 5.9.5+. That is to say, code "
"which properly uses the MRO::Compat manpage will work unmodified on both "
"older Perls and 5.9.5+.\n"
"\n"
"If you're writing a piece of software that would like to use the parts of "
"5.9.5+'s mro:: interfaces that are supported here, and you want "
"compatibility with older Perls, this is the module for you.\n"
"\n"
"Some parts of this code will work better and/or faster with the Class::C3::"
"XS manpage installed (which is an optional prereq of the Class::C3 manpage, "
"which is in turn a prereq of this package), but it's not a requirement.\n"
"\n"
"This module never exports any functions. All calls must be fully qualified "
"with the 'mro::' prefix.\n"
"\n"
"The interface documentation here serves only as a quick reference of what "
"the function basically does, and what differences between the MRO::Compat "
"manpage and 5.9.5+ one should look out for. The main docs in 5.9.5's the mro "
"manpage are the real interface docs, and contain a lot of other useful "
"information."
msgstr ""
"\"mro\" ネームスペースは Perl 5.9.5 およびそれ以降のバージョンに対応し、メ"
"ソッドの解決順序やメソッドのキャッシュ機構を扱うためのいくつかのユーティリ"
"ティを提供しています。\n"
"\n"
"このモジュールには、古いバージョン (5.6.0 以降のバージョン) でそれらの機能に"
"対応するための仕組みが含まれています。\n"
"\n"
"このモジュールを Perl 5.9.5 以降のバージョンで利用した場合は、特に悪影響もな"
"く何も動作を行なわないモジュールになります。言い換えれば、 MRO::Compat モ"
"ジュールを正しく使用することで、古いバージョンと 5.9.5 以降のバージョンの両方"
"で動作する仕組みを作成することができます。\n"
"\n"
"Perl 5.9.5 以降で対応した mro:: インターフェイスを使用するソフトウエアを作成"
"している場合で、古いバージョンの Perl でも動作させたいような場合に、有用な仕"
"組みです。\n"
"\n"
"このコードのいくつかの部分は、 Class::C3::XS がインストールされていると、より"
"うまく、かつ高速に動作します (Class::C3 クラスからは任意指定の prereq とし"
"て、逆にこのクラスからは通常の prereq として定義されています) が、必ずしも必"
"要となるものではありません。\n"
"\n"
"このモジュールは、いかなる関数も公開していません。全ての機能は、完全修飾型の "
"'mro::' プレフィクス経由で利用します。\n"
"\n"
"インターフェイスのドキュメンテーションは、それぞれの関数がどのように動作する"
"のかを簡潔に示しただけのものであるほか、 MRO::Compat と Perl 5.9.5 以降のバー"
"ジョンでの違いも示しています。 5.9.5 のメインのドキュメンテーションでは、実際"
"のインターフェイスに対するドキュメンテーションが書かれていて、そこには多数の"
"有用な情報が書かれています。"

#. tumbleweed/perl-Mac-PropertyList/summary
#. leap/perl-Mac-PropertyList/summary
msgid "work with Mac plists at a low level"
msgstr ""

#. tumbleweed/perl-Mac-PropertyList/description
#. leap/perl-Mac-PropertyList/description
msgid ""
"This module is a low-level interface to the Mac OS X Property List (plist) "
"format. You probably shouldn't use this in applications–build interfaces on "
"top of this so you don't have to put all the heinous multi-level object "
"stuff where people have to look at it.\n"
"\n"
"You can parse a plist file and get back a data structure. You can take that "
"data structure and get back the plist as XML. If you want to change the "
"structure inbetween that's your business. :)\n"
"\n"
"You don't need to be on Mac OS X to use this. It simply parses and "
"manipulates a text format that Mac OS X uses."
msgstr ""

#. tumbleweed/perl-Mail-DKIM/summary
#. leap/perl-Mail-DKIM/summary
msgid "Signs/verifies Internet mail with DKIM/DomainKey signatures"
msgstr "インターネットメールに対する DKIM/DomainKey 署名の作成と検証"

#. tumbleweed/perl-Mail-DKIM/description
#. leap/perl-Mail-DKIM/description
msgid ""
"This module implements the various components of the DKIM and DomainKeys "
"message-signing and verifying standards for Internet mail. It currently "
"tries to implement these specifications:\n"
"\n"
"* RFC4871, for DKIM\n"
"\n"
"* RFC4870, for DomainKeys\n"
"\n"
"The module uses an object-oriented interface. You use one of two different "
"classes, depending on whether you are signing or verifying a message. To "
"sign, use the the Mail::DKIM::Signer manpage class. To verify, use the the "
"Mail::DKIM::Verifier manpage class. Simple, eh?"
msgstr ""
"このモジュールは DKIM の様々なコンポーネントを実装し、インターネットメールに"
"対する DomainKeys のメッセージ署名と、検証に関する標準機能を提供します。現時"
"点では、下記の仕様を実装するように目指しています:\n"
"\n"
"* RFC4871 (DKIM)\n"
"\n"
"* RFC4870 (DomainKeys)\n"
"\n"
"このモジュールには、オブジェクト指向のインターフェイスが用意されています。ま"
"た、メッセージへ署名する場合と検証する場合に備えて、 2 種類の異なるクラスを利"
"用することができます。署名を行なう場合は Mail::DKIM::Signer クラスを、検証を"
"行なう場合は Mail::DKIM::Verifier クラスを利用します。"

#. tumbleweed/perl-Mail-Mbox-MessageParser/summary
#. leap/perl-Mail-Mbox-MessageParser/summary
msgid "Fast and Simple Mbox Folder Reader"
msgstr "高速でシンプルな mbox フォルダ読み取り器"

#. tumbleweed/perl-Mail-Mbox-MessageParser/description
#. leap/perl-Mail-Mbox-MessageParser/description
msgid ""
"This module implements a fast but simple mbox folder reader. One of three "
"implementations (Cache, Grep, Perl) will be used depending on the wishes of "
"the user and the system configuration. The first implementation is a cached-"
"based one which stores email information about mailboxes on the file system. "
"Subsequent accesses will be faster because no analysis of the mailbox will "
"be needed. The second implementation is one based on GNU grep, and is "
"significantly faster than the Perl version for mailboxes which contain very "
"large (10MB) emails. The final implementation is a fast Perl-based one which "
"should always be applicable.\n"
"\n"
"The Cache implementation is about 6 times faster than the standard Perl "
"implementation. The Grep implementation is about 4 times faster than the "
"standard Perl implementation. If you have GNU grep, it's best to enable both "
"the Cache and Grep implementations. If the cache information is available, "
"you'll get very fast speeds. Otherwise, you'll take about a 1/3 performance "
"hit when the Grep version is used instead.\n"
"\n"
"The overriding requirement for this module is speed. If you wish more "
"sophisticated parsing, use Mail::MboxParser (which is based on this module) "
"or Mail::Box."
msgstr ""
"このモジュールは高速でありながらシンプルな mbox フォルダ読み込みモジュールで"
"す。 3 種類の実装 (Cache, Grep, Perl) が用意されていて、ユーザ側の要件やシス"
"テムの設定に応じて選択することができます。最初の実装はキャッシュベースの仕組"
"みで、ファイルシステム内のメールボックスに対して、電子メールの情報を一括で読"
"み込みます。 2 回目移行のアクセスではメールボックスの分析処理がなくなるため、"
"高速に動作するようになります。 2 つめの実装は GNU grep をベースにした仕組み"
"で、非常に巨大な (10MB) 電子メールを含むメールボックスの場合、 Perl 版よりも"
"高速に動作します。最後の実装は高速な Perl ベースの仕組みで、どのような環境に"
"も適合できる仕組みです。\n"
"\n"
"Cache 実装は標準の Perl 実装よりも 6 倍程度高速に動作するほか、 Grep 実装も標"
"準より 4 倍程度高速に動作します。 GNU grep をお持ちの場合は、 Cache, Grep の"
"両方を有効化しておくのがよいでしょう。また、キャッシュ情報が利用できる場合、"
"非常に高速に動作しますが、 Grep 版を代わりに使用した場合は、 1/3 程度の性能に"
"なってしまいます。\n"
"\n"
"このモジュールに対するオーバライドの要件はスピードです。より洗練された処理を"
"ご希望の場合は、 Mail::MboxParser (このモジュールをベースにしています) や "
"Mail::Box をお使いください。"

#. tumbleweed/perl-Mail-SPF/summary
#. leap/perl-Mail-SPF/summary
msgid "An object-oriented implementation of Sender Policy Framework"
msgstr "Sender Policy Framework (SPF) のオブジェクト指向な実装"

#. tumbleweed/perl-Mail-SPF/description
msgid ""
"*Mail::SPF* is an object-oriented implementation of Sender Policy Framework "
"(SPF). See the http://www.openspf.org manpage for more information about "
"SPF.\n"
"\n"
"This class collection aims to fully conform to the SPF specification (RFC "
"4408) so as to serve both as a production quality SPF implementation and as "
"a reference for other developers of SPF implementations."
msgstr ""
"Mail::SPF は Sender Policy Framework (SPF) に対するオブジェクト指向の実装で"
"す。 SPF について、詳しくは http://www.openspf.org をお読みください。\n"
"\n"
"このクラス集は、 SPF 仕様 (RFC 4408) に完全準拠し、商用品質の SPF 実装として"
"利用するだけでなく、他の開発者に対する SPF のリファレンス実装としても利用でき"
"るものです。"

#. tumbleweed/perl-Mail-SPF-Test/summary
#. leap/perl-Mail-SPF-Test/summary
msgid "SPF test-suite class"
msgstr ""

#. tumbleweed/perl-Mail-SPF-Test/description
#. leap/perl-Mail-SPF-Test/description
msgid ""
"  *Mail::SPF::Test* is a class for reading and manipulating SPF test-suite   "
"data."
msgstr ""

#. tumbleweed/perl-Mail-Sender/summary
#. leap/perl-Mail-Sender/summary
msgid "Module for Sending Mails with Attachments Through an Smtp Server"
msgstr ""

#. tumbleweed/perl-Mail-Sender/description
#. leap/perl-Mail-Sender/description
msgid ""
"Mail::Sender provides an object-oriented interface to sending mails. It "
"directly connects to the mail server using IO::Socket.\n"
"\n"
"Mail::Sender is going away... well, not really, but it's being officially "
"marked as \"out of favor\". Email::Sender is the go-to choice when you need "
"to send Email from Perl. Go there, be happy!"
msgstr ""

#. tumbleweed/perl-MailTools/summary
#. tumbleweed/perl-MailTools/description
#. leap/perl-MailTools/summary
#. leap/perl-MailTools/description
msgid "Various e-mail related modules"
msgstr "様々な電子メール関連モジュール"

#. tumbleweed/perl-Makefile-DOM/summary
#. leap/perl-Makefile-DOM/summary
msgid "Simple DOM parser for Makefiles"
msgstr ""

#. tumbleweed/perl-Makefile-DOM/description
#. leap/perl-Makefile-DOM/description
msgid ""
"This libary can serve as an advanced lexer for (GNU) makefiles. It parses "
"makefiles as \"documents\" and the parsing is lossless. The results are data "
"structures similar to DOM trees. The DOM trees hold every single bit of the "
"information in the original input files, including white spaces, blank lines "
"and makefile comments. That means it's possible to reproduce the original "
"makefiles from the DOM trees. In addition, each node of the DOM trees is "
"modifiable and so is the whole tree, just like the the PPI manpage module "
"used for Perl source parsing and the the HTML::TreeBuilder manpage module "
"used for parsing HTML source.\n"
"\n"
"If you're looking for a true GNU make parser that generates an AST, please "
"see the Makefile::Parser::GmakeDB manpage instead.\n"
"\n"
"The interface of 'Makefile::DOM' mimics the API design of the PPI manpage. "
"In fact, I've directly stolen the source code and POD documentation of the "
"PPI::Node manpage, the PPI::Element manpage, and the PPI::Dumper manpage, "
"with the full permission from the author of the PPI manpage, Adam Kennedy.\n"
"\n"
"'Makefile::DOM' tries to be independent of specific makefile's syntax. The "
"same set of DOM node types is supposed to get shared by different makefile "
"DOM generators. For example, the MDOM::Document::Gmake manpage parses GNU "
"makefiles and returns an instance of the MDOM::Document manpage, i.e., the "
"root of the DOM tree while the NMAKE makefile lexer in the future, 'MDOM::"
"Document::Nmake', also returns instances of the the MDOM::Document manpage "
"class. Later, I'll also consider adding support for dmake and bsdmake."
msgstr ""

#. tumbleweed/perl-Mason/summary
msgid "Powerful, high-performance templating for the web and beyond"
msgstr ""

#. tumbleweed/perl-Mason/description
msgid ""
"Mason is a powerful Perl-based templating system, designed to generate "
"dynamic content of all kinds.\n"
"\n"
"Unlike many templating systems, Mason does not attempt to invent an "
"alternate, \"easier\" syntax for templates. It provides a set of syntax and "
"features specific to template creation, but underneath it is still clearly "
"and proudly recognizable as Perl.\n"
"\n"
"Mason is most often used for generating web pages. It has a companion web "
"framework, Poet, designed to take maximum advantage of its routing and "
"content generation features. It can also be used as the templating layer for "
"web frameworks such as Catalyst::View::Mason2 and Dancer::Template::Mason2.\n"
"\n"
"All documentation is indexed at the Mason::Manual manpage.\n"
"\n"
"The previous major version of Mason (1.x) is available under the name the "
"HTML::Mason manpage."
msgstr ""

#. tumbleweed/perl-Math-Base-Convert/summary
#. leap/perl-Math-Base-Convert/summary
msgid "Very Fast Base to Base Conversion"
msgstr ""

#. tumbleweed/perl-Math-Base-Convert/description
#. leap/perl-Math-Base-Convert/description
msgid ""
"This module provides fast functions and methods to convert between arbitrary "
"number bases from 2 (binary) thru 65535.\n"
"\n"
"This module is pure Perl, has no external dependencies, and is backward "
"compatible with old versions of Perl 5."
msgstr ""

#. tumbleweed/perl-Math-BigInt/summary
#. leap/perl-Math-BigInt/summary
msgid "Arbitrary size integer/float math package"
msgstr ""

#. tumbleweed/perl-Math-BigInt/description
#. leap/perl-Math-BigInt/description
msgid ""
"Math::BigInt provides support for arbitrary precision integers. Overloading "
"is also provided for Perl operators."
msgstr ""

#. tumbleweed/perl-Math-ConvexHull/summary
#. leap/perl-Math-ConvexHull/summary
msgid "Calculate convex hulls using Graham's scan (n*log(n))"
msgstr ""

#. tumbleweed/perl-Math-ConvexHull/description
#. leap/perl-Math-ConvexHull/description
msgid ""
"'Math::ConvexHull' is a simple module that calculates convex hulls from a "
"set of points in 2D space. It is a straightforward implementation of the "
"algorithm known as Graham's scan which, with complexity of O(n*log(n)), is "
"the fastest known method of finding the convex hull of an arbitrary set of "
"points. There are some methods of eliminating points that cannot be part of "
"the convex hull. These may or may not be implemented in a future version.\n"
"\n"
"The implementation cannot deal with duplicate points. Therefore, points "
"which are very, very close (think floating point close) to the previous "
"point are dropped since version 1.02 of the module. However, if you pass in "
"randomly ordered data which contains duplicate points, this safety measure "
"might not help you. In that case, you will have to remove duplicates "
"yourself."
msgstr ""

#. tumbleweed/perl-Math-Round/summary
#. leap/perl-Math-Round/summary
#, fuzzy
msgid "Perl extension for rounding numbers"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-Math-Round/description
#. leap/perl-Math-Round/description
msgid ""
"*Math::Round* supplies functions that will round numbers in different ways. "
"The functions *round* and *nearest* are exported by default; others are "
"available as described below. \"use ... qw(:all)\" exports all functions."
msgstr ""

#. tumbleweed/perl-Memoize-ExpireLRU/summary
#. leap/perl-Memoize-ExpireLRU/summary
msgid "Expiry plug-in for Memoize that adds LRU cache expiration"
msgstr ""

#. tumbleweed/perl-Memoize-ExpireLRU/description
#. leap/perl-Memoize-ExpireLRU/description
msgid ""
"For the theory of Memoization, please see the Memoize module documentation. "
"This module implements an expiry policy for Memoize that follows LRU "
"semantics, that is, the last n results, where n is specified as the argument "
"to the 'CACHESIZE' parameter, will be cached."
msgstr ""

#. tumbleweed/perl-Meta-Builder/summary
#. leap/perl-Meta-Builder/summary
msgid "Tools for creating Meta objects to track custom metrics."
msgstr ""

#. tumbleweed/perl-Meta-Builder/description
#. leap/perl-Meta-Builder/description
msgid ""
"Meta programming is becomming more and more popular. The popularity of Meta "
"programming comes from the fact that many problems are made significantly "
"easier. There are a few specialized Meta tools out there, for instance the "
"Class:MOP manpage which is used by the Moose manpage to track class "
"metadata.\n"
"\n"
"Meta::Builder is designed to be a generic tool for writing Meta objects. "
"Unlike specialized tools, Meta::Builder makes no assumptions about what "
"metrics you will care about. Meta::Builder also mkaes it simple for others "
"to extend your meta-object based tools by providing hooks for other packages "
"to add metrics to your meta object.\n"
"\n"
"If a specialized Meta object tool is available ot meet your needs please use "
"it. However if you need a simple Meta object to track a couple metrics, use "
"Meta::Builder.\n"
"\n"
"Meta::Builder is also low-sugar and low-dep. In most cases you will not want "
"a class that needs a meta object to use your meta-object class directly. "
"Rather you will usually want to create a sugar class that exports enhanced "
"API functions that manipulate the meta object."
msgstr ""

#. tumbleweed/perl-Method-Signatures/summary
msgid "Method and Function Declarations with Signatures and No Source Filter"
msgstr ""

#. tumbleweed/perl-Method-Signatures/description
msgid ""
"Provides two new keywords, 'func' and 'method', so that you can write "
"subroutines with signatures instead of having to spell out 'my $self = "
"shift; my($thing) = @_'\n"
"\n"
"'func' is like 'sub' but takes a signature where the prototype would "
"normally go. This takes the place of 'my($foo, $bar) = @_' and does a whole "
"lot more.\n"
"\n"
"'method' is like 'func' but specifically for making methods. It will "
"automatically provide the invocant as '$self' (by default). No more 'my "
"$self = shift'."
msgstr ""

#. tumbleweed/perl-Method-Signatures-Simple/summary
#. tumbleweed/perl-Method-Signatures-Simple/description
#. leap/perl-Method-Signatures-Simple/summary
#. leap/perl-Method-Signatures-Simple/description
msgid "Basic method declarations with signatures, without source filters"
msgstr ""

#. tumbleweed/perl-Minion/summary
#. leap/perl-Minion/summary
msgid "Job queue"
msgstr ""

#. tumbleweed/perl-Minion/description
msgid ""
"Minion is a job queue for the at http://mojolicious.org real-time web "
"framework, with support for multiple named queues, priorities, delayed jobs, "
"job dependencies, job results, retries with backoff, statistics, distributed "
"workers, parallel processing, autoscaling, remote control, resource leak "
"protection and multiple backends (such as at http://www.postgresql.org).\n"
"\n"
"Job queues allow you to process time and/or computationally intensive tasks "
"in background processes, outside of the request/response lifecycle. Among "
"those tasks you'll commonly find image resizing, spam filtering, HTTP "
"downloads, building tarballs, warming caches and basically everything else "
"you can imagine that's not super fast.\n"
"\n"
"  use Mojolicious::Lite;\n"
"\n"
"  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
"\n"
"     app->minion->add_task(poke_mojo => sub {     my $job = shift;     $job-"
">app->ua->get('mojolicious.org');     $job->app->log->debug('We have poked "
"mojolicious.org for a visitor');   });\n"
"\n"
"     get '/' => sub {     my $c = shift;     $c->minion-"
">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious.org "
"for you soon.');   };\n"
"\n"
"  app->start;\n"
"\n"
"Background worker processes are usually started with the command Minion::"
"Command::minion::worker, which becomes automatically available when an "
"application loads the plugin Mojolicious::Plugin::Minion.\n"
"\n"
"  $ ./myapp.pl minion worker\n"
"\n"
"Jobs can be managed right from the command line with Minion::Command::"
"minion::job.\n"
"\n"
"  $ ./myapp.pl minion job\n"
"\n"
"To manage background worker processes with systemd, you can use a unit "
"configuration file like this.\n"
"\n"
"  [Unit]   Description=My Mojolicious application workers   After=postgresql."
"service\n"
"\n"
"  [Service]   Type=simple   ExecStart=/home/sri/myapp/myapp.pl minion worker "
"-m production   KillMode=process\n"
"\n"
"  [Install]   WantedBy=multi-user.target\n"
"\n"
"Every job can fail or succeed, but not get lost, the system is eventually "
"consistent and will preserve job results for as long as you like, depending "
"on \"remove_after\". While individual workers can fail in the middle of "
"processing a job, the system will detect this and ensure that no job is left "
"in an uncertain state, depending on \"missing_after\"."
msgstr ""

#. tumbleweed/perl-Mixin-Linewise/summary
#. leap/perl-Mixin-Linewise/summary
msgid "write your linewise code for handles; this does the rest"
msgstr ""

#. tumbleweed/perl-Mixin-Linewise/description
#. leap/perl-Mixin-Linewise/description
msgid ""
"It's boring to deal with opening files for IO, converting strings to handle-"
"like objects, and all that. With the Mixin::Linewise::Readers manpage and "
"the Mixin::Linewise::Writers manpage, you can just write a method to handle "
"handles, and methods for handling strings and filenames are added for you."
msgstr ""

#. tumbleweed/perl-Mo/summary
#. leap/perl-Mo/summary
msgid "Micro Objects. Mo is less"
msgstr ""

#. tumbleweed/perl-Mo/description
#. leap/perl-Mo/description
msgid "Micro Objects. Mo is less."
msgstr ""

#. tumbleweed/perl-Mock-Quick/summary
#. leap/perl-Mock-Quick/summary
msgid "Quickly mock objects and classes, even temporarily replace them,"
msgstr ""

#. tumbleweed/perl-Mock-Quick/description
#. leap/perl-Mock-Quick/description
msgid ""
"Mock-Quick is here to solve the current problems with Mocking libraries.\n"
"\n"
"There are a couple Mocking libraries available on CPAN. The primary problems "
"with these libraries include verbose syntax, and most importantly side-"
"effects. Some Mocking libraries expect you to mock a specific class, and "
"will unload it then redefine it. This is particularly a problem if you only "
"want to override a class on a lexical level.\n"
"\n"
"Mock-Quick provides a declarative mocking interface that results in a very "
"concise, but clear syntax. There are separate facilities for mocking object "
"instances, and classes. You can quickly create an instance of an object with "
"custom attributes and methods. You can also quickly create an anonymous "
"class, optionally inheriting from another, with whatever methods you "
"desire.\n"
"\n"
"Mock-Quick also provides a tool that provides an OO interface to overriding "
"methods in existing classes. This tool also allows for the restoration of "
"the original class methods. Best of all this is a localized tool, when your "
"control object falls out of scope the original class is restored."
msgstr ""

#. tumbleweed/perl-Modern-Perl/summary
#. tumbleweed/perl-Modern-Perl/description
msgid "enable all of the features of Modern Perl with one import"
msgstr ""

#. tumbleweed/perl-Module-Build/summary
#. leap/perl-Module-Build/summary
msgid "Build and install Perl modules"
msgstr "Perl モジュールの構築とインストール"

#. tumbleweed/perl-Module-Build/description
#. leap/perl-Module-Build/description
#, fuzzy
msgid ""
"'Module::Build' is a system for building, testing, and installing Perl "
"modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
"Developers may alter the behavior of the module through subclassing in a "
"much more straightforward way than with 'MakeMaker'. It also does not "
"require a 'make' on your system - most of the 'Module::Build' code is pure-"
"perl and written in a very cross-platform way.\n"
"\n"
"See \"MOTIVATIONS\" for more comparisons between 'ExtUtils::MakeMaker' and "
"'Module::Build'.\n"
"\n"
"To install 'Module::Build', and any other module that uses 'Module::Build' "
"for its installation process, do the following:\n"
"\n"
"  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
"Build             # Need ./ to ensure we're using this \"Build\" script   ./"
"Build test        # and not another one that happens to be in the PATH   ./"
"Build install\n"
"\n"
"This illustrates initial configuration and the running of three 'actions'. "
"In this case the actions run are 'build' (the default action), 'test', and "
"'install'. Other actions defined so far include:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"You can run the 'help' action for a complete list of actions."
msgstr ""
"'Module::Build' は Perl モジュールを構築し、テストし、インストールするための"
"システムです。 'ExtUtils::MakeMaker' の代替となるべく開発されています。開発者"
"は 'MakeMaker' よりもずっと直観的な方法で、モジュールの動作を変更することもで"
"きます。また、お使いのシステムには 'make' を必要としなくなります。それは、 "
"'Module::Build' のほとんどのコードは純粋な Perl で作成されていて、クロスプ"
"ラットフォームな方法で書かれているためです。\n"
"\n"
"'ExtUtils::MakeMaker' と 'Module::Build' の比較について、詳しくは "
"\"MOTIVATIONS\" のマニュアルページをお読みください。\n"
"\n"
"'Module::Build' やこれをインストール時に使用するモジュールをインストールする"
"には、下記のようにして行ないます:\n"
"\n"
"  perl Build.PL       # 'Build.PL' スクリプトが 'Build' スクリプトを作成しま"
"す   ./Build             # カレントディレクトリにある \"Build\" スクリプトを"
"指定して実行します   ./Build test           ./Build install\n"
"\n"
"これは初期設定と 3 種類の 'アクション' を説明しているものです。この場合、 "
"'build' (既定のアクション), 'test', 'install' の各処理を実行しています。その"
"他のアクションには、下記のようなものがあります:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"動作の一覧について、詳しくは 'help' のセクションをお読みください。"

#. tumbleweed/perl-Module-Build-Deprecated/summary
#. leap/perl-Module-Build-Deprecated/summary
msgid "Collection of Modules Removed From Module-Build"
msgstr ""

#. tumbleweed/perl-Module-Build-Deprecated/description
#. leap/perl-Module-Build-Deprecated/description
msgid ""
"This module contains a number of module that have been removed from Module-"
"Build:\n"
"\n"
"* * Module::Build::ModuleInfo\n"
"\n"
"This has been superceded by Module::Metadata\n"
"\n"
"* * Module::Build::Version\n"
"\n"
"This has been replaced by version\n"
"\n"
"* * Module::Build::YAML\n"
"\n"
"This has been replaced by CPAN::Meta::YAML"
msgstr ""

#. tumbleweed/perl-Module-Build-Tiny/summary
#. leap/perl-Module-Build-Tiny/summary
#, fuzzy
msgid "A tiny replacement for Module::Build"
msgstr "Make の置き換え"

#. tumbleweed/perl-Module-Build-Tiny/description
#. leap/perl-Module-Build-Tiny/description
msgid ""
"Many Perl distributions use a Build.PL file instead of a Makefile.PL file to "
"drive distribution configuration, build, test and installation. "
"Traditionally, Build.PL uses Module::Build as the underlying build system. "
"This module provides a simple, lightweight, drop-in replacement.\n"
"\n"
"Whereas Module::Build has over 6,700 lines of code; this module has less "
"than 120, yet supports the features needed by most distributions."
msgstr ""

#. tumbleweed/perl-Module-Build-WithXSpp/summary
#. leap/perl-Module-Build-WithXSpp/summary
#, fuzzy
msgid "XS++ enhanced flavour of Module::Build"
msgstr "Make の置き換え"

#. tumbleweed/perl-Module-Build-WithXSpp/description
#. leap/perl-Module-Build-WithXSpp/description
msgid ""
"This subclass of the Module::Build manpage adds some tools and processes to "
"make it easier to use for wrapping C++ using XS++ (the ExtUtils::XSpp "
"manpage).\n"
"\n"
"There are a few minor differences from using 'Module::Build' for an ordinary "
"XS module and a few conventions that you should be aware of as an XS++ "
"module author. They are documented in the the /\"FEATURES AND CONVENTIONS\" "
"manpage section below. But if you can't be bothered to read all that, you "
"may choose skip it and blindly follow the advice in the /\"JUMP START FOR "
"THE IMPATIENT\" manpage.\n"
"\n"
"An example of a full distribution based on this build tool can be found in "
"the the ExtUtils::XSpp manpage distribution under _examples/XSpp-Example_. "
"Using that example as the basis for your 'Module::Build::WithXSpp'-based "
"distribution is probably a good idea."
msgstr ""

#. tumbleweed/perl-Module-CPANfile/summary
#. leap/perl-Module-CPANfile/summary
msgid "Parse cpanfile"
msgstr ""

#. tumbleweed/perl-Module-CPANfile/description
msgid ""
"Module::CPANfile is a tool to handle cpanfile format to load application "
"specific dependencies, not just for CPAN distributions."
msgstr ""

#. tumbleweed/perl-Module-Depends/summary
#. leap/perl-Module-Depends/summary
#, fuzzy
msgid "identify the dependencies of a distribution"
msgstr "KDE3 アプリケーションの実行環境"

#. tumbleweed/perl-Module-Depends/description
#. leap/perl-Module-Depends/description
msgid ""
"Module::Depends extracts module dependencies from an unpacked distribution "
"tree.\n"
"\n"
"Module::Depends only evaluates the META.yml shipped with a distribution. "
"This won't be effective until all distributions ship META.yml files, so we "
"suggest you take your life in your hands and look at Module::Depends::"
"Intrusive."
msgstr ""

#. tumbleweed/perl-Module-Find/summary
#. leap/perl-Module-Find/summary
msgid "Find and use installed modules in a (sub)category"
msgstr ""

#. tumbleweed/perl-Module-Find/description
#. leap/perl-Module-Find/description
msgid ""
"Module::Find lets you find and use modules in categories. This can be very "
"useful for auto-detecting driver or plugin modules. You can differentiate "
"between looking in the category itself or in all subcategories.\n"
"\n"
"If you want Module::Find to search in a certain directory on your harddisk "
"(such as the plugins directory of your software installation), make sure you "
"modify '@INC' before you call the Module::Find functions."
msgstr ""

#. tumbleweed/perl-Module-Implementation/summary
#. leap/perl-Module-Implementation/summary
msgid "Loads one of several alternate underlying implementations for a module"
msgstr "モジュールに対する代替実装のうちのいずれかを読み込むモジュール"

#. tumbleweed/perl-Module-Implementation/description
#. leap/perl-Module-Implementation/description
msgid ""
"This module abstracts out the process of choosing one of several underlying "
"implementations for a module. This can be used to provide XS and pure Perl "
"implementations of a module, or it could be used to load an implementation "
"for a given OS or any other case of needing to provide multiple "
"implementations.\n"
"\n"
"This module is only useful when you know all the implementations ahead of "
"time. If you want to load arbitrary implementations then you probably want "
"something like a plugin system, not this module."
msgstr ""
"このモジュールは、モジュールに対する実装を選択する処理を抽象化します。これは "
"XS や純粋な Perl モジュールの実装を使用することができるほか、指定したOS やそ"
"の他の実装から選択することもできます。\n"
"\n"
"このモジュールは、あらかじめ実装を知っている場合にのみ有効な仕組みです。プラ"
"グインシステムのようなものをご希望の場合は、このモジュールは不適切です。"

#. tumbleweed/perl-Module-Info/summary
#. leap/perl-Module-Info/summary
msgid "Information about Perl modules"
msgstr "Perl モジュールに関する情報"

#. tumbleweed/perl-Module-Info/description
#. leap/perl-Module-Info/description
msgid ""
"Module::Info gives you information about Perl modules *without actually "
"loading the module*. It actually isn't specific to modules and should work "
"on any perl code."
msgstr ""
"Module::Info は、実際にそのモジュールを読み込むことなく Perl モジュールの情報"
"を取得することができるモジュールです。実際にはモジュールに限定されず、いかな"
"る Perl コードでも動作するはずのものです。"

#. tumbleweed/perl-Module-Install/summary
#. leap/perl-Module-Install/summary
msgid "Standalone, extensible Perl module installer"
msgstr ""

#. tumbleweed/perl-Module-Install/description
#. leap/perl-Module-Install/description
msgid ""
"*Module::Install* is a package for writing installers for CPAN (or CPAN-"
"like) distributions that are clean, simple, minimalist, act in a strictly "
"correct manner with the ExtUtils::MakeMaker manpage, and will run on any "
"Perl installation version 5.005 or newer.\n"
"\n"
"The intent is to make it as easy as possible for CPAN authors (and "
"especially for first-time CPAN authors) to have installers that follow all "
"the best practices for distribution installation, but involve as much DWIM "
"(Do What I Mean) as possible when writing them."
msgstr ""

#. tumbleweed/perl-Module-Install-AuthorTests/summary
#. leap/perl-Module-Install-AuthorTests/summary
msgid "Designate Tests Only Run by Module Authors"
msgstr ""

#. tumbleweed/perl-Module-Install-AuthorTests/description
#. leap/perl-Module-Install-AuthorTests/description
msgid "designate tests only run by module authors"
msgstr ""

#. tumbleweed/perl-Module-Install-ExtraTests/summary
#. leap/perl-Module-Install-ExtraTests/summary
msgid "Contextual tests that the harness can ignore"
msgstr ""

#. tumbleweed/perl-Module-Install-ExtraTests/description
#. leap/perl-Module-Install-ExtraTests/description
msgid "contextual tests that the harness can ignore"
msgstr ""

#. tumbleweed/perl-Module-Load-Conditional/summary
msgid "Looking up module information / loading at runtime"
msgstr ""

#. tumbleweed/perl-Module-Load-Conditional/description
msgid ""
"Module::Load::Conditional provides simple ways to query and possibly load "
"any of the modules you have installed on your system during runtime.\n"
"\n"
"It is able to load multiple modules at once or none at all if one of them "
"was not able to load. It also takes care of any error checking and so forth."
msgstr ""

#. tumbleweed/perl-Module-Metadata/summary
#. leap/perl-Module-Metadata/summary
#, fuzzy
msgid "Gather package and POD information from perl module files"
msgstr "Macintosh BinHex ファイルからのデータ抽出"

#. tumbleweed/perl-Module-Metadata/description
#. leap/perl-Module-Metadata/description
msgid ""
"This module provides a standard way to gather metadata about a .pm file "
"through (mostly) static analysis and (some) code execution. When determining "
"the version of a module, the '$VERSION' assignment is 'eval'ed, as is "
"traditional in the CPAN toolchain."
msgstr ""

#. tumbleweed/perl-Module-Path/summary
#. leap/perl-Module-Path/summary
msgid "get the full path to a locally installed module"
msgstr ""

#. tumbleweed/perl-Module-Path/description
#. leap/perl-Module-Path/description
msgid ""
"This module provides a single function, 'module_path()', which takes a "
"module name and finds the first directory in your '@INC' path where the "
"module is installed locally. It returns the full path to that file, "
"resolving any symlinks. It is portable and only depends on core modules.\n"
"\n"
"It works by looking in all the directories in '@INC' for an appropriately "
"named file:\n"
"\n"
"I wrote this module because I couldn't find an alternative which dealt with "
"the points listed above, and didn't pull in what seemed like too many "
"dependencies to me.\n"
"\n"
"The distribution for 'Module::Path' includes the 'mpath' script, which lets "
"you get the path for a module from the command-line:\n"
"\n"
" % mpath Module::Path\n"
"\n"
"The 'module_path()' function will also cope if the module name includes '."
"pm'; this means you can pass a partial path, such as used as the keys in "
"'%INC':\n"
"\n"
"  module_path('Test/More.pm') eq $INC{'Test/More.pm'}\n"
"\n"
"The above is the basis for one of the tests."
msgstr ""

#. tumbleweed/perl-Module-Pluggable/summary
#. leap/perl-Module-Pluggable/summary
msgid "Automatically Give Your Module the Ability to Have Plugins"
msgstr ""

#. tumbleweed/perl-Module-Pluggable/description
#. leap/perl-Module-Pluggable/description
msgid ""
"Provides a simple but, hopefully, extensible way of having 'plugins' for "
"your module. Obviously this isn't going to be the be all and end all of "
"solutions but it works for me.\n"
"\n"
"Essentially all it does is export a method into your namespace that looks "
"through a search path for .pm files and turn those into class names.\n"
"\n"
"Optionally it instantiates those classes for you."
msgstr ""

#. tumbleweed/perl-Module-Reader/summary
#. leap/perl-Module-Reader/summary
msgid "Read the source of a module like perl does"
msgstr ""

#. tumbleweed/perl-Module-Reader/description
#. leap/perl-Module-Reader/description
msgid ""
"Reads the content of perl modules the same way perl does. This includes "
"reading modules available only by perlfunc/require, or filtered through them."
msgstr ""

#. tumbleweed/perl-Module-Refresh/summary
#. leap/perl-Module-Refresh/summary
msgid "Refresh INC files when updated on disk"
msgstr ""

#. tumbleweed/perl-Module-Refresh/description
#. leap/perl-Module-Refresh/description
msgid ""
"This module is a generalization of the functionality provided by the Apache::"
"StatINC manpage and the Apache::Reload manpage. It's designed to make it "
"easy to do simple iterative development when working in a persistent "
"environment.\n"
"\n"
"It does not require mod_perl."
msgstr ""

#. tumbleweed/perl-Module-Runtime/summary
#. leap/perl-Module-Runtime/summary
msgid "runtime module handling"
msgstr "ランタイムモジュールの処理"

#. tumbleweed/perl-Module-Runtime/description
msgid ""
"The functions exported by this module deal with runtime handling of Perl "
"modules, which are normally handled at compile time. This module avoids "
"using any other modules, so that it can be used in low-level "
"infrastructure.\n"
"\n"
"The parts of this module that work with module names apply the same syntax "
"that is used for barewords in Perl source. In principle this syntax can vary "
"between versions of Perl, and this module applies the syntax of the Perl on "
"which it is running. In practice the usable syntax hasn't changed yet. "
"There's some intent for Unicode module names to be supported in the future, "
"but this hasn't yet amounted to any consistent facility.\n"
"\n"
"The functions of this module whose purpose is to load modules include "
"workarounds for three old Perl core bugs regarding 'require'. These "
"workarounds are applied on any Perl version where the bugs exist, except for "
"a case where one of the bugs cannot be adequately worked around in pure Perl."
msgstr ""
"このモジュールが提供する関数は、 Perl モジュールの実行時処理を取り扱うもので"
"す。 Perl のモジュールは通常コンパイル時に処理されるもので、このモジュールは"
"一切のモジュールと依存関係を持たない仕組みになっていることから、低レベルな構"
"造になっています。\n"
"\n"
"本モジュール内の部品のうち、モジュール名での処理を行なうものは、 Perl ソース"
"内で使用していた元々のものと同じ文法になっています。また、この文法は一般に、"
"Perl のバージョン間で異なる構造になっているため、このモジュールでは実行中の"
"Perl のバージョンに合わせて文法が変わる仕組みになっています。実際に使用する文"
"法が変わったりしていることはありませんが、将来的に Unicode のモジュール名に対"
"応する可能性を考えると、これは一貫した仕組みとは呼べないものなっています。\n"
"\n"
"このモジュールの機能は、古い Perl コアに存在していた 3 種類の 'require' まわ"
"りのバグに回避策を設定してモジュールを読み込むことにあります。これらの回避策"
"は、バグの存在する全てのバージョンに対して適用されますが、純粋な Perl では簡"
"単に解決できないバグは除外されています。"

#. tumbleweed/perl-Module-Runtime-Conflicts/summary
#. leap/perl-Module-Runtime-Conflicts/summary
msgid "Provide information on conflicts for Module::Runtime"
msgstr "Module::Runtime に対する矛盾情報の提供"

#. tumbleweed/perl-Module-Runtime-Conflicts/description
#. leap/perl-Module-Runtime-Conflicts/description
#, fuzzy
msgid ""
"This module provides conflicts checking for Module::Runtime, which had a "
"recent release that broke some versions of Moose. It is called from Moose::"
"Conflicts and 'moose-outdated'."
msgstr ""
"このモジュールは、 Module::Runtime モジュールに対して矛盾チェックの機能を提供"
"します。これは、 Moose のバージョンによっては依存関係を壊してしまうリリースが"
"存在していたことによるものです。 Moose::Conflicts および 'moose-outdated' か"
"ら呼び出されます。"

#. tumbleweed/perl-Module-Signature/summary
#. leap/perl-Module-Signature/summary
msgid "Module signature file manipulation"
msgstr ""

#. tumbleweed/perl-Module-Signature/description
#. leap/perl-Module-Signature/description
msgid ""
"*Module::Signature* adds cryptographic authentications to CPAN "
"distributions, via the special _SIGNATURE_ file.\n"
"\n"
"If you are a module user, all you have to do is to remember to run 'cpansign "
"-v' (or just 'cpansign') before issuing 'perl Makefile.PL' or 'perl Build."
"PL'; that will ensure the distribution has not been tampered with.\n"
"\n"
"Module authors can easily add the _SIGNATURE_ file to the distribution "
"tarball; see NOTES below for how to do it as part of 'make dist'.\n"
"\n"
"If you _really_ want to sign a distribution manually, simply add 'SIGNATURE' "
"to _MANIFEST_, then type 'cpansign -s' immediately before 'make dist'. Be "
"sure to delete the _SIGNATURE_ file afterwards.\n"
"\n"
"Please also see NOTES about _MANIFEST.SKIP_ issues, especially if you are "
"using *Module::Build* or writing your own _MANIFEST.SKIP_."
msgstr ""

#. tumbleweed/perl-Module-Starter/summary
#. leap/perl-Module-Starter/summary
msgid "a simple starter kit for any module"
msgstr ""

#. tumbleweed/perl-Module-Starter/description
#. leap/perl-Module-Starter/description
msgid ""
"This is the core module for Module::Starter. If you're not looking to extend "
"or alter the behavior of this module, you probably want to look at the "
"module-starter manpage instead.\n"
"\n"
"Module::Starter is used to create a skeletal CPAN distribution, including "
"basic builder scripts, tests, documentation, and module code. This is done "
"through just one method, 'create_distro'."
msgstr ""

#. tumbleweed/perl-Mojolicious/summary
#. leap/perl-Mojolicious/summary
#, fuzzy
msgid "Real-time web framework"
msgstr "Java 回帰テストパッケージ"

#. tumbleweed/perl-Mojolicious/description
msgid ""
"An amazing real-time web framework built on top of the powerful Mojo web "
"development toolkit. With support for RESTful routes, plugins, commands, "
"Perl-ish templates, content negotiation, session management, form "
"validation, testing framework, static file server, 'CGI'/'PSGI' detection, "
"first class Unicode support and much more for you to discover.\n"
"\n"
"Take a look at our excellent documentation in Mojolicious::Guides!"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-AssetPack/summary
#. leap/perl-Mojolicious-Plugin-AssetPack/summary
msgid "Compress and convert css, less, sass, javascript and coffeescript files"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-AssetPack/description
#. leap/perl-Mojolicious-Plugin-AssetPack/description
msgid ""
"Mojolicious::Plugin::AssetPack is Mojolicious plugin for processing static "
"assets. The idea is that JavaScript and CSS files should be served as one "
"minified file to save bandwidth and roundtrip time to the server.\n"
"\n"
"There are many external tools for doing this, but integrating them with "
"Mojolicious can be a struggle: You want to serve the source files directly "
"while developing, but a minified version in production. This assetpack "
"plugin will handle all of that automatically for you.\n"
"\n"
"The actual processing is delegated to \"pipe objects\". Please see "
"Mojolicious::Plugin::AssetPack::Guides::Tutorial/Pipes for a complete list."
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-CHI/summary
#. leap/perl-Mojolicious-Plugin-CHI/summary
msgid "Use CHI Caches in Mojolicious"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-CHI/description
#. leap/perl-Mojolicious-Plugin-CHI/description
msgid ""
"Mojolicious::Plugin::CHI is a simple plugin to work with CHI caches within "
"Mojolicious."
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-RenderFile/summary
#. leap/perl-Mojolicious-Plugin-RenderFile/summary
msgid "\"render_file\" helper for Mojolicious"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-RenderFile/description
#. leap/perl-Mojolicious-Plugin-RenderFile/description
msgid ""
"Mojolicious::Plugin::RenderFile is a Mojolicious plugin that adds "
"\"render_file\" helper. It does not read file in memory and just streaming "
"it to a client."
msgstr ""

#. tumbleweed/perl-Moo/summary
#. leap/perl-Moo/summary
msgid "Minimalist Object Orientation (with Moose compatibility)"
msgstr ""

#. tumbleweed/perl-Moo/description
#. leap/perl-Moo/description
msgid ""
"'Moo' is an extremely light-weight Object Orientation system. It allows one "
"to concisely define objects and roles with a convenient syntax that avoids "
"the details of Perl's object system. 'Moo' contains a subset of Moose and is "
"optimised for rapid startup.\n"
"\n"
"'Moo' avoids depending on any XS modules to allow for simple deployments. "
"The name 'Moo' is based on the idea that it provides almost -- but not quite "
"-- two thirds of Moose.\n"
"\n"
"Unlike Mouse this module does not aim at full compatibility with Moose's "
"surface syntax, preferring instead to provide full interoperability via the "
"metaclass inflation capabilities described in MOO AND MOOSE.\n"
"\n"
"For a full list of the minor differences between Moose and Moo's surface "
"syntax, see INCOMPATIBILITIES WITH MOOSE."
msgstr ""

#. tumbleweed/perl-MooX-HandlesVia/summary
#. leap/perl-MooX-HandlesVia/summary
msgid "NativeTrait-like behavior for Moo"
msgstr ""

#. tumbleweed/perl-MooX-HandlesVia/description
#. leap/perl-MooX-HandlesVia/description
msgid ""
"MooX::HandlesVia is an extension of Moo's 'handles' attribute functionality. "
"It provides a means of proxying functionality from an external class to the "
"given atttribute. This is most commonly used as a way to emulate 'Native "
"Trait' behavior that has become commonplace in Moose code, for which there "
"was no Moo alternative."
msgstr ""

#. tumbleweed/perl-MooX-Types-MooseLike/summary
#. leap/perl-MooX-Types-MooseLike/summary
msgid "Some Moosish Types and a Type Builder"
msgstr ""

#. tumbleweed/perl-MooX-Types-MooseLike/description
#. leap/perl-MooX-Types-MooseLike/description
msgid ""
"This module provides a possibility to build your own set of Moose-like "
"types. These custom types can then be used to describe fields in Moo-based "
"classes.\n"
"\n"
"See the MooX::Types::MooseLike::Base manpage for a list of available base "
"types. Its source also provides an example of how to build base types, along "
"with both parameterizable and non-parameterizable."
msgstr ""

#. tumbleweed/perl-MooX-Types-MooseLike-Numeric/summary
#. leap/perl-MooX-Types-MooseLike-Numeric/summary
msgid "Moo types for numbers"
msgstr ""

#. tumbleweed/perl-MooX-Types-MooseLike-Numeric/description
#. leap/perl-MooX-Types-MooseLike-Numeric/description
msgid "adapted from MooseX::Types::Common::Numeric"
msgstr ""

#. tumbleweed/perl-MooX-late/summary
#. leap/perl-MooX-late/summary
msgid "easily translate Moose code to Moo"
msgstr ""

#. tumbleweed/perl-MooX-late/description
#. leap/perl-MooX-late/description
msgid ""
"the Moo manpage is a light-weight object oriented programming framework "
"which aims to be compatible with the Moose manpage. It does this by "
"detecting when Moose has been loaded, and automatically \"inflating\" its "
"classes and roles to full Moose classes and roles. This way, Moo classes can "
"consume Moose roles, Moose classes can extend Moo classes, and so forth.\n"
"\n"
"However, the surface syntax of Moo differs somewhat from Moose. For example "
"the 'isa' option when defining attributes in Moose must be either a string "
"or a blessed the Moose::Meta::TypeConstraint manpage object; but in Moo must "
"be a coderef. These differences in surface syntax make porting code from "
"Moose to Moo potentially tricky. the MooX::late manpage provides some "
"assistance by enabling a slightly more Moosey surface syntax.\n"
"\n"
"MooX::late does the following:\n"
"\n"
"* 1.\n"
"\n"
"  Supports 'isa => $stringytype'.\n"
"\n"
"* 2.\n"
"\n"
"  Supports 'does => $rolename' .\n"
"\n"
"* 3.\n"
"\n"
"  Supports 'lazy_build => 1'.\n"
"\n"
"* 4.\n"
"\n"
"  Exports 'blessed' and 'confess' functions to your namespace.\n"
"\n"
"* 5.\n"
"\n"
"  Handles certain attribute traits. Currently 'Hash', 'Array' and 'Code'   "
"are supported. This feature requires the MooX::HandlesVia manpage.\n"
"\n"
"  'String', 'Number', 'Counter' and 'Bool' are unlikely to ever be   "
"supported because of internal implementation details of Moo. If you need   "
"another attribute trait to be supported, let me know and I will consider   "
"it.\n"
"\n"
"Five features. It is not the aim of 'MooX::late' to make every aspect of Moo "
"behave exactly identically to Moose. It's just going after the low-hanging "
"fruit. So it does five things right now, and I promise that future versions "
"will never do more than seven.\n"
"\n"
"Previous releases of MooX::late added support for 'coerce => 1' and 'default "
"=> $nonref'. These features have now been added to Moo itself, so MooX::late "
"no longer has to deal with them."
msgstr ""

#. tumbleweed/perl-Moose-Autobox/summary
#. leap/perl-Moose-Autobox/summary
msgid "Autoboxed wrappers for Native Perl datatypes"
msgstr ""

#. tumbleweed/perl-Moose-Autobox/description
#. leap/perl-Moose-Autobox/description
msgid ""
"Moose::Autobox provides an implementation of SCALAR, ARRAY, HASH & CODE for "
"use with autobox. It does this using a hierarchy of roles in a manner "
"similar to what Perl 6 _might_ do. This module, like Class::MOP and Moose, "
"was inspired by my work on the Perl 6 Object Space, and the 'core types' "
"implemented there."
msgstr ""

#. tumbleweed/perl-MooseX-Aliases/summary
#. leap/perl-MooseX-Aliases/summary
msgid "easy aliasing of methods and attributes in Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Aliases/description
#. leap/perl-MooseX-Aliases/description
msgid ""
"The MooseX::Aliases module will allow you to quickly alias methods in Moose. "
"It provides an alias parameter for 'has()' to generate aliased accessors as "
"well as the standard ones. Attributes can also be initialized in the "
"constructor via their aliased names.\n"
"\n"
"You can create more than one alias at once by passing a arrayref:\n"
"\n"
"    has ip_addr => (         alias => [ qw(ipAddr ip) ],     );"
msgstr ""

#. tumbleweed/perl-MooseX-App-Cmd/summary
#. leap/perl-MooseX-App-Cmd/summary
msgid "Mashes up MooseX::Getopt and App::Cmd"
msgstr ""

#. tumbleweed/perl-MooseX-App-Cmd/description
#. leap/perl-MooseX-App-Cmd/description
msgid ""
"This module marries App::Cmd with MooseX::Getopt.\n"
"\n"
"Use it like App::Cmd advises (especially see App::Cmd::Tutorial), swapping "
"App::Cmd::Command for MooseX::App::Cmd::Command.\n"
"\n"
"Then you can write your moose commands as Moose classes, with MooseX::Getopt "
"defining the options for you instead of 'opt_spec' returning a Getopt::Long::"
"Descriptive spec."
msgstr ""

#. tumbleweed/perl-MooseX-ArrayRef/summary
#. leap/perl-MooseX-ArrayRef/summary
msgid "blessed arrayrefs with Moose"
msgstr ""

#. tumbleweed/perl-MooseX-ArrayRef/description
#. leap/perl-MooseX-ArrayRef/description
msgid ""
"Objects implemented with arrayrefs rather than hashrefs are often faster "
"than those implemented with hashrefs. Moose's default object implementation "
"is hashref based. Can we go faster?\n"
"\n"
"Simply 'use MooseX::ArrayRef' instead of 'use Moose', but note the "
"limitations in the section below.\n"
"\n"
"The current implementation is mostly a proof of concept, but it does mostly "
"seem to work."
msgstr ""

#. tumbleweed/perl-MooseX-Attribute-ENV/summary
#. leap/perl-MooseX-Attribute-ENV/summary
msgid "Set default of an attribute to a value from %ENV"
msgstr ""

#. tumbleweed/perl-MooseX-Attribute-ENV/description
#. leap/perl-MooseX-Attribute-ENV/description
msgid ""
"This is a the Moose manpage attribute trait that you use when you want the "
"default value for an attribute to be populated from the %ENV hash. So, for "
"example if you have set the environment variable USERNAME = 'John' you can "
"do:\n"
"\n"
"\tpackage MyApp::MyClass;\n"
"\n"
"\tuse Moose; \tuse MooseX::Attribute::ENV;\n"
"\n"
"\thas 'username' => (is=>'ro', traits=>['ENV']);\n"
"\n"
"\tpackage main;\n"
"\n"
"\tmy $myclass = MyApp::MyClass->new();\n"
"\n"
"\tprint $myclass->username; # STDOUT => 'John';\n"
"\n"
"This is basically similar functionality to something like:\n"
"\n"
"\thas 'attr' => ( \t\tis=>'ro', \t\tdefault=> sub { \t\t\t$ENV{uc 'attr'}; \t"
"\t}, \t);\n"
"\n"
"but this module has a few other features that offer merit, as well as being "
"a simple enough attribute trait that I hope it can serve as a learning "
"tool.\n"
"\n"
"If the named key isn't found in %ENV, then defaults will execute as normal."
msgstr ""

#. tumbleweed/perl-MooseX-AttributeHelpers/summary
msgid "(DEPRECATED) Extend your attribute interfaces"
msgstr ""

#. tumbleweed/perl-MooseX-AttributeHelpers/description
msgid ""
"*This distribution is deprecated. The features it provides have been added "
"to the Moose core code as Moose::Meta::Attribute::Native. This distribution "
"should not be used by any new code.*\n"
"\n"
"While Moose attributes provide you with a way to name your accessors, "
"readers, writers, clearers and predicates, this library provides commonly "
"used attribute helper methods for more specific types of data.\n"
"\n"
"As seen in the SYNOPSIS, you specify the extension via the 'metaclass' "
"parameter. Available meta classes are:"
msgstr ""

#. tumbleweed/perl-MooseX-AuthorizedMethods/summary
#. leap/perl-MooseX-AuthorizedMethods/summary
msgid "Syntax sugar for authorized methods"
msgstr ""

#. tumbleweed/perl-MooseX-AuthorizedMethods/description
#. leap/perl-MooseX-AuthorizedMethods/description
msgid ""
"This method exports the \"authorized\" declarator that makes a verification "
"if the user has the required permissions before the acual invocation. The "
"default verification method will take the \"user\" method result and call "
"\"roles\" to list the roles given to that user."
msgstr ""

#. tumbleweed/perl-MooseX-ClassAttribute/summary
#. leap/perl-MooseX-ClassAttribute/summary
msgid "Declare class attributes Moose-style"
msgstr ""

#. tumbleweed/perl-MooseX-ClassAttribute/description
#. leap/perl-MooseX-ClassAttribute/description
msgid ""
"This module allows you to declare class attributes in exactly the same way "
"as object attributes, using 'class_has()' instead of 'has()'.\n"
"\n"
"You can use any feature of Moose's attribute declarations, including "
"overriding a parent's attributes, delegation ('handles'), attribute traits, "
"etc. All features should just work. The one exception is the \"required\" "
"flag, which is not allowed for class attributes.\n"
"\n"
"The accessor methods for class attribute may be called on the class "
"directly, or on objects of that class. Passing a class attribute to the "
"constructor will not set that attribute."
msgstr ""

#. tumbleweed/perl-MooseX-Clone/summary
#. leap/perl-MooseX-Clone/summary
msgid "Fine-grained cloning support for Moose objects"
msgstr ""

#. tumbleweed/perl-MooseX-Clone/description
#. leap/perl-MooseX-Clone/description
msgid ""
"Out of the box the Moose manpage only provides very barebones cloning "
"support in order to maximize flexibility.\n"
"\n"
"This role provides a 'clone' method that makes use of the low level cloning "
"support already in the Moose manpage and adds selective deep cloning based "
"on introspection on top of that. Attributes with the 'Clone' trait will "
"handle cloning of data within the object, typically delegating to the "
"attribute value's own 'clone' method."
msgstr ""

#. tumbleweed/perl-MooseX-ConfigFromFile/summary
#. leap/perl-MooseX-ConfigFromFile/summary
msgid "An abstract Moose role for setting attributes from a configfile"
msgstr ""

#. tumbleweed/perl-MooseX-ConfigFromFile/description
#. leap/perl-MooseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"sub-roles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supersede "
"those in the configfile.\n"
"\n"
"the MooseX::Getopt manpage knows about this abstract role, and will use it "
"if available to load attributes from the file specified by the command line "
"flag '--configfile' during its normal 'new_with_options'."
msgstr ""

#. tumbleweed/perl-MooseX-Daemonize/summary
#. leap/perl-MooseX-Daemonize/summary
#, fuzzy
msgid "Role for daemonizing your Moose based application"
msgstr "CommonC++ アプリケーションを開発するためのファイル"

#. tumbleweed/perl-MooseX-Daemonize/description
#. leap/perl-MooseX-Daemonize/description
msgid ""
"Often you want to write a persistent daemon that has a pid file, and "
"responds appropriately to Signals. This module provides a set of basic roles "
"as an infrastructure to do that."
msgstr ""

#. tumbleweed/perl-MooseX-Declare/summary
msgid "(DEPRECATED) Declarative syntax for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Declare/description
msgid ""
"This module provides syntactic sugar for Moose, the postmodern object system "
"for Perl 5. When used, it sets up the 'class' and 'role' keywords.\n"
"\n"
"*Note:* Please see the the /WARNING manpage section below!"
msgstr ""

#. tumbleweed/perl-MooseX-Getopt/summary
#. leap/perl-MooseX-Getopt/summary
#, fuzzy
msgid "Moose role for processing command line options"
msgstr "コマンドラインパラメータを処理するための C 言語ライブラリ"

#. tumbleweed/perl-MooseX-Getopt/description
#. leap/perl-MooseX-Getopt/description
msgid ""
"This is a role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line."
msgstr ""

#. tumbleweed/perl-MooseX-GlobRef/summary
#. leap/perl-MooseX-GlobRef/summary
msgid "Store a Moose object in glob reference"
msgstr ""

#. tumbleweed/perl-MooseX-GlobRef/description
#. leap/perl-MooseX-GlobRef/description
msgid ""
"This module allows to store Moose object in glob reference of file handle. "
"The class attributes will be stored in hash slot associated with glob "
"reference. It allows to create a Moose version of the IO::Handle manpage.\n"
"\n"
"The attributes can be accessed directly with following expression:\n"
"\n"
"  my $hashref = \\%{*$self};   print $hashref->{key};\n"
"\n"
"or shorter:\n"
"\n"
"  print *$self->{key};\n"
"\n"
"but the standard accessors should be used instead:\n"
"\n"
"  print $self->key;"
msgstr ""

#. tumbleweed/perl-MooseX-Has-Options/summary
#. leap/perl-MooseX-Has-Options/summary
msgid "Succinct options for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Has-Options/description
#. leap/perl-MooseX-Has-Options/description
#, fuzzy
msgid ""
"This module provides a succinct syntax for declaring options for the Moose "
"manpage attributes."
msgstr ""
"このモジュールは、時間範囲を曖昧な形で／正確な形で表現する機能を提供します。"

#. tumbleweed/perl-MooseX-HasDefaults/summary
#. leap/perl-MooseX-HasDefaults/summary
msgid "Default \"is\" to \"ro\" or \"rw\" for all attributes"
msgstr ""

#. tumbleweed/perl-MooseX-HasDefaults/description
#. leap/perl-MooseX-HasDefaults/description
msgid ""
"The module the MooseX::HasDefaults::RO manpage defaults 'is' to 'ro'.\n"
"\n"
"The module the MooseX::HasDefaults::RW manpage defaults 'is' to 'rw'.\n"
"\n"
"If you pass a specific value to any 'has''s 'is', that overrides the "
"default. If you do not want an accessor, pass 'is => undef'."
msgstr ""

#. tumbleweed/perl-MooseX-InsideOut/summary
#. leap/perl-MooseX-InsideOut/summary
msgid "inside-out objects with Moose"
msgstr ""

#. tumbleweed/perl-MooseX-InsideOut/description
#. leap/perl-MooseX-InsideOut/description
msgid ""
"MooseX::InsideOut provides metaroles for inside-out objects. That is, it "
"sets up attribute slot storage somewhere other than inside '$self'. This "
"means that you can extend non-Moose classes, whose internals you either "
"don't want to care about or aren't hash-based."
msgstr ""

#. tumbleweed/perl-MooseX-Iterator/summary
#. leap/perl-MooseX-Iterator/summary
#, fuzzy
msgid "Iterate over collections"
msgstr "プロセスツール集"

#. tumbleweed/perl-MooseX-Iterator/description
#. leap/perl-MooseX-Iterator/description
msgid ""
"This is an attempt to add smalltalk-like streams to Moose. It currently "
"works with ArrayRefs and HashRefs.\n"
"\n"
"* next\n"
"\n"
"  The next method provides the next item in the colletion.\n"
"\n"
"    For arrays it returns the element of the array\n"
"\n"
"    For hashs it returns a pair as a hashref with the keys: key and value\n"
"\n"
"* has_next\n"
"\n"
"  The has_next method is a boolean method that is true if there is another   "
"item in the colletion after the current item. and falue if there isn't.\n"
"\n"
"* peek\n"
"\n"
"  The peek method returns the next item without moving the state of the   "
"iterator forward. It returns undef if it is at the end of the collection.\n"
"\n"
"* reset\n"
"\n"
"  Resets the cursor, so you can iterate through the elements again."
msgstr ""

#. tumbleweed/perl-MooseX-LazyLogDispatch/summary
#. tumbleweed/perl-MooseX-LogDispatch/summary
#. leap/perl-MooseX-LazyLogDispatch/summary
#. leap/perl-MooseX-LogDispatch/summary
msgid "A Logging Role for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-LazyLogDispatch/description
#. tumbleweed/perl-MooseX-LogDispatch/description
#. leap/perl-MooseX-LazyLogDispatch/description
#. leap/perl-MooseX-LogDispatch/description
msgid ""
"the Log::Dispatch manpage role for use with your the Moose manpage classes."
msgstr ""

#. tumbleweed/perl-MooseX-LazyRequire/summary
#. leap/perl-MooseX-LazyRequire/summary
msgid "Required attributes which fail only when trying to use them"
msgstr ""

#. tumbleweed/perl-MooseX-LazyRequire/description
#. leap/perl-MooseX-LazyRequire/description
msgid ""
"This module adds a 'lazy_required' option to Moose attribute declarations.\n"
"\n"
"The reader methods for all attributes with that option will throw an "
"exception unless a value for the attributes was provided earlier by a "
"constructor parameter or through a writer method."
msgstr ""

#. tumbleweed/perl-MooseX-Log-Log4perl/summary
#. leap/perl-MooseX-Log-Log4perl/summary
msgid "Logging Role for Moose based on Log::Log4perl"
msgstr ""

#. tumbleweed/perl-MooseX-Log-Log4perl/description
#. leap/perl-MooseX-Log-Log4perl/description
msgid ""
"A logging role building a very lightweight wrapper to Log::Log4perl for use "
"with your Moose or Moo classes. The initialization of the Log4perl instance "
"must be performed prior to logging the first log message. Otherwise the "
"default initialization will happen, probably not doing the things you "
"expect.\n"
"\n"
"For compatibility the 'logger' attribute can be accessed to use a common "
"interface for application logging.\n"
"\n"
"Using the logger within a class is as simple as consuming a role:\n"
"\n"
"    package MyClass;     use Moose;     with 'MooseX::Log::Log4perl';\n"
"\n"
"    sub dummy {         my $self = shift;         $self->log->info(\"Dummy "
"log entry\");     }\n"
"\n"
"The logger needs to be setup before using the logger, which could happen in "
"the main application:\n"
"\n"
"    package main;     use Log::Log4perl qw(:easy);     use MyClass;\n"
"\n"
"    BEGIN { Log::Log4perl->easy_init() };\n"
"\n"
"    my $myclass = MyClass->new();     $myclass->log->info(\"In my class\"); "
"# Access the log of the object     $myclass->dummy;                    # "
"Will log \"Dummy log entry\""
msgstr ""

#. tumbleweed/perl-MooseX-MarkAsMethods/summary
#. leap/perl-MooseX-MarkAsMethods/summary
msgid "Mark overload code symbols as methods"
msgstr ""

#. tumbleweed/perl-MooseX-MarkAsMethods/description
#. leap/perl-MooseX-MarkAsMethods/description
msgid ""
"MooseX::MarkAsMethods allows one to easily mark certain functions as Moose "
"methods. This will allow other packages such as the namespace::autoclean "
"manpage to operate without blowing away your overloads. After using MooseX::"
"MarkAsMethods your overloads will be recognized by the Class::MOP manpage as "
"being methods, and class extension as well as composition from roles with "
"overloads will \"just work\".\n"
"\n"
"By default we check for overloads, and mark those functions as methods.\n"
"\n"
"If 'autoclean =&gt; 1' is passed to import on using this module, we will "
"invoke namespace::autoclean to clear out non-methods."
msgstr ""

#. tumbleweed/perl-MooseX-Meta-TypeConstraint-ForceCoercion/summary
#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/summary
msgid "Force coercion when validating type constraints"
msgstr ""

#. tumbleweed/perl-MooseX-Meta-TypeConstraint-ForceCoercion/description
#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/description
msgid ""
"This class allows to wrap any \"Moose::Meta::TypeConstraint\" in a way that "
"will force coercion of the value when checking or validating a value against "
"it."
msgstr ""

#. tumbleweed/perl-MooseX-Method-Signatures/summary
msgid ""
"(DEPRECATED) Method declarations with type constraints and no source filter"
msgstr ""

#. tumbleweed/perl-MooseX-Method-Signatures/description
msgid ""
"Provides a proper method keyword, like \"sub\" but specifically for making "
"methods and validating their arguments against Moose type constraints."
msgstr ""

#. tumbleweed/perl-MooseX-MultiInitArg/summary
#. leap/perl-MooseX-MultiInitArg/summary
msgid "Attributes with aliases for constructor arguments"
msgstr ""

#. tumbleweed/perl-MooseX-MultiInitArg/description
#. leap/perl-MooseX-MultiInitArg/description
msgid ""
"If you've ever wanted to be able to call an attribute any number of things "
"while you're passing arguments to your object constructor, Now You Can.\n"
"\n"
"The primary motivator is that I have some attributes that were named "
"inconsistently, and I wanted to rename them without breaking backwards "
"compatibility with my existing API."
msgstr ""

#. tumbleweed/perl-MooseX-NonMoose/summary
#. leap/perl-MooseX-NonMoose/summary
msgid "easy subclassing of non-Moose classes"
msgstr ""

#. tumbleweed/perl-MooseX-NonMoose/description
#. leap/perl-MooseX-NonMoose/description
msgid ""
"'MooseX::NonMoose' allows for easily subclassing non-Moose classes with "
"Moose, taking care of the annoying details connected with doing this, such "
"as setting up proper inheritance from the Moose::Object manpage and "
"installing (and inlining, at 'make_immutable' time) a constructor that makes "
"sure things like 'BUILD' methods are called. It tries to be as non-intrusive "
"as possible - when this module is used, inheriting from non-Moose classes "
"and inheriting from Moose classes should work identically, aside from the "
"few caveats mentioned below. One of the goals of this module is that "
"including it in a the Moose::Exporter manpage-based package used across an "
"entire application should be possible, without interfering with classes that "
"only inherit from Moose modules, or even classes that don't inherit from "
"anything at all.\n"
"\n"
"There are several ways to use this module. The most straightforward is to "
"just 'use MooseX::NonMoose;' in your class; this should set up everything "
"necessary for extending non-Moose modules. the MooseX::NonMoose::Meta::Role::"
"Class manpage and the MooseX::NonMoose::Meta::Role::Constructor manpage can "
"also be applied to your metaclasses manually, either by passing a '-traits' "
"option to your 'use Moose;' line, or by applying them using the Moose::Util::"
"MetaRole manpage in a the Moose::Exporter manpage-based package. the MooseX::"
"NonMoose::Meta::Role::Class manpage is the part that provides the main "
"functionality of this module; if you don't care about inlining, this is all "
"you need to worry about. Applying the MooseX::NonMoose::Meta::Role::"
"Constructor manpage as well will provide an inlined constructor when you "
"immutabilize your class.\n"
"\n"
"'MooseX::NonMoose' allows you to manipulate the argument list that gets "
"passed to the superclass constructor by defining a 'FOREIGNBUILDARGS' "
"method. This is called with the same argument list as the 'BUILDARGS' "
"method, but should return a list of arguments to pass to the superclass "
"constructor. This allows 'MooseX::NonMoose' to support superclasses whose "
"constructors would get confused by the extra arguments that Moose requires "
"(for attributes, etc.)\n"
"\n"
"Not all non-Moose classes use 'new' as the name of their constructor. This "
"module allows you to extend these classes by explicitly stating which method "
"is the constructor, during the call to 'extends'. The syntax looks like "
"this:\n"
"\n"
"  extends 'Foo' => { -constructor_name => 'create' };\n"
"\n"
"similar to how you can already pass '-version' in the 'extends' call in a "
"similar way."
msgstr ""

#. tumbleweed/perl-MooseX-Object-Pluggable/summary
#. leap/perl-MooseX-Object-Pluggable/summary
msgid "Make your classes pluggable"
msgstr ""

#. tumbleweed/perl-MooseX-Object-Pluggable/description
#. leap/perl-MooseX-Object-Pluggable/description
msgid ""
"This module is meant to be loaded as a role from Moose-based classes. It "
"will add five methods and four attributes to assist you with the loading and "
"handling of plugins and extensions for plugins. I understand that this may "
"pollute your namespace, however I took great care in using the least "
"ambiguous names possible."
msgstr ""

#. tumbleweed/perl-MooseX-OneArgNew/summary
#. leap/perl-MooseX-OneArgNew/summary
msgid "Teach ->New to Accept Single, Non-Hashref Arguments"
msgstr ""

#. tumbleweed/perl-MooseX-OneArgNew/description
#. leap/perl-MooseX-OneArgNew/description
msgid ""
"MooseX::OneArgNew lets your constructor take a single argument, which will "
"be translated into the value for a one-entry hashref. It is a the "
"parameterized role|MooseX::Role::Parameterized manpage with three "
"parameters:\n"
"\n"
"* type\n"
"\n"
"  The Moose type that the single argument must be for the one-arg form to   "
"work. This should be an existing type, and may be either a string type or   "
"a MooseX::Type.\n"
"\n"
"* init_arg\n"
"\n"
"  This is the string that will be used as the key for the hashref   "
"constructed from the one-arg call to new.\n"
"\n"
"* coerce\n"
"\n"
"  If true, a single argument to new will be coerced into the expected type   "
"if possible. Keep in mind that if there are no coercions for the type,   "
"this will be an error, and that if a coercion from HashRef exists, you   "
"might be getting yourself into a weird situation."
msgstr ""

#. tumbleweed/perl-MooseX-POE/summary
#. leap/perl-MooseX-POE/summary
msgid "The Illicit Love Child of Moose and POE"
msgstr ""

#. tumbleweed/perl-MooseX-POE/description
#. leap/perl-MooseX-POE/description
msgid ""
"MooseX::POE is a the Moose manpage wrapper around a the POE::Session manpage."
msgstr ""

#. tumbleweed/perl-MooseX-Param/summary
#. leap/perl-MooseX-Param/summary
msgid "Simple role to provide a standard param method"
msgstr ""

#. tumbleweed/perl-MooseX-Param/description
#. leap/perl-MooseX-Param/description
msgid ""
"This is a very simple Moose role which provides a the CGI manpage like "
"'param' method.\n"
"\n"
"I found that I had written this code over and over and over and over again, "
"and each time it was the same. So I thought, why not put it in a role?"
msgstr ""

#. tumbleweed/perl-MooseX-Params-Validate/summary
msgid "an extension of Params::Validate using Moose's types"
msgstr ""

#. tumbleweed/perl-MooseX-Params-Validate/description
msgid ""
"This module fills a gap in Moose by adding method parameter validation to "
"Moose. This is just one of many developing options, it should not be "
"considered the \"official\" one by any means though.\n"
"\n"
"You might also want to explore 'MooseX::Method::Signatures' and 'MooseX::"
"Declare'."
msgstr ""

#. tumbleweed/perl-MooseX-Role-Cmd/summary
#. leap/perl-MooseX-Role-Cmd/summary
msgid "Wrap system command binaries the Moose way"
msgstr ""

#. tumbleweed/perl-MooseX-Role-Cmd/description
#. leap/perl-MooseX-Role-Cmd/description
msgid ""
"MooseX::Role::Cmd is a the Moose manpage role intended to ease the task of "
"building command-line wrapper modules. It automatically maps the Moose "
"manpage objects into command strings which are passed to the IPC::Cmd "
"manpage."
msgstr ""

#. tumbleweed/perl-MooseX-Role-Parameterized/summary
#, fuzzy
msgid "Moose roles with composition parameters"
msgstr "メソッド／関数のパラメータを確認する仕組み"

#. tumbleweed/perl-MooseX-Role-Parameterized/description
msgid ""
"Your parameterized role consists of two new things: parameter declarations "
"and a 'role' block.\n"
"\n"
"Parameters are declared using the parameter keyword which very much "
"resembles Moose/has. You can use any option that Moose/has accepts. The "
"default value for the 'is' option is 'ro' as that's a very common case. Use "
"'is => 'bare'' if you want no accessor. These parameters will get their "
"values when the consuming class (or role) uses Moose/with. A parameter "
"object will be constructed with these values, and passed to the 'role' "
"block.\n"
"\n"
"The 'role' block then uses the usual Moose::Role keywords to build up a "
"role. You can shift off the parameter object to inspect what the consuming "
"class provided as parameters. You use the parameters to customize your role "
"however you wish.\n"
"\n"
"There are many possible implementations for parameterized roles (hopefully "
"with a consistent enough API); I believe this to be the easiest and most "
"flexible design. Coincidentally, Pugs originally had an eerily similar "
"design.\n"
"\n"
"See MooseX::Role::Parameterized::Extending for some tips on how to extend "
"this module."
msgstr ""

#. tumbleweed/perl-MooseX-Role-TraitConstructor/summary
#. leap/perl-MooseX-Role-TraitConstructor/summary
msgid "A wrapper for C<new> that can accept a"
msgstr ""

#. tumbleweed/perl-MooseX-Role-TraitConstructor/description
#. leap/perl-MooseX-Role-TraitConstructor/description
msgid ""
"This role allows you to easily accept a 'traits' argument (or another name) "
"into your constructor, which will easily mix roles into an anonymous class "
"before construction, much like the Moose::Meta::Attribute manpage does."
msgstr ""

#. tumbleweed/perl-MooseX-SemiAffordanceAccessor/summary
#. leap/perl-MooseX-SemiAffordanceAccessor/summary
msgid "Name your accessors foo() and set_foo()"
msgstr ""

#. tumbleweed/perl-MooseX-SemiAffordanceAccessor/description
#. leap/perl-MooseX-SemiAffordanceAccessor/description
msgid ""
"This module does not provide any methods. Simply loading it changes the "
"default naming policy for the loading class so that accessors are separated "
"into get and set methods. The get methods have the same name as the "
"accessor, while set methods are prefixed with \"set_\".\n"
"\n"
"If you define an attribute with a leading underscore, then the set method "
"will start with \"_set_\".\n"
"\n"
"If you explicitly set a \"reader\" or \"writer\" name when creating an "
"attribute, then that attribute's naming scheme is left unchanged.\n"
"\n"
"The name \"semi-affordance\" comes from David Wheeler's Class::Meta module."
msgstr ""

#. tumbleweed/perl-MooseX-SetOnce/summary
#. leap/perl-MooseX-SetOnce/summary
msgid "write-once, read-many attributes for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-SetOnce/description
#. leap/perl-MooseX-SetOnce/description
msgid ""
"The 'SetOnce' attribute lets your class have attributes that are not lazy "
"and not set, but that cannot be altered once set.\n"
"\n"
"The logic is very simple: if you try to alter the value of an attribute with "
"the SetOnce trait, either by accessor or writer, and the attribute has a "
"value, it will throw an exception.\n"
"\n"
"If the attribute has a clearer, you may clear the attribute and set it again."
msgstr ""

#. tumbleweed/perl-MooseX-SimpleConfig/summary
#. leap/perl-MooseX-SimpleConfig/summary
#, fuzzy
msgid "A Moose role for setting attributes from a simple configuration file"
msgstr ".ini 形式の設定ファイルを読み込むモジュール"

#. tumbleweed/perl-MooseX-SimpleConfig/description
#. leap/perl-MooseX-SimpleConfig/description
msgid ""
"This role loads simple files to set object attributes. It is based on the "
"abstract role the MooseX::ConfigFromFile manpage, and uses the Config::Any "
"manpage to load your configuration file. the Config::Any manpage will in "
"turn support any of a variety of different config formats, detected by the "
"file extension. See the Config::Any manpage for more details about supported "
"formats.\n"
"\n"
"To pass additional arguments to the Config::Any manpage you must provide a "
"'config_any_args()' method, for example:\n"
"\n"
"  sub config_any_args {     return {       driver_args => { General => { '-"
"InterPolateVars' => 1 } }     };   }\n"
"\n"
"Like all the MooseX::ConfigFromFile manpage -derived file loaders, this "
"module is automatically supported by the the MooseX::Getopt manpage role as "
"well, which allows specifying '-configfile' on the command line."
msgstr ""

#. tumbleweed/perl-MooseX-Singleton/summary
#. leap/perl-MooseX-Singleton/summary
msgid "turn your Moose class into a singleton"
msgstr ""

#. tumbleweed/perl-MooseX-Singleton/description
#. leap/perl-MooseX-Singleton/description
msgid ""
"A singleton is a class that has only one instance in an application. "
"'MooseX::Singleton' lets you easily upgrade (or downgrade, as it were) your "
"the Moose manpage class to a singleton.\n"
"\n"
"All you should need to do to transform your class is to change 'use Moose' "
"to 'use MooseX::Singleton'. This module uses metaclass roles to do its "
"magic, so it should cooperate with most other 'MooseX' modules."
msgstr ""

#. tumbleweed/perl-MooseX-Storage/summary
#. leap/perl-MooseX-Storage/summary
#, fuzzy
msgid "Serialization Framework for Moose Classes"
msgstr "Web アプリケーションフレームワーク"

#. tumbleweed/perl-MooseX-Storage/description
#. leap/perl-MooseX-Storage/description
msgid ""
"MooseX::Storage is a serialization framework for Moose, it provides a very "
"flexible and highly pluggable way to serialize Moose classes to a number of "
"different formats and styles."
msgstr ""

#. tumbleweed/perl-MooseX-StrictConstructor/summary
#. leap/perl-MooseX-StrictConstructor/summary
msgid "Make your object constructors blow up on unknown attributes"
msgstr ""

#. tumbleweed/perl-MooseX-StrictConstructor/description
#. leap/perl-MooseX-StrictConstructor/description
msgid ""
"Simply loading this module makes your constructors \"strict\". If your "
"constructor is called with an attribute init argument that your class does "
"not declare, then it calls 'Moose->throw_error()'. This is a great way to "
"catch small typos."
msgstr ""

#. tumbleweed/perl-MooseX-Traits/summary
#. leap/perl-MooseX-Traits/summary
msgid "Automatically apply roles at object creation time"
msgstr ""

#. tumbleweed/perl-MooseX-Traits/description
#. leap/perl-MooseX-Traits/description
msgid ""
"Often you want to create components that can be added to a class "
"arbitrarily. This module makes it easy for the end user to use these "
"components. Instead of requiring the user to create a named class with the "
"desired roles applied, or apply roles to the instance one-by-one, he can "
"just create a new class from yours with 'with_traits', and then instantiate "
"that.\n"
"\n"
"There is also 'new_with_traits', which exists for compatibility reasons. It "
"accepts a 'traits' parameter, creates a new class with those traits, and "
"then instantiates it.\n"
"\n"
"   Class->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )\n"
"\n"
"returns exactly the same object as\n"
"\n"
"   Class->with_traits(qw/Foo Bar/)->new( foo => 42, bar => 1 )\n"
"\n"
"would. But you can also store the result of 'with_traits', and call other "
"methods:\n"
"\n"
"   my $c = Class->with_traits(qw/Foo Bar/);    $c->new( foo => 42 );    $c-"
">whatever( foo => 1234 );\n"
"\n"
"And so on."
msgstr ""

#. tumbleweed/perl-MooseX-TransactionalMethods/summary
#. leap/perl-MooseX-TransactionalMethods/summary
msgid "Syntax sugar for transactional methods"
msgstr ""

#. tumbleweed/perl-MooseX-TransactionalMethods/description
#. leap/perl-MooseX-TransactionalMethods/description
msgid ""
"This method exports the \"transactional\" declarator that will enclose the "
"method in a txn_do call."
msgstr ""

#. tumbleweed/perl-MooseX-Types/summary
#. leap/perl-MooseX-Types/summary
msgid "Organise your Moose types in libraries"
msgstr ""

#. tumbleweed/perl-MooseX-Types/description
#. leap/perl-MooseX-Types/description
msgid ""
"The type system provided by Moose effectively makes all of its builtin type "
"global, as are any types you declare with Moose. This means that every "
"module that declares a type named 'PositiveInt' is sharing the same type "
"object. This can be a problem when different parts of the code base want to "
"use the same name for different things.\n"
"\n"
"This package lets you declare types using short names, but behind the scenes "
"it namespaces all your type declarations, effectively prevent name clashes "
"between packages.\n"
"\n"
"This is done by creating a type library module like 'MyApp::Types' and then "
"importing types from that module into other modules.\n"
"\n"
"As a side effect, the declaration mechanism allows you to write type names "
"as barewords (really function calls), which catches typos in names at "
"compile time rather than run time.\n"
"\n"
"This module also provides some helper functions for using Moose types "
"outside of attribute declarations.\n"
"\n"
"If you mix string-based names with types created by this module, it will "
"warn, with a few exceptions. If you are declaring a 'class_type()' or "
"'role_type()' within your type library, or if you use a fully qualified name "
"like '\"MyApp::Foo\"'."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Common/summary
#. leap/perl-MooseX-Types-Common/summary
#, fuzzy
msgid "Library of Commonly Used Type Constraints"
msgstr "一般的に使用されるデータ構造を提供する GObject ベースのライブラリ"

#. tumbleweed/perl-MooseX-Types-Common/description
#. leap/perl-MooseX-Types-Common/description
msgid ""
"A set of commonly-used type constraints that do not ship with Moose by "
"default."
msgstr ""

#. tumbleweed/perl-MooseX-Types-DateTime/summary
msgid "L<DateTime> related constraints and coercions for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Types-DateTime/description
msgid ""
"This module packages several the Moose::Util::TypeConstraints manpage with "
"coercions, designed to work with the the DateTime manpage suite of objects.\n"
"\n"
"Namespaced Example:\n"
"\n"
"    use MooseX::Types::DateTime;\n"
"\n"
"    has time_zone => (         isa => 'DateTime::TimeZone',         is => "
"\"rw\",         coerce => 1,     );\n"
"\n"
"    Class->new( time_zone => \"Africa/Timbuktu\" );"
msgstr ""

#. tumbleweed/perl-MooseX-Types-LoadableClass/summary
#. leap/perl-MooseX-Types-LoadableClass/summary
msgid "ClassName type constraint with coercion to load the class"
msgstr ""

#. tumbleweed/perl-MooseX-Types-LoadableClass/description
#. leap/perl-MooseX-Types-LoadableClass/description
msgid ""
"    use Moose::Util::TypeConstraints;\n"
"\n"
"    my $tc = subtype as ClassName;     coerce $tc, from Str, via { Class::"
"Load::load_class($_); $_ };\n"
"\n"
"I've written those three lines of code quite a lot of times, in quite a lot "
"of places.\n"
"\n"
"Now I don't have to."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Parameterizable/summary
#. leap/perl-MooseX-Types-Parameterizable/summary
msgid "Create your own Parameterizable Types"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Parameterizable/description
#. leap/perl-MooseX-Types-Parameterizable/description
msgid ""
"A the MooseX::Types manpage library for creating parameterizable types. A "
"parameterizable type constraint for all intents and uses is a subclass of a "
"parent type, but adds additional type parameters which are available to "
"constraint callbacks (such as inside the 'where' clause of a type constraint "
"definition) or in the coercions you define for a given type constraint.\n"
"\n"
"If you have the Moose manpage experience, you probably are familiar with the "
"builtin parameterizable type constraints 'ArrayRef' and 'HashRef'. This type "
"constraint lets you generate your own versions of parameterized constraints "
"that work similarly. See the Moose::Util::TypeConstraints manpage for more."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Path-Class/summary
#. leap/perl-MooseX-Types-Path-Class/summary
msgid "Path::Class type library for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Path-Class/description
#. leap/perl-MooseX-Types-Path-Class/description
msgid ""
"MooseX::Types::Path::Class creates common Moose types, coercions and option "
"specifications useful for dealing with Path::Class objects as Moose "
"attributes.\n"
"\n"
"Coercions (see Moose::Util::TypeConstraints) are made from both 'Str' and "
"'ArrayRef' to both Path::Class::Dir and Path::Class::File objects. If you "
"have MooseX::Getopt installed, the 'Getopt' option type (\"=s\") will be "
"added for both Path::Class::Dir and Path::Class::File."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Path-Tiny/summary
#. leap/perl-MooseX-Types-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Path-Tiny/description
#. leap/perl-MooseX-Types-Path-Tiny/description
msgid ""
"This module provides the Path::Tiny manpage types for the Moose manpage. It "
"handles two important types of coercion:\n"
"\n"
"* *\n"
"\n"
"  coercing objects with overloaded stringification\n"
"\n"
"* *\n"
"\n"
"  coercing to absolute paths\n"
"\n"
"It also can check to ensure that files or directories exist."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Perl/summary
#. leap/perl-MooseX-Types-Perl/summary
msgid "Moose types that check against Perl syntax"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Perl/description
#. leap/perl-MooseX-Types-Perl/description
msgid ""
"This library provides MooseX::Types for checking things (mostly strings) "
"against syntax that is, or is a reasonable subset of, Perl syntax."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Set-Object/summary
#. leap/perl-MooseX-Types-Set-Object/summary
msgid "Set::Object type with coercions and stuff"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Set-Object/description
#. leap/perl-MooseX-Types-Set-Object/description
msgid ""
"This module provides a Moose type constraint (see the Moose::Util::"
"TypeConstraints manpage, the MooseX::Types manpage). Note that this "
"constraint and its coercions are *global*, not simply limited to the scope "
"that imported it -- in this way it acts like a regular the Moose manpage "
"type constraint, rather than one from the MooseX::Types manpage."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Stringlike/summary
#. leap/perl-MooseX-Types-Stringlike/summary
msgid "Moose type constraints for strings or string-like objects"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Stringlike/description
#. leap/perl-MooseX-Types-Stringlike/description
msgid ""
"This module provides a more general version of the 'Str' type. If coercions "
"are enabled, it will accepts objects that overload stringification and "
"coerces them into strings."
msgstr ""

#. tumbleweed/perl-MooseX-Types-Structured/summary
msgid "Structured Type Constraints for Moose"
msgstr ""

#. tumbleweed/perl-MooseX-Types-Structured/description
msgid ""
"A structured type constraint is a standard container Moose type constraint, "
"such as an 'ArrayRef' or 'HashRef', which has been enhanced to allow you to "
"explicitly name all the allowed type constraints inside the structure. The "
"generalized form is:\n"
"\n"
"    TypeConstraint[@TypeParameters or %TypeParameters]\n"
"\n"
"Where 'TypeParameters' is an array reference or hash references of Moose::"
"Meta::TypeConstraint objects.\n"
"\n"
"This type library enables structured type constraints. It is built on top of "
"the MooseX::Types library system, so you should review the documentation for "
"that if you are not familiar with it."
msgstr ""

#. tumbleweed/perl-MooseX-Workers/summary
#. leap/perl-MooseX-Workers/summary
msgid "Simple sub-process management for asynchronous tasks"
msgstr ""

#. tumbleweed/perl-MooseX-Workers/description
#. leap/perl-MooseX-Workers/description
msgid ""
"MooseX::Workers is a Role that provides easy delegation of long-running "
"tasks into a managed child process. Process management is taken care of via "
"POE and its POE::Wheel::Run module."
msgstr ""

#. tumbleweed/perl-MouseX-ConfigFromFile/summary
msgid "An abstract Mouse role for setting attributes from a configfile"
msgstr ""

#. tumbleweed/perl-MouseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"subroles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supercede "
"those in the configfile."
msgstr ""

#. tumbleweed/perl-MouseX-SimpleConfig/summary
msgid "A Mouse role for setting attributes from a simple configfile"
msgstr ""

#. tumbleweed/perl-MouseX-SimpleConfig/description
msgid ""
"This role loads simple configfiles to set object attributes. It is based on "
"the abstract role MouseX::ConfigFromFile, and uses Config::Any to load your "
"configfile. Config::Any will in turn support any of a variety of different "
"config formats, detected by the file extension. See Config::Any for more "
"details about supported formats.\n"
"\n"
"Like all MouseX::ConfigFromFile -derived configfile loaders, this module is "
"automatically supported by the MouseX::Getopt role as well, which allows "
"specifying '-configfile' on the commandline."
msgstr ""

#. tumbleweed/perl-MouseX-Types/summary
#. tumbleweed/perl-MouseX-Types/description
msgid "Organize your Mouse types in libraries"
msgstr ""

#. tumbleweed/perl-MouseX-Types-Path-Class/summary
msgid "A Path::Class type library for Mouse"
msgstr ""

#. tumbleweed/perl-MouseX-Types-Path-Class/description
msgid ""
"MouseX::Types::Path::Class creates common the Mouse manpage types, coercions "
"and option specifications useful for dealing with the Path::Class manpage "
"objects as the Mouse manpage attributes.\n"
"\n"
"Coercions (see the Mouse::Util::TypeConstraints manpage) are made from both "
"'Str' and 'ArrayRef' to both the Path::Class::Dir manpage and the Path::"
"Class::File manpage objects. If you have the MouseX::Getopt manpage "
"installed, the Getopt option type (\"=s\") will be added for both the Path::"
"Class::Dir manpage and the Path::Class::File manpage."
msgstr ""

#. tumbleweed/perl-Net-CIDR-Lite/summary
#. leap/perl-Net-CIDR-Lite/summary
msgid "Perl extension for merging IPv4 or IPv6 CIDR addresses"
msgstr "IPv4 または IPv6 の CIDR アドレスを合成するための Perl 拡張"

#. tumbleweed/perl-Net-CIDR-Lite/description
#. leap/perl-Net-CIDR-Lite/description
msgid ""
"Faster alternative to Net::CIDR when merging a large number of CIDR address "
"ranges. Works for IPv4 and IPv6 addresses."
msgstr ""
"大規模な CIDR アドレス範囲を合成する際に使用する、 Net::CIDR の高速化版です。"
"IPv4 と IPv6 の両方のアドレスで動作します。"

#. tumbleweed/perl-Net-CIDR-Set/summary
msgid "Manipulate sets of IP addresses"
msgstr ""

#. tumbleweed/perl-Net-CIDR-Set/description
msgid ""
"'Net::CIDR::Set' represents sets of IP addresses and allows standard set "
"operations (union, intersection, membership test etc) to be performed on "
"them.\n"
"\n"
"In spite of the name it can work with sets consisting of arbitrary ranges of "
"IP addresses - not just CIDR blocks.\n"
"\n"
"Both IPv4 and IPv6 addresses are handled - but they may not be mixed in the "
"same set. You may explicitly set the personality of a set:\n"
"\n"
"  my $ip4set = Net::CIDR::Set->new({ type => 'ipv4 }, '10.0.0.0/8');\n"
"\n"
"Normally this isn't necessary - the set will guess its personality from the "
"first data that is added to it."
msgstr ""

#. tumbleweed/perl-Net-DNS/summary
msgid "Perl Interface to the Domain Name System"
msgstr "ドメインネームシステムに対する Perl インターフェイス"

#. tumbleweed/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of \"gethostbyname\" and \"gethostbyaddr\".\n"
"\n"
"The programmer should be somewhat familiar with the format of a DNS packet "
"and its various sections. See RFC 1035 or DNS and BIND (Albitz & Liu) for "
"details."
msgstr ""
"Net::DNS はドメインネームシステム (DNS) の解決器として動作する Perl モジュー"
"ルです。プログラマに対して DNS の問い合わせ機能を提供し、 'gethostbyname' や "
"'gethostbyaddr' が提供する以上のことを行なうことができます。\n"
"\n"
"なお、プログラムを記述する際には DNS パケットの書式とセクションに関する幾分か"
"の知識が必要となります。詳しくは RFC 1035 または DNS and BIND (Albitz & Liu "
"著作) をお読みください。"

#. tumbleweed/perl-Net-DNS-Resolver-Programmable/summary
#. leap/perl-Net-DNS-Resolver-Programmable/summary
msgid "Programmable DNS resolver class for offline emulation of DNS"
msgstr ""

#. tumbleweed/perl-Net-DNS-Resolver-Programmable/description
#. leap/perl-Net-DNS-Resolver-Programmable/description
msgid ""
"Net::DNS::Resolver::Programmable is a Net::DNS::Resolver descendant class "
"that allows a virtual DNS to be emulated instead of querying the real DNS.  "
"A set of static DNS records may be supplied, or arbitrary code may be "
"specified as a means for retrieving DNS records, or even generating them on "
"the fly."
msgstr ""

#. tumbleweed/perl-Net-Daemon/summary
#. leap/perl-Net-Daemon/summary
msgid "Perl extension for portable daemons"
msgstr "可搬性のあるデーモンを作成するための Perl 拡張"

#. tumbleweed/perl-Net-Daemon/description
#. leap/perl-Net-Daemon/description
msgid ""
"Net::Daemon is an abstract base class for implementing portable server "
"applications in a very simple way. The module is designed for Perl 5.005 and "
"threads, but can work with fork() and Perl 5.004.\n"
"\n"
"The Net::Daemon class offers methods for the most common tasks a daemon "
"needs: Starting up, logging, accepting clients, authorization, restricting "
"its own environment for security and doing the true work. You only have to "
"override those methods that aren't appropriate for you, but typically "
"inheriting will safe you a lot of work anyways."
msgstr ""
"Net::Daemon は可搬性のあるサーバアプリケーションを簡単に開発できるようにする"
"ための抽象ベースクラスです。このモジュールは Perl 5.005 とスレッドを利用して"
"設計されていますが、 fork() や Perl 5.004 の環境でも動作します。\n"
"\n"
"Net::Daemon はデーモンの動作に必要なほとんどの機能を提供します。たとえば起動"
"やログ記録、クライアントの受け付けや認証、セキュリティ側の要件による環境制限"
"などに対応しています。これらのメソッドが不適切な場合はそれらをオーバーライド"
"することもできますが、一般的にはこれらの機能を派生させて使用するのが安全で"
"す。"

#. tumbleweed/perl-Net-Domain-TLD/summary
#. leap/perl-Net-Domain-TLD/summary
msgid "Work with TLD names"
msgstr ""

#. tumbleweed/perl-Net-Domain-TLD/description
#. leap/perl-Net-Domain-TLD/description
msgid ""
"  The purpose of this module is to provide user with current list of   "
"available top level domain names including new ICANN additions and ccTLDs   "
"Currently TLD definitions have been acquired from the following sources:\n"
"\n"
"  http://www.icann.org/tlds/   http://www.dnso.org/constituency/gtld/gtld."
"html   http://www.iana.org/cctld/cctld-whois.htm   https://www.iana.org/"
"domains/root/db"
msgstr ""

#. tumbleweed/perl-Net-HTTP/summary
#. leap/perl-Net-HTTP/summary
msgid "Low-level HTTP connection (client)"
msgstr "低レベル HTTP 接続 (クライアント)"

#. tumbleweed/perl-Net-HTTP/description
msgid ""
"The 'Net::HTTP' class is a low-level HTTP client. An instance of the 'Net::"
"HTTP' class represents a connection to an HTTP server. The HTTP protocol is "
"described in RFC 2616. The 'Net::HTTP' class supports 'HTTP/1.0' and "
"'HTTP/1.1'.\n"
"\n"
"'Net::HTTP' is a sub-class of one of 'IO::Socket::IP' (IPv6+IPv4), 'IO::"
"Socket::INET6' (IPv6+IPv4), or 'IO::Socket::INET' (IPv4 only). You can mix "
"the methods described below with reading and writing from the socket "
"directly. This is not necessary a good idea, unless you know what you are "
"doing."
msgstr ""
"'Net::HTTP' クラスは低レベルの HTTP クライアントです。 'Net::HTTP' クラスのイ"
"ンスタンスは、 HTTP サーバへの接続を表すものになります。 HTTP プロトコルは "
"RFC 2616 で規定されるもので、 'HTTP/1.0' と 'HTTP/1.1' にそれぞれ対応していま"
"す。\n"
"\n"
"'Net::HTTP' は 'IO::Socket::IP' (IPv6+IPv4), 'IO::Socket::"
"INET6' (IPv6+IPv4), or 'IO::Socket::INET' (IPv4 のみ) のいずれかのサブクラス"
"です。そのため、ソケットに対して直接読み書きを行なうような処理を利用すること"
"もできます。これらの機能は、それが何を意味するのかをよく理解しない限り、使用"
"しないことをお勧めします。"

#. tumbleweed/perl-Net-HTTPServer/summary
#. leap/perl-Net-HTTPServer/summary
msgid "A simple perl Http Server"
msgstr "シンプルな Perl HTTP サーバ"

#. tumbleweed/perl-Net-HTTPServer/description
#. leap/perl-Net-HTTPServer/description
msgid ""
"Net::HTTPServer basically turns a CGI script into a stand alone server. "
"Useful for temporary services, mobile/local servers, or embedding an HTTP "
"server into another program."
msgstr ""
"Net::HTTPServer は、基本的に CGI スクリプトを単独のサーバにすることのできるも"
"のです。一時的なサービスやモバイル／ローカルサーバ、他のプログラム内での内蔵 "
"HTTP サーバとして便利です。"

#. tumbleweed/perl-Net-IDN-Nameprep/summary
#, fuzzy
msgid "Stringprep Profile for Internationalized Domain Names (S<RFC 3491>)"
msgstr "国際ドメイン名 (IDN) サポート"

#. tumbleweed/perl-Net-IDN-Nameprep/description
msgid ""
"This module implements the _nameprep_ specification, which describes how to "
"prepare internationalized domain name (IDN) labels in order to increase the "
"likelihood that name input and name comparison work in ways that make sense "
"for typical users throughout the world. Nameprep is a profile of the "
"stringprep protocol and is used as part of a suite of on-the-wire protocols "
"for internationalizing the Domain Name System (DNS)."
msgstr ""

#. tumbleweed/perl-Net-INET6Glue/summary
#. leap/perl-Net-INET6Glue/summary
msgid "Make common modules IPv6 ready by hotpatching"
msgstr ""

#. tumbleweed/perl-Net-INET6Glue/description
#. leap/perl-Net-INET6Glue/description
msgid ""
"the Net::INET6Glue manpage is a collection of modules to make common modules "
"IPv6 ready by hotpatching them.\n"
"\n"
"Unfortunatly the current state of IPv6 support in perl is that no IPv6 "
"support is in the core and that a lot of important modules (like the Net::"
"FTP manpage, the Net::SMTP manpage, the LWP manpage,...) do not support IPv6 "
"even if the modules for IPv6 sockets like the Socket6 manpage, the IO::"
"Socket::IP manpage or the IO::Socket::INET6 manpage are available.\n"
"\n"
"This module tries to mitigate this by hotpatching. Currently the following "
"submodules are available:\n"
"\n"
"* the Net::INET6Glue::INET_is_INET6 manpage\n"
"\n"
"  Makes the IO::Socket::INET manpage behave like the IO::Socket::IP "
"manpage   (with fallback to like the IO::Socket::INET6 manpage), especially "
"make it   capable to create IPv6 sockets. This makes the LWP manpage, the "
"Net::SMTP   manpage and others IPv6 capable.\n"
"\n"
"* the Net::INET6Glue::FTP manpage\n"
"\n"
"  Hotpatches the Net::FTP manpage to support EPRT and EPSV commands which   "
"are needed to deal with FTP over IPv6. Also loads the   Net::INET6Glue::"
"INET_is_INET6 manpage."
msgstr ""

#. tumbleweed/perl-Net-Ident/summary
#. leap/perl-Net-Ident/summary
msgid "lookup the username on the remote end of a TCP/IP connection"
msgstr ""

#. tumbleweed/perl-Net-Ident/description
#. leap/perl-Net-Ident/description
msgid ""
"You can either use the simple interface, which does one ident lookup at a "
"time, or use the asynchronous interface to perform (possibly) many "
"simultaneous lookups, or simply continue serving other things while the "
"lookup is proceeding."
msgstr ""
"ident プロトコルによる参照機能を提供したり、複数の方法による参照を同時に行"
"なったり、参照処理中に他の処理を継続したりすることのできる、シンプルなイン"
"ターフェイスです。"

#. tumbleweed/perl-Net-Netmask/summary
#. leap/perl-Net-Netmask/summary
msgid "Parse, Manipulate and Lookup Ip Network Blocks"
msgstr "IP ネットワークブロックを処理／操作／参照するモジュール"

#. tumbleweed/perl-Net-Netmask/description
#. leap/perl-Net-Netmask/description
msgid ""
"Net::Netmask parses and understands IPv4 CIDR blocks. It's built with an "
"object-oriented interface. Nearly all functions are methods that operate on "
"a Net::Netmask object.\n"
"\n"
"There are methods that provide the nearly all bits of information about a "
"network block that you might want.\n"
"\n"
"There are also functions to put a network block into a table and then later "
"lookup network blocks by IP address in that table. There are functions to "
"turn a IP address range into a list of CIDR blocks. There are functions to "
"turn a list of CIDR blocks into a list of IP addresses.\n"
"\n"
"There is a function for sorting by text IP address."
msgstr ""
"Net::Netmask は IPv4 CIDR ブロックを処理して認識します。このモジュールはオブジェクト指向のインターフェイスを持っていて、"
"ほぼすべての関数を Net::Netmask オブジェクトのメソッドとして呼び出すことができます。\n"
"\n"
"本モジュールは、ネットワークブロックに関する情報処理について、必要なものほぼすべてがそろっています。\n"
"\n"
"本モジュールでは上記以外にも、ネットワークブロックを表形式にして、後から IP アドレスと突き合わせるようなこともできます。また、アドレスの範囲を "
"CIDR ブロックのリストに変換したり、その逆を行なったりすることもできます。"

#. tumbleweed/perl-Net-OAuth/summary
#. tumbleweed/perl-Net-OAuth/description
#. leap/perl-Net-OAuth/summary
#. leap/perl-Net-OAuth/description
#, fuzzy
msgid "OAuth 1.0 for Perl"
msgstr "Perl 向け SOAP::Lite"

#. tumbleweed/perl-Net-OpenID-Common/summary
#. leap/perl-Net-OpenID-Common/summary
msgid "Libraries shared between Net::OpenID::Consumer and Net::OpenID::Server"
msgstr ""

#. tumbleweed/perl-Net-OpenID-Common/description
#. leap/perl-Net-OpenID-Common/description
msgid ""
"The Consumer and Server implementations share a few libraries which live "
"with this module. This module is here largely to hold the version number and "
"this documentation, though it also incorporates some utility functions "
"inherited from previous versions of Net::OpenID::Consumer."
msgstr ""

#. tumbleweed/perl-Net-OpenID-Consumer/summary
#. leap/perl-Net-OpenID-Consumer/summary
msgid "Library for consumers of OpenID identities"
msgstr ""

#. tumbleweed/perl-Net-OpenID-Consumer/description
#. leap/perl-Net-OpenID-Consumer/description
msgid ""
"This is the Perl API for (the consumer half of) OpenID, a distributed "
"identity system based on proving you own a URL, which is then your identity. "
"More information is available at:\n"
"\n"
"  http://openid.net/"
msgstr ""

#. tumbleweed/perl-Net-SMTP-SSL/summary
#. leap/perl-Net-SMTP-SSL/summary
msgid "SSL support for Net::SMTP"
msgstr "Net::SMTP 向け SSL サポート"

#. tumbleweed/perl-Net-SMTP-SSL/description
#. leap/perl-Net-SMTP-SSL/description
msgid ""
"Implements the same API as Net::SMTP, but uses IO::Socket::SSL for its "
"network operations. Due to the nature of 'Net::SMTP''s 'new' method, it is "
"not overridden to make use of a default port for the SMTPS service. Perhaps "
"future versions will be smart like that. Port '465' is usually what you "
"want, and it's not a pain to specify that.\n"
"\n"
"For interface documentation, please see Net::SMTP."
msgstr ""
"Net::SMTP と同じ API を実装しているものですが、ネットワーク操作についてはIO::"
"Socket::SSL を使用しています。 'Net::SMTP' の 'new' メソッドでは SMTPSサービ"
"スのポート番号に対する既定値を設定することはできませんが、将来のバージョンで"
"賢く設定できるようになる予定です。通常は SMTPS サービスに対して'465' を設定し"
"て使用します。"

#. tumbleweed/perl-Net-SNMP/summary
#. leap/perl-Net-SNMP/summary
msgid "Object oriented interface to SNMP"
msgstr "SNMP に対するオブジェクト指向のインターフェイス"

#. tumbleweed/perl-Net-SNMP/description
#. leap/perl-Net-SNMP/description
msgid ""
"The Net::SNMP module abstracts the intricate details of the Simple Network "
"Management Protocol by providing a high level programming interface to the "
"protocol. Each Net::SNMP object provides a one-to-one mapping between a Perl "
"object and a remote SNMP agent or manager. Once an object is created, it can "
"be used to perform the basic protocol exchange actions defined by SNMP."
msgstr ""
"Net::SNMP モジュールは、複雑な仕様である Simple Network Management Protocol "
"(SNMP)に対して、高レベルなプログラミングインターフェイスを提供する抽象モ"
"ジュールです。それぞれの Net::SNMP オブジェクトは、リモートの SNMP エージェン"
"トやマネージャと、Perl オブジェクトとの間で、一対一のマッピング機能を提供しま"
"す。オブジェクトを作成すると、 SNMP で定義されている基本的なプロトコル機能を"
"利用できるようになります。"

#. tumbleweed/perl-Net-SSLGlue/summary
#. leap/perl-Net-SSLGlue/summary
#, fuzzy
msgid "Add/Extend Ssl Support for Common Perl Modules"
msgstr "汎用の Perl モジュール向けに SSL 対応を追加／拡張するモジュール"

#. tumbleweed/perl-Net-SSLGlue/description
#. leap/perl-Net-SSLGlue/description
msgid ""
"Some commonly used perl modules don't have SSL support at all, even if the "
"protocol supports it. Others have SSL support, but most of them don't do "
"proper checking of the server's certificate.\n"
"\n"
"The 'Net::SSLGlue::*' modules try to add SSL support or proper certificate "
"checking to these modules. Currently support for the following modules is "
"available:\n"
"\n"
"* Net::SMTP - add SSL from beginning or using STARTTLS\n"
"\n"
"* Net::POP3 - add SSL from beginning or using STLS\n"
"\n"
"* Net::FTP  - add SSL and IPv6 support to Net::FTP\n"
"\n"
"* Net::LDAP - add proper certificate checking\n"
"\n"
"* LWP - add proper certificate checking for older LWP versions\n"
"\n"
"There is also a Net::SSLGlue::Socket package which combines ssl and non-ssl "
"and ipv6 capabilities to make it easier to enhance modules based on IO::"
"Socket::INET."
msgstr ""

#. tumbleweed/perl-Net-Server/summary
#. leap/perl-Net-Server/summary
msgid "Extensible, general Perl server engine"
msgstr "拡張性のある汎用 Perl サーバエンジン"

#. tumbleweed/perl-Net-Server/description
#. leap/perl-Net-Server/description
msgid ""
"'Net::Server' is an extensible, generic Perl server engine. 'Net::Server' "
"combines the good properties from 'Net::Daemon' (0.34), 'NetServer::"
"Generic' (1.03), and 'Net::FTPServer' (1.0), and also from various concepts "
"in the Apache Webserver.\n"
"\n"
"'Net::Server' attempts to be a generic server as in 'Net::Daemon' and "
"'NetServer::Generic'. It includes with it the ability to run as an inetd "
"process ('Net::Server::INET'), a single connection server ('Net::Server' or "
"'Net::Server::Single'), a forking server ('Net::Server::Fork'), a preforking "
"server which maintains a constant number of preforked children ('Net::"
"Server::PreForkSimple'), or as a managed preforking server which maintains "
"the number of children based on server load ('Net::Server::PreFork'). In all "
"but the inetd type, the server provides the ability to connect to one or to "
"multiple server ports.\n"
"\n"
"'Net::Server' uses ideologies of 'Net::FTPServer' in order to provide "
"extensibility. The additional server types are made possible via "
"\"personalities\" or sub classes of the 'Net::Server'. By moving the "
"multiple types of servers out of the main 'Net::Server' class, the 'Net::"
"Server' concept is easily extended to other types (in the near future, we "
"would like to add a \"Thread\" personality).\n"
"\n"
"'Net::Server' borrows several concepts from the Apache Webserver. 'Net::"
"Server' uses \"hooks\" to allow custom servers such as SMTP, HTTP, POP3, "
"etc. to be layered over the base 'Net::Server' class. In addition the 'Net::"
"Server::PreFork' class borrows concepts of min_start_servers, max_servers, "
"and min_waiting servers. 'Net::Server::PreFork' also uses the concept of an "
"flock serialized accept when accepting on multiple ports (PreFork can choose "
"between flock, IPC::Semaphore, and pipe to control serialization)."
msgstr ""
"'Net::Server' は拡張性に富んだ汎用の Perl サーバエンジンです。 'Net::Server' "
"は 'Net::Daemon' (0.34), 'NetServer::Generic' (1.03), and 'Net::"
"FTPServer' (1.0) に用意された機能を統合したもので、 Apache Web サーバからの"
"様々な考え方を取り入れています。\n"
"\n"
"'Net::Server' は 'Net::Daemon' や 'NetServer::Generic' のような汎用的なサーバ"
"となるように作られています。このほかにも inetd のプロセスとして動作する機能"
"('Net::Server::INET') や、単一接続のサーバ ('Net::Server' または 'Net::"
"Server::Single') 、 fork を使用するサーバ ('Net::Server::Fork') や子プロセス"
"を一定数だけ確保するような、 prefork 型のサーバ ('Net::Server::"
"PreForkSimple') にも対応していますし、サーバの負荷に応じて子プロセス数を制御"
"するような prefork 型のサーバ ('Net::Server::PreFork') にも対応しています。"
"inetd のサーバタイプを除き、それぞれのサーバは 1 つまたは複数の接続を受け入れ"
"ることができるほか、複数のサーバポートにも対応しています。\n"
"\n"
"'Net::Server' は拡張性の面で 'Net::FTPServer' の考え方を使用しています。その"
"他のサーバタイプについては、 \"personalities\" や 'Net::Server' のサブクラス"
"化などの方法で追加することができます。また、メインとなる 'Net::Server' クラス"
"から多数のサーバタイプを分離したため、 'Net::Server' 自身は他のタイプに対して"
"容易に適応できる仕組みになっています (近い将来、 \"Thread\" (スレッド) 型の"
"サーバにも対応予定です) 。\n"
"\n"
"'Net::Server' は Apache Web サーバからいくつかの考え方を取り入れていま"
"す。'Net::Server' は \"フック\" と呼ばれる仕組みを利用して、 SMTP, HTTP, "
"POP3 など、多数のカスタムサーバを構築できるようになっています。これに加えて "
"'Net::Server::PreFork' クラスでは、 min_start_servers, max_servers, "
"min_waiting の考え方も取り入れています。 'Net::Server::PreFork' では、 flock "
"による順序化された受信にも対応し、複数のポートからのアクセスを受け入れること"
"ができます (Prefork ではflock, IRC::Sepaphore, パイプの中から順序化を選択でき"
"ます) 。"

#. tumbleweed/perl-Net-TFTP/summary
#. leap/perl-Net-TFTP/summary
msgid "TFTP Client class"
msgstr ""

#. tumbleweed/perl-Net-TFTP/description
#. leap/perl-Net-TFTP/description
msgid ""
"'Net::TFTP' is a class implementing a simple _Trivial File Transfer "
"Protocol_ client in Perl as described in RFC1350. 'Net::TFTP' also supports "
"the TFTP Option Extension (as described in RFC2347), with the following "
"options\n"
"\n"
" RFC2348 Blocksize Option"
msgstr ""

#. tumbleweed/perl-Net-Telnet/summary
#. leap/perl-Net-Telnet/summary
msgid "interact with TELNET port or other TCP ports"
msgstr "TELNET ポートまたはその他の TCP ポートを利用した通信"

#. tumbleweed/perl-Net-Telnet/description
#. leap/perl-Net-Telnet/description
msgid ""
"Net::Telnet allows you to make client connections to a TCP port and do "
"network I/O, especially to a port using the TELNET protocol. Simple I/O "
"methods such as print, get, and getline are provided. More sophisticated "
"interactive features are provided because connecting to a TELNET port "
"ultimately means communicating with a program designed for human "
"interaction. These interactive features include the ability to specify a "
"time-out and to wait for patterns to appear in the input stream, such as the "
"prompt from a shell. IPv6 support is available when using perl 5.14 or later "
"(see 'family()'.\n"
"\n"
"Other reasons to use this module than strictly with a TELNET port are:\n"
"\n"
"* *\n"
"\n"
"  You're not familiar with sockets and you want a simple way to make "
"client   connections to TCP services.\n"
"\n"
"* *\n"
"\n"
"  You want to be able to specify your own time-out while connecting,   "
"reading, or writing.\n"
"\n"
"* *\n"
"\n"
"  You're communicating with an interactive program at the other end of "
"some   socket or pipe and you want to wait for certain patterns to appear.\n"
"\n"
"Here's an example that prints who's logged-on to a remote host. In addition "
"to a username and password, you must also know the user's shell prompt, "
"which for this example is '\"bash$ \"'\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"See the *EXAMPLES* section below for more examples.\n"
"\n"
"Usage questions should be directed to the perlmonks.org discussion group. "
"Bugs can be viewed or reported at cpan.org on the Net::Telnet page."
msgstr ""
"Net::Telnet は指定した TCP ポートに対してクライアントとして接続し、ネットワー"
"ク上の入出力 (特に TELNET プロトコルを利用した通信) を行なうことができます。"
"単純な入出力機能としては print, get, getline などのメソッドがあるほか、より高"
"度な機能 (TELNET プロトコルは、主に人間と対話的に動作することを前提にしたもの"
"であるため) も提供されています。対話的な機能としては、制限時間の設定や入力ス"
"トリーム内における特定パターンの検出 (たとえばシェルのプロンプト) などがあり"
"ます。 Perl 5.14 またはそれ以降のバージョンの場合、 IPv6 にも対応しています "
"(詳しくは 'family()' をお読みください) 。\n"
"\n"
"TELNET ポート以外の用途としては、下記のようなものがあります:\n"
"\n"
"* *\n"
"\n"
"  ソケットについて詳しい使い方がわからず、指定した TCP サービスに対して単純に"
"クライアント接続を行ないたいような場合。\n"
"\n"
"* *\n"
"\n"
"  接続時や読み込み時、書き込み時にタイムアウト設定を必要とする場合。\n"
"\n"
"* *\n"
"\n"
"  ソケットやパイプを通じて他の対話的なプログラムと通信を行ない、特定のパター"
"ンが現れるまで待ちたいような場合。\n"
"\n"
"下記の例は、リモートのホスト上で誰がログインしているのかを表示する例です。"
"ユーザ名とパスワードに加えて、ユーザのシェルプロンプトも設定しなければなりま"
"せん。下記の例は、シェルプロンプトが '\"bash$ \"' である場合の例です。\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"上記以外の例について、詳しくは *EXAMPLES* セクションをお読みください。\n"
"\n"
"使用方法の質問は、 perlmonks.org ディスカッショングループにお送りください。ま"
"た、バグは cpan.org の Net::Telnet ページで閲覧および報告することができます。"

#. tumbleweed/perl-Net-Twitter/summary
msgid "Perl Interface to the Twitter Api"
msgstr "Twitter API に対する Perl インターフェイス"

#. tumbleweed/perl-Net-Twitter/description
msgid ""
"This module provides a perl interface to the Twitter APIs. See http://dev."
"twitter.com/doc for a full description of the Twitter APIs."
msgstr ""

#. tumbleweed/perl-Net-Whois-RIPE/summary
#. leap/perl-Net-Whois-RIPE/summary
#, fuzzy
msgid "Pure-Perl Implementation of the Ripe Database Client"
msgstr "SOAP の Apache による実装"

#. tumbleweed/perl-Net-Whois-RIPE/description
#. leap/perl-Net-Whois-RIPE/description
msgid "a pure-Perl implementation of the RIPE Database client."
msgstr ""

#. tumbleweed/perl-Net-Whois-Raw/summary
#. leap/perl-Net-Whois-Raw/summary
#, fuzzy
msgid "Get Whois information of domains and IP addresses"
msgstr "IPv4 および IPv6 アドレスの処理"

#. tumbleweed/perl-Net-Whois-Raw/description
#. leap/perl-Net-Whois-Raw/description
msgid ""
"Net::Whois::Raw queries WHOIS servers about domains. The module supports "
"recursive WHOIS queries. Also queries via HTTP is supported for some TLDs.\n"
"\n"
"Setting the variables $OMIT_MSG and $CHECK_FAIL will match the results "
"against a set of known patterns. The first flag will try to omit the "
"copyright message/disclaimer, the second will attempt to determine if the "
"search failed and return undef in such a case.\n"
"\n"
"*IMPORTANT*: these checks merely use pattern matching; they will work on "
"several servers but certainly not on all of them."
msgstr ""

#. tumbleweed/perl-Net-XMPP/summary
#. leap/perl-Net-XMPP/summary
msgid "XMPP Perl Library"
msgstr "XMPP Perl ライブラリ"

#. tumbleweed/perl-Net-XMPP/description
msgid ""
"Net::XMPP is a convenient tool to use for any perl script that would like to "
"utilize the XMPP Instant Messaging protocol. While not a client in and of "
"itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::XMPP is a "
"wrapper around the rest of the official Net::XMPP::xxxxxx packages.\n"
"\n"
"There is are example scripts in the example directory that provide you with "
"examples of very simple XMPP programs.\n"
"\n"
"NOTE: The parser that the XML::Stream::Parser manpage provides, as are most "
"Perl parsers, is synchronous. If you are in the middle of parsing a packet "
"and call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as of this writing threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""

#. tumbleweed/perl-NetPacket/summary
#. leap/perl-NetPacket/summary
msgid "Assemble/Disassemble Network Packets at the Protocol Level"
msgstr ""

#. tumbleweed/perl-NetPacket/description
#. leap/perl-NetPacket/description
msgid ""
"'NetPacket' provides a base class for a cluster of modules related to "
"decoding and encoding of network protocols. Each 'NetPacket' descendent "
"module knows how to encode and decode packets for the network protocol it "
"implements. Consult the documentation for the module in question for "
"protocol-specific implementation.\n"
"\n"
"Note that there is no inheritance in the 'NetPacket::' cluster of modules "
"other than each protocol module being a 'NetPacket'. This was seen to be too "
"restrictive as imposing inheritance relationships (for example between the "
"IP, UDP and TCP protocols) would make things like tunneling or other unusual "
"situations difficult."
msgstr ""

#. tumbleweed/perl-Number-Compare/summary
#. leap/perl-Number-Compare/summary
msgid "Numeric comparisons"
msgstr ""

#. tumbleweed/perl-Number-Compare/description
#. leap/perl-Number-Compare/description
msgid ""
"Number::Compare compiles a simple comparison to an anonymous subroutine, "
"which you can call with a value to be tested again.\n"
"\n"
"Now this would be very pointless, if Number::Compare didn't understand "
"magnitudes.\n"
"\n"
"The target value may use magnitudes of kilobytes ('k', 'ki'), megabytes "
"('m', 'mi'), or gigabytes ('g', 'gi'). Those suffixed with an 'i' use the "
"appropriate 2**n version in accordance with the IEC standard: http://physics."
"nist.gov/cuu/Units/binary.html"
msgstr ""

#. tumbleweed/perl-Number-Format/summary
#. leap/perl-Number-Format/summary
msgid "Perl extension for formatting numbers"
msgstr ""

#. tumbleweed/perl-Number-Format/description
#. leap/perl-Number-Format/description
msgid ""
"These functions provide an easy means of formatting numbers in a manner "
"suitable for displaying to the user.\n"
"\n"
"There are two ways to use this package. One is to declare an object of type "
"Number::Format, which you can think of as a formatting engine. The various "
"functions defined here are provided as object methods. The constructor "
"'new()' can be used to set the parameters of the formatting engine. Valid "
"parameters are:\n"
"\n"
"  THOUSANDS_SEP     - character inserted between groups of 3 digits   "
"DECIMAL_POINT     - character separating integer and fractional parts   "
"MON_THOUSANDS_SEP - like THOUSANDS_SEP, but used for format_price   "
"MON_DECIMAL_POINT - like DECIMAL_POINT, but used for format_price   "
"INT_CURR_SYMBOL   - character(s) denoting currency (see format_price())   "
"DECIMAL_DIGITS    - number of digits to the right of dec point (def 2)   "
"DECIMAL_FILL      - boolean; whether to add zeroes to fill out decimal   "
"NEG_FORMAT        - format to display negative numbers (def ``-x'')   "
"KILO_SUFFIX       - suffix to add when format_bytes formats kilobytes "
"(trad)   MEGA_SUFFIX       -    \"    \"  \"    \"        \"         \"    "
"megabytes (trad)   GIGA_SUFFIX       -    \"    \"  \"    \"        "
"\"         \"    gigabytes (trad)   KIBI_SUFFIX       - suffix to add when "
"format_bytes formats kibibytes (iec)   MEBI_SUFFIX       -    \"    \"  "
"\"    \"        \"         \"    mebibytes (iec)   GIBI_SUFFIX       -    "
"\"    \"  \"    \"        \"         \"    gibibytes (iec)\n"
"\n"
"They may be specified in upper or lower case, with or without a leading "
"hyphen ( - )."
msgstr ""

#. tumbleweed/perl-OLE-Storage_Lite/summary
#. leap/perl-OLE-Storage_Lite/summary
msgid "Simple Class for OLE document interface."
msgstr ""

#. tumbleweed/perl-OLE-Storage_Lite/description
#. leap/perl-OLE-Storage_Lite/description
msgid ""
"OLE::Storage_Lite allows you to read and write an OLE structured file.\n"
"\n"
"OLE::Storage_Lite::PPS is a class representing PPS. OLE::Storage_Lite::PPS::"
"Root, OLE::Storage_Lite::PPS::File and OLE::Storage_Lite::PPS::Dir are "
"subclasses of OLE::Storage_Lite::PPS."
msgstr ""

#. tumbleweed/perl-Object-Signature/summary
#. leap/perl-Object-Signature/summary
msgid "Generate cryptographic signatures for objects"
msgstr ""

#. tumbleweed/perl-Object-Signature/description
#. leap/perl-Object-Signature/description
msgid ""
"the Object::Signature manpage is an abstract base class that you can inherit "
"from in order to allow your objects to generate unique cryptographic "
"signatures.\n"
"\n"
"The method used to generate the signature is based on the Storable manpage "
"and the Digest::MD5 manpage. The object is fed to 'Storable::nfreeze' to get "
"a string, which is then passed to the Digest::MD5::md5_hex manpage to get a "
"unique 32 character hexidecimal signature."
msgstr ""

#. tumbleweed/perl-PAR/summary
#. leap/perl-PAR/summary
#, fuzzy
msgid "Perl Archive Toolkit"
msgstr "Perl の Web サービスツールキット"

#. tumbleweed/perl-PAR/description
msgid ""
"This module lets you use special zip files, called *P*erl *Ar*chives, as "
"libraries from which Perl modules can be loaded.\n"
"\n"
"It supports loading XS modules by overriding *DynaLoader* bootstrapping "
"methods; it writes shared object file to a temporary file at the time it is "
"needed.\n"
"\n"
"A _.par_ file is mostly a zip of the _blib/_ directory after the build "
"process of a CPAN distribution. To generate a _.par_ file yourself, all you "
"have to do is compress the modules under _arch/_ and _lib/_, e.g.:\n"
"\n"
"    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
"arch/ lib/\n"
"\n"
"Afterward, you can just use _mymodule.par_ anywhere in your '@INC', use\n"
"*PAR*, and it will Just Work. Support for generating _.par_ files is going "
"to be in the next (beyond 0.2805) release of Module::Build.\n"
"\n"
"For convenience, you can set the 'PERL5OPT' environment variable to '-MPAR' "
"to enable 'PAR' processing globally (the overhead is small if not used); "
"setting it to '-MPAR=/path/to/mylib.par' will load a specific PAR file. "
"Alternatively, consider using the _par.pl_ utility bundled with the PAR::"
"Packer distribution, or using the self-contained _parl_ utility which is "
"also distributed with PAR::Packer on machines without PAR.pm installed.\n"
"\n"
"Note that self-containing scripts and executables created with _par.pl_ and "
"_pp_ may also be used as _.par_ archives:\n"
"\n"
"    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
"Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % perl "
"-MPAR -Ipacked.exe other.pl  # ditto\n"
"\n"
"Please see SYNOPSIS for most typical use cases."
msgstr ""

#. tumbleweed/perl-PAR-Dist/summary
#. leap/perl-PAR-Dist/summary
#, fuzzy
msgid "Create and manipulate PAR distributions"
msgstr "日付操作ルーチン"

#. tumbleweed/perl-PAR-Dist/description
#. leap/perl-PAR-Dist/description
msgid ""
"This module creates and manipulates _PAR distributions_. They are "
"architecture-specific *PAR* files, containing everything under _blib/_ of "
"CPAN distributions after their 'make' or 'Build' stage, a _META.yml_ "
"describing metadata of the original CPAN distribution, and a _MANIFEST_ "
"detailing all files within it. Digitally signed PAR distributions will also "
"contain a _SIGNATURE_ file.\n"
"\n"
"The naming convention for such distributions is:\n"
"\n"
"    $NAME-$VERSION-$ARCH-$PERL_VERSION.par\n"
"\n"
"For example, 'PAR-Dist-0.01-i386-freebsd-5.8.0.par' corresponds to the 0.01 "
"release of 'PAR-Dist' on CPAN, built for perl 5.8.0 running on 'i386-"
"freebsd'."
msgstr ""

#. tumbleweed/perl-PDF-API2/summary
#. tumbleweed/perl-PDF-API2/description
#. leap/perl-PDF-API2/summary
#. leap/perl-PDF-API2/description
msgid "Facilitates the creation and modification of PDF files"
msgstr ""

#. tumbleweed/perl-PHP-Serialization/summary
#. leap/perl-PHP-Serialization/summary
msgid "De-/serialize() PHP output into Perl"
msgstr ""

#. tumbleweed/perl-PHP-Serialization/description
#. leap/perl-PHP-Serialization/description
msgid ""
"Provides a simple, quick means of serializing perl memory structures "
"(including object data!) into a format that PHP can deserialize() and "
"access, and vice versa.\n"
"\n"
"NOTE: Converts PHP arrays into Perl Arrays when the PHP array used "
"exclusively numeric indexes, and into Perl Hashes then the PHP array did not."
msgstr ""

#. tumbleweed/perl-POE/summary
#. leap/perl-POE/summary
msgid "Portable Multitasking and Networking Framework for Any Event Loop"
msgstr ""

#. tumbleweed/perl-POE/description
#. leap/perl-POE/description
msgid ""
"POE is a framework for cooperative, event driven multitasking and networking "
"in Perl. Other languages have similar frameworks. Python has Twisted. TCL "
"has \"the event loop\".\n"
"\n"
"POE provides a unified interface for several other event loops, including "
"select(), IO::Poll, the Glib manpage, the Gtk manpage, the Tk manpage, the "
"Wx manpage, and the Gtk2 manpage. Many of these event loop interfaces were "
"written by others, with the help of POE::Test::Loops. They may be found on "
"the CPAN.\n"
"\n"
"POE achieves its high degree of portability to different operating systems "
"and Perl versions by being written entirely in Perl. CPAN hosts optional XS "
"modules for POE if speed is more desirable than portability.\n"
"\n"
"POE is designed in layers. Each layer builds atop the lower level ones. "
"Programs are free to use POE at any level of abstraction, and different "
"levels can be mixed and matched seamlessly within a single program. "
"Remember, though, that higher-level abstractions often require more "
"resources than lower-level ones. The conveniences they provide are not "
"free.\n"
"\n"
"POE's bundled abstraction layers are the tip of a growing iceberg. the "
"Sprocket manpage, POE::Stage, and other CPAN distributions build upon this "
"work. You're encouraged to look around.\n"
"\n"
"No matter how high you go, though, it all boils down to calls to POE::"
"Kernel. So your down-to-earth code can easily cooperate with stratospheric "
"systems."
msgstr ""

#. tumbleweed/perl-POE-Test-Loops/summary
#. leap/perl-POE-Test-Loops/summary
msgid "Reusable tests for POE::Loop authors"
msgstr ""

#. tumbleweed/perl-POE-Test-Loops/description
#. leap/perl-POE-Test-Loops/description
msgid ""
"POE::Test::Loops contains one function, generate(), which will generate all "
"the loop tests for one or more POE::Loop subclasses.\n"
"\n"
"The the /SYNOPSIS manpage example is a version of the poe-gen-tests manpage, "
"which is a stand-alone utility to generate the actual tests. the poe-gen-"
"tests manpage also documents the POE::Test::Loops system in more detail."
msgstr ""

#. tumbleweed/perl-POSIX-strftime-Compiler/summary
#. leap/perl-POSIX-strftime-Compiler/summary
msgid "GNU C library compatible strftime for loggers and servers"
msgstr ""

#. tumbleweed/perl-POSIX-strftime-Compiler/description
#. leap/perl-POSIX-strftime-Compiler/description
msgid ""
"POSIX::strftime::Compiler provides GNU C library compatible strftime(3). But "
"this module will not affected by the system locale. This feature is useful "
"when you want to write loggers, servers and portable applications.\n"
"\n"
"For generate same result strings on any locale, POSIX::strftime::Compiler "
"wraps POSIX::strftime and converts some format characters to perl code"
msgstr ""

#. tumbleweed/perl-PPI/summary
#. tumbleweed/perl-PPI/description
#. leap/perl-PPI/summary
#. leap/perl-PPI/description
msgid "Parse, Analyze and Manipulate Perl (without perl)"
msgstr "Perl の解釈と分析、および操作を Perl なしで行なうライブラリ"

#. tumbleweed/perl-PPIx-Regexp/summary
#. leap/perl-PPIx-Regexp/summary
#, fuzzy
msgid "Represent a regular expression of some sort"
msgstr "シンプルな正規表現 API"

#. tumbleweed/perl-PPIx-Regexp/description
#. leap/perl-PPIx-Regexp/description
msgid ""
"The purpose of the _PPIx-Regexp_ package is to parse regular expressions in "
"a manner similar to the way the PPI package parses Perl. This class forms "
"the root of the parse tree, playing a role similar to PPI::Document.\n"
"\n"
"This package shares with PPI the property of being round-trip safe. That "
"is,\n"
"\n"
" my $expr = 's/ ( \\d+ ) ( \\D+ ) /$2$1/smxg';  my $re = PPIx::Regexp-"
">new( $expr );  print $re->content() eq $expr ? \"yes\\n\" : \"no\\n\"\n"
"\n"
"should print 'yes' for any valid regular expression.\n"
"\n"
"Navigation is similar to that provided by PPI. That is to say, things like "
"'children', 'find_first', 'snext_sibling' and so on all work pretty much the "
"same way as in PPI.\n"
"\n"
"The class hierarchy is also similar to PPI. Except for some utility classes "
"(the dumper, the lexer, and the tokenizer) all classes are descended from "
"PPIx::Regexp::Element, which provides basic navigation. Tokens are descended "
"from PPIx::Regexp::Token, which provides content. All containers are "
"descended from PPIx::Regexp::Node, which provides for children, and all "
"structure elements are descended from PPIx::Regexp::Structure, which "
"provides beginning and ending delimiters, and a type.\n"
"\n"
"There are two features of PPI that this package does not provide - "
"mutability and operator overloading. There are no plans for serious "
"mutability, though something like PPI's 'prune' functionality might be "
"considered. Similarly there are no plans for operator overloading, which "
"appears to the author to represent a performance hit for little tangible "
"gain."
msgstr ""

#. tumbleweed/perl-PPIx-Utilities/summary
#. leap/perl-PPIx-Utilities/summary
msgid "Extensions to L<PPI|PPI>."
msgstr ""

#. tumbleweed/perl-PPIx-Utilities/description
#. leap/perl-PPIx-Utilities/description
msgid ""
"This is a collection of functions for dealing with PPI objects, many of "
"which originated in Perl::Critic. They are organized into modules by the "
"kind of PPI class they relate to, by replacing the \"PPI\" at the front of "
"the module name with \"PPIx::Utilities\", e.g. functionality related to PPI::"
"Nodes is in PPIx::Utilities::Node."
msgstr ""

#. tumbleweed/perl-Package-DeprecationManager/summary
#. leap/perl-Package-DeprecationManager/summary
msgid "Manage deprecation warnings for your distribution"
msgstr "配布物内のファイルの Deprecation 警告の管理"

#. tumbleweed/perl-Package-DeprecationManager/description
#. leap/perl-Package-DeprecationManager/description
msgid ""
"This module allows you to manage a set of deprecations for one or more "
"modules.\n"
"\n"
"When you import 'Package::DeprecationManager', you must provide a set of '-"
"deprecations' as a hash ref. The keys are \"feature\" names, and the values "
"are the version when that feature was deprecated.\n"
"\n"
"In many cases, you can simply use the fully qualified name of a subroutine "
"or method as the feature name. This works for cases where the whole "
"subroutine is deprecated. However, the feature names can be any string. This "
"is useful if you don't want to deprecate an entire subroutine, just a "
"certain usage.\n"
"\n"
"You can also provide an optional array reference in the '-ignore' "
"parameter.\n"
"\n"
"The values to be ignored can be package names or regular expressions (made "
"with 'qr//'). Use this to ignore packages in your distribution that can "
"appear on the call stack when a deprecated feature is used.\n"
"\n"
"As part of the import process, 'Package::DeprecationManager' will export two "
"subroutines into its caller. It provides an 'import()' sub for the caller "
"and a 'deprecated()' sub.\n"
"\n"
"The 'import()' sub allows callers of _your_ class to specify an '-"
"api_version' parameter. If this is supplied, then deprecation warnings are "
"only issued for deprecations with API versions earlier than the one "
"specified.\n"
"\n"
"You must call the 'deprecated()' sub in each deprecated subroutine. When "
"called, it will issue a warning using 'Carp::cluck()'.\n"
"\n"
"The 'deprecated()' sub can be called in several ways. If you do not pass any "
"arguments, it will generate an appropriate warning message. If you pass a "
"single argument, this is used as the warning message.\n"
"\n"
"Finally, you can call it with named arguments. Currently, the only allowed "
"names are 'message' and 'feature'. The 'feature' argument should correspond "
"to the feature name passed in the '-deprecations' hash.\n"
"\n"
"If you don't explicitly specify a feature, the 'deprecated()' sub uses "
"'caller()' to identify its caller, using its fully qualified subroutine "
"name.\n"
"\n"
"A given deprecation warning is only issued once for a given package. This "
"module tracks this based on both the feature name _and_ the error message "
"itself. This means that if you provide several different error messages for "
"the same feature, all of those errors will appear."
msgstr ""
"このモジュールは、 1 つまたは複数のモジュールに対する非推奨セットを管理するこ"
"とができます。\n"
"\n"
"'Package::DeprecationManager' をインポートする際、ハッシュ参照として '-"
"deprecations' のセットを提供しなければなりません。キーは \"機能\" の名前で、"
"値はその機能が非推奨となったバージョンを表します。\n"
"\n"
"多くの場合、サブルーチンやメソッドの完全修飾名を機能名として使用することがで"
"きます。これにより、サブルーチン全体を非推奨とすることができます。しかしなが"
"ら、機能名は任意の文字列でかまいません。これは、サブルーチン全体ではなく、特"
"定の用途のみを非推奨としたい場合に便利です。\n"
"\n"
"なお、オプションで '-ignore' パラメータを指定することもできます。\n"
"\n"
"値はパッケージ名または正規表現 ('qr//' で指定) で、無視すべきものを指定しま>"
"す。これを使用することで、非推奨の機能を利用してしまったような場合でも、それ"
"を無視することができるようになります。\n"
"\n"
"プロセスのインポートの一部として、 'Package::DeprecationManager' は呼び出し元"
"に 2 種類のサブルーチンを提供します。それぞれ 'import()', 'deprecated()' と呼"
"ばれます。\n"
"\n"
"'import()' サブはお使いのクラスの呼び出し元に対して、 '-api_version' のパラ>"
"メータを指定できるようにします。これを指定した場合、非推奨の警告は指定した "
"API バージョンよりも前のものであった場合にのみ発せられるようになります。\n"
"\n"
"また、非推奨のサブルーチンそれぞれから 'deprecated()' サブを呼び出すこともで"
"きます。これを呼び出すと、 'Carp::cluck()' を利用して警告を発生させます。\n"
"\n"
"'deprecated()' サブはいくつかの方法で呼び出すことができます。何もパラメータ>"
"を指定しない場合は、適切な警告メッセージが生成されます。 1 つのパラメータを指"
"定した場合は、それを警告メッセージとして使用します。\n"
"\n"
"最後に、名前付きのパラメータを指定することもできます。現時点では 'message', "
"'feature' の各名前を指定することができますが、 'feature' では '-"
"deprecations' ハッシュ内に渡す機能名を指定します。\n"
"\n"
"明示的に機能を指定しない場合、 'deprecated()' サブは 'caller()' を利用して完"
"全修飾のサブルーチン名を判断し、呼び出し元を識別します。\n"
"\n"
"指定した非推奨の警告は、パッケージごとに 1 回のみ発せられます。このモジュー>"
"ルは機能名とエラーメッセージの _両方_ を追跡する仕組みであるためです。これに"
"より、同じ機能に対して異なるエラーメッセージを指定した場合、これらすべてのエ"
"ラーメッセージが表示されることになります。"

#. tumbleweed/perl-Package-Generator/summary
#. leap/perl-Package-Generator/summary
msgid "generate new packages quickly and easily"
msgstr ""

#. tumbleweed/perl-Package-Generator/description
#. leap/perl-Package-Generator/description
msgid ""
"This module lets you quickly and easily construct new packages. It gives "
"them unused names and sets up their package data, if provided."
msgstr ""

#. tumbleweed/perl-Package-Stash/summary
#. leap/perl-Package-Stash/summary
msgid "routines for manipulating stashes"
msgstr "Stash を扱うためのルーチン集"

#. tumbleweed/perl-Package-Stash/description
#. leap/perl-Package-Stash/description
msgid ""
"Manipulating stashes (Perl's symbol tables) is occasionally necessary, but "
"incredibly messy, and easy to get wrong. This module hides all of that "
"behind a simple API.\n"
"\n"
"NOTE: Most methods in this class require a variable specification that "
"includes a sigil. If this sigil is absent, it is assumed to represent the IO "
"slot.\n"
"\n"
"Due to limitations in the typeglob API available to perl code, and to "
"typeglob manipulation in perl being quite slow, this module provides two "
"implementations - one in pure perl, and one using XS. The XS implementation "
"is to be preferred for most usages; the pure perl one is provided for cases "
"where XS modules are not a possibility. The current implementation in use "
"can be set by setting '$ENV{PACKAGE_STASH_IMPLEMENTATION}' or '$Package::"
"Stash::IMPLEMENTATION' before loading Package::Stash (with the environment "
"variable taking precedence), otherwise, it will use the XS implementation if "
"possible, falling back to the pure perl one."
msgstr ""
"stash (Perl のシンボルテーブル) の操作は時折必要となるものですが、乱雑であり"
"間違いやすいものでもあります。このモジュールは、そのような面倒をシンプルな "
"API で隠ぺいします。\n"
"\n"
"注意: このクラス内にある多くのメソッドは、 sigil を含む変数指定が必要となりま"
"す。 sigil が指定されていない場合、 IO スロットを表すものとして扱われます。\n"
"\n"
"Perl コードで利用できる typeglob API の制限と、 Perl における typeglob 操作が"
"非常に遅いという制限から、このモジュールは 2 つの実装を提供しています -  1 つ"
"はPerl, もう 1 つは XS を利用したものです。 XS 実装は多くの用途で推奨されるも"
"のであり、 Perl 実装は XS 実装では不十分な場合に利用します。実装の選択は、 "
"Package::Stash の読み込み前 (環境変数が優先権を持つ段階) に、 "
"'$ENV{PACKAGE_STASH_IMPLEMENTATION}' または '$Package::Stash::"
"IMPLEMENTATION' を指定することで設定することができます。何も指定しない場合"
"は、可能な限り XS 実装が選択され、それでもうまく動作しない場合にのみ Perl 実"
"装に移行します。"

#. tumbleweed/perl-Package-Variant/summary
#. leap/perl-Package-Variant/summary
msgid "Parameterizable packages"
msgstr ""

#. tumbleweed/perl-Package-Variant/description
#. leap/perl-Package-Variant/description
msgid ""
"This module allows you to build a variable package that contains a package "
"template and can use it to build variant packages at runtime.\n"
"\n"
"Your variable package will export a subroutine which will build a variant "
"package, combining its arguments with the template, and return the name of "
"the new variant package.\n"
"\n"
"The implementation does not care about what kind of packages it builds, be "
"they simple function exporters, classes, singletons or something entirely "
"different."
msgstr ""

#. tumbleweed/perl-Params-Coerce/summary
#. leap/perl-Params-Coerce/summary
msgid "Allows your classes to do coercion of parameters"
msgstr ""

#. tumbleweed/perl-Params-Coerce/description
#. leap/perl-Params-Coerce/description
msgid ""
"A big part of good API design is that we should be able to be flexible in "
"the ways that we take parameters.\n"
"\n"
"Params::Coerce attempts to encourage this, by making it easier to take a "
"variety of different arguments, while adding negligable additional "
"complexity to your code.\n"
"\n"
"Author:\n"
"-------     Adam Kennedy <adamk@cpan.org>"
msgstr ""

#. tumbleweed/perl-Parse-CPAN-Packages/summary
#. leap/perl-Parse-CPAN-Packages/summary
msgid "Parse 02packages.details.txt.gz"
msgstr ""

#. tumbleweed/perl-Parse-CPAN-Packages/description
#. leap/perl-Parse-CPAN-Packages/description
msgid ""
"The Comprehensive Perl Archive Network (CPAN) is a very useful collection of "
"Perl code. It has several indices of the files that it hosts, including a "
"file named \"02packages.details.txt.gz\" in the \"modules\" directory. This "
"file contains lots of useful information and this module provides a simple "
"interface to the data contained within.\n"
"\n"
"In a future release the Parse::CPAN::Packages::Package manpage and the "
"Parse::CPAN::Packages::Distribution manpage might have more information."
msgstr ""

#. tumbleweed/perl-Parse-Method-Signatures/summary
msgid "Perl6 like method signature parser"
msgstr ""

#. tumbleweed/perl-Parse-Method-Signatures/description
msgid ""
"Inspired by Perl6::Signature but streamlined to just support the subset "
"deemed useful for TryCatch and MooseX::Method::Signatures."
msgstr ""

#. tumbleweed/perl-Parse-Win32Registry/summary
#. leap/perl-Parse-Win32Registry/summary
msgid "Parse Windows Registry Files"
msgstr ""

#. tumbleweed/perl-Parse-Win32Registry/description
#. leap/perl-Parse-Win32Registry/description
msgid ""
"Parse::Win32Registry is a module for parsing Windows Registry files, "
"allowing you to read the keys and values of a registry file without going "
"through the Windows API.\n"
"\n"
"It provides an object-oriented interface to the keys and values in a "
"registry file. Registry files are structured as trees of keys, with each key "
"containing further subkeys or values.\n"
"\n"
"The module is intended to be cross-platform, and run on those platforms "
"where Perl will run.\n"
"\n"
"It supports both Windows NT registry files (Windows NT, 2000, XP, 2003, "
"Vista, 7) and Windows 95 registry files (Windows 95, 98, Millennium "
"Edition).\n"
"\n"
"It is intended to be used to parse offline registry files. If a registry "
"file is currently in use, you will not be able to open it. However, you can "
"save part or all of a currently loaded registry file using the Windows reg "
"command if you have the appropriate administrative access."
msgstr ""

#. tumbleweed/perl-Path-Class/summary
#. leap/perl-Path-Class/summary
msgid "Cross-platform path specification manipulation"
msgstr "パス仕様を処理するためのクロスプロットフォームモジュール"

#. tumbleweed/perl-Path-Class/description
#. leap/perl-Path-Class/description
#, fuzzy
msgid ""
"'Path::Class' is a module for manipulation of file and directory "
"specifications (strings describing their locations, like ''/home/ken/foo."
"txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It supports "
"pretty much every platform Perl runs on, including Unix, Windows, Mac, VMS, "
"Epoc, Cygwin, OS/2, and NetWare.\n"
"\n"
"The well-known module File::Spec also provides this service, but it's sort "
"of awkward to use well, so people sometimes avoid it, or use it in a way "
"that won't actually work properly on platforms significantly different than "
"the ones they've tested their code on.\n"
"\n"
"In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the "
"unsightly details so you can concentrate on your application code. Whereas "
"'File::Spec' provides functions for some common path manipulations, 'Path::"
"Class' provides an object-oriented model of the world of path specifications "
"and their underlying semantics. 'File::Spec' doesn't create any objects, and "
"its classes represent the different ways in which paths must be manipulated "
"on various platforms (not a very intuitive concept). 'Path::Class' creates "
"objects representing files and directories, and provides methods that relate "
"them to each other. For instance, the following 'File::Spec' code:\n"
"\n"
" my $absolute = File::Spec->file_name_is_absolute(                   File::"
"Spec->catfile( @dirs, $file )                 );\n"
"\n"
"can be written using 'Path::Class' as\n"
"\n"
" my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
"\n"
"or even as\n"
"\n"
" my $absolute = file( @dirs, $file )->is_absolute;\n"
"\n"
"Similar readability improvements should happen all over the place when using "
"'Path::Class'.\n"
"\n"
"Using 'Path::Class' can help solve real problems in your code too - for "
"instance, how many people actually take the \"volume\" (like 'C:' on "
"Windows) into account when writing 'File::Spec'-using code? I thought not. "
"But if you use 'Path::Class', your file and directory objects will know what "
"volumes they refer to and do the right thing.\n"
"\n"
"The guts of the 'Path::Class' code live in the Path::Class::File and Path::"
"Class::Dir modules, so please see those modules' documentation for more "
"details about how to use them."
msgstr ""
"`Path::Class' は、ファイルやディレクトリの指定 (たとえば `'/home/ken/foo."
"txt''  や `'C:\\Windows\\Foo.txt'' のようなそれらを指し示す文字列) について、"
"プラットフォームに 依存しない仕様を提供するモジュールです。 Unix, Windows, "
"Mac, VMS, Epoc, Cygwin, OS/2, NetWare など、 Perl の動作する環境であればどこ"
"でも動作します。\n"
"\n"
"よく知られた `File::Spec' モジュールでもこのサービスを提供していますが、 使用"
"するには不便であるため、ユーザはこれらの使用を避けるか、もしくは作成した 環境"
"とは異なるプラットフォームでは動作しない方法を使ってしまいがちです。\n"
"\n"
" 事実、 `Path::Class' は `File::Spec' を内部的に使用していますが、全ての見苦"
"しい詳細は 隠蔽されるようになっていますので、アプリケーションコードの作成に集"
"中することができます。 また、 `File::Spec' はいくつかのパス操作のための関数を"
"提供していますが、 `Path::Class' は パス仕様とそれに伴う作業の分野についてオ"
"ブジェクト指向のモデルを提供しています。 `File::Spec' はいかなるオブジェクト"
"も作成しませんし、それらのクラスは 様々なプラットフォームで操作するにあたって"
"別々の方法をとらなければなりません (あまり直感的とは言えません) 。`Path::"
"Class' はファイルやディレクトリを示す オブジェクトを作成し、それらから相対的"
"に探るためのメソッドを提供しています。"

#. tumbleweed/perl-Path-FindDev/summary
#. leap/perl-Path-FindDev/summary
msgid "Find a development path somewhere in an upper hierarchy"
msgstr ""

#. tumbleweed/perl-Path-FindDev/description
#. leap/perl-Path-FindDev/description
msgid ""
"This package is mostly a glue layer around Path::IsDev with a few directory "
"walking tricks.\n"
"\n"
"    use Path::FindDev qw( find_dev );\n"
"\n"
"    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
"{         print \"development root = $root\";     } else {         print "
"\"No development root :(\";     }"
msgstr ""

#. tumbleweed/perl-Path-IsDev/summary
#. leap/perl-Path-IsDev/summary
msgid "Determine if a given Path resembles a development source tree"
msgstr ""

#. tumbleweed/perl-Path-IsDev/description
#. leap/perl-Path-IsDev/description
msgid ""
"This module is more or less a bunch of heuristics for determining if a given "
"path is a development tree root of some kind.\n"
"\n"
"This has many useful applications, notably ones that require behaviours for "
"\"installed\" modules to be different to those that are still \"in "
"development\""
msgstr ""

#. tumbleweed/perl-Path-Router/summary
#, fuzzy
msgid "Tool for Routing Paths"
msgstr "CD/DVD 書き込みツール"

#. tumbleweed/perl-Path-Router/description
msgid ""
"This module provides a way of deconstructing paths into parameters suitable "
"for dispatching on. It also provides the inverse in that it will take a list "
"of parameters, and construct an appropriate uri for it."
msgstr ""

#. tumbleweed/perl-Path-Tiny/summary
#. leap/perl-Path-Tiny/summary
#, fuzzy
msgid "File path utility"
msgstr "携帯電話管理ユーティリティ"

#. tumbleweed/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended. Alternatively, "
"installing PerlIO::utf8_strict 0.003 or later will be used in place of the "
"default ':encoding(UTF-8)'.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""

#. tumbleweed/perl-Perl-Critic/summary
#. leap/perl-Perl-Critic/summary
msgid "Critique Perl source code for best-practices"
msgstr ""

#. tumbleweed/perl-Perl-Critic/description
#. leap/perl-Perl-Critic/description
msgid ""
"Perl::Critic is an extensible framework for creating and applying coding "
"standards to Perl source code. Essentially, it is a static source code "
"analysis engine. Perl::Critic is distributed with a number of the Perl::"
"Critic::Policy manpage modules that attempt to enforce various coding "
"guidelines. Most Policy modules are based on Damian Conway's book *Perl Best "
"Practices*. However, Perl::Critic is *not* limited to PBP and will even "
"support Policies that contradict Conway. You can enable, disable, and "
"customize those Polices through the Perl::Critic interface. You can also "
"create new Policy modules that suit your own tastes.\n"
"\n"
"For a command-line interface to Perl::Critic, see the documentation for the "
"perlcritic manpage. If you want to integrate Perl::Critic with your build "
"process, the Test::Perl::Critic manpage provides an interface that is "
"suitable for test programs. Also, the Test::Perl::Critic::Progressive "
"manpage is useful for gradually applying coding standards to legacy code. "
"For the ultimate convenience (at the expense of some flexibility) see the "
"the criticism manpage pragma.\n"
"\n"
"If you'd like to try the Perl::Critic manpage without installing anything, "
"there is a web-service available at the http://perlcritic.com manpage. The "
"web-service does not yet support all the configuration features that are "
"available in the native Perl::Critic API, but it should give you a good idea "
"of what it does.\n"
"\n"
"Also, ActivePerl includes a very slick graphical interface to Perl-Critic "
"called 'perlcritic-gui'. You can get a free community edition of ActivePerl "
"from the http://www.activestate.com manpage."
msgstr ""

#. tumbleweed/perl-Perl-PrereqScanner/summary
#. leap/perl-Perl-PrereqScanner/summary
msgid "a tool to scan your Perl code for its prerequisites"
msgstr ""

#. tumbleweed/perl-Perl-PrereqScanner/description
#. leap/perl-Perl-PrereqScanner/description
msgid ""
"The scanner will extract loosely your distribution prerequisites from your "
"files.\n"
"\n"
"The extraction may not be perfect but tries to do its best. It will "
"currently find the following prereqs:\n"
"\n"
"* *\n"
"\n"
"  plain lines beginning with 'use' or 'require' in your perl modules and   "
"scripts, including minimum perl version\n"
"\n"
"* *\n"
"\n"
"  regular inheritance declared with the 'base' and 'parent' pragmata\n"
"\n"
"* *\n"
"\n"
"  the Moose manpage inheritance declared with the 'extends' keyword\n"
"\n"
"* *\n"
"\n"
"  the Moose manpage roles included with the 'with' keyword\n"
"\n"
"* *\n"
"\n"
"  OO namespace aliasing using the 'aliased' module"
msgstr ""

#. tumbleweed/perl-Perl-Tidy/summary
#. leap/perl-Perl-Tidy/summary
msgid "Parses and beautifies perl source"
msgstr "Perl のソースコードを処理して美しくするモジュール"

#. tumbleweed/perl-Perl-Tidy/description
#. leap/perl-Perl-Tidy/description
#, fuzzy
msgid ""
"This module makes the functionality of the perltidy utility available to "
"perl scripts. Any or all of the input parameters may be omitted, in which "
"case the @ARGV array will be used to provide input parameters as described "
"in the perltidy(1) man page.\n"
"\n"
"For example, the perltidy script is basically just this:\n"
"\n"
"    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
"\n"
"The call to *perltidy* returns a scalar *$error_flag* which is TRUE if an "
"error caused premature termination, and FALSE if the process ran to normal "
"completion. Additional discuss of errors is contained below in the ERROR "
"HANDLING section."
msgstr ""
"このモジュールは、 Perl スクリプトに対して提供されている perltidy ユーティリ"
"ティの機能を実装したものです。入力パラメータは自由に省略することができます"
"が、この場合は @ARGV 配列が入力パラメータを指すものとみなされます (詳しくは "
"perltidy(1) のマニュアルページをお読みください。\n"
"\n"
"たとえば、 perltidy スクリプトは下記のようにして使用します:\n"
"\n"
"    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
"\n"
"*perltidy* はスカラー値の *$error_flag* を返します。この値が TRUE の場合、何"
"らかの問題が発生してエラーになったことを表し、 FALSE の場合は問題がなかったこ"
"とを表します。エラーに対する処理について、詳しくはマニュアルページの ERROR "
"HANDLING セクションをお読みください。"

#. tumbleweed/perl-Perl-Version/summary
#. leap/perl-Perl-Version/summary
msgid "Parse and manipulate Perl version strings"
msgstr ""

#. tumbleweed/perl-Perl-Version/description
#. leap/perl-Perl-Version/description
msgid ""
"Perl::Version provides a simple interface for parsing, manipulating and "
"formatting Perl version strings.\n"
"\n"
"Unlike version.pm (which concentrates on parsing and comparing version "
"strings) Perl::Version is designed for cases where you'd like to parse a "
"version, modify it and get back the modified version formatted like the "
"original.\n"
"\n"
"For example:\n"
"\n"
"    my $version = Perl::Version->new( '1.2.3' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    1.3.0\n"
"\n"
"whereas\n"
"\n"
"    my $version = Perl::Version->new( 'v1.02.03' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    v1.03.00\n"
"\n"
"Both are representations of the same version and they'd compare equal but "
"their formatting is different.\n"
"\n"
"Perl::Version tries hard to guess and recreate the format of the original "
"version and in most cases it succeeds. In rare cases the formatting is "
"ambiguous. Consider\n"
"\n"
"    1.10.03\n"
"\n"
"Do you suppose that second component '10' is zero padded like the third "
"component? Perl::Version will assume that it is:\n"
"\n"
"    my $version = Perl::Version->new( '1.10.03' );     $version-"
">inc_revision;     print \"$version\\n\";\n"
"\n"
"will print\n"
"\n"
"    2.00.00\n"
"\n"
"If all of the components after the first are the same length (two characters "
"in this case) and any of them begins with a zero Perl::Version will assume "
"that they're all zero padded to the same length.\n"
"\n"
"The first component and any alpha suffix are handled separately. In each "
"case if either of them starts with a zero they will be zero padded to the "
"same length when stringifying the version."
msgstr ""

#. tumbleweed/perl-Perl6-Junction/summary
#. leap/perl-Perl6-Junction/summary
msgid "Perl6 style Junction operators in Perl5."
msgstr ""

#. tumbleweed/perl-Perl6-Junction/description
#. tumbleweed/perl-Syntax-Keyword-Junction/description
#. leap/perl-Perl6-Junction/description
#. leap/perl-Syntax-Keyword-Junction/description
msgid ""
"This is a lightweight module which provides 'Junction' operators, the most "
"commonly used being 'any' and 'all'.\n"
"\n"
"Inspired by the Perl6 design docs, the http://dev.perl.org/perl6/doc/design/"
"exe/E06.html manpage.\n"
"\n"
"Provides a limited subset of the functionality of the Quantum::"
"Superpositions manpage, see the /\"SEE ALSO\" manpage for comment.\n"
"\n"
"Notice in the the /SYNOPSIS manpage above, that if you want to match against "
"a regular expression, you must use '==' or '!='. *Not* '=~' or '!~'. You "
"must also use a regex object, such as 'qr/\\d/', not a plain regex such as '/"
"\\d/'."
msgstr ""

#. tumbleweed/perl-PerlIO-via-Timeout/summary
#. leap/perl-PerlIO-via-Timeout/summary
msgid "PerlIO layer that adds read & write timeout to a handle"
msgstr ""

#. tumbleweed/perl-PerlIO-via-Timeout/description
#. leap/perl-PerlIO-via-Timeout/description
msgid ""
"This package implements a PerlIO layer, that adds read / write timeout. This "
"can be useful to avoid blocking while accessing a handle (file, "
"socket, ...), and fail after some time.\n"
"\n"
"The timeout is implemented by using '<select'> on the handle before reading/"
"writing.\n"
"\n"
"*WARNING* the handle won't timeout if you use 'sysread' or 'syswrite' on it, "
"because these functions works at a lower level. However if you're trying to "
"implement a timeout for a socket, see the IO::Socket::Timeout manpage that "
"implements exactly that."
msgstr ""

#. tumbleweed/perl-PerlIO-via-dynamic/summary
#. leap/perl-PerlIO-via-dynamic/summary
msgid "dynamic PerlIO layers"
msgstr "動的 PerlIO レイヤ"

#. tumbleweed/perl-PerlIO-via-dynamic/description
#. leap/perl-PerlIO-via-dynamic/description
msgid ""
"'PerlIO::via::dynamic' is used for creating dynamic the PerlIO manpage "
"layers. It is useful when the behavior or the layer depends on variables. "
"You should not use this module as via layer directly (ie :via(dynamic)).\n"
"\n"
"Use the constructor to create new layers, with two arguments: translate and "
"untranslate. Then use '$p-'via ($fh)> to wrap the handle. Once <$fh> is "
"destroyed, the temporary namespace for the IO layer will be removed.\n"
"\n"
"Note that PerlIO::via::dynamic uses the scalar fields to reference to the "
"object representing the dynamic namespace."
msgstr ""

#. tumbleweed/perl-Plack/summary
#. leap/perl-Plack/summary
msgid "Perl Superglue for Web frameworks and Web Servers (PSGI toolkit)"
msgstr ""

#. tumbleweed/perl-Plack/description
msgid ""
"Plack is a set of tools for using the PSGI stack. It contains middleware "
"components, a reference server and utilities for Web application frameworks. "
"Plack is like Ruby's Rack or Python's Paste for WSGI.\n"
"\n"
"See PSGI for the PSGI specification and PSGI::FAQ to know what PSGI and "
"Plack are and why we need them."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-LogErrors/summary
#. leap/perl-Plack-Middleware-LogErrors/summary
msgid "Map psgi.errors to psgix.logger or other logger"
msgstr ""

#. tumbleweed/perl-Plack-Middleware-LogErrors/description
#. leap/perl-Plack-Middleware-LogErrors/description
msgid ""
"'psgi.errors' defaults to 'stderr' in most backends, which results in "
"content going somewhere unhelpful like the server console.\n"
"\n"
"This middleware simply remaps the 'psgi.errors' stream to the 'psgix.logger' "
"stream, or an explicit logger that you provide.\n"
"\n"
"This is especially handy when used in combination with other middlewares "
"such as the Plack::Middleware::LogWarn manpage (which diverts Perl warnings "
"to 'psgi.errors'); the Plack::Middleware::HTTPExceptions manpage (which "
"diverts uncaught exceptions to 'psgi.errors'); and the Plack::Middleware::"
"AccessLog manpage, which defaults to 'psgi.errors' when not passed a logger "
"-- which is also automatically applied via the plackup manpage (so if you "
"provided no '--access-log' option indicating a filename, 'psgi.errors' is "
"used)."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-Session/summary
#. leap/perl-Plack-Middleware-Session/summary
#, fuzzy
msgid "Middleware for session management"
msgstr "ストレージ管理用ライブラリ"

#. tumbleweed/perl-Plack-Middleware-Session/description
#. leap/perl-Plack-Middleware-Session/description
msgid ""
"This is a Plack Middleware component for session management. By default it "
"will use cookies to keep session state and store data in memory. This "
"distribution also comes with other state and store solutions. See perldoc "
"for these backends how to use them.\n"
"\n"
"It should be noted that we store the current session as a hash reference in "
"the 'psgix.session' key inside the '$env' where you can access it as "
"needed.\n"
"\n"
"*NOTE:* As of version 0.04 the session is stored in 'psgix.session' instead "
"of 'plack.session'."
msgstr ""

#. tumbleweed/perl-Pod-Coverage/summary
#. leap/perl-Pod-Coverage/summary
msgid "Checks if the documentation of a module is comprehensive"
msgstr ""
"モジュール内のドキュメンテーションがきちんとカバーされているかどうかの確認"

#. tumbleweed/perl-Pod-Coverage/description
#. leap/perl-Pod-Coverage/description
msgid ""
"Developers hate writing documentation. They'd hate it even more if their "
"computer tattled on them, but maybe they'll be even more thankful in the "
"long run. Even if not, _perlmodstyle_ tells you to, so you must obey.\n"
"\n"
"This module provides a mechanism for determining if the pod for a given "
"module is comprehensive.\n"
"\n"
"It expects to find either a '=head(n>1)' or an '=item' block documenting a "
"subroutine.\n"
"\n"
"Consider: # an imaginary Foo.pm package Foo;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"In this example 'Foo::foo' is covered, but 'Foo::bar' is not, so the 'Foo' "
"package is only 50% (0.5) covered"
msgstr ""
"開発者はドキュメンテーションの作成を嫌います。たとえ彼らの使っているコン"
"ピュータが 告げ口をしたとしても嫌いなままですが、長期間の稼働を行なっていくに"
"つれて ありがたく思うようになるものです。そうでない場合は、 perlmodstyle がそ"
"の旨を通知することで、それに従わなければなりません。\n"
"\n"
"このモジュールは、指定したモジュールの pod ファイル内にドキュメンテーションが"
"きちんと 書かれているかどうかを確認する仕組みを提供します。\n"
"\n"
"このモジュールは、 =head(n>1) または =item ブロックが各サブルーチン内に ある"
"ことを期待します。\n"
"例: # パッケージ Foo 内の Foo.pm;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"この例では 'Foo::foo' はドキュメンテーションがあるのの、 'Foo::bar' について"
"はありません。したがってパッケージ 'Foo' のカバー率は 50% (0.5) となります。"

#. tumbleweed/perl-Pod-Coverage-Moose/summary
#. leap/perl-Pod-Coverage-Moose/summary
msgid "Pod::Coverage extension for Moose"
msgstr ""

#. tumbleweed/perl-Pod-Coverage-Moose/description
#. leap/perl-Pod-Coverage-Moose/description
msgid ""
"When using the Pod::Coverage manpage in combination with the Moose manpage, "
"it will report any method imported from a Role. This is especially bad when "
"used in combination with the Test::Pod::Coverage manpage, since it takes "
"away its ease of use.\n"
"\n"
"To use this module in combination with the Test::Pod::Coverage manpage, use "
"something like this:\n"
"\n"
"  use Test::Pod::Coverage;   all_pod_coverage_ok({ coverage_class => 'Pod::"
"Coverage::Moose'});"
msgstr ""

#. tumbleweed/perl-Pod-Coverage-TrustPod/summary
#. leap/perl-Pod-Coverage-TrustPod/summary
msgid "allow a module's pod to contain Pod::Coverage hints"
msgstr ""

#. tumbleweed/perl-Pod-Coverage-TrustPod/description
#. leap/perl-Pod-Coverage-TrustPod/description
msgid ""
"This is a Pod::Coverage subclass (actually, a subclass of Pod::Coverage::"
"CountParents) that allows the POD itself to declare certain symbol names "
"trusted.\n"
"\n"
"Here is a sample Perl module:\n"
"\n"
"  package Foo::Bar;\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Foo::Bar - a bar at which fooes like to drink\n"
"\n"
"  =head1 METHODS\n"
"\n"
"  =head2 fee\n"
"\n"
"  returns the bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fee { ... }\n"
"\n"
"  =head2 fie\n"
"\n"
"  scoffs at bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fie { ... }\n"
"\n"
"  sub foo { ... }\n"
"\n"
"  =begin Pod::Coverage\n"
"\n"
"    foo\n"
"\n"
"  =end Pod::Coverage\n"
"\n"
"  =cut\n"
"\n"
"This file would report full coverage, because any non-empty lines inside a "
"block of POD targeted to Pod::Coverage are treated as 'trustme' patterns. "
"Leading and trailing whitespace is stripped and the remainder is treated as "
"a regular expression anchored at both ends.\n"
"\n"
"Remember, anywhere you could use '=begin' and '=end' as above, you could "
"instead write:\n"
"\n"
"  =for Pod::Coverage foo\n"
"\n"
"In some cases, you may wish to make the entire file trusted. The special "
"pattern '*EVERYTHING*' may be provided to do just this.\n"
"\n"
"Keep in mind that Pod::Coverage::TrustPod sets up exceptions using the "
"\"trust\" mechanism rather than the \"privacy\" mechanism in Pod::Coverage. "
"This is unlikely ever to matter to you, but it's true."
msgstr ""

#. tumbleweed/perl-Pod-Eventual/summary
#. leap/perl-Pod-Eventual/summary
msgid "read a POD document as a series of trivial events"
msgstr ""

#. tumbleweed/perl-Pod-Eventual/description
#. leap/perl-Pod-Eventual/description
msgid ""
"POD is a pretty simple format to write, but it can be a big pain to deal "
"with reading it and doing anything useful with it. Most existing POD parsers "
"care about semantics, like whether a '=item' occurred after an '=over' but "
"before a 'back', figuring out how to link a 'L<>', and other things like "
"that.\n"
"\n"
"Pod::Eventual is much less ambitious and much more stupid. Fortunately, "
"stupid is often better. (That's what I keep telling myself, anyway.)\n"
"\n"
"Pod::Eventual reads line-based input and produces events describing each POD "
"paragraph or directive it finds. Once complete events are immediately passed "
"to the 'handle_event' method. This method should be implemented by Pod::"
"Eventual subclasses. If it isn't, Pod::Eventual's own 'handle_event' will be "
"called, and will raise an exception."
msgstr ""

#. tumbleweed/perl-Pod-POM/summary
#. leap/perl-Pod-POM/summary
msgid "POD Object Model"
msgstr "POD オブジェクトモデル"

#. tumbleweed/perl-Pod-POM/description
#. leap/perl-Pod-POM/description
msgid ""
"This module implements a parser to convert Pod documents into a simple "
"object model form known hereafter as the Pod Object Model. The object model "
"is generated as a hierarchical tree of nodes, each of which represents a "
"different element of the original document. The tree can be walked manually "
"and the nodes examined, printed or otherwise manipulated. In addition, Pod::"
"POM supports and provides view objects which can automatically traverse the "
"tree, or section thereof, and generate an output representation in one form "
"or another."
msgstr ""
"このモジュールは Pod 文書をシンプルなオブジェクトモデルに変換するパーサーで、"
"今後は Pod オブジェクトモデルとして知られることになるものです。オブジェクトモ"
"デルはノードの階層構造で、それぞれのノードは元の文書に対する各要素を示す形に"
"なっています。ツリー構造は手動で探索することができるほか、調査や印刷、その他"
"の操作などを行なうこともできます。これに加えて、 Pod::POM はツリー構造を自動"
"的に探索するビューオブジェクトに対応し提供するほか、一方から他方に出力を生成"
"するようなことも行なうことができます。"

#. tumbleweed/perl-Pod-Readme/summary
msgid "Intelligently generate a README file from POD"
msgstr ""

#. tumbleweed/perl-Pod-Readme/description
msgid ""
"This module filters POD to generate a _README_ file, by using POD commands "
"to specify which parts are included or excluded from the _README_ file."
msgstr ""

#. tumbleweed/perl-Pod-Spell/summary
#. leap/perl-Pod-Spell/summary
#, fuzzy
msgid "Formatter for Spellchecking Pod"
msgstr "スペルチェッカー"

#. tumbleweed/perl-Pod-Spell/description
#. leap/perl-Pod-Spell/description
msgid ""
"Pod::Spell is a Pod formatter whose output is good for spellchecking. Pod::"
"Spell rather like Pod::Text, except that it doesn't put much effort into "
"actual formatting, and it suppresses things that look like Perl symbols or "
"Perl jargon (so that your spellchecking program won't complain about mystery "
"words like \"'$thing'\" or \"'Foo::Bar'\" or \"hashref\").\n"
"\n"
"This class provides no new public methods. All methods of interest are "
"inherited from Pod::Parser (which see). The especially interesting ones are "
"'parse_from_filehandle' (which without arguments takes from STDIN and sends "
"to STDOUT) and 'parse_from_file'. But you can probably just make do with the "
"examples in the synopsis though.\n"
"\n"
"This class works by filtering out words that look like Perl or any form of "
"computerese (like \"'$thing'\" or \"'N>7'\" or \"'@{$foo}{'bar','baz'}'\", "
"anything in C<...> or F<...> codes, anything in verbatim paragraphs (code "
"blocks), and anything in the stopword list. The default stopword list for a "
"document starts out from the stopword list defined by Pod::Wordlist, and can "
"be supplemented (on a per-document basis) by having '\"=for stopwords\"' / "
"'\"=for :stopwords\"' region(s) in a document."
msgstr ""

#. tumbleweed/perl-Pod-Usage/summary
#. leap/perl-Pod-Usage/summary
msgid "Print a Usage Message From Embedded Pod Documentation"
msgstr ""

#. tumbleweed/perl-Pod-Usage/description
#. leap/perl-Pod-Usage/description
msgid ""
"*pod2usage* will print a usage message for the invoking script (using its "
"embedded pod documentation) and then exit the script with the desired exit "
"status. The usage message printed may have any one of three levels of "
"\"verboseness\": If the verbose level is 0, then only a synopsis is printed. "
"If the verbose level is 1, then the synopsis is printed along with a "
"description (if present) of the command line options and arguments. If the "
"verbose level is 2, then the entire manual page is printed."
msgstr ""

#. tumbleweed/perl-PostScript-Simple/summary
#. leap/perl-PostScript-Simple/summary
msgid "Produce PostScript files from Perl"
msgstr "Perl からの PostScript ファイルの作成"

#. tumbleweed/perl-PostScript-Simple/description
#. leap/perl-PostScript-Simple/description
msgid ""
"PostScript::Simple allows you to have a simple method of writing PostScript "
"files from Perl. It has graphics primitives that allow lines, curves, "
"circles, polygons and boxes to be drawn. Text can be added to the page using "
"standard PostScript fonts.\n"
"\n"
"The images can be single page EPS files, or multipage PostScript files. The "
"image size can be set by using a recognised paper size (\"'A4'\", for "
"example) or by giving dimensions. The units used can be specified (\"'mm'\" "
"or \"'in'\", etc) and are the same as those used in TeX. The default unit is "
"a bp, or a PostScript point, unlike TeX."
msgstr ""
"PostScript::Simple は Perl から PostScript のファイルに書き込むシンプルなメ"
"ソッドを提供します。直線や曲線、円や多角形、四角形などを書き込むプリミティブ"
"が用意されています。テキストについても、標準の PostScript フォントを利用して"
"ページに追加することができます。\n"
"\n"
"画像は単一ページの EPS ファイルのほか、複数ページの PostScript ファイルにする"
"こともできます。画像のサイズは紙のサイズ (\"A4\" など) を指定することができる"
"ほか、指定したサイズを設定することもできます。単位は TeX で使用されるものと同"
"様に、 \"mm\" (ミリメートル), \"in\" (インチ) などを指定することができます。"
"既定の単位は TeX とは異なり、 \"bp\" (PostScript ポイントサイズ) です。"

#. tumbleweed/perl-Probe-Perl/summary
#. leap/perl-Probe-Perl/summary
msgid "Information about the currently running perl"
msgstr "現在実行中の Perl に関する情報"

#. tumbleweed/perl-Probe-Perl/description
#. leap/perl-Probe-Perl/description
msgid ""
"This module provides methods for obtaining information about the currently "
"running perl interpreter. It originally began life as code in the 'Module::"
"Build' project, but has been externalized here for general use."
msgstr ""
"このモジュールは、現在実行中の Perl インタプリタに対して、その情報を取得する"
"機能を提供します。これはもともと 'Module::Build' プロジェクト内のコードとして"
"作られたものですが、一般的に利用できる仕組みであることから、分離されて提供さ"
"れるようになりました。"

#. tumbleweed/perl-Proc-Fork/summary
#. leap/perl-Proc-Fork/summary
#, fuzzy
msgid "simple, intuitive interface to the fork() system call"
msgstr ""
"Perl モジュール Proc::Fork - fork() システムコールに対するシンプルで直感的な"
"インターフェイス"

#. tumbleweed/perl-Proc-Fork/description
#. leap/perl-Proc-Fork/description
msgid ""
"This module provides an intuitive, Perl-ish way to write forking programs by "
"letting you use blocks to illustrate which code section executes in which "
"fork. The code for the parent, child, retry handler and error handler are "
"grouped together in a \"fork block\". The clauses may appear in any order, "
"but they must be consecutive (without any other statements in between).\n"
"\n"
"All four clauses need not be specified. If the retry clause is omitted, only "
"one fork will be attempted. If the error clause is omitted the program will "
"die with a simple message if it can't retry. If the parent or child clause "
"is omitted, the respective (parent or child) process will start execution "
"after the final clause. So if one or the other only has to do some simple "
"action, you need only specify that one. For example:\n"
"\n"
"   run_fork { child {      exec '/bin/ls', '-l';      die \"Couldn't exec "
"ls: $!\\n\";  } };    \n"
"\n"
"If the code in any of the clauses does not die or exit, it will continue "
"execution after the fork block."
msgstr ""

#. tumbleweed/perl-Proc-Simple/summary
#. leap/perl-Proc-Simple/summary
msgid "Launch and Control Background Processes"
msgstr ""

#. tumbleweed/perl-Proc-Simple/description
#. leap/perl-Proc-Simple/description
msgid ""
"The Proc::Simple package provides objects mimicing real-life processes from "
"a user's point of view. A new process object is created by\n"
"\n"
"   $myproc = Proc::Simple->new();\n"
"\n"
"Either external programs or perl subroutines can be launched and controlled "
"as processes in the background.\n"
"\n"
"A 10-second sleep process, for example, can be launched as an external "
"program as in\n"
"\n"
"   $myproc->start(\"/bin/sleep 10\");    # or    $myproc->start(\"/bin/sleep"
"\", \"10\");\n"
"\n"
"or as a perl subroutine, as in\n"
"\n"
"   sub mysleep { sleep(shift); }    # Define mysleep()    $myproc-"
">start(\\&mysleep, 10);   # Launch it.\n"
"\n"
"or even as\n"
"\n"
"   $myproc->start(sub { sleep(10); });\n"
"\n"
"The _start_ Method returns immediately after starting the specified process "
"in background, i.e. there's no blocking. It returns _1_ if the process has "
"been launched successfully and _0_ if not.\n"
"\n"
"The _poll_ method checks if the process is still running\n"
"\n"
"   $running = $myproc->poll();\n"
"\n"
"and returns _1_ if it is, _0_ if it's not. Finally,\n"
"\n"
"   $myproc->kill();\n"
"\n"
"terminates the process by sending it the SIGTERM signal. As an option, "
"another signal can be specified.\n"
"\n"
"   $myproc->kill(\"SIGUSR1\");\n"
"\n"
"sends the SIGUSR1 signal to the running process. _kill_ returns _1_ if it "
"succeeds in sending the signal, _0_ if it doesn't.\n"
"\n"
"The methods are discussed in more detail in the next section.\n"
"\n"
"A destructor is provided so that a signal can be sent to the forked "
"processes automatically should the process object be destroyed or if the "
"process exits. By default this behaviour is turned off (see the "
"kill_on_destroy and signal_on_destroy methods)."
msgstr ""

#. tumbleweed/perl-RDF-Trine/summary
#, fuzzy
msgid "An RDF Framework for Perl"
msgstr "NUnit テストフレームワーク"

#. tumbleweed/perl-RDF-Trine/description
msgid ""
"RDF::Trine provides an Resource Descriptive Framework (RDF) with an emphasis "
"on extensibility, API stability, and the presence of a test suite. The "
"package consists of several components:"
msgstr ""

#. tumbleweed/perl-RPC-XML/summary
msgid "Set of Classes for Core Data, Message and Xml Handling"
msgstr "コアデータ、メッセージ、 XML 処理向けのクラス集"

#. tumbleweed/perl-RPC-XML/description
msgid ""
"The *RPC::XML* package is an implementation of the *XML-RPC* standard. The "
"package as a whole provides classes for data, for clients, for servers and "
"for parsers (based on the XML::Parser and XML::LibXML packages from CPAN).\n"
"\n"
"This module provides a set of classes for creating values to pass to the "
"constructors for requests and responses. These are lightweight objects, most "
"of which are implemented as blessed scalar references so as to associate "
"specific type information with the value. Classes are also provided for "
"requests, responses and faults (errors).\n"
"\n"
"This module does not actually provide any transport implementation or server "
"basis. For these, see RPC::XML::Client and RPC::XML::Server, respectively."
msgstr ""
"*RPC::XML* パッケージは、 *XML-RPC* 標準の実装です。このパッケージは全体で"
"データ向け、クライアント向け、サーバ向け、パーサ向けのそれぞれのクラスを提供"
"しています (CPAN 提供の XML::Parser および XML::LibXML パッケージをベースにし"
"ています) 。\n"
"\n"
"このモジュールは、リクエストや応答に対するコンストラクタに渡すための値を作成"
"するクラス集です。これらは軽量なオブジェクトであるほか、これらのうちの多くは"
"スカラー参照の bless として実装されているため、特定のタイプ情報を値に結び付け"
"ることができます。クラスはリクエストと要求のほか、失敗 (エラー) に対しても提"
"供されています。\n"
"\n"
"このモジュールでは、実際の転送機能やサーバ機能の実装などは提供されていませ"
"ん。これらの用途に対しては RPC::XML::Client や RPC::XML::Server のパッケージ"
"をお使いください。"

#. tumbleweed/perl-Readonly/summary
#. tumbleweed/perl-Readonly/description
#. leap/perl-Readonly/summary
#. leap/perl-Readonly/description
msgid "Facility for creating read-only scalars, arrays, hashes"
msgstr "読み込みのみのスカラ値や配列、ハッシュなどを作成できる仕組み"

#. tumbleweed/perl-Redis/summary
#. leap/perl-Redis/summary
msgid "Perl binding for Redis database"
msgstr ""

#. tumbleweed/perl-Redis/description
#. leap/perl-Redis/description
msgid ""
"Pure perl bindings for http://redis.io/\n"
"\n"
"This version supports protocol 2.x (multi-bulk) or later of Redis available "
"at https://github.com/antirez/redis/.\n"
"\n"
"This documentation lists commands which are exercised in test suite, but "
"additional commands will work correctly since protocol specifies enough "
"information to support almost all commands with same piece of code with a "
"little help of 'AUTOLOAD'."
msgstr ""

#. tumbleweed/perl-Regexp-Assemble/summary
#. leap/perl-Regexp-Assemble/summary
msgid "Assemble multiple Regular Expressions into a single RE"
msgstr ""

#. tumbleweed/perl-Regexp-Assemble/description
#. leap/perl-Regexp-Assemble/description
msgid ""
"Regexp::Assemble takes an arbitrary number of regular expressions and "
"assembles them into a single regular expression (or RE) that matches all "
"that the individual REs match.\n"
"\n"
"As a result, instead of having a large list of expressions to loop over, a "
"target string only needs to be tested against one expression. This is "
"interesting when you have several thousand patterns to deal with. Serious "
"effort is made to produce the smallest pattern possible.\n"
"\n"
"It is also possible to track the original patterns, so that you can "
"determine which, among the source patterns that form the assembled pattern, "
"was the one that caused the match to occur.\n"
"\n"
"You should realise that large numbers of alternations are processed in "
"perl's regular expression engine in O(n) time, not O(1). If you are still "
"having performance problems, you should look at using a trie. Note that "
"Perl's own regular expression engine will implement trie optimisations in "
"perl 5.10 (they are already available in perl 5.9.3 if you want to try them "
"out). 'Regexp::Assemble' will do the right thing when it knows it's running "
"on a a trie'd perl. (At least in some version after this one).\n"
"\n"
"Some more examples of usage appear in the accompanying README. If that file "
"isn't easy to access locally, you can find it on a web repository such as "
"the http://search.cpan.org/dist/Regexp-Assemble/README manpage or the http://"
"cpan.uwinnipeg.ca/htdocs/Regexp-Assemble/README.html manpage."
msgstr ""

#. tumbleweed/perl-Regexp-Common/summary
#. leap/perl-Regexp-Common/summary
msgid "Provide commonly requested regular expressions"
msgstr "一般に必要とされる正規表現"

#. tumbleweed/perl-Regexp-Common/description
msgid ""
"By default, this module exports a single hash ('%RE') that stores or "
"generates commonly needed regular expressions (see \"List of available "
"patterns\").\n"
"\n"
"There is an alternative, subroutine-based syntax described in \"Subroutine-"
"based interface\"."
msgstr ""

#. tumbleweed/perl-Regexp-IPv6/summary
#. leap/perl-Regexp-IPv6/summary
#, fuzzy
msgid "Regular expression for IPv6 addresses"
msgstr "XML トークン向けの正規表現"

#. tumbleweed/perl-Regexp-IPv6/description
#. leap/perl-Regexp-IPv6/description
msgid ""
"This module exports the $IPv6_re regular expression that matches any valid "
"IPv6 address as described in \"RFC 2373 - 2.2 Text Representation of "
"Addresses\" but '::'. Any string not compliant with such RFC will be "
"rejected.\n"
"\n"
"To match full strings use '/^$IPv6_re$/'."
msgstr ""

#. tumbleweed/perl-Role-HasMessage/summary
#. leap/perl-Role-HasMessage/summary
msgid "a thing with a message method"
msgstr ""

#. tumbleweed/perl-Role-HasMessage/description
#. leap/perl-Role-HasMessage/description
msgid ""
"This is another extremely simple role. A class that includes Role::"
"HasMessage is promising to provide a 'message' method that returns a string "
"summarizing the message or event represented by the object. It does _not_ "
"provide any actual behavior."
msgstr ""

#. tumbleweed/perl-Role-Identifiable/summary
#. leap/perl-Role-Identifiable/summary
msgid "Thing with a List of Tags"
msgstr ""

#. tumbleweed/perl-Role-Identifiable/description
#. leap/perl-Role-Identifiable/description
msgid "a thing with a list of tags"
msgstr ""

#. tumbleweed/perl-Role-Tiny/summary
#. leap/perl-Role-Tiny/summary
msgid "Roles. Like a nouvelle cuisine portion size slice of Moose"
msgstr ""

#. tumbleweed/perl-Role-Tiny/description
#. leap/perl-Role-Tiny/description
msgid "'Role::Tiny' is a minimalist role composition tool."
msgstr ""

#. tumbleweed/perl-Rose-Object/summary
#. leap/perl-Rose-Object/summary
#, fuzzy
msgid "A simple object base class."
msgstr "シンプルな http サーバクラス"

#. tumbleweed/perl-Rose-Object/description
#. leap/perl-Rose-Object/description
msgid ""
"the Rose::Object manpage is a generic object base class. It provides very "
"little functionality, but a healthy dose of convention."
msgstr ""

#. tumbleweed/perl-Router-Simple/summary
#. leap/perl-Router-Simple/summary
msgid "simple HTTP router"
msgstr ""

#. tumbleweed/perl-Router-Simple/description
#. leap/perl-Router-Simple/description
msgid ""
"Router::Simple is a simple router class.\n"
"\n"
"Its main purpose is to serve as a dispatcher for web applications.\n"
"\n"
"Router::Simple can match against PSGI '$env' directly, which means it's easy "
"to use with PSGI supporting web frameworks."
msgstr ""

#. tumbleweed/perl-SOAP-Lite/summary
#. leap/perl-SOAP-Lite/summary
msgid "Perl's Web Services Toolkit"
msgstr "Perl の Web サービスツールキット"

#. tumbleweed/perl-SOAP-Lite/description
#. leap/perl-SOAP-Lite/description
msgid ""
"SOAP::Lite is a collection of Perl modules which provides a simple and "
"lightweight interface to the Simple Object Access Protocol (SOAP) both on "
"client and server side."
msgstr ""
"Perl 向け SOAP::Lite は、クライアントとしてもサーバとしても動作する、 Simple "
"Object Access Protocol (Service Oriented Access Protocol とも呼ばれる SOAP プ"
"ロトコル) のシンプルで軽量なインターフェイスを提供する Perl モジュール集で"
"す。"

#. tumbleweed/perl-SQL-Abstract/summary
#. leap/perl-SQL-Abstract/summary
msgid "Generate SQL from Perl data structures"
msgstr ""

#. tumbleweed/perl-SQL-Abstract/description
#. leap/perl-SQL-Abstract/description
msgid ""
"This module was inspired by the excellent the DBIx::Abstract manpage. "
"However, in using that module I found that what I really wanted to do was "
"generate SQL, but still retain complete control over my statement handles "
"and use the DBI interface. So, I set out to create an abstract SQL "
"generation module.\n"
"\n"
"While based on the concepts used by the DBIx::Abstract manpage, there are "
"several important differences, especially when it comes to WHERE clauses. I "
"have modified the concepts used to make the SQL easier to generate from Perl "
"data structures and, IMO, more intuitive. The underlying idea is for this "
"module to do what you mean, based on the data structures you provide it. The "
"big advantage is that you don't have to modify your code every time your "
"data changes, as this module figures it out.\n"
"\n"
"To begin with, an SQL INSERT is as easy as just specifying a hash of "
"'key=value' pairs:\n"
"\n"
"    my %data = (         name => 'Jimbo Bobson',         phone => "
"'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
"Louis',         state => 'Louisiana',     );\n"
"\n"
"The SQL can then be generated with this:\n"
"\n"
"    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
"\n"
"Which would give you something like this:\n"
"\n"
"    $stmt = \"INSERT INTO people                     (address, city, name, "
"phone, state)                     VALUES (?, ?, ?, ?, ?)\";     @bind = ('42 "
"Sister Lane', 'St. Louis', 'Jimbo Bobson',              '123-456-7890', "
"'Louisiana');\n"
"\n"
"These are then used directly in your DBI code:\n"
"\n"
"    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"
msgstr ""

#. tumbleweed/perl-SQL-ReservedWords/summary
#. leap/perl-SQL-ReservedWords/summary
msgid "Reserved SQL words by ANSI/ISO"
msgstr ""

#. tumbleweed/perl-SQL-ReservedWords/description
#. leap/perl-SQL-ReservedWords/description
msgid "Determine if words are reserved by ANSI/ISO SQL standard."
msgstr ""

#. tumbleweed/perl-SQL-SplitStatement/summary
#. leap/perl-SQL-SplitStatement/summary
msgid "Split any SQL code into atomic statements"
msgstr ""

#. tumbleweed/perl-SQL-SplitStatement/description
#. leap/perl-SQL-SplitStatement/description
msgid ""
"This is a simple module which tries to split any SQL code, even including "
"non-standard extensions (for the details see the the /SUPPORTED DBMSs "
"manpage section below), into the atomic statements it is composed of.\n"
"\n"
"The logic used to split the SQL code is more sophisticated than a raw "
"'split' on the ';' (semicolon) character: first, various different statement "
"terminator _tokens_ are recognized (see below for the list), then this "
"module is able to correctly handle the presence of said tokens inside "
"identifiers, values, comments, 'BEGIN ... END' blocks (even nested), _dollar-"
"quoted_ strings, MySQL custom 'DELIMITER's, procedural code etc., as "
"(partially) exemplified in the the /SYNOPSIS manpage above.\n"
"\n"
"Consider however that this is by no means a validating parser (technically "
"speaking, it's just a _context-sensitive tokenizer_). It should rather be "
"seen as an in-progress _heuristic_ approach, which will gradually improve as "
"test cases will be reported. This also means that, except for the the /"
"LIMITATIONS manpage detailed below, there is no known (to the author) SQL "
"code the most current release of this module can't correctly split.\n"
"\n"
"The test suite bundled with the distribution (which now includes the popular "
"_Sakila_ and _Pagila_ sample db schemata, as detailed in the the /SHOWCASE "
"manpage section below) should give you an idea of the capabilities of this "
"module\n"
"\n"
"If your atomic statements are to be fed to a DBMS, you are encouraged to use "
"the DBIx::MultiStatementDo manpage instead, which uses this module and also "
"(optionally) offers automatic transactions support, so that you'll have the "
"_all-or-nothing_ behavior you would probably want."
msgstr ""

#. tumbleweed/perl-SQL-Statement/summary
#. leap/perl-SQL-Statement/summary
msgid "SQL parsing and processing engine"
msgstr "SQL の解釈と処理のエンジン"

#. tumbleweed/perl-SQL-Statement/description
#. leap/perl-SQL-Statement/description
msgid ""
"The SQL::Statement module implements a pure Perl SQL parsing and execution "
"engine. While it by no means implements full ANSI standard, it does support "
"many features including column and table aliases, built-in and user-defined "
"functions, implicit and explicit joins, complex nested search conditions, "
"and other features.\n"
"\n"
"SQL::Statement is a small embeddable Database Management System (DBMS). This "
"means that it provides all of the services of a simple DBMS except that "
"instead of a persistent storage mechanism, it has two things: 1) an in-"
"memory storage mechanism that allows you to prepare, execute, and fetch from "
"SQL statements using temporary tables and 2) a set of software sockets where "
"any author can plug in any storage mechanism.\n"
"\n"
"There are three main uses for SQL::Statement. One or another (hopefully not "
"all) may be irrelevant for your needs: 1) to access and manipulate data in "
"CSV, XML, and other formats 2) to build your own DBD for a new data source "
"3) to parse and examine the structure of SQL statements."
msgstr ""
"SQL::Statement モジュールは純粋な Perl SQL 解析と実行エンジンを実装していま"
"す。完全な ANSI 標準をすべて実装しているわけではありませんが、列やテーブルの"
"別名、内蔵およびユーザ定義での関数、間接的・直接的な join 、複雑なネスト検索"
"条件など、多数の機能を実装しています。\n"
"\n"
"SQL::Statement は小さな内蔵型データベース管理システム (DBMS) です。これは、固"
"定のストレージシステムの代替という例外を除いて、シンプルな DBMS の全サービス"
"を提供していることを意味しています。 1) 内蔵のメモリ内ストレージ機構により、"
"一時的なテーブルを利用した SQL ステートメントの準備や実行、結果のフェッチなど"
"を行なうことができます 2) また、必要であれば任意のストレージメカニズムを用意"
"するためのソフトウエアソケットを作成できます。\n"
"\n"
"SQL::Statement では 3 種類の用途を想定しています。 1 つ以上のもの (できればす"
"べてであることが望ましいです) が要件とは無関係であるものとは思いますが、 1) "
"CSV, XML などの形式で書かれたデータにアクセスしたり、操作したりする 2) 新しい"
"データソースを利用するための独自の DBD を構築する 3) SQL ステートメントの構造"
"を処理したり調査したりする"

#. tumbleweed/perl-SQL-Tokenizer/summary
#. leap/perl-SQL-Tokenizer/summary
msgid "A simple SQL tokenizer"
msgstr ""

#. tumbleweed/perl-SQL-Tokenizer/description
#. leap/perl-SQL-Tokenizer/description
msgid ""
"SQL::Tokenizer is a simple tokenizer for SQL queries. It does not claim to "
"be a parser or query verifier. It just creates sane tokens from a valid SQL "
"query.\n"
"\n"
"It supports SQL with comments like:\n"
"\n"
" -- This query is used to insert a message into  -- logs table  INSERT INTO "
"log (application, message) VALUES (?, ?)\n"
"\n"
"Also supports '''', '\"\"' and '\\'' escaping methods, so tokenizing queries "
"like the one below should not be a problem:\n"
"\n"
" INSERT INTO log (application, message)  VALUES ('myapp', 'Hey, this is a "
"''single quoted string''!')"
msgstr ""

#. tumbleweed/perl-SQL-Translator/summary
#. leap/perl-SQL-Translator/summary
msgid "Manipulate structured data definitions (SQL and more)"
msgstr ""

#. tumbleweed/perl-SQL-Translator/description
#. leap/perl-SQL-Translator/description
msgid ""
"This documentation covers the API for SQL::Translator. For a more general "
"discussion of how to use the modules and scripts, please see the SQL::"
"Translator::Manual manpage.\n"
"\n"
"SQL::Translator is a group of Perl modules that converts vendor-specific SQL "
"table definitions into other formats, such as other vendor-specific SQL, ER "
"diagrams, documentation (POD and HTML), XML, and Class::DBI classes. The "
"main focus of SQL::Translator is SQL, but parsers exist for other structured "
"data formats, including Excel spreadsheets and arbitrarily delimited text "
"files. Through the separation of the code into parsers and producers with an "
"object model in between, it's possible to combine any parser with any "
"producer, to plug in custom parsers or producers, or to manipulate the "
"parsed data via the built-in object model. Presently only the definition "
"parts of SQL are handled (CREATE, ALTER), not the manipulation of data "
"(INSERT, UPDATE, DELETE)."
msgstr ""

#. tumbleweed/perl-SUPER/summary
#. leap/perl-SUPER/summary
msgid "Control Superclass Method Dispatch"
msgstr ""

#. tumbleweed/perl-SUPER/description
#. leap/perl-SUPER/description
msgid ""
"When subclassing a class, you occasionally want to dispatch control to the "
"superclass -- at least conditionally and temporarily. The Perl syntax for "
"calling your superclass is ugly and unwieldy:\n"
"\n"
"    $self->SUPER::method(@_);\n"
"\n"
"especially when compared to its Ruby equivalent:\n"
"\n"
"    super;\n"
"\n"
"It's even worse in that the normal Perl redispatch mechanism only dispatches "
"to the parent of the class containing the method _at compile time_. That "
"doesn't work very well for mixins and roles.\n"
"\n"
"This module provides nicer equivalents, along with the universal method "
"'super' to determine a class' own superclass. This allows you to do things "
"such as:\n"
"\n"
"    goto &{$_[0]->super('my_method')};\n"
"\n"
"if you don't like wasting precious stack frames.\n"
"\n"
"If you are using roles or mixins or otherwise pulling in methods from other "
"packages that need to dispatch to their super methods, or if you want to "
"pass different arguments to the super method, use the 'SUPER()' method:\n"
"\n"
"    $self->SUPER( qw( other arguments here ) );"
msgstr ""

#. tumbleweed/perl-SVG/summary
#. leap/perl-SVG/summary
#, fuzzy
msgid "Perl extension for generating Scalable Vector Graphics (SVG) documents"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-SVG/description
#. leap/perl-SVG/description
msgid ""
"SVG is a 100% Perl module which generates a nested data structure containing "
"the DOM representation of an SVG (Scalable Vector Graphics) image. Using "
"SVG, you can generate SVG objects, embed other SVG instances into it, access "
"the DOM object, create and access javascript, and generate SMIL animation "
"content."
msgstr ""

#. tumbleweed/perl-Safe-Isa/summary
#. leap/perl-Safe-Isa/summary
msgid "Call isa, can, does and DOES safely on things that may not be objects"
msgstr ""

#. tumbleweed/perl-Safe-Isa/description
#. leap/perl-Safe-Isa/description
msgid ""
"How many times have you found yourself writing:\n"
"\n"
"  if ($obj->isa('Something')) {\n"
"\n"
"and then shortly afterwards cursing and changing it to:\n"
"\n"
"  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
"\n"
"Right. That's why this module exists.\n"
"\n"
"Since perl allows us to provide a subroutine reference or a method name to "
"the -> operator when used as a method call, and a subroutine doesn't require "
"the invocant to actually be an object, we can create safe versions of isa, "
"can and friends by using a subroutine reference that only tries to call the "
"method if it's used on an object. So:\n"
"\n"
"  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
"\n"
"is equivalent to\n"
"\n"
"  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
"{       $maybe_an_object->isa('Foo');     } else {       undef;     }   };\n"
"\n"
"Note that we don't handle trying class names, because many things are valid "
"class names that you might not want to treat as one (like say \"Matt\") - "
"the 'is_module_name' function from the Module::Runtime manpage is a good way "
"to check for something you might be able to call methods on if you want to "
"do that."
msgstr ""

#. tumbleweed/perl-Scope-Guard/summary
#. leap/perl-Scope-Guard/summary
#, fuzzy
msgid "Lexically-Scoped Resource Management"
msgstr "レキシカルスコープにおけるリソース管理"

#. tumbleweed/perl-Scope-Guard/description
#. leap/perl-Scope-Guard/description
#, fuzzy
msgid ""
"This module provides a convenient way to perform cleanup or other forms of "
"resource management at the end of a scope. It is particularly useful when "
"dealing with exceptions: the 'Scope::Guard' constructor takes a reference to "
"a subroutine that is guaranteed to be called even if the thread of execution "
"is aborted prematurely. This effectively allows lexically-scoped \"promises"
"\" to be made that are automatically honoured by perl's garbage collector.\n"
"\n"
"For more information, see: the http://www.drdobbs.com/cpp/184403758 manpage"
msgstr ""
"このモジュールは、スコープの終了時にクリーンアップやその他のリソース管理を実"
"施するための便利な方法です。特に例外を取り扱う際に便利な仕組みで、 Scope::"
"Guard のコンストラクタはサブルーチンの参照を受け取り、スレッドが異常終了した"
"場合にも必ず呼び出される仕組みを提供します。これにより、文法上の規約で正しい"
"表現のまま、 Perl のガーベージコレクタを自動的に呼び出す仕組みを提供します。"

#. tumbleweed/perl-Selenium-Remote-Driver/summary
#. leap/perl-Selenium-Remote-Driver/summary
msgid "Perl Client for Selenium Remote Driver"
msgstr ""

#. tumbleweed/perl-Selenium-Remote-Driver/description
#. leap/perl-Selenium-Remote-Driver/description
msgid ""
"Selenium is a test tool that allows you to write automated web application "
"UI tests in any programming language against any HTTP website using any "
"mainstream JavaScript-enabled browser. This module is an implementation of "
"the client for the Remote driver that Selenium provides. You can find "
"bindings for other languages at this location:\n"
"\n"
"the http://code.google.com/p/selenium/ manpage\n"
"\n"
"This module sends commands directly to the Server using HTTP. Using this "
"module together with the Selenium Server, you can automatically control any "
"supported browser. To use this module, you need to have already downloaded "
"and started the Selenium Server (Selenium Server is a Java application)."
msgstr ""

#. tumbleweed/perl-Set-Scalar/summary
#. leap/perl-Set-Scalar/summary
msgid "Basic Set Operations"
msgstr "基本セットの操作"

#. tumbleweed/perl-Set-Scalar/description
#. leap/perl-Set-Scalar/description
msgid "basic set operations"
msgstr "基本的なセット操作"

#. tumbleweed/perl-Smart-Comments/summary
#. leap/perl-Smart-Comments/summary
msgid "Comments that do more than just sit there"
msgstr ""

#. tumbleweed/perl-Smart-Comments/description
#. leap/perl-Smart-Comments/description
msgid ""
"Smart comments provide an easy way to insert debugging and tracking code "
"into a program. They can report the value of a variable, track the progress "
"of a loop, and verify that particular assertions are true.\n"
"\n"
"Best of all, when you're finished debugging, you don't have to remove them. "
"Simply commenting out the 'use Smart::Comments' line turns them back into "
"regular comments. Leaving smart comments in your code is smart because if "
"you needed them once, you'll almost certainly need them again later."
msgstr ""

#. tumbleweed/perl-Snowball-Norwegian/summary
#. tumbleweed/perl-Snowball-Norwegian/description
#. leap/perl-Snowball-Norwegian/summary
#. leap/perl-Snowball-Norwegian/description
msgid "Porters stemming algorithm for norwegian."
msgstr ""

#. tumbleweed/perl-Snowball-Swedish/summary
#. tumbleweed/perl-Snowball-Swedish/description
#. leap/perl-Snowball-Swedish/summary
#. leap/perl-Snowball-Swedish/description
msgid "Porters stemming algorithm for swedish."
msgstr ""

#. tumbleweed/perl-Software-License/summary
#. leap/perl-Software-License/summary
msgid "Packages That Provide Templated Software Licenses"
msgstr ""

#. tumbleweed/perl-Software-License/description
#. leap/perl-Software-License/description
msgid "packages that provide templated software licenses"
msgstr ""

#. tumbleweed/perl-Sort-Naturally/summary
#. leap/perl-Sort-Naturally/summary
msgid "sort lexically, but sort numeral parts numerically"
msgstr ""

#. tumbleweed/perl-Sort-Naturally/description
#. leap/perl-Sort-Naturally/description
msgid ""
"This module exports two functions, 'nsort' and 'ncmp'; they are used in "
"implementing my idea of a \"natural sorting\" algorithm. Under natural "
"sorting, numeric substrings are compared numerically, and other word-"
"characters are compared lexically.\n"
"\n"
"This is the way I define natural sorting:\n"
"\n"
"* *\n"
"\n"
"  Non-numeric word-character substrings are sorted lexically,   case-"
"insensitively: \"Foo\" comes between \"fish\" and \"fowl\".\n"
"\n"
"* *\n"
"\n"
"  Numeric substrings are sorted numerically: \"100\" comes after \"20\", "
"not   before.\n"
"\n"
"* *\n"
"\n"
"  \\W substrings (neither words-characters nor digits) are _ignored_.\n"
"\n"
"* *\n"
"\n"
"  Our use of \\w, \\d, \\D, and \\W is locale-sensitive: Sort::Naturally "
"uses a   'use locale' statement.\n"
"\n"
"* *\n"
"\n"
"  When comparing two strings, where a numeric substring in one place is   "
"_not_ up against a numeric substring in another, the non-numeric always   "
"comes first. This is fudged by reading pretending that the lack of a   "
"number substring has the value -1, like so:\n"
"\n"
"    foo       =>  \"foo\",  -1     foobar    =>  \"foo\",  -1,  \"bar\"     "
"foo13     =>  \"foo\",  13,     foo13xyz  =>  \"foo\",  13,  \"xyz\"\n"
"\n"
"  That's so that \"foo\" will come before \"foo13\", which will come "
"before   \"foobar\".\n"
"\n"
"* *\n"
"\n"
"  The start of a string is exceptional: leading non-\\W (non-word,   non-"
"digit) components are are ignored, and numbers come _before_ letters.\n"
"\n"
"* *\n"
"\n"
"  I define \"numeric substring\" just as sequences matching m/\\d+/ --   "
"scientific notation, commas, decimals, etc., are not seen. If your data   "
"has thousands separators in numbers (\"20,000 Leagues Under The Sea\" or   "
"\"20.000 lieues sous les mers\"), consider stripping them before feeding   "
"them to 'nsort' or 'ncmp'."
msgstr ""

#. tumbleweed/perl-Sort-Versions/summary
#. leap/perl-Sort-Versions/summary
#, fuzzy
msgid "Perl 5 Module for Sorting of Revision-Like Numbers"
msgstr "端末パラメータを設定するための Perl モジュール"

#. tumbleweed/perl-Sort-Versions/description
#. leap/perl-Sort-Versions/description
msgid ""
"Sort::Versions allows easy sorting of mixed non-numeric and numeric strings, "
"like the 'version numbers' that many shared library systems and revision "
"control packages use. This is quite useful if you are trying to deal with "
"shared libraries. It can also be applied to applications that intersperse "
"variable-width numeric fields within text. Other applications can "
"undoubtedly be found.\n"
"\n"
"For an explanation of the algorithm, it's simplest to look at these "
"examples:\n"
"\n"
"  1.1   <  1.2   1.1a  <  1.2   1.1   <  1.1.1   1.1   <  1.1a   1.1.a <  "
"1.1a   1     <  a   a     <  b   1     <  2   1.1-3 <  1.1-4   1.1-5 <  "
"1.1.6\n"
"\n"
"More precisely (but less comprehensibly), the two strings are treated as "
"subunits delimited by periods or hyphens. Each subunit can contain any "
"number of groups of digits or non-digits. If digit groups are being compared "
"on both sides, a numeric comparison is used, otherwise a ASCII ordering is "
"used. A group or subgroup with more units will win if all comparisons are "
"equal. A period binds digit groups together more tightly than a hyphen.\n"
"\n"
"Some packages use a different style of version numbering: a simple real "
"number written as a decimal. Sort::Versions has limited support for this "
"style: when comparing two subunits which are both digit groups, if either "
"subunit has a leading zero, then both are treated like digits after a "
"decimal point. So for example:\n"
"\n"
"  0002  <  1   1.06  <  1.5\n"
"\n"
"This won39t always work, because there won39t always be a leading zero in "
"real-number style version numbers. There is no way for Sort::Versions to "
"know which style was intended. But a lot of the time it will do the right "
"thing. If you are making up version numbers, the style with (possibly) more "
"than one dot is the style to use."
msgstr ""

#. tumbleweed/perl-Spiffy/summary
#. leap/perl-Spiffy/summary
msgid "Spiffy Perl Interface Framework For You"
msgstr ""

#. tumbleweed/perl-Spiffy/description
#. leap/perl-Spiffy/description
msgid ""
"\"Spiffy\" is a framework and methodology for doing object oriented (OO) "
"programming in Perl. Spiffy combines the best parts of Exporter.pm, base.pm, "
"mixin.pm and SUPER.pm into one magic foundation class. It attempts to fix "
"all the nits and warts of traditional Perl OO, in a clean, straightforward "
"and (perhaps someday) standard way.\n"
"\n"
"Spiffy borrows ideas from other OO languages like Python, Ruby, Java and "
"Perl 6. It also adds a few tricks of its own.\n"
"\n"
"If you take a look on CPAN, there are a ton of OO related modules. When "
"starting a new project, you need to pick the set of modules that makes most "
"sense, and then you need to use those modules in each of your classes. "
"Spiffy, on the other hand, has everything you'll probably need in one "
"module, and you only need to use it once in one of your classes. If you make "
"Spiffy.pm the base class of the basest class in your project, Spiffy will "
"automatically pass all of its magic to all of your subclasses. You may "
"eventually forget that you're even using it!\n"
"\n"
"The most striking difference between Spiffy and other Perl object oriented "
"base classes, is that it has the ability to export things. If you create a "
"subclass of Spiffy, all the things that Spiffy exports will automatically be "
"exported by your subclass, in addition to any more things that you want to "
"export. And if someone creates a subclass of your subclass, all of those "
"things will be exported automatically, and so on. Think of it as \"Inherited "
"Exportation\", and it uses the familiar Exporter.pm specification syntax.\n"
"\n"
"To use Spiffy or any subclass of Spiffy as a base class of your class, you "
"specify the '-base' argument to the 'use' command.\n"
"\n"
"    use MySpiffyBaseModule -base;\n"
"\n"
"You can also use the traditional 'use base 'MySpiffyBaseModule';' syntax and "
"everything will work exactly the same. The only caveat is that Spiffy.pm "
"must already be loaded. That's because Spiffy rewires base.pm on the fly to "
"do all the Spiffy magics.\n"
"\n"
"Spiffy has support for Ruby-like mixins with Perl6-like roles. Just like "
"'base' you can use either of the following invocations:\n"
"\n"
"    use mixin 'MySpiffyBaseModule';     use MySpiffyBaseModule -mixin;\n"
"\n"
"The second version will only work if the class being mixed in is a subclass "
"of Spiffy. The first version will work in all cases, as long as Spiffy has "
"already been loaded.\n"
"\n"
"To limit the methods that get mixed in, use roles. (Hint: they work just "
"like an Exporter list):\n"
"\n"
"    use MySpiffyBaseModule -mixin => qw(:basics x y !foo);\n"
"\n"
"In object oriented Perl almost every subroutine is a method. Each method "
"gets the object passed to it as its first argument. That means practically "
"every subroutine starts with the line:\n"
"\n"
"    my $self = shift;\n"
"\n"
"Spiffy provides a simple, optional filter mechanism to insert that line for "
"you, resulting in cleaner code. If you figure an average method has 10 lines "
"of code, that's 10% of your code! To turn this option on, you just use the "
"'- Base' option instead of the '-base' option, or add the '-selfless' "
"option. If source filtering makes you queazy, don't use the feature. I "
"personally find it addictive in my quest for writing squeaky clean, "
"maintainable code.\n"
"\n"
"A useful feature of Spiffy is that it exports two functions: 'field' and "
"'const' that can be used to declare the attributes of your class, and "
"automatically generate accessor methods for them. The only difference "
"between the two functions is that 'const' attributes can not be modified; "
"thus the accessor is much faster.\n"
"\n"
"One interesting aspect of OO programming is when a method calls the same "
"method from a parent class. This is generally known as calling a super "
"method. Perl's facility for doing this is butt ugly:\n"
"\n"
"    sub cleanup {         my $self = shift;         $self->scrub;         "
"$self->SUPER::cleanup(@_);     }\n"
"\n"
"Spiffy makes it, er, super easy to call super methods. You just use the "
"'super' function. You don't need to pass it any arguments because it "
"automatically passes them on for you. Here's the same function with Spiffy:\n"
"\n"
"    sub cleanup {         $self->scrub;         super;     }\n"
"\n"
"Spiffy has a special method for parsing arguments called 'parse_arguments', "
"that it also uses for parsing its own arguments. You declare which arguments "
"are boolean (singletons) and which ones are paired, with two special methods "
"called 'boolean_arguments' and 'paired_arguments'. Parse arguments pulls out "
"the booleans and pairs and returns them in an anonymous hash, followed by a "
"list of the unmatched arguments.\n"
"\n"
"Finally, Spiffy can export a few debugging functions 'WWW', 'XXX', 'YYY' and "
"'ZZZ'. Each of them produces a YAML dump of its arguments. WWW warns the "
"output, XXX dies with the output, YYY prints the output, and ZZZ confesses "
"the output. If YAML doesn't suit your needs, you can switch all the dumps to "
"Data::Dumper format with the '-dumper' option.\n"
"\n"
"That's Spiffy!"
msgstr ""

#. tumbleweed/perl-Spreadsheet-ParseExcel/summary
#. leap/perl-Spreadsheet-ParseExcel/summary
msgid "Read information from an Excel file."
msgstr ""

#. tumbleweed/perl-Spreadsheet-ParseExcel/description
#. leap/perl-Spreadsheet-ParseExcel/description
msgid ""
"The Spreadsheet::ParseExcel module can be used to read information from "
"Excel 95-2003 binary files.\n"
"\n"
"The module cannot read files in the Excel 2007 Open XML XLSX format. See the "
"the Spreadsheet::XLSX manpage module instead."
msgstr ""

#. tumbleweed/perl-Spreadsheet-Read/summary
#. leap/perl-Spreadsheet-Read/summary
msgid "Read the data from a spreadsheet"
msgstr ""

#. tumbleweed/perl-Spreadsheet-Read/description
#. leap/perl-Spreadsheet-Read/description
msgid ""
"Spreadsheet::Read tries to transparently read *any* spreadsheet and return "
"its content in a universal manner independent of the parsing module that "
"does the actual spreadsheet scanning.\n"
"\n"
"For OpenOffice this module uses Spreadsheet::ReadSXC\n"
"\n"
"For Microsoft Excel this module uses Spreadsheet::ParseExcel or Spreadsheet::"
"XLSX\n"
"\n"
"For CSV this module uses Text::CSV_XS (0.29 or up required, 0.73 or up "
"preferred) or Text::CSV_PP (1.05 or up required).\n"
"\n"
"For SquirrelCalc there is a very simplistic built-in parser"
msgstr ""

#. tumbleweed/perl-Spreadsheet-ReadSXC/summary
#. leap/perl-Spreadsheet-ReadSXC/summary
msgid "Extract OpenOffice 1.x spreadsheet data"
msgstr ""

#. tumbleweed/perl-Spreadsheet-ReadSXC/description
#. leap/perl-Spreadsheet-ReadSXC/description
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (."
"sxc). It exports the function read_sxc() which takes a filename and an "
"optional reference to a hash of options as arguments and returns a reference "
"to a hash of references to two-dimensional arrays. The hash keys correspond "
"to the names of worksheets in the OpenOffice workbook. The two-dimensional "
"arrays correspond to rows and cells in the respective spreadsheets. If you "
"don't like this because the order of sheets is not preserved in a hash, read "
"on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function "
"read_xml_file() instead and pass the path to content.xml as an argument. Or "
"you can extract the XML string from content.xml and pass the string to the "
"function read_xml_string(). Both functions also take a reference to a hash "
"of options as an optional second argument."
msgstr ""

#. tumbleweed/perl-Spreadsheet-XLSX/summary
#. leap/perl-Spreadsheet-XLSX/summary
#, fuzzy
msgid "Perl extension for reading MS Excel 2007 files;"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-Spreadsheet-XLSX/description
#. leap/perl-Spreadsheet-XLSX/description
msgid ""
"This module is a (quick and dirty) emulation of Spreadsheet::ParseExcel for "
"Excel 2007 (.xlsx) file format. It supports styles and many of Excel's "
"quirks, but not all. It populates the classes from Spreadsheet::ParseExcel "
"for interoperability; including Workbook, Worksheet, and Cell."
msgstr ""

#. tumbleweed/perl-Starman/summary
#. leap/perl-Starman/summary
msgid "High-performance preforking PSGI/Plack web server"
msgstr ""

#. tumbleweed/perl-Starman/description
#. leap/perl-Starman/description
msgid ""
"Starman is a PSGI perl web server that has unique features such as:\n"
"\n"
"* High Performance\n"
"\n"
"  Uses the fast XS/C HTTP header parser\n"
"\n"
"* Preforking\n"
"\n"
"  Spawns workers preforked like most high performance UNIX servers do.   "
"Starman also reaps dead children and automatically restarts the worker   "
"pool.\n"
"\n"
"* Signals\n"
"\n"
"  Supports 'HUP' for graceful worker restarts, and 'TTIN'/'TTOU' to   "
"dynamically increase or decrease the number of worker processes, as well   "
"as 'QUIT' to gracefully shutdown the worker processes.\n"
"\n"
"* Superdaemon aware\n"
"\n"
"  Supports the Server::Starter manpage for hot deploy and graceful   "
"restarts.\n"
"\n"
"* Multiple interfaces and UNIX Domain Socket support\n"
"\n"
"  Able to listen on multiple interfaces including UNIX sockets.\n"
"\n"
"* Small memory footprint\n"
"\n"
"  Preloading the applications with '--preload-app' command line option   "
"enables copy-on-write friendly memory management. Also, the minimum   memory "
"usage Starman requires for the master process is 7MB and children   "
"(workers) is less than 3.0MB.\n"
"\n"
"* PSGI compatible\n"
"\n"
"  Can run any PSGI applications and frameworks\n"
"\n"
"* HTTP/1.1 support\n"
"\n"
"  Supports chunked requests and responses, keep-alive and pipeline   "
"requests.\n"
"\n"
"* UNIX only\n"
"\n"
"  This server does not support Win32."
msgstr ""

#. tumbleweed/perl-Statistics-Descriptive/summary
#. leap/perl-Statistics-Descriptive/summary
msgid "Module of basic descriptive statistical functions"
msgstr ""

#. tumbleweed/perl-Statistics-Descriptive/description
#. leap/perl-Statistics-Descriptive/description
msgid ""
"This module provides basic functions used in descriptive statistics. It has "
"an object oriented design and supports two different types of data storage "
"and calculation objects: sparse and full. With the sparse method, none of "
"the data is stored and only a few statistical measures are available. Using "
"the full method, the entire data set is retained and additional functions "
"are available.\n"
"\n"
"Whenever a division by zero may occur, the denominator is checked to be "
"greater than the value '$Statistics::Descriptive::Tolerance', which defaults "
"to 0.0. You may want to change this value to some small positive value such "
"as 1e-24 in order to obtain error messages in case of very small "
"denominators.\n"
"\n"
"Many of the methods (both Sparse and Full) cache values so that subsequent "
"calls with the same arguments are faster."
msgstr ""

#. tumbleweed/perl-Stream-Buffered/summary
#. leap/perl-Stream-Buffered/summary
msgid "temporary buffer to save bytes"
msgstr ""

#. tumbleweed/perl-Stream-Buffered/description
#. leap/perl-Stream-Buffered/description
msgid ""
"Stream::Buffered is a buffer class to store arbitrary length of byte strings "
"and then get a seekable filehandle once everything is buffered. It uses "
"PerlIO and/or temporary file to save the buffer depending on the length of "
"the size."
msgstr ""

#. tumbleweed/perl-String-CamelCase/summary
#. tumbleweed/perl-String-CamelCase/description
#. leap/perl-String-CamelCase/summary
#. leap/perl-String-CamelCase/description
msgid "camelcase, de-camelcase"
msgstr ""

#. tumbleweed/perl-String-Errf/summary
msgid "Simple Sprintf-Like Dialect"
msgstr ""

#. tumbleweed/perl-String-Errf/description
msgid ""
"String::Errf provides 'errf', a simple string formatter that works something "
"like 'sprintf'. It is implemented using String::Formatter and Sub::Exporter. "
"Their documentation may be useful in understanding or extending String::"
"Errf. The 'errf' subroutine is only available when imported. Calling String::"
"Errf::errf will not do what you want."
msgstr ""

#. tumbleweed/perl-String-Escape/summary
#. leap/perl-String-Escape/summary
msgid "Backslash escapes, quoted phrase, word elision, etc."
msgstr ""

#. tumbleweed/perl-String-Escape/description
#. leap/perl-String-Escape/description
msgid "sorry, no description found"
msgstr ""

#. tumbleweed/perl-String-Flogger/summary
#. tumbleweed/perl-String-Flogger/description
#. leap/perl-String-Flogger/summary
#. leap/perl-String-Flogger/description
#, fuzzy
msgid "string munging for loggers"
msgstr "mlterm 向け uim プラグイン"

#. tumbleweed/perl-String-Format/summary
#. leap/perl-String-Format/summary
msgid "Sprintf-like string formatting capabilities"
msgstr ""

#. tumbleweed/perl-String-Format/description
#. leap/perl-String-Format/description
msgid ""
"String::Format lets you define arbitrary printf-like format sequences to be "
"expanded. This module would be most useful in configuration files and "
"reporting tools, where the results of a query need to be formatted in a "
"particular way. It was inspired by mutt's index_format and related "
"directives (see <URL:http://www.mutt.org/doc/manual/manual-6."
"html#index_format>)."
msgstr ""

#. tumbleweed/perl-String-Formatter/summary
#. leap/perl-String-Formatter/summary
msgid "build sprintf-like functions of your own"
msgstr ""

#. tumbleweed/perl-String-Formatter/description
#. leap/perl-String-Formatter/description
msgid ""
"String::Formatter is a tool for building sprintf-like formatting routines. "
"It supports named or positional formatting, custom conversions, fixed string "
"interpolation, and simple width-matching out of the box. It is easy to alter "
"its behavior to write new kinds of format string expanders. For most cases, "
"it should be easy to build all sorts of formatters out of the options built "
"into String::Formatter.\n"
"\n"
"Normally, String::Formatter will be used to import a sprintf-like routine "
"referred to as \"'stringf'\", but which can be given any name you like. This "
"routine acts like sprintf in that it takes a string and some inputs and "
"returns a new string:\n"
"\n"
"  my $output = stringf \"Some %a format %s for you to %u.\\n\", { ... };\n"
"\n"
"This routine is actually a wrapper around a String::Formatter object created "
"by importing stringf. In the following code, the entire hashref after "
"\"stringf\" is passed to String::Formatter's constructor (the 'new' method), "
"save for the '-as' key and any other keys that start with a dash.\n"
"\n"
"  use String::Formatter     stringf => {       -as => 'fmt_time',       "
"codes           => { ... },       format_hunker   => ...,       "
"input_processor => ...,     },     stringf => {       -as => "
"'fmt_date',       codes           => { ... },       string_replacer "
"=> ...,       hunk_formatter  => ...,     },   ;\n"
"\n"
"As you can see, this will generate two stringf routines, with different "
"behaviors, which are installed with different names. Since the behavior of "
"these routines is based on the 'format' method of a String::Formatter "
"object, the rest of the documentation will describe the way the object "
"behaves.\n"
"\n"
"There's also a 'named_stringf' export, which behaves just like the 'stringf' "
"export, but defaults to the 'named_replace' and 'require_named_input' "
"arguments. There's a 'method_stringf' export, which defaults "
"'method_replace' and 'require_single_input'. Finally, a 'indexed_stringf', "
"which defaults to 'indexed_replaced' and 'require_arrayref_input'. For more "
"on these, keep reading, and check out the cookbook.\n"
"\n"
"the String::Formatter::Cookbook manpage provides a number of recipes for "
"ways to put String::Formatter to use."
msgstr ""

#. tumbleweed/perl-String-RewritePrefix/summary
#. tumbleweed/perl-String-RewritePrefix/description
#. leap/perl-String-RewritePrefix/summary
#. leap/perl-String-RewritePrefix/description
msgid "rewrite strings based on a set of known prefixes"
msgstr ""

#. tumbleweed/perl-String-ShellQuote/summary
#. leap/perl-String-ShellQuote/summary
msgid "Quote strings for passing through the shell"
msgstr ""

#. tumbleweed/perl-String-ShellQuote/description
#. leap/perl-String-ShellQuote/description
msgid ""
"This module contains some functions which are useful for quoting strings "
"which are going to pass through the shell or a shell-like object."
msgstr ""

#. tumbleweed/perl-String-ToIdentifier-EN/summary
#. leap/perl-String-ToIdentifier-EN/summary
msgid "Convert Strings to English Program Identifiers"
msgstr ""

#. tumbleweed/perl-String-ToIdentifier-EN/description
#. leap/perl-String-ToIdentifier-EN/description
msgid ""
"This module provides a utility method, the /to_identifier manpage for "
"converting an arbitrary string into a readable representation using the "
"ASCII subset of '\\w' for use as an identifier in a computer program. The "
"intent is to make unique identifier names from which the content of the "
"original string can be easily inferred by a human just by reading the "
"identifier.\n"
"\n"
"If you need the full set of '\\w' including Unicode, see the subclass the "
"String::ToIdentifier::EN::Unicode manpage.\n"
"\n"
"Currently, this process is one way only, and will likely remain this way.\n"
"\n"
"The default is to create camelCase identifiers, or you may pass in a "
"separator char of your choice such as '_'.\n"
"\n"
"Binary char groups will be separated by '_' even in camelCase identifiers to "
"make them easier to read, e.g.: 'foo_2_0xFF_Bar'."
msgstr ""

#. tumbleweed/perl-String-Truncate/summary
#. tumbleweed/perl-String-Truncate/description
#. leap/perl-String-Truncate/summary
#. leap/perl-String-Truncate/description
msgid "a module for when strings are too long to be displayed in..."
msgstr ""

#. tumbleweed/perl-Struct-Dumb/summary
#. leap/perl-Struct-Dumb/summary
msgid "Make Simple Lightweight Record-Like Structures"
msgstr ""

#. tumbleweed/perl-Struct-Dumb/description
#. leap/perl-Struct-Dumb/description
msgid ""
"'Struct::Dumb' creates record-like structure types, similar to the 'struct' "
"keyword in C, C++ or C#, or 'Record' in Pascal. An invocation of this module "
"will create a construction function which returns new object references with "
"the given field values. These references all respond to lvalue methods that "
"access or modify the values stored.\n"
"\n"
"It's specifically and intentionally not meant to be an object class. You "
"cannot subclass it. You cannot provide additional methods. You cannot apply "
"roles or mixins or metaclasses or traits or antlers or whatever else is in "
"fashion this week.\n"
"\n"
"On the other hand, it is tiny, creates cheap lightweight array-backed "
"structures, uses nothing outside of core. It's intended simply to be a "
"slightly nicer way to store data structures, where otherwise you might be "
"tempted to abuse a hash, complete with the risk of typoing key names. The "
"constructor will 'croak' if passed the wrong number of arguments, as will "
"attempts to refer to fields that don't exist. Accessor-mutators will 'croak' "
"if invoked with arguments. (This helps detect likely bugs such as "
"accidentally passing in the new value as an argument, or attempting to "
"invoke a stored 'CODE' reference by passing argument values directly to the "
"accessor.)\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(30)'  "
"usage: main::Point($x, $y) at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(10,20)->z'  "
"main::Point does not have a 'z' field at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(1,2)-"
">x(3)'  main::Point->x invoked with arguments at -e line 1.\n"
"\n"
"Objects in this class are (currently) backed by an ARRAY reference store, "
"though this is an internal implementation detail and should not be relied on "
"by using code. Attempting to dereference the object as an ARRAY will throw "
"an exception."
msgstr ""

#. tumbleweed/perl-Sub-Exporter/summary
#. leap/perl-Sub-Exporter/summary
msgid "a sophisticated exporter for custom-built routines"
msgstr "独自に構築したルーチン向けに洗練されたエクスポータ"

#. tumbleweed/perl-Sub-Exporter/description
#. leap/perl-Sub-Exporter/description
msgid ""
"*ACHTUNG!* If you're not familiar with Exporter or exporting, read the Sub::"
"Exporter::Tutorial manpage first!"
msgstr ""
"*注意!* Exporter や関数のエクスポートについて詳しくない場合は、まずSub::"
"Exporter::Tutorial のマニュアルページをお読みください。"

#. tumbleweed/perl-Sub-Exporter-ForMethods/summary
#. leap/perl-Sub-Exporter-ForMethods/summary
msgid "Helper Routines for Using Sub::Exporter to Build Methods"
msgstr ""

#. tumbleweed/perl-Sub-Exporter-ForMethods/description
#. leap/perl-Sub-Exporter-ForMethods/description
msgid ""
"The synopsis section, above, looks almost indistinguishable from any other "
"use of Sub::Exporter, apart from the use of 'method_installer'. It is nearly "
"indistinguishable in behavior, too. The only change is that subroutines "
"exported from Method::Builder into named slots in Vehicle::Autobot will be "
"wrapped in a subroutine called 'Vehicle::Autobot::transform'. This will "
"insert a named frame into stack traces to aid in debugging.\n"
"\n"
"More importantly (for the author, anyway), they will not be removed by "
"namespace::autoclean. This makes the following code work:\n"
"\n"
"  package MyLibrary;\n"
"\n"
"  use Math::Trig qw(tan);         # uses Exporter.pm   use String::Truncate "
"qw(trunc); # uses Sub::Exporter's defaults\n"
"\n"
"  use Sub::Exporter::ForMethods qw(method_installer);   use Mixin::Linewise "
"{ installer => method_installer }, qw(read_file);\n"
"\n"
"  use namespace::autoclean;\n"
"\n"
"  ...\n"
"\n"
"  1;\n"
"\n"
"After MyLibrary is compiled, 'namespace::autoclean' will remove 'tan' and "
"'trunc' as foreign contaminants, but will leave 'read_file' in place. It "
"will also remove 'method_installer', an added win."
msgstr ""

#. tumbleweed/perl-Sub-Exporter-GlobExporter/summary
#. leap/perl-Sub-Exporter-GlobExporter/summary
msgid "Export Shared Globs with Sub::Exporter Collectors"
msgstr ""

#. tumbleweed/perl-Sub-Exporter-GlobExporter/description
#. leap/perl-Sub-Exporter-GlobExporter/description
msgid ""
"Sub::Exporter::GlobExporter provides only one routine, 'glob_exporter', "
"which may be called either by its full name or may be imported on request.\n"
"\n"
"  my $exporter = glob_exporter( $default_name, $globref_locator );\n"
"\n"
"The routine returns a collection validator|Sub::Exporter/Collector "
"Configuration that will export a glob into the importing package. It will "
"export it under the name '$default_name', unless an alternate name is given "
"(as shown above). The glob that is installed is specified by the "
"'$globref_locator', which can be either the globref itself, or a reference "
"to a string which will be called on the exporter\n"
"\n"
"For an example, see the /SYNOPSIS, in which a method is defined to produce "
"the globref to share. This allows the glob-exporting package to be "
"subclassed, so the subclass may choose to either re-use the same glob when "
"exporting or to export a new one.\n"
"\n"
"If there are entries in the arguments to the globref-exporting collector "
"_other_ than those beginning with a dash, a hashref of them will be passed "
"to the globref locator. In other words, if we were to write this:\n"
"\n"
"  use Shared::Symbol '$Symbol' => { arg => 1, -as => 2 };\n"
"\n"
"It would result in a call like the following:\n"
"\n"
"  my $globref = Shared::Symbol->_shared_globref({ arg => 1 });"
msgstr ""

#. tumbleweed/perl-Sub-Exporter-Progressive/summary
#. leap/perl-Sub-Exporter-Progressive/summary
msgid "Only use Sub::Exporter if you need it"
msgstr "必要な時にだけ Sub::Exporter を使用する方法"

#. tumbleweed/perl-Sub-Exporter-Progressive/description
#, fuzzy
#| msgid ""
#| "the Sub::Exporter manpage is an incredibly powerful module, but with that "
#| "power comes great responsibility, er- as well as some runtime penalties. "
#| "This module is a 'Sub::Exporter' wrapper that will let your users just "
#| "use the Exporter manpage if all they are doing is picking exports, but "
#| "use 'Sub::Exporter' if your users try to use 'Sub::Exporter''s more "
#| "advanced features, like renaming exports, if they try to use them.\n"
#| "\n"
#| "Note that this module will export '@EXPORT', '@EXPORT_OK' and "
#| "'%EXPORT_TAGS' package variables for 'Exporter' to work. Additionally, if "
#| "your package uses advanced 'Sub::Exporter' features like currying, this "
#| "module will only ever use 'Sub::Exporter', so you might as well use it "
#| "directly."
msgid ""
"Sub::Exporter is an incredibly powerful module, but with that power comes "
"great responsibility, er- as well as some runtime penalties. This module is "
"a 'Sub::Exporter' wrapper that will let your users just use Exporter if all "
"they are doing is picking exports, but use 'Sub::Exporter' if your users try "
"to use 'Sub::Exporter''s more advanced features, like renaming exports, if "
"they try to use them.\n"
"\n"
"Note that this module will export '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' "
"package variables for 'Exporter' to work. Additionally, if your package uses "
"advanced 'Sub::Exporter' features like currying, this module will only ever "
"use 'Sub::Exporter', so you might as well use it directly."
msgstr ""
"Sub::Exporter は非常にパワフルなモジュールですが、このパワーには実行時の不利"
"など、大きな代償が伴います。このモジュールはたとえば、単に関数の公開のみを行"
"ないたいような場合で、 'Sub::Exporter' に用意された高度な機能 (たとえば公開関"
"数の名前変更など) を行ないたいような場合に役立つ、 'Sub::Exporter' に対する"
"ラッパーです。\n"
"\n"
"なお、このモジュールは '@EXPORT', '@EXPORT_OK', '%EXPORT_TAGS' の各パッケージ"
"を、 'Exporter' に対して公開して動作することに注意してください。また、お使い"
"のパッケージで 'Sub::Exporter' でカリーイングなど高度な機能を利用している場合"
"は、'Sub::Exporter' を直接利用したほうが適切です。"

#. tumbleweed/perl-Sub-Install/summary
#. leap/perl-Sub-Install/summary
msgid "Install subroutines into packages easily"
msgstr "簡易的なパッケージ内へのサブルーチンのインストール"

#. tumbleweed/perl-Sub-Install/description
#. leap/perl-Sub-Install/description
msgid ""
"This module makes it easy to install subroutines into packages without the "
"unsightly mess of 'no strict' or typeglobs lying about where just anyone can "
"see them."
msgstr ""
"このモジュールは、 'no strict' や typeglob のような比較的厄介な仕組みを使用せ"
"ずに、サブルーチンをインストールしやすくすることができるモジュールです。"

#. tumbleweed/perl-Sub-Override/summary
#. tumbleweed/perl-Sub-Override/description
#. leap/perl-Sub-Override/summary
#. leap/perl-Sub-Override/description
msgid "Perl extension for easily overriding subroutines"
msgstr "サブルーチンを簡単にオーバーライドできる Perl 拡張"

#. tumbleweed/perl-Sub-Spec/summary
#. tumbleweed/perl-Sub-Spec/description
#. leap/perl-Sub-Spec/summary
#. leap/perl-Sub-Spec/description
msgid "Subroutine metadata specification"
msgstr ""

#. tumbleweed/perl-Sub-Uplevel/summary
#. leap/perl-Sub-Uplevel/summary
msgid "Apparently run a function in a higher stack frame"
msgstr "高レベルなスタックフレーム内での関数実行"

#. tumbleweed/perl-Sub-Uplevel/description
#. leap/perl-Sub-Uplevel/description
msgid ""
"Like Tcl's uplevel() function, but not quite so dangerous. The idea is just "
"to fool caller(). All the really naughty bits of Tcl's uplevel() are avoided."
msgstr ""
"Tcl の uplevel() 関数に似た仕組みですが、それほど危険なものではありません。"

#. tumbleweed/perl-Switch/summary
msgid "A switch statement for Perl, do not use if you can use given/when"
msgstr ""

#. tumbleweed/perl-Switch/description
msgid ""
"The Switch.pm module implements a generalized case mechanism that covers "
"most (but not all) of the numerous possible combinations of switch and case "
"values described above.\n"
"\n"
"The module augments the standard Perl syntax with two new control "
"statements: 'switch' and 'case'. The 'switch' statement takes a single "
"scalar argument of any type, specified in parentheses. 'switch' stores this "
"value as the current switch value in a (localized) control variable. The "
"value is followed by a block which may contain one or more Perl statements "
"(including the 'case' statement described below). The block is "
"unconditionally executed once the switch value has been cached.\n"
"\n"
"A 'case' statement takes a single scalar argument (in mandatory parentheses "
"if it's a variable; otherwise the parens are optional) and selects the "
"appropriate type of matching between that argument and the current switch "
"value. The type of matching used is determined by the respective types of "
"the switch value and the 'case' argument, as specified in Table 1. If the "
"match is successful, the mandatory block associated with the 'case' "
"statement is executed.\n"
"\n"
"In most other respects, the 'case' statement is semantically identical to an "
"'if' statement. For example, it can be followed by an 'else' clause, and can "
"be used as a postfix statement qualifier.\n"
"\n"
"However, when a 'case' block has been executed control is automatically "
"transferred to the statement after the immediately enclosing 'switch' block, "
"rather than to the next statement within the block. In other words, the "
"success of any 'case' statement prevents other cases in the same scope from "
"executing. But see the \"Allowing fall-through\" manpage below.\n"
"\n"
"Together these two new statements provide a fully generalized case "
"mechanism:\n"
"\n"
"        use Switch;\n"
"\n"
"        \n"
"\n"
"        %special = ( woohoo => 1,  d'oh => 1 );\n"
"\n"
"        while (<>) { \t    chomp;             switch ($_) "
"{                 case (%special) { print \"homer\\n\"; }      # if "
"$special{$_}                 case /[a-z]/i   { print \"alpha\\n\"; }      # "
"if $_ =~ /a-z/i                 case [1..9]     { print \"small num\\n\"; }  "
"# if $_ in [1..9]                 case { $_[0] >= 10 } { print \"big num\\n"
"\"; } # if $_ >= 10                 print \"must be punctuation\\n\" case /"
"\\W/;  # if $_ ~= /\\W/ \t    }         }\n"
"\n"
"Note that 'switch'es can be nested within 'case' (or any other) blocks, and "
"a series of 'case' statements can try different types of matches -- hash "
"membership, pattern match, array intersection, simple equality, etc. -- "
"against the same switch value.\n"
"\n"
"The use of intersection tests against an array reference is particularly "
"useful for aggregating integral cases:\n"
"\n"
"        sub classify_digit         {                 switch ($_[0]) { case "
"0            { return 'zero' }                                  case "
"[2,4,6,8]    { return 'even' }                                  case "
"[1,3,5,7,9]  { return 'odd' }                                  case /[A-F]/"
"i     { return 'hex' }                                }         }"
msgstr ""

#. tumbleweed/perl-Symbol-Util/summary
#. leap/perl-Symbol-Util/summary
msgid "Additional utils for Perl symbols manipulation"
msgstr ""

#. tumbleweed/perl-Symbol-Util/description
#. leap/perl-Symbol-Util/description
msgid ""
"This module provides a set of additional functions useful for Perl symbols "
"manipulation.\n"
"\n"
"All Perl symbols from the same package are organized as a stash. Each symbol "
"(glob) contains one or more of following slots: 'SCALAR', 'ARRAY', 'HASH', "
"'CODE', 'IO', 'FORMAT'. These slots are also accessible as standard "
"variables or bare words.\n"
"\n"
"The Perl symbols table is directly accessible with typeglob prefix but it "
"can be difficult to read and problematic if strict mode is used. Also the "
"access to stash, glob and one of its slot have different syntax notation.\n"
"\n"
"'stash' and 'fetch_glob' functions gets stash or glob without need to use "
"'no strict 'refs''.\n"
"\n"
"'delete_glob' function allows to delete specific slot of symbol name without "
"deleting others.\n"
"\n"
"'delete_sub' removes the symbol from class API. This symbol won't be "
"available as an object method.\n"
"\n"
"'export_glob' function exports a glob to the target package.\n"
"\n"
"'export_package' works like the Exporter manpage module and allows to export "
"symbols from one package to other.\n"
"\n"
"'unexport_package' allows to delete previously exported symbols."
msgstr ""

#. tumbleweed/perl-Syntax-Keyword-Junction/summary
#. leap/perl-Syntax-Keyword-Junction/summary
msgid "Perl6 style Junction operators in Perl5"
msgstr ""

#. tumbleweed/perl-Sys-Hostname-Long/summary
#. leap/perl-Sys-Hostname-Long/summary
msgid "Try every conceivable way to get full hostname"
msgstr "完全なホスト名を取得するために各種の手段を試すモジュール"

#. tumbleweed/perl-Sys-Hostname-Long/description
#. leap/perl-Sys-Hostname-Long/description
msgid ""
"How to get the host full name in perl on multiple operating systems (mac, "
"windows, unix* etc)"
msgstr ""
"複数のオペレーティングシステム (Mac, Windows, Unix* など) の Perl 内で、完全"
"なホスト名を取得するためのモジュールです。"

#. tumbleweed/perl-Sys-SigAction/summary
#. leap/perl-Sys-SigAction/summary
#, fuzzy
msgid "Perl extension for Consistent Signal Handling"
msgstr "可搬性のあるデーモンを作成するための Perl 拡張"

#. tumbleweed/perl-Sys-SigAction/description
#. leap/perl-Sys-SigAction/description
msgid ""
"Prior to version 5.8.0 perl implemented 'unsafe' signal handling. The reason "
"it is consider unsafe, is that there is a risk that a signal will arrive, "
"and be handled while perl is changing internal data structures. This can "
"result in all kinds of subtle and not so subtle problems. For this reason it "
"has always been recommended that one do as little as possible in a signal "
"handler, and only variables that already exist be manipulated.\n"
"\n"
"Perl 5.8.0 and later versions implements 'safe' signal handling on platforms "
"which support the POSIX sigaction() function. This is accomplished by having "
"perl note that a signal has arrived, but deferring the execution of the "
"signal handler until such time as it is safe to do so. Unfortunately these "
"changes can break some existing scripts, if they depended on a system "
"routine being interrupted by the signal's arrival. The perl 5.8.0 "
"implementation was modified further in version 5.8.2.\n"
"\n"
"From the perl 5.8.2 *perlvar* man page:\n"
"\n"
"   The default delivery policy of signals changed in Perl 5.8.0    from "
"immediate (also known as \"unsafe\") to deferred, also    known as \"safe "
"signals\".\n"
"\n"
"The implementation of this changed the 'sa_flags' with which the signal "
"handler is installed by perl, and it causes some system routines (like "
"connect()) to return EINTR, instead of another error when the signal "
"arrives. The problem comes when the code that made the system call sees the "
"EINTR code and decides it's going to call it again before returning. Perl "
"doesn't do this but some libraries do, including for instance, the Oracle "
"OCI library.\n"
"\n"
"Thus the 'deferred signal' approach (as implemented by default in perl 5.8 "
"and later) results in some system calls being retried prior to the signal "
"handler being called by perl. This breaks timeout logic for DBD-Oracle which "
"works with earlier versions of perl. This can be particularly vexing, when, "
"for instance, the host on which a database resides is not available: 'DBI-"
">connect()' hangs for minutes before returning an error (and cannot even be "
"interrupted with control-C, even when the intended timeout is only seconds). "
"This is because SIGINT appears to be deferred as well."
msgstr ""

#. tumbleweed/perl-Sysadm-Install/summary
#. leap/perl-Sysadm-Install/summary
msgid "Typical installation tasks for system administrators"
msgstr ""

#. tumbleweed/perl-Sysadm-Install/description
#. leap/perl-Sysadm-Install/description
msgid ""
"Have you ever wished for your installation shell scripts to run "
"reproducibly, without much programming fuzz, and even with optional logging "
"enabled? Then give up shell programming, use Perl.\n"
"\n"
"'Sysadm::Install' executes shell-like commands performing typical "
"installation tasks: Copying files, extracting tarballs, calling 'make'. It "
"has a 'fail once and die' policy, meticulously checking the result of every "
"operation and calling 'die()' immediately if anything fails.\n"
"\n"
"'Sysadm::Install' also supports a _dry_run_ mode, in which it logs "
"everything, but suppresses any write actions. Dry run mode is enabled by "
"calling 'Sysadm::Install::dry_run(1)'. To switch back to normal, call "
"'Sysadm::Install::dry_run(0)'.\n"
"\n"
"As of version 0.17, 'Sysadm::Install' supports a _confirm_ mode, in which it "
"interactively asks the user before running any of its functions (just like "
"'rm -i'). _confirm_ mode is enabled by calling 'Sysadm::Install::"
"confirm(1)'. To switch back to normal, call 'Sysadm::Install::confirm(0)'.\n"
"\n"
"'Sysadm::Install' is fully Log4perl-enabled. To start logging, just "
"initialize 'Log::Log4perl'. 'Sysadm::Install' acts as a wrapper class, "
"meaning that file names and line numbers are reported from the calling "
"program's point of view."
msgstr ""

#. tumbleweed/perl-Task-Kensho-Async/summary
msgid "Glimpse at an Enlightened Perl: Async Programming"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Async/description
#. tumbleweed/perl-Task-Kensho-CLI/description
#. tumbleweed/perl-Task-Kensho-Config/description
#. tumbleweed/perl-Task-Kensho-Dates/description
#. tumbleweed/perl-Task-Kensho-Exceptions/description
#. tumbleweed/perl-Task-Kensho-ModuleDev/description
#. tumbleweed/perl-Task-Kensho-OOP/description
#. tumbleweed/perl-Task-Kensho-Scalability/description
#. tumbleweed/perl-Task-Kensho-Testing/description
#. tumbleweed/perl-Task-Kensho-XML/description
#. leap/perl-Task-Kensho-Exceptions/description
#. leap/perl-Task-Kensho-Scalability/description
msgid ""
"From http://en.wikipedia.org/wiki/Kensho:\n"
"\n"
"    Kenshō (見性) (C. Wu) is a Japanese term for enlightenment experiences "
"-     most commonly used within the confines of Zen Buddhism - literally     "
"meaning \"seeing one's nature\"[1] or \"true self.\"[2] It generally     "
"\"refers to the realization of nonduality of subject and object.\"[3]\n"
"\n"
"Task::Kensho is a list of recommended modules for Enlightened Perl "
"development. CPAN is wonderful, but there are too many wheels and you have "
"to pick and choose amongst the various competing technologies.\n"
"\n"
"The plan is for Task::Kensho to be a rough testing ground for ideas that go "
"into among other things the Enlightened Perl Organisation Extended Core (EPO-"
"EC).\n"
"\n"
"The modules that are bundled by Task::Kensho are broken down into several "
"categories and are still being considered. They are all taken from various "
"top 100 most used perl modules lists and from discussions with various "
"subject matter experts in the Perl Community. That said, this bundle does "
"_not_ follow the guidelines established for the EPO-EC for peer review via "
"industry advisers.\n"
"\n"
"Starting in 2011, Task::Kensho split its sub-groups of modules into "
"individually-installable tasks. Each Task::Kensho sub-task is listed at the "
"beginning of its section in this documentation.\n"
"\n"
"When installing Task::Kensho itself, you will be asked to install each sub-"
"task in turn, or you can install individual tasks separately. These "
"individual tasks will always install all their modules by default. This "
"facilitates the ease and simplicity the distribution aims to achieve."
msgstr ""

#. tumbleweed/perl-Task-Kensho-CLI/summary
msgid "Glimpse at an Enlightened Perl: Useful Command-line Tools"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Config/summary
msgid "Glimpse at an Enlightened Perl: Config Modules"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Dates/summary
msgid "Glimpse at an Enlightened Perl: Date Modules"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Exceptions/summary
#. leap/perl-Task-Kensho-Exceptions/summary
msgid "Glimpse at an Enlightened Perl: Exception Handling"
msgstr ""

#. tumbleweed/perl-Task-Kensho-ModuleDev/summary
msgid "Glimpse at an Enlightened Perl: Module Development"
msgstr ""

#. tumbleweed/perl-Task-Kensho-OOP/summary
msgid "Glimpse at an Enlightened Perl: Object Oriented Programming"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Scalability/summary
#. leap/perl-Task-Kensho-Scalability/summary
msgid "Glimpse at an Enlightened Perl: Scalability"
msgstr ""

#. tumbleweed/perl-Task-Kensho-Testing/summary
msgid "Glimpse at an Enlightened Perl: Testing"
msgstr ""

#. tumbleweed/perl-Task-Kensho-XML/summary
msgid "Glimpse at an Enlightened Perl: XML Development"
msgstr ""

#. tumbleweed/perl-Task-Moose/summary
msgid "Moose in a box"
msgstr ""

#. tumbleweed/perl-Task-Moose/description
msgid ""
"This Task installs Moose and then optionally installs a number of Moose "
"extensions listed below. This list is meant to be comprehensive, so if I "
"missed something please let me know."
msgstr ""

#. tumbleweed/perl-Term-Encoding/summary
#. leap/perl-Term-Encoding/summary
msgid "Detect encoding of the current terminal"
msgstr ""

#. tumbleweed/perl-Term-Encoding/description
#. leap/perl-Term-Encoding/description
msgid ""
"Term::Encoding is a simple module to detect an encoding the current terminal "
"expects, in various ways."
msgstr ""

#. tumbleweed/perl-Term-ProgressBar/summary
#. leap/perl-Term-ProgressBar/summary
msgid "provide a progress meter on a standard terminal"
msgstr ""

#. tumbleweed/perl-Term-ProgressBar/description
#. leap/perl-Term-ProgressBar/description
msgid ""
"Term::ProgressBar provides a simple progress bar on the terminal, to let the "
"user know that something is happening, roughly how much stuff has been done, "
"and maybe an estimate at how long remains.\n"
"\n"
"A typical use sets up the progress bar with a number of items to do, and "
"then calls \"update\" to update the bar whenever an item is processed.\n"
"\n"
"Often, this would involve updating the progress bar many times with no user-"
"visible change. To avoid unnecessary work, the update method returns a "
"value, being the update value at which the user will next see a change. By "
"only calling update when the current value exceeds the next update value, "
"the call overhead is reduced.\n"
"\n"
"Remember to call the '$progress->update($max_value)' when the job is done to "
"get a nice 100% done bar.\n"
"\n"
"A progress bar by default is simple; it just goes from left-to-right, "
"filling the bar with '=' characters. These are called *major* characters. "
"For long-running jobs, this may be too slow, so two additional features are "
"available: a linear completion time estimator, and/or a *minor* character: "
"this is a character that _moves_ from left-to-right on the progress bar (it "
"does not fill it as the major character does), traversing once for each "
"major-character added. This exponentially increases the granularity of the "
"bar for the same width."
msgstr ""

#. tumbleweed/perl-Term-UI/summary
#. leap/perl-Term-UI/summary
msgid "Term::ReadLine UI made easy"
msgstr ""

#. tumbleweed/perl-Term-UI/description
#. leap/perl-Term-UI/description
msgid ""
"'Term::UI' is a transparent way of eliminating the overhead of having to "
"format a question and then validate the reply, informing the user if the "
"answer was not proper and re-issuing the question.\n"
"\n"
"Simply give it the question you want to ask, optionally with choices the "
"user can pick from and a default and 'Term::UI' will DWYM.\n"
"\n"
"For asking a yes or no question, there's even a shortcut."
msgstr ""

#. tumbleweed/perl-Test-Assert/summary
#. leap/perl-Test-Assert/summary
msgid "Assertion methods for those who like JUnit."
msgstr ""

#. tumbleweed/perl-Test-Assert/description
#. leap/perl-Test-Assert/description
msgid ""
"This class provides a set of assertion methods useful for writing tests. The "
"API is based on JUnit4 and the Test::Unit::Lite manpage and the methods die "
"on failure.\n"
"\n"
"These assertion methods might be not useful for common the Test::Builder "
"manpage-based (the Test::Simple manpage, the Test::More manpage, etc.) test "
"units.\n"
"\n"
"The assertion methods can be used in class which is derived from 'Test::"
"Assert' or used as standard Perl functions after importing them into user's "
"namespace.\n"
"\n"
"'Test::Assert' can also wrap standard the Test::Simple manpage, the Test::"
"More manpage or other the Test::Builder manpage-based tests.\n"
"\n"
"The assertions can be also used for run-time checking."
msgstr ""

#. tumbleweed/perl-Test-Base/summary
#. leap/perl-Test-Base/summary
#, fuzzy
msgid "A Data Driven Testing Framework"
msgstr "NUnit テストフレームワーク"

#. tumbleweed/perl-Test-Base/description
#. leap/perl-Test-Base/description
msgid ""
"Testing is usually the ugly part of Perl module authoring. Perl gives you a "
"standard way to run tests with Test::Harness, and basic testing primitives "
"with Test::More. After that you are pretty much on your own to develop a "
"testing framework and philosophy. Test::More encourages you to make your own "
"framework by subclassing Test::Builder, but that is not trivial.\n"
"\n"
"Test::Base gives you a way to write your own test framework base class that "
"_is_ trivial. In fact it is as simple as two lines:\n"
"\n"
"    package MyTestFramework;     use Test::Base -Base;\n"
"\n"
"A module called 'MyTestFramework.pm' containing those two lines, will give "
"all the power of Test::More and all the power of Test::Base to every test "
"file that uses it. As you build up the capabilities of 'MyTestFramework', "
"your tests will have all of that power as well.\n"
"\n"
"'MyTestFramework' becomes a place for you to put all of your reusable "
"testing bits. As you write tests, you will see patterns and duplication, and "
"you can \"upstream\" them into 'MyTestFramework'. Of course, you don't have "
"to subclass Test::Base at all. You can use it directly in many applications, "
"including everywhere you would use Test::More.\n"
"\n"
"Test::Base concentrates on offering reusable data driven patterns, so that "
"you can write tests with a minimum of code. At the heart of all testing you "
"have inputs, processes and expected outputs. Test::Base provides some clean "
"ways for you to express your input and expected output data, so you can "
"spend your\n"
"\n"
"      time focusing on that rather than your code scaffolding."
msgstr ""

#. tumbleweed/perl-Test-CChecker/summary
#. leap/perl-Test-CChecker/summary
msgid ""
"Test-time utilities for checking C headers, libraries, or OS features (D[cut]"
msgstr ""

#. tumbleweed/perl-Test-CChecker/description
#. leap/perl-Test-CChecker/description
msgid ""
"*DEPRECATED*: The intention of this module was always to test Alien modules "
"(both Alien::Base based and non-Alien::Base based modules). It has a number "
"of shortcomings that I believe to be better addressed by Test::Alien, so "
"please consider using that for new projects, or even migrating existing "
"code.\n"
"\n"
"This module is a very thin convenience wrapper around ExtUtils::CChecker to "
"make it useful for use in a test context. It is intended for use with Alien "
"modules which need to verify that libraries work as intended with the "
"Compiler and flags used by Perl to build XS modules.\n"
"\n"
"By default this module is very quiet, hiding all output using Capture::Tiny "
"unless there is a failure, in which case you will see the commands, flags "
"and output used."
msgstr ""

#. tumbleweed/perl-Test-CPAN-Meta/summary
#. leap/perl-Test-CPAN-Meta/summary
msgid "Validate your CPAN META.yml files"
msgstr ""

#. tumbleweed/perl-Test-CPAN-Meta/description
#. leap/perl-Test-CPAN-Meta/description
msgid ""
"This distribution was written to ensure that a META.yml file, provided with "
"a standard distribution uploaded to CPAN, meets the specifications that are "
"slowly being introduced to module uploads, via the use of package makers and "
"installers such as the ExtUtils::MakeMaker manpage, the Module::Build "
"manpage and the Module::Install manpage.\n"
"\n"
"See the CPAN::Meta manpage for further details of the CPAN Meta "
"Specification."
msgstr ""

#. tumbleweed/perl-Test-CheckChanges/summary
#. leap/perl-Test-CheckChanges/summary
msgid "Check that the Changes file matches the distribution."
msgstr ""

#. tumbleweed/perl-Test-CheckChanges/description
#. leap/perl-Test-CheckChanges/description
msgid ""
"This module checks that you _Changes_ file has an entry for the current "
"version of the *Module* being tested.\n"
"\n"
"The version information for the distribution being tested is taken out of "
"the Build data, or if that is not found, out of the Makefile.\n"
"\n"
"It then attempts to open, in order, a file with the name _Changes_ or "
"_CHANGES_.\n"
"\n"
"The _Changes_ file is then parsed for version numbers. If one and only one "
"of the version numbers matches the test passes. Otherwise the test fails.\n"
"\n"
"A message with the current version is printed if the test passes, otherwise "
"dialog messages are printed to help explain the failure.\n"
"\n"
"The _examples_ directory contains examples of the different formats of "
"_Changes_ files that are recognized."
msgstr ""

#. tumbleweed/perl-Test-CheckDeps/summary
#. leap/perl-Test-CheckDeps/summary
msgid "Check for presence of dependencies"
msgstr ""

#. tumbleweed/perl-Test-CheckDeps/description
#. leap/perl-Test-CheckDeps/description
msgid ""
"This module adds a test that assures all dependencies have been installed "
"properly. If requested, it can bail out all testing on error."
msgstr ""

#. tumbleweed/perl-Test-Class/summary
#. leap/perl-Test-Class/summary
msgid "Easily create test classes in an xUnit/JUnit style"
msgstr ""

#. tumbleweed/perl-Test-Class/description
#. leap/perl-Test-Class/description
msgid ""
"Test::Class provides a simple way of creating classes and objects to test "
"your code in an xUnit style.\n"
"\n"
"Built using the Test::Builder manpage, it was designed to work with other "
"Test::Builder based modules (the Test::More manpage, the Test::Differences "
"manpage, the Test::Exception manpage, etc.).\n"
"\n"
"_Note:_ This module will make more sense, if you are already familiar with "
"the \"standard\" mechanisms for testing perl code. Those unfamiliar with the "
"Test::Harness manpage, the Test::Simple manpage, the Test::More manpage and "
"friends should go take a look at them now. the Test::Tutorial manpage is a "
"good starting point."
msgstr ""

#. tumbleweed/perl-Test-Class-Most/summary
#. leap/perl-Test-Class-Most/summary
msgid "Test Classes the easy way"
msgstr ""

#. tumbleweed/perl-Test-Class-Most/description
#. leap/perl-Test-Class-Most/description
msgid ""
"When people write test classes with the excellent 'Test::Class', you often "
"see the following at the top of the code:\n"
"\n"
"  package Some::Test::Class;\n"
"\n"
"  use strict;   use warnings;   use base 'My::Test::Class';   use Test::"
"More;   use Test::Exception;\n"
"\n"
"  \n"
"\n"
"That's a lot of boilerplate and I don't like boilerplate. So now you can do "
"this:\n"
"\n"
"  use Test::Class::Most parent => 'My::Test::Class';\n"
"\n"
"That automatically imports the strict manpage and the warnings manpage for "
"you. It also gives you all of the testing goodness from the Test::Most "
"manpage."
msgstr ""

#. tumbleweed/perl-Test-ClassAPI/summary
#. leap/perl-Test-ClassAPI/summary
msgid "Provides basic first-pass API testing for large class trees"
msgstr ""

#. tumbleweed/perl-Test-ClassAPI/description
#. leap/perl-Test-ClassAPI/description
msgid ""
"For many APIs with large numbers of classes, it can be very useful to be "
"able to do a quick once-over to make sure that classes, methods, and "
"inheritance is correct, before doing more comprehensive testing. This module "
"aims to provide such a capability."
msgstr ""

#. tumbleweed/perl-Test-CleanNamespaces/summary
#. leap/perl-Test-CleanNamespaces/summary
msgid "Check for uncleaned imports"
msgstr ""

#. tumbleweed/perl-Test-CleanNamespaces/description
#. leap/perl-Test-CleanNamespaces/description
msgid ""
"This module lets you check your module's namespaces for imported functions "
"you might have forgotten to remove with namespace::autoclean or namespace::"
"clean and are therefore available to be called as methods, which usually "
"isn't want you want."
msgstr ""

#. tumbleweed/perl-Test-Command/summary
#. leap/perl-Test-Command/summary
msgid "Test routines for external commands"
msgstr ""

#. tumbleweed/perl-Test-Command/description
#. leap/perl-Test-Command/description
msgid ""
"'Test::Command' intends to bridge the gap between the well tested functions "
"and objects you choose and their usage in your programs. By examining the "
"exit status, terminating signal, STDOUT and STDERR of your program you can "
"determine if it is behaving as expected.\n"
"\n"
"This includes testing the various combinations and permutations of options "
"and arguments as well as the interactions between the various functions and "
"objects that make up your program.\n"
"\n"
"The various test functions below can accept either a command string or an "
"array reference for the first argument. If the command is expressed as a "
"string it is passed to 'system' as is. If the command is expressed as an "
"array reference it is dereferenced and passed to 'system' as a list. See "
"''perldoc -f system'' for how these may differ.\n"
"\n"
"The final argument for the test functions, '$name', is optional. By default "
"the '$name' is a concatenation of the test function name, the command string "
"and the expected value. This construction is generally sufficient for "
"identifying a failing test, but you may always specify your own '$name' if "
"desired.\n"
"\n"
"Any of the test functions can be used as instance methods on a 'Test::"
"Command' object. This is done by dropping the initial '$cmd' argument and "
"instead using arrow notation.\n"
"\n"
"All of the following 'exit_is_num' calls are equivalent.\n"
"\n"
"   exit_is_num('true', 0);    exit_is_num('true', 0, 'exit_is_num: true, "
"0');    exit_is_num(['true'], 0);    exit_is_num(['true'], 0, 'exit_is_num: "
"true, 0');\n"
"\n"
"   my $cmd = Test::Command->new( cmd => 'true' );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');\n"
"\n"
"   $cmd = Test::Command->new( cmd => ['true'] );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');"
msgstr ""

#. tumbleweed/perl-Test-Compile/summary
#. leap/perl-Test-Compile/summary
msgid "Check whether Perl files compile correctly"
msgstr ""

#. tumbleweed/perl-Test-Compile/description
#. leap/perl-Test-Compile/description
msgid ""
"'Test::Compile' lets you check the whether your perl modules and scripts "
"compile properly, and report its results in standard 'Test::Simple' "
"fashion.\n"
"\n"
"The basic usage - as shown above, will locate your perl files and test that "
"they all compile.\n"
"\n"
"Module authors can (and probably should) include the following in a _t/00-"
"compile.t_ file and have 'Test::Compile' automatically find and check all "
"Perl files in a module distribution:\n"
"\n"
"         use strict;     use warnings;     use Test::Compile;     my $test = "
"Test::Compile->new();     $test->all_files_ok();     $test->done_testing();"
msgstr ""

#. tumbleweed/perl-Test-Deep/summary
#. leap/perl-Test-Deep/summary
msgid "Extremely flexible deep comparison"
msgstr ""

#. tumbleweed/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At it's simplest it compares two structures "
"by going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures\n"
"\n"
"Test::Deep has *_a lot_* of exports. See the /EXPORTS manpage below."
msgstr ""

#. tumbleweed/perl-Test-Differences/summary
#. leap/perl-Test-Differences/summary
msgid "Test strings and data structures and show differences if not ok"
msgstr ""

#. tumbleweed/perl-Test-Differences/description
msgid ""
"When the code you're testing returns multiple lines, records or data "
"structures and they're just plain wrong, an equivalent to the Unix 'diff' "
"utility may be just what's needed. Here's output from an example test script "
"that checks two text documents and then two (trivial) data structures:\n"
"\n"
" t/99example....1..3  not ok 1 - differences in text                  not ok "
"2 - differences in whitespace                  not ok 3                  \n"
"\n"
"eq_or_diff_...() compares two strings or (limited) data structures and "
"either emits an ok indication or a side-by-side diff. Test::Differences is "
"designed to be used with Test.pm and with Test::Simple, Test::More, and "
"other Test::Builder based testing modules. As the SYNOPSIS shows, another "
"testing module must be used as the basis for your test suite."
msgstr ""

#. tumbleweed/perl-Test-EOL/summary
#. leap/perl-Test-EOL/summary
msgid "Check the correct line endings in your project"
msgstr ""

#. tumbleweed/perl-Test-EOL/description
#. leap/perl-Test-EOL/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of windows line endings."
msgstr ""

#. tumbleweed/perl-Test-Exception/summary
#. leap/perl-Test-Exception/summary
msgid "Test exception-based code"
msgstr "例外ベースのコードのテスト"

#. tumbleweed/perl-Test-Exception/description
#. leap/perl-Test-Exception/description
msgid ""
"This module provides a few convenience methods for testing exception based "
"code. It is built with Test::Builder and plays happily with Test::More and "
"friends.\n"
"\n"
"If you are not already familiar with Test::More now would be the time to go "
"take a look.\n"
"\n"
"You can specify the test plan when you 'use Test::Exception' in the same way "
"as 'use Test::More'. See Test::More for details.\n"
"\n"
"NOTE: Test::Exception only checks for exceptions. It will ignore other "
"methods of stopping program execution - including exit(). If you have an "
"exit() in evalled code Test::Exception will not catch this with any of its "
"testing functions.\n"
"\n"
"NOTE: This module uses Sub::Uplevel and relies on overriding 'CORE::GLOBAL::"
"caller' to hide your test blocks from the call stack. If this use of global "
"overrides concerns you, the Test::Fatal module offers a more minimalist "
"alternative.\n"
"\n"
"* *throws_ok*\n"
"\n"
"Tests to see that a specific exception is thrown. throws_ok() has two "
"forms:\n"
"\n"
"  throws_ok BLOCK REGEX, TEST_DESCRIPTION   throws_ok BLOCK CLASS, "
"TEST_DESCRIPTION\n"
"\n"
"In the first form the test passes if the stringified exception matches the "
"give regular expression. For example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
"\n"
"If your perl does not support 'qr//' you can also pass a regex-like string, "
"for example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
"\n"
"The second form of throws_ok() test passes if the exception is of the same "
"class as the one supplied, or a subclass of that class. For example:\n"
"\n"
"    throws_ok { $foo->bar } \"Error::Simple\", 'simple error';\n"
"\n"
"Will only pass if the 'bar' method throws an Error::Simple exception, or a "
"subclass of an Error::Simple exception.\n"
"\n"
"You can get the same effect by passing an instance of the exception you want "
"to look for. The following is equivalent to the previous example:\n"
"\n"
"    my $SIMPLE = Error::Simple->new;     throws_ok { $foo->bar } $SIMPLE, "
"'simple error';\n"
"\n"
"Should a throws_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 3 - simple error               \n"
"\n"
"Like all other Test::Exception functions you can avoid prototypes by passing "
"a subroutine explicitly:\n"
"\n"
"    throws_ok( sub {$foo->bar}, \"Error::Simple\", 'simple error' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"A description of the exception being checked is used if no optional test "
"description is passed.\n"
"\n"
"NOTE: Remember when you 'die $string_without_a_trailing_newline' perl will "
"automatically add the current script line number, input line number and a "
"newline. This will form part of the string that throws_ok regular "
"expressions match against.\n"
"\n"
"* *dies_ok*\n"
"\n"
"Checks that a piece of code dies, rather than returning normally. For "
"example:\n"
"\n"
"    sub div {         my ( $a, $b ) = @_;         return $a / $b;     };\n"
"\n"
"    dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
"\n"
"         dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"Remember: This test will pass if the code dies for any reason. If you care "
"about the reason it might be more sensible to write a more specific test "
"using throws_ok().\n"
"\n"
"The test description is optional, but recommended.\n"
"\n"
"* *lives_ok*\n"
"\n"
"Checks that a piece of code doesn't die. This allows your test script to "
"continue, rather than aborting if you get an unexpected exception. For "
"example:\n"
"\n"
"    sub read_file {         my $file = shift;         local $/;         open "
"my $fh, '<', $file or die \"open failed ($!)\\n\";         $file = "
"<FILE>;         return $file;     };\n"
"\n"
"    my $file;     lives_ok { $file = read_file('test.txt') } 'file read';\n"
"\n"
"         lives_ok( sub { $file = read_file('test.txt') }, 'file read' );\n"
"\n"
"Should a lives_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 1 - file read          \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended.\n"
"\n"
"* *lives_and*\n"
"\n"
"Run a test that may throw an exception. For example, instead of doing:\n"
"\n"
"  my $file;   lives_ok { $file = read_file('answer.txt') } 'read_file "
"worked';   is $file, \"42\", 'answer was 42';\n"
"\n"
"You can use lives_and() like this:\n"
"\n"
"  lives_and { is read_file('answer.txt'), \"42\" } 'answer is 42';      "
"lives_and(sub {is read_file('answer.txt'), \"42\"}, 'answer is 42');\n"
"\n"
"Which is the same as doing\n"
"\n"
"  is read_file('answer.txt'), \"42\\n\", 'answer is 42';\n"
"\n"
"unless 'read_file('answer.txt')' dies, in which case you get the same kind "
"of error as lives_ok()\n"
"\n"
"  not ok 1 - answer is 42      \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended."
msgstr ""

#. tumbleweed/perl-Test-Exception-LessClever/summary
#. leap/perl-Test-Exception-LessClever/summary
#, fuzzy
msgid "Test::Exception simplified ***DEPRECATED***"
msgstr "例外ベースのコードに対するテスト"

#. tumbleweed/perl-Test-Exception-LessClever/description
#. leap/perl-Test-Exception-LessClever/description
msgid ""
"*** This is deprecated please do not use it ***\n"
"\n"
"An alternative to Test::Exception that is much simpler. This alternative "
"does not use fancy stack tricks to hide itself. The idea here is to keep it "
"simple. This also solves the Test::Exception bug where some dies will be "
"hidden when a DESTROY method calls eval. If a DESTROY method masks $@ a "
"warning will be generated as well."
msgstr ""

#. tumbleweed/perl-Test-FailWarnings/summary
#. leap/perl-Test-FailWarnings/summary
msgid "Add test failures if warnings are caught"
msgstr ""

#. tumbleweed/perl-Test-FailWarnings/description
#. leap/perl-Test-FailWarnings/description
msgid ""
"This module hooks '$SIG{__WARN__}' and converts warnings to the Test::More "
"manpage 'fail()' calls. It is designed to be used with 'done_testing', when "
"you don't need to know the test count in advance.\n"
"\n"
"Just as with the Test::NoWarnings manpage, this does not catch warnings if "
"other things localize '$SIG{__WARN__}', as this is designed to catch "
"_unhandled_ warnings."
msgstr ""

#. tumbleweed/perl-Test-Fatal/summary
#. leap/perl-Test-Fatal/summary
msgid "incredibly simple helpers for testing code with exceptions"
msgstr "例外付きのコードをテストするための非常にシンプルなヘルパー"

#. tumbleweed/perl-Test-Fatal/description
#. leap/perl-Test-Fatal/description
msgid ""
"Test::Fatal is an alternative to the popular the Test::Exception manpage. It "
"does much less, but should allow greater flexibility in testing exception-"
"throwing code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'."
msgstr ""
"Test::Fatal は有名な Text::Exception に対する代替モジュールです。Test::"
"Exception よりはとても少ない処理しか行ないませんが、例外をスローするコードを"
"テストする際には、コードの入力と同程度の手間で、非常に柔軟な仕組みを提供しま"
"す。\n"
"\n"
"既定では 1 つのルーチンのみが公開されています: 'exception'"

#. tumbleweed/perl-Test-File-ShareDir/summary
#. leap/perl-Test-File-ShareDir/summary
msgid "Create a Fake ShareDir for your modules for testing"
msgstr ""

#. tumbleweed/perl-Test-File-ShareDir/description
#. leap/perl-Test-File-ShareDir/description
msgid ""
"'Test::File::ShareDir' is some low level plumbing to enable a distribution "
"to perform tests while consuming its own 'share' directories in a manner "
"similar to how they will be once installed.\n"
"\n"
"This allows 'File::ShareDir' to see the _latest_ version of content instead "
"of simply whatever is installed on whichever target system you happen to be "
"testing on.\n"
"\n"
"*Note:* This module only has support for creating 'new' style share dirs and "
"are NOT compatible with old File::ShareDirs.\n"
"\n"
"For this reason, unless you have File::ShareDir 1.00 or later installed, "
"this module will not be usable by you."
msgstr ""

#. tumbleweed/perl-Test-HasVersion/summary
#. leap/perl-Test-HasVersion/summary
msgid "Check Perl modules have version numbers"
msgstr ""

#. tumbleweed/perl-Test-HasVersion/description
#. leap/perl-Test-HasVersion/description
msgid ""
"Do you wanna check that every one of your Perl modules in a distribution has "
"a version number? You wanna make sure you don't forget the brand new modules "
"you just added? Well, that's the module you have been looking for. Use it!\n"
"\n"
"Do you wanna check someone else's distribution to make sure the author have "
"not committed the sin of leaving Perl modules without a version that can be "
"used to tell if you have this or that feature? 'Test::HasVersion' is also "
"for you, nasty little fellow.\n"
"\n"
"There's a script _test_version_ which is installed with this distribution. "
"You may invoke it from within the root directory of a distribution you just "
"unpacked, and it will check every _.pm_ file in the directory and under _lib/"
"_ (if any).\n"
"\n"
"  $ test_version\n"
"\n"
"You may also provide directories and files as arguments.\n"
"\n"
"  $ test_version *.pm lib/ inc/   $ test_version .\n"
"\n"
"(Be warned that many Perl modules in a _t/_ directory do not receive "
"versions because they are not used outside the distribution.)\n"
"\n"
"Ok. That's not a very useful module by now. But it will be. Wait for the "
"upcoming releases."
msgstr ""

#. tumbleweed/perl-Test-Identity/summary
#. leap/perl-Test-Identity/summary
msgid "Assert the Referential Identity of a Reference"
msgstr ""

#. tumbleweed/perl-Test-Identity/description
#. leap/perl-Test-Identity/description
msgid ""
"This module provides a single testing function, 'identical'. It asserts that "
"a given reference is as expected; that is, it either refers to the same "
"object or is 'undef'. It is similar to 'Test::More::is' except that it uses "
"'refaddr', ensuring that it behaves correctly even if the references under "
"test are objects that overload stringification or numification.\n"
"\n"
"It also provides better diagnostics if the test fails:\n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], {}'  1..1  "
"not ok 1      \n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], []'  1..1  "
"not ok 1"
msgstr ""

#. tumbleweed/perl-Test-InDistDir/summary
#. leap/perl-Test-InDistDir/summary
#, fuzzy
msgid "test environment setup for development with IDE"
msgstr "wxGTK で開発を行なうのに必要な全てのもの"

#. tumbleweed/perl-Test-InDistDir/description
#. leap/perl-Test-InDistDir/description
msgid ""
"This module helps run test scripts in IDEs like Komodo.\n"
"\n"
"When running test scripts in an IDE i have to set up a project file defining "
"the dist dir to run tests in and a lib dir to load additional modules from. "
"Often I didn't feel like doing that, especially when i only wanted to do a "
"small patch to a dist. In those cases i added a BEGIN block to mangle the "
"environment for me.\n"
"\n"
"This module basically is that BEGIN block. It automatically moves up one "
"directory when it cannot see the test script in \"t/$scriptname\" and "
"includes 'lib' in @INC when there's no blib present. That way the test ends "
"up with almost the same environment it'd get from EUMM/prove/etc., even when "
"it's actually run inside the t/ directory.\n"
"\n"
"At the same time it will still function correctly when called by EUMM/prove/"
"etc., since it does not change the environment in those cases."
msgstr ""

#. tumbleweed/perl-Test-Inter/summary
#. leap/perl-Test-Inter/summary
msgid "Framework for More Readable Interactive Test Scripts"
msgstr ""

#. tumbleweed/perl-Test-Inter/description
#. leap/perl-Test-Inter/description
msgid ""
"This is another framework for writing test scripts. Some of the syntax is "
"loosely inspired by Test::More, and has most of it's functionality, but it "
"is not a drop-in replacement.\n"
"\n"
"Test::More (and other existing test frameworks) suffer from two weaknesses, "
"both of which have prevented me from ever using them:\n"
"\n"
"   None offer the ability to access specific tests in    a reasonably "
"interactive fashion\n"
"\n"
"   None offer the ability to write the tests in    whatever format would "
"make the tests the most    readable\n"
"\n"
"The way I write and use test scripts, existing Test::* modules are not "
"nearly as useful as they could be. Test scripts written using Test::More "
"work fine when running as part of the test suite, but debugging an "
"individual test requires extra steps, and the tests themselves are not as "
"readable as they should be."
msgstr ""

#. tumbleweed/perl-Test-JSON/summary
#. leap/perl-Test-JSON/summary
msgid "Test JSON data"
msgstr ""

#. tumbleweed/perl-Test-JSON/description
#. leap/perl-Test-JSON/description
msgid ""
"JavaScript Object Notation (JSON) is a lightweight data interchange format. "
"the Test::JSON manpage makes it easy to verify that you have built valid "
"JSON and that it matches your expected output.\n"
"\n"
"See the http://www.json.org/ manpage for more information."
msgstr ""

#. tumbleweed/perl-Test-LWP-UserAgent/summary
#. leap/perl-Test-LWP-UserAgent/summary
msgid "LWP::UserAgent suitable for simulating and testing network calls"
msgstr ""

#. tumbleweed/perl-Test-LWP-UserAgent/description
#. leap/perl-Test-LWP-UserAgent/description
msgid ""
"This module is a subclass of the LWP::UserAgent manpage which overrides a "
"few key low-level methods that are concerned with actually sending your "
"request over the network, allowing an interception of that request and "
"simulating a particular response. This greatly facilitates testing of client "
"networking code where the server follows a known protocol.\n"
"\n"
"The synopsis describes a typical case where you want to test how your "
"application reacts to various responses from the server. This module will "
"let you send back various responses depending on the request, without having "
"to set up a real server to test against. This can be invaluable when you "
"need to test edge cases or error conditions that are not normally returned "
"from the server.\n"
"\n"
"There are a lot of different ways you can set up the response mappings, and "
"hook into this module; see the documentation for the individual interface "
"methods.\n"
"\n"
"You can use a the PSGI manpage app to handle the requests - see _examples/"
"call_psgi.t_ in this dist, and also the /register_psgi manpage below.\n"
"\n"
"OR, you can route some or all requests through the network as normal, but "
"still gain the hooks provided by this class to test what was sent and "
"received:\n"
"\n"
"    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
"\n"
"or:\n"
"\n"
"    $useragent->map_network_response(qr/real.network.host/);\n"
"\n"
"    \n"
"\n"
"         is(         $useragent->last_useragent->timeout,         "
"180,         'timeout was overridden properly',     );     "
"is(         $useragent->last_http_request_sent->uri,         'uri my code "
"should have constructed',     );     is(         $useragent-"
">last_http_response_received->code,         '200',         'I should have "
"gotten an OK response',     );"
msgstr ""

#. tumbleweed/perl-Test-LongString/summary
#. leap/perl-Test-LongString/summary
msgid "tests strings for equality, with more helpful failures"
msgstr ""

#. tumbleweed/perl-Test-LongString/description
#. leap/perl-Test-LongString/description
msgid ""
"This module provides some drop-in replacements for the string comparison "
"functions of the Test::More manpage, but which are more suitable when you "
"test against long strings. If you've ever had to search for text in a multi-"
"line string like an HTML document, or find specific items in binary data, "
"this is the module for you."
msgstr ""

#. tumbleweed/perl-Test-Manifest/summary
#. leap/perl-Test-Manifest/summary
#, fuzzy
msgid "interact with a t/test_manifest file"
msgstr "t/test_manifest ファイルの処理"

#. tumbleweed/perl-Test-Manifest/description
#. leap/perl-Test-Manifest/description
#, fuzzy
msgid ""
"'Test::Harness' assumes that you want to run all of the _.t_ files in the _t/"
"_ directory in ASCII-betical order during 'make test' or './Build test' "
"unless you say otherwise. This leads to some interesting naming schemes for "
"test files to get them in the desired order. These interesting names ossify "
"when they get into source control, and get even more interesting as more "
"tests show up.\n"
"\n"
"'Test::Manifest' overrides the default test file order. Instead of running "
"all of the _t/*.t_ files in ASCII-betical order, it looks in the _t/"
"test_manifest_ file to find out which tests you want to run and the order in "
"which you want to run them. It constructs the right value for the build "
"system to do the right thing.\n"
"\n"
"In _t/test_manifest_, simply list the tests that you want to run. Their "
"order in the file is the order in which they run. You can comment lines with "
"a '#', just like in Perl, and 'Test::Manifest' will strip leading and "
"trailing whitespace from each line. It also checks that the specified file "
"is actually in the _t/_ directory. If the file does not exist, it does not "
"put its name in the list of test files to run and it will issue a warning.\n"
"\n"
"Optionally, you can add a number after the test name in test_manifest to "
"define sets of tests. See 'get_t_files' for more information."
msgstr ""
"Test::Harness は、特に指定しなければ、 make test 時に t/ ディレクトリ内にある"
"すべての .t ファイルをアルファベット順に実行することを前提にしています。これ"
"により、テストファイルに対する名前付け方法を調整することで、テスト順序を制御"
"できることになります。このような方式により、ソースコードが制御下にあっても名"
"前を固定することができ、テスト順序も固定できることになります。\n"
"\n"
"Test::Manifest は Makefile 内の test_via_harness を置き換えることで、既定の順"
"序を上書きすることができます。 t/*.t ファイルをアルファベット順に実行する代わ"
"りに t/test_manifest ファイルを参照し、テストの実行可否と順序を指定することが"
"できるようになります。 MakeMaker に対しては正しい値を指定することになり、すべ"
"てがうまく動作するようになります。"

#. tumbleweed/perl-Test-Memory-Cycle/summary
#. tumbleweed/perl-Test-Memory-Cycle/description
#. leap/perl-Test-Memory-Cycle/summary
#. leap/perl-Test-Memory-Cycle/description
msgid "Check for memory leaks and circular memory references"
msgstr ""

#. tumbleweed/perl-Test-Mock-LWP/summary
#. leap/perl-Test-Mock-LWP/summary
msgid "Easy mocking of LWP packages"
msgstr ""

#. tumbleweed/perl-Test-Mock-LWP/description
#. leap/perl-Test-Mock-LWP/description
msgid ""
"This package arises from duplicating the same code to mock LWP et al in "
"several different modules I've written. This version is very minimalist, but "
"works for my needs so far. I'm very open to new suggestions and improvements."
msgstr ""

#. tumbleweed/perl-Test-MockModule/summary
#. leap/perl-Test-MockModule/summary
msgid "Override subroutines in a module for unit testing"
msgstr ""

#. tumbleweed/perl-Test-MockModule/description
#. leap/perl-Test-MockModule/description
msgid ""
"'Test::MockModule' lets you temporarily redefine subroutines in other "
"packages for the purposes of unit testing.\n"
"\n"
"A 'Test::MockModule' object is set up to mock subroutines for a given "
"module. The object remembers the original subroutine so it can be easily "
"restored. This happens automatically when all MockModule objects for the "
"given module go out of scope, or when you 'unmock()' the subroutine."
msgstr ""

#. tumbleweed/perl-Test-MockObject/summary
#. leap/perl-Test-MockObject/summary
msgid "Perl extension for emulating troublesome interfaces"
msgstr ""

#. tumbleweed/perl-Test-MockObject/description
#. leap/perl-Test-MockObject/description
msgid ""
"It's a simple program that doesn't use any other modules, and those are easy "
"to test. More often, testing a program completely means faking up input to "
"another module, trying to coax the right output from something you're not "
"supposed to be testing anyway.\n"
"\n"
"Testing is a lot easier when you can control the entire environment. With "
"Test::MockObject, you can get a lot closer.\n"
"\n"
"Test::MockObject allows you to create objects that conform to particular "
"interfaces with very little code. You don't have to reimplement the "
"behavior, just the input and the output."
msgstr ""

#. tumbleweed/perl-Test-MockTime/summary
#. leap/perl-Test-MockTime/summary
msgid "Replaces actual time with simulated time"
msgstr ""

#. tumbleweed/perl-Test-MockTime/description
#. leap/perl-Test-MockTime/description
msgid ""
"This module was created to enable test suites to test code at specific "
"points in time. Specifically it overrides localtime, gmtime and time at "
"compile time and then relies on the user supplying a mock time via "
"set_relative_time, set_absolute_time or set_fixed_time to alter future calls "
"to gmtime,time or localtime."
msgstr ""

#. tumbleweed/perl-Test-Most/summary
#. leap/perl-Test-Most/summary
msgid "Most commonly needed test functions and features."
msgstr ""

#. tumbleweed/perl-Test-Most/description
#. leap/perl-Test-Most/description
msgid ""
"the Test::Most manpage exists to reduce boilerplate and to make your testing "
"life easier. We provide \"one stop shopping\" for most commonly used testing "
"modules. In fact, we often require the latest versions so that you get bug "
"fixes through the Test::Most manpage and don't have to keep upgrading these "
"modules separately.\n"
"\n"
"This module provides you with the most commonly used testing functions, "
"along with automatically turning on strict and warning and gives you a bit "
"more fine-grained control over your test suite.\n"
"\n"
"    use Test::Most tests => 4, 'die';\n"
"\n"
"    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as should "
"all passing tests';     eq_or_diff [3], [4], '... but failing tests should "
"die';     ok 4, '... will never get to here';\n"
"\n"
"As you can see, the 'eq_or_diff' test will fail. Because 'die' is in the "
"import list, the test program will halt at that point.\n"
"\n"
"If you do not want strict and warnings enabled, you must explicitly disable "
"them. Thus, you must be explicit about what you want and no longer need to "
"worry about accidentally forgetting them.\n"
"\n"
"    use Test::Most tests => 4;     no strict;     no warnings;"
msgstr ""

#. tumbleweed/perl-Test-Needs/summary
#. leap/perl-Test-Needs/summary
#, fuzzy
msgid "Skip tests when modules not available"
msgstr "UNIVERSAL::require - 変数からの require() モジュール"

#. tumbleweed/perl-Test-Needs/description
#. leap/perl-Test-Needs/description
msgid ""
"Skip test scripts if modules are not available. The requested modules will "
"be loaded, and optionally have their versions checked. If the module is "
"missing, the test script will be skipped. Modules that are found but fail to "
"compile will exit with an error rather than skip.\n"
"\n"
"If used in a subtest, the remainder of the subtest will be skipped.\n"
"\n"
"Skipping will work even if some tests have already been run, or if a plan "
"has been declared.\n"
"\n"
"Versions are checked via a '$module->VERSION($wanted_version)' call. "
"Versions must be provided in a format that will be accepted. No extra "
"processing is done on them.\n"
"\n"
"If 'perl' is used as a module, the version is checked against the running "
"perl version ($]). The version can be specified as a number, dotted-decimal "
"string, v-string, or version object.\n"
"\n"
"If the 'RELEASE_TESTING' environment variable is set, the tests will fail "
"rather than skip. Subtests will be aborted, but the test script will "
"continue running after that point."
msgstr ""

#. tumbleweed/perl-Test-NoTabs/summary
#. leap/perl-Test-NoTabs/summary
msgid "Check the presence of tabs in your project"
msgstr ""

#. tumbleweed/perl-Test-NoTabs/description
#. leap/perl-Test-NoTabs/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of tabs."
msgstr ""

#. tumbleweed/perl-Test-NoWarnings/summary
#. leap/perl-Test-NoWarnings/summary
msgid "Make sure you didn't emit any warnings while testing"
msgstr ""

#. tumbleweed/perl-Test-NoWarnings/description
#. leap/perl-Test-NoWarnings/description
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any "
"warnings to be captured and stored. It automatically adds an extra test that "
"will run when your script ends to check that there were no warnings. If "
"there were any warings, the test will give a \"not ok\" and diagnostics of "
"where, when and what the warning was, including a stack trace of what was "
"going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be "
"capturing and checking them with the Test::Warn manpage, that way the Test::"
"NoWarnings manpage will not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run "
"when any forked children exit."
msgstr ""

#. tumbleweed/perl-Test-Number-Delta/summary
#. leap/perl-Test-Number-Delta/summary
msgid "Compare the difference between numbers against a given tolerance"
msgstr ""

#. tumbleweed/perl-Test-Number-Delta/description
#. leap/perl-Test-Number-Delta/description
msgid ""
"At some point or another, most programmers find they need to compare "
"floating-point numbers for equality. The typical idiom is to test if the "
"absolute value of the difference of the numbers is within a desired "
"tolerance, usually called epsilon. This module provides such a function for "
"use with the Test::More manpage. Usage is similar to other test functions "
"described in the Test::More manpage. Semantically, the 'delta_within' "
"function replaces this kind of construct:\n"
"\n"
" ok ( abs($p - $q) < $epsilon, '$p is equal to $q' ) or      diag \"$p is "
"not equal to $q to within $epsilon\";\n"
"\n"
"While there's nothing wrong with that construct, it's painful to type it "
"repeatedly in a test script. This module does the same thing with a single "
"function call. The 'delta_ok' function is similar, but either uses a global "
"default value for epsilon or else calculates a 'relative' epsilon on the fly "
"so that epsilon is scaled automatically to the size of the arguments to "
"'delta_ok'. Both functions are exported automatically.\n"
"\n"
"Because checking floating-point equality is not always reliable, it is not "
"possible to check the 'equal to' boundary of 'less than or equal to "
"epsilon'. Therefore, Test::Number::Delta only compares if the absolute value "
"of the difference is *less than* epsilon (for equality tests) or\n"
"*greater than* epsilon (for inequality tests)."
msgstr ""

#. tumbleweed/perl-Test-Object/summary
#. leap/perl-Test-Object/summary
msgid "Thoroughly testing objects via registered handlers"
msgstr ""

#. tumbleweed/perl-Test-Object/description
#. leap/perl-Test-Object/description
msgid ""
"In situations where you have deep trees of classes, there is a common "
"situation in which you test a module 4 or 5 subclasses down, which should "
"follow the correct behaviour of not just the subclass, but of all the parent "
"classes.\n"
"\n"
"This should be done to ensure that the implementation of a subclass has not "
"somehow \"broken\" the object's behaviour in a more general sense.\n"
"\n"
"'Test::Object' is a testing package designed to allow you to easily test "
"what you believe is a valid object against the expected behaviour of *all* "
"of the classes in its inheritance tree in one single call.\n"
"\n"
"To do this, you \"register\" tests (in the form of CODE or function "
"references) with 'Test::Object', with each test associated with a particular "
"class.\n"
"\n"
"When you call 'object_ok' in your test script, 'Test::Object' will check the "
"object against all registered tests. For each class that your object "
"responds to '$object->isa($class)' for, the appropriate testing function "
"will be called.\n"
"\n"
"Doing it this way allows adapter objects and other things that respond to "
"'isa' differently that the default to still be tested against the classes "
"that it is advertising itself as correctly.\n"
"\n"
"This also means that more than one test might be \"counted\" for each call "
"to 'object_ok'. You should account for this correctly in your expected test "
"count."
msgstr ""

#. tumbleweed/perl-Test-Output/summary
#. leap/perl-Test-Output/summary
msgid "Utilities to test STDOUT and STDERR messages."
msgstr ""

#. tumbleweed/perl-Test-Output/description
#. leap/perl-Test-Output/description
msgid ""
"Test::Output provides a simple interface for testing output sent to STDOUT "
"or STDERR. A number of different utilities are included to try and be as "
"flexible as possible to the tester.\n"
"\n"
"Originally this module was designed not to have external requirements, "
"however, the features provided by the Sub::Exporter manpage over what the "
"Exporter manpage provides is just to great to pass up.\n"
"\n"
"Likewise, Capture::Tiny provides a much more robust capture mechanism "
"without than the original Test::Output::Tie."
msgstr ""

#. tumbleweed/perl-Test-Pod/summary
msgid "Check for Pod Errors in Files"
msgstr "ファイル内の POD エラーの確認"

#. tumbleweed/perl-Test-Pod/description
#. leap/perl-Test-Pod/description
msgid ""
"Check POD files for errors or warnings in a test file, using 'Pod::Simple' "
"to do the heavy lifting."
msgstr ""
"POD ファイルを読み込んで、テストファイル内のエラーや警告を確認します。この"
"際、 'Pod::Simple' を利用して重い処理を行ないます。"

#. tumbleweed/perl-Test-Pod-Coverage/summary
msgid "Check for pod coverage in your distribution."
msgstr "お使いの配布物での POD ファイルの網羅率確認"

#. tumbleweed/perl-Test-Pod-Coverage/description
msgid ""
"Test::Pod::Coverage is used to create a test for your distribution, to "
"ensure that all relevant files in your distribution are appropriately "
"documented in pod.\n"
"\n"
"Can also be called with the Pod::Coverage manpage parms.\n"
"\n"
"    use Test::Pod::Coverage tests=>1;     pod_coverage_ok(         \"Foo::Bar"
"\",         { also_private => [ qr/^[A-Z_]+$/ ], },         \"Foo::Bar, with "
"all-caps functions as privates\",     );\n"
"\n"
"The the Pod::Coverage manpage parms are also useful for subclasses that "
"don't re-document the parent class's methods. Here's an example from the "
"Mail::SRS manpage.\n"
"\n"
"    pod_coverage_ok( \"Mail::SRS\" ); # No exceptions\n"
"\n"
"         my $trustme = { trustme => [qr/^(new|parse|compile)$/] };     "
"pod_coverage_ok( \"Mail::SRS::DB\", $trustme );     pod_coverage_ok( \"Mail::"
"SRS::Guarded\", $trustme );     pod_coverage_ok( \"Mail::SRS::Reversable\", "
"$trustme );     pod_coverage_ok( \"Mail::SRS::Shortcut\", $trustme );\n"
"\n"
"Alternately, you could use the Pod::Coverage::CountParents manpage, which "
"always allows a subclass to reimplement its parents' methods without "
"redocumenting them. For example:\n"
"\n"
"    my $trustparents = { coverage_class => 'Pod::Coverage::"
"CountParents' };     pod_coverage_ok( \"IO::Handle::Frayed\", "
"$trustparents );\n"
"\n"
"(The 'coverage_class' parameter is not passed to the coverage class with "
"other parameters.)\n"
"\n"
"If you want POD coverage for your module, but don't want to make Test::Pod::"
"Coverage a prerequisite for installing, create the following as your _t/pod-"
"coverage.t_ file:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage\";     plan skip_all "
"=> \"Test::Pod::Coverage required for testing pod coverage\" if $@;\n"
"\n"
"    plan tests => 1;     pod_coverage_ok( \"Pod::Master::Html\");\n"
"\n"
"Finally, Module authors can include the following in a _t/pod-coverage.t_ "
"file and have 'Test::Pod::Coverage' automatically find and check all modules "
"in the module distribution:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage 1.00\";     plan "
"skip_all => \"Test::Pod::Coverage 1.00 required for testing POD coverage\" "
"if $@;     all_pod_coverage_ok();"
msgstr ""
"Test::Pod::Coverage は開発物に対して、 POD 内に適切にドキュメントが記述されて"
"いるかどうかのテストを作成する際に使用するモジュールです。\n"
"\n"
"Pod::Coverage のパラメータとともに呼び出すこともできます。\n"
"\n"
"    use Test::Pod::Coverage tests=>1;     pod_coverage_ok(         \"Foo::Bar"
"\",         { also_private => [ qr/^[A-Z_]+$/ ], },         \"Foo::Bar, with "
"all-caps functions as privates\",     );\n"
"\n"
"Pod::Coverage のパラメータはサブクラスの場合に便利な仕組みで、親クラスのメ"
"ソッドに対してドキュメントを作り直す必要がないようにすることができます。たと"
"えば下記は Mail::SRS における例です:\n"
"\n"
"    pod_coverage_ok( \"Mail::SRS\" ); # No exceptions\n"
"\n"
"         my $trustme = { trustme => [qr/^(new|parse|compile)$/] };     "
"pod_coverage_ok( \"Mail::SRS::DB\", $trustme );     pod_coverage_ok( \"Mail::"
"SRS::Guarded\", $trustme );     pod_coverage_ok( \"Mail::SRS::Reversable\", "
"$trustme );     pod_coverage_ok( \"Mail::SRS::Shortcut\", $trustme );\n"
"\n"
"なお、 Pod::Coverage::CountParents を利用することで、再度ドキュメントを作成す"
"ることなくサブクラス側で親のメソッドを再実装することもできます。たとえば下記"
"のようになります:\n"
"\n"
"    my $trustparents = { coverage_class => 'Pod::Coverage::"
"CountParents' };     pod_coverage_ok( \"IO::Handle::Frayed\", "
"$trustparents );\n"
"\n"
"('coverage_class' パラメータは、他のパラメータとは違い、 coverage クラスには"
"渡されません)\n"
"\n"
"お使いのモジュールに対して POD のカバレッジを知りたい場合で、インストール時"
"に Test::Pod::Coverage を必要とさせたくない場合は、下記のように your _t/pod-"
"coverage.t_ ファイルを作成してください:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage\";     plan skip_all "
"=> \"Test::Pod::Coverage required for testing pod coverage\" if $@;\n"
"\n"
"    plan tests => 1;     pod_coverage_ok( \"Pod::Master::Html\");\n"
"\n"
"最後に、モジュールの作者は _t/pod-coverage.t_ ファイルと 'Test::Pod::"
"Coverage' を含めることで、モジュールの配布物内ですべてのモジュールを検出およ"
"びチェックすることができます\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage 1.00\";     plan "
"skip_all => \"Test::Pod::Coverage 1.00 required for testing POD coverage\" "
"if $@;     all_pod_coverage_ok();"

#. tumbleweed/perl-Test-Refcount/summary
#. leap/perl-Test-Refcount/summary
msgid "Assert Reference Counts On Objects"
msgstr ""

#. tumbleweed/perl-Test-Refcount/description
#. leap/perl-Test-Refcount/description
msgid ""
"The Perl garbage collector uses simple reference counting during the normal "
"execution of a program. This means that cycles or unweakened references in "
"other parts of code can keep an object around for longer than intended. To "
"help avoid this problem, the reference count of a new object from its class "
"constructor ought to be 1. This way, the caller can know the object will be "
"properly DESTROYed when it drops all of its references to it.\n"
"\n"
"This module provides two test functions to help ensure this property holds "
"for an object class, so as to be polite to its callers.\n"
"\n"
"If the assertion fails; that is, if the actual reference count is different "
"to what was expected, either of the following two modules may be used to "
"assist the developer in finding where the references are."
msgstr ""

#. tumbleweed/perl-Test-Requires/summary
#. leap/perl-Test-Requires/summary
msgid "Checks to see if the module can be loaded"
msgstr ""

#. tumbleweed/perl-Test-Requires/description
#. leap/perl-Test-Requires/description
msgid ""
"Test::Requires checks to see if the module can be loaded.\n"
"\n"
"If this fails rather than failing tests this *skips all tests*.\n"
"\n"
"Test::Requires can also be used to require a minimum version of Perl:\n"
"\n"
"    use Test::Requires \"5.010\";  # quoting is necessary!!\n"
"\n"
"         use Test::Requires \"v5.10\";"
msgstr ""

#. tumbleweed/perl-Test-RequiresInternet/summary
#. leap/perl-Test-RequiresInternet/summary
msgid "Easily test network connectivity"
msgstr ""

#. tumbleweed/perl-Test-RequiresInternet/description
#. leap/perl-Test-RequiresInternet/description
msgid ""
"This module is intended to easily test network connectivity before "
"functional tests begin to non-local Internet resources. It does not require "
"any modules beyond those supplied in core Perl.\n"
"\n"
"If you do not specify a host/port pair, then the module defaults to using "
"'www.google.com' on port '80'.\n"
"\n"
"You may optionally specify the port by its name, as in 'http' or 'ldap'. If "
"you do this, the test module will attempt to look up the port number using "
"'getservbyname'.\n"
"\n"
"If you do specify a host and port, they must be specified in *pairs*. It is "
"a fatal error to omit one or the other.\n"
"\n"
"If the environment variable 'NO_NETWORK_TESTING' is set, then the tests will "
"be skipped without attempting any socket connections.\n"
"\n"
"If the sockets cannot connect to the specified hosts and ports, the "
"exception is caught, reported and the tests skipped."
msgstr ""

#. tumbleweed/perl-Test-Script/summary
#. leap/perl-Test-Script/summary
msgid "Basic cross-platform tests for scripts"
msgstr "スクリプト向けのプラットフォームに依存しない基礎テスト"

#. tumbleweed/perl-Test-Script/description
msgid ""
"The intent of this module is to provide a series of basic tests for 80% of "
"the testing you will need to do for scripts in the _script_ (or _bin_ as is "
"also commonly used) paths of your Perl distribution.\n"
"\n"
"Further, it aims to provide this functionality with perfect platform-"
"compatibility, and in a way that is as unobtrusive as possible.\n"
"\n"
"That is, if the program works on a platform, then *Test::Script* should "
"always work on that platform as well. Anything less than 100% is considered "
"unacceptable.\n"
"\n"
"In doing so, it is hoped that *Test::Script* can become a module that you "
"can safely make a dependency of all your modules, without risking that your "
"module won't on some platform because of the dependency.\n"
"\n"
"Where a clash exists between wanting more functionality and maintaining "
"platform safety, this module will err on the side of platform safety."
msgstr ""

#. tumbleweed/perl-Test-SharedFork/summary
#. leap/perl-Test-SharedFork/summary
msgid "Fork Test"
msgstr ""

#. tumbleweed/perl-Test-SharedFork/description
#. leap/perl-Test-SharedFork/description
msgid ""
"Test::SharedFork is utility module for Test::Builder.\n"
"\n"
"This module makes fork(2) safety in your test case.\n"
"\n"
"This module merges test count with parent process & child process."
msgstr ""

#. tumbleweed/perl-Test-Spec/summary
#. leap/perl-Test-Spec/summary
msgid "Write tests in a declarative specification style"
msgstr ""

#. tumbleweed/perl-Test-Spec/description
#. leap/perl-Test-Spec/description
msgid ""
"This is a declarative specification-style testing system for behavior-driven "
"development (BDD) in Perl. The tests (a.k.a. examples) are named with "
"strings instead of subroutine names, so your fingers will suffer less "
"fatigue from underscore-itis, with the side benefit that the test reports "
"are more legible.\n"
"\n"
"This module is inspired by and borrows heavily from RSpec (http://rspec.info/"
"documentation/), a BDD tool for the Ruby programming language."
msgstr ""

#. tumbleweed/perl-Test-Spelling/summary
#. leap/perl-Test-Spelling/summary
#, fuzzy
msgid "check for spelling errors in POD files"
msgstr "ファイル内の POD エラーの確認"

#. tumbleweed/perl-Test-Spelling/description
#. leap/perl-Test-Spelling/description
msgid ""
"'Test::Spelling' lets you check the spelling of a POD file, and report its "
"results in standard 'Test::More' fashion. This module requires a spellcheck "
"program such as _spell_, _aspell_, _ispell_, or _hunspell_.\n"
"\n"
"    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD file "
"spelling OK');\n"
"\n"
"Note that it is a bad idea to run spelling tests during an ordinary CPAN "
"distribution install, or in a package that will run in an uncontrolled "
"environment. There is no way of predicting whether the word list or "
"spellcheck program used will give the same results. You *can* include the "
"test in your distribution, but be sure to run it only for authors of the "
"module by guarding it in a 'skip_all unless -d 'inc/.author'' clause, or by "
"putting the test in your distribution's _xt/_ directory. Anyway, people "
"installing your module really do not need to run such tests, as it is "
"unlikely that the documentation will acquire typos while in transit. :-)\n"
"\n"
"You can add your own stop words, which are words that should be ignored by "
"the spell check, like so:\n"
"\n"
"    add_stopwords(qw(asdf thiswordiscorrect));\n"
"\n"
"Adding stop words in this fashion affects all files checked for the "
"remainder of the test script. See the Pod::Spell manpage (which this module "
"is built upon) for a variety of ways to add per-file stop words to each .pm "
"file.\n"
"\n"
"If you have a lot of stop words, it's useful to put them in your test file's "
"'DATA' section like so:\n"
"\n"
"    use Test::Spelling;     add_stopwords(<DATA>);     "
"all_pod_files_spelling_ok();\n"
"\n"
"    __END__     folksonomy     Jifty     Zakirov\n"
"\n"
"To maintain backwards compatibility, comment markers and some whitespace are "
"ignored. In the near future, the preprocessing we do on the arguments to the "
"add_stopwords manpage will be changed and documented properly."
msgstr ""

#. tumbleweed/perl-Test-Strict/summary
msgid "Check syntax, presence of use strict; and test coverage"
msgstr ""

#. tumbleweed/perl-Test-Strict/description
msgid ""
"The most basic test one can write is \"does it compile ?\". This module "
"tests if the code compiles and play nice with Test::Simple modules.\n"
"\n"
"Another good practice this module can test is to \"use strict;\" in all perl "
"files.\n"
"\n"
"By setting a minimum test coverage through 'all_cover_ok()', a code author "
"can ensure his code is tested above a preset level of _kwality_ throughout "
"the development cycle.\n"
"\n"
"Along with Test::Pod, this module can provide the first tests to setup for a "
"module author.\n"
"\n"
"This module should be able to run under the -T flag for perl >= 5.6. All "
"paths are untainted with the following pattern: 'qr|^([-+@\\w./:\\\\]+)$|' "
"controlled by '$Test::Strict::UNTAINT_PATTERN'."
msgstr ""

#. tumbleweed/perl-Test-SubCalls/summary
#. leap/perl-Test-SubCalls/summary
msgid "Track the number of times subs are called"
msgstr ""

#. tumbleweed/perl-Test-SubCalls/description
#. leap/perl-Test-SubCalls/description
msgid ""
"There are a number of different situations (like testing caching code) where "
"you want to want to do a number of tests, and then verify that some "
"underlying subroutine deep within the code was called a specific number of "
"times.\n"
"\n"
"This module provides a number of functions for doing testing in this way in "
"association with your normal the Test::More manpage (or similar) test "
"scripts."
msgstr ""

#. tumbleweed/perl-Test-Synopsis/summary
#. leap/perl-Test-Synopsis/summary
msgid "Test your SYNOPSIS code"
msgstr ""

#. tumbleweed/perl-Test-Synopsis/description
#. leap/perl-Test-Synopsis/description
msgid ""
"Test::Synopsis is an (author) test module to find .pm or .pod files under "
"your _lib_ directory and then make sure the example snippet code in your "
"_SYNOPSIS_ section passes the perl compile check.\n"
"\n"
"Note that this module only checks the perl syntax (by wrapping the code with "
"'sub') and doesn't actually run the code, *UNLESS* that code is a 'BEGIN {}' "
"block or a 'use' statement.\n"
"\n"
"Suppose you have the following POD in your module.\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Awesome::Template - My awesome template\n"
"\n"
"  =head1 SYNOPSIS\n"
"\n"
"    use Awesome::Template;\n"
"\n"
"    my $template = Awesome::Template->new;     $tempalte->render(\"template."
"at\");\n"
"\n"
"  =head1 DESCRIPTION\n"
"\n"
"An user of your module would try copy-paste this synopsis code and find that "
"this code doesn't compile because there's a typo in your variable name _"
"$tempalte_. Test::Synopsis will catch that error before you ship it."
msgstr ""

#. tumbleweed/perl-Test-TCP/summary
#. leap/perl-Test-TCP/summary
#, fuzzy
msgid "Testing Tcp Program"
msgstr "起動プログラムへの追加"

#. tumbleweed/perl-Test-TCP/description
#. leap/perl-Test-TCP/description
#, fuzzy
msgid "Test::TCP is a test utility to test TCP/IP-based server programs."
msgstr "/proc 向け ps ユーティリティ"

#. tumbleweed/perl-Test-TempDir-Tiny/summary
#. leap/perl-Test-TempDir-Tiny/summary
msgid "Temporary directories that stick around when tests fail"
msgstr ""

#. tumbleweed/perl-Test-TempDir-Tiny/description
#. leap/perl-Test-TempDir-Tiny/description
msgid ""
"This module works with Test::More to create temporary directories that stick "
"around if tests fail.\n"
"\n"
"It is loosely based on Test::TempDir, but with less complexity, greater "
"portability and zero non-core dependencies. (Capture::Tiny is recommended "
"for testing.)\n"
"\n"
"The tempdir and in_tempdir functions are exported by default.\n"
"\n"
"If the current directory is writable, the root for directories will be _./"
"tmp_. Otherwise, a File::Temp directory will be created wherever temporary "
"directories are stored for your system.\n"
"\n"
"Every _*.t_ file gets its own subdirectory under the root based on the test "
"filename, but with slashes and periods replaced with underscores. For "
"example, _t/foo.t_ would get a test-file-specific subdirectory _./tmp/"
"t_foo_t/_. Directories created by tempdir get put in that directory. This "
"makes it very easy to find files later if tests fail.\n"
"\n"
"The test-file-specific name is consistent from run-to-run. If an old "
"directory already exists, it will be removed.\n"
"\n"
"When the test file exits, if all tests passed, then the test-file-specific "
"directory is recursively removed.\n"
"\n"
"If a test failed and the root directory is _./tmp_, the test-file-specific "
"directory sticks around for inspection. (But if the root is a File::Temp "
"directory, it is always discarded).\n"
"\n"
"If nothing is left in _./tmp_ (i.e. no other test file failed), then _./tmp_ "
"is cleaned up as well (unless it's a symlink).\n"
"\n"
"This module attempts to avoid race conditions due to parallel testing. In "
"extreme cases, the test-file-specific subdirectory might be created as a "
"regular File::Temp directory rather than in _./tmp_. In such a case, a "
"warning will be issued."
msgstr ""

#. tumbleweed/perl-Test-Time/summary
#. leap/perl-Test-Time/summary
msgid "Overrides the time() and sleep() core functions for testing"
msgstr ""

#. tumbleweed/perl-Test-Time/description
#. leap/perl-Test-Time/description
msgid ""
"Test::Time can be used to test modules that deal with time. Once you 'use' "
"this module, all references to 'time' and 'sleep' will be internalized. You "
"can set custom time by passing time => number after the 'use' statement:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now is equal to 1     sleep 300;         # returns "
"immediately, displaying a note     my $then = time;   # $then equals to 301"
msgstr ""

#. tumbleweed/perl-Test-Trap/summary
#. leap/perl-Test-Trap/summary
msgid "Trap exit codes, exceptions, output, etc"
msgstr ""

#. tumbleweed/perl-Test-Trap/description
#. leap/perl-Test-Trap/description
msgid ""
"Primarily (but not exclusively) for use in test scripts: A block eval on "
"steroids, configurable and extensible, but by default trapping (Perl) "
"STDOUT, STDERR, warnings, exceptions, would-be exit codes, and return values "
"from boxed blocks of test code.\n"
"\n"
"The values collected by the latest trap can then be queried or tested "
"through a special trap object."
msgstr ""

#. tumbleweed/perl-Test-Unit/summary
#. leap/perl-Test-Unit/summary
#, fuzzy
msgid "The PerlUnit testing framework"
msgstr "NUnit テストフレームワーク"

#. tumbleweed/perl-Test-Unit/description
#. leap/perl-Test-Unit/description
msgid ""
"This framework is intended to support unit testing in an object-oriented "
"development paradigm (with support for inheritance of tests etc.) and is "
"derived from the JUnit testing framework for Java by Kent Beck and Erich "
"Gamma. To start learning how to use this framework, see the Test::Unit::"
"TestCase manpage and the Test::Unit::TestSuite manpage. (There will also "
"eventually be a tutorial in the Test::Unit::Tutorial manpage.\n"
"\n"
"However 'Test::Unit::Procedural' is the procedural style interface to a "
"sophisticated unit testing framework for Perl that . Test::Unit is intended "
"to provide a simpler interface to the framework that is more suitable for "
"use in a scripting style environment. Therefore, Test::Unit does not provide "
"much support for an object-oriented approach to unit testing."
msgstr ""

#. tumbleweed/perl-Test-Unit-Lite/summary
#. leap/perl-Test-Unit-Lite/summary
msgid "Unit testing without external dependencies"
msgstr ""

#. tumbleweed/perl-Test-Unit-Lite/description
#. leap/perl-Test-Unit-Lite/description
msgid ""
"This framework provides lighter version of the Test::Unit manpage framework. "
"It implements some of the the Test::Unit manpage classes and methods needed "
"to run test units. The the Test::Unit::Lite manpage tries to be compatible "
"with public API of the Test::Unit manpage. It doesn't implement all classes "
"and methods at 100% and only those necessary to run tests are available.\n"
"\n"
"The the Test::Unit::Lite manpage can be distributed as a part of package "
"distribution, so the package can be distributed without dependency on "
"modules outside standard Perl distribution. The the Test::Unit::Lite manpage "
"is provided as a single file."
msgstr ""

#. tumbleweed/perl-Test-UseAllModules/summary
#. leap/perl-Test-UseAllModules/summary
msgid "do use_ok() for all the MANIFESTed modules"
msgstr ""

#. tumbleweed/perl-Test-UseAllModules/description
#. leap/perl-Test-UseAllModules/description
msgid ""
"I'm sick of writing 00_load.t (or something like that) that'll do use_ok() "
"for every module I write. I'm sicker of updating 00_load.t when I add "
"another file to the distro. This module reads MANIFEST to find modules to be "
"tested and does use_ok() for each of them. Now all you have to do is update "
"MANIFEST. You don't have to modify the test any more (hopefully)."
msgstr ""

#. tumbleweed/perl-Test-WWW-Mechanize/summary
#. tumbleweed/perl-Test-WWW-Mechanize/description
#. leap/perl-Test-WWW-Mechanize/summary
#. leap/perl-Test-WWW-Mechanize/description
msgid "Testing-specific WWW::Mechanize subclass"
msgstr ""

#. tumbleweed/perl-Test-WWW-Selenium/summary
#. leap/perl-Test-WWW-Selenium/summary
msgid "Test applications using Selenium Remote Control"
msgstr ""

#. tumbleweed/perl-Test-WWW-Selenium/description
#. leap/perl-Test-WWW-Selenium/description
msgid ""
"This module is a the WWW::Selenium manpage subclass providing some methods "
"useful for writing tests. For each Selenium command (open, click, type, ...) "
"there is a corresponding '<command>_ok' method that checks the return value "
"(open_ok, click_ok, type_ok).\n"
"\n"
"For each Selenium getter (get_title, ...) there are four autogenerated "
"methods ('<getter>_is', '<getter>_isnt', '<getter>_like', '<getter>_unlike') "
"to check the value of the attribute.\n"
"\n"
"By calling the constructor with 'default_names' set to a true value your "
"tests will be given a reasonable name should you choose not to provide one "
"of your own. The test name should always be the third argument."
msgstr ""

#. tumbleweed/perl-Test-Warn/summary
#. leap/perl-Test-Warn/summary
msgid "Perl extension to test methods for warnings"
msgstr "警告のためのメソッドを確認するための Perl 拡張"

#. tumbleweed/perl-Test-Warn/description
#. leap/perl-Test-Warn/description
msgid ""
"A good style of Perl programming calls for a lot of diverse regression "
"tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based "
"code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the "
"time to go take a look."
msgstr ""

#. tumbleweed/perl-Test-Warnings/summary
#. leap/perl-Test-Warnings/summary
msgid "Test for warnings and the lack of them"
msgstr ""

#. tumbleweed/perl-Test-Warnings/description
#. leap/perl-Test-Warnings/description
msgid ""
"If you've ever tried to use Test::NoWarnings to confirm there are no "
"warnings generated by your tests, combined with the convenience of "
"'done_testing' to not have to declare a test count, you'll have discovered "
"that these two features do not play well together, as the test count will be "
"calculated _before_ the warnings test is run, resulting in a TAP error. (See "
"'examples/test_nowarnings.pl' in this distribution for a demonstration.)\n"
"\n"
"This module is intended to be used as a drop-in replacement for Test::"
"NoWarnings: it also adds an extra test, but runs this test _before_ "
"'done_testing' calculates the test count, rather than after. It does this by "
"hooking into 'done_testing' as well as via an 'END' block. You can declare a "
"plan, or not, and things will still Just Work.\n"
"\n"
"It is actually equivalent to:\n"
"\n"
"    use Test::NoWarnings 1.04 ':early';\n"
"\n"
"as warnings are still printed normally as they occur. You are safe, and "
"enthusiastically encouraged, to perform a global search-replace of the above "
"with 'use Test::Warnings;' whether or not your tests have a plan.\n"
"\n"
"It can also be used as a replacement for Test::Warn, if you wish to test the "
"content of expected warnings; read on to find out how."
msgstr ""

#. tumbleweed/perl-Test-Without-Module/summary
#. leap/perl-Test-Without-Module/summary
msgid "Test fallback behaviour in absence of modules"
msgstr ""

#. tumbleweed/perl-Test-Without-Module/description
#. leap/perl-Test-Without-Module/description
msgid ""
"This module allows you to deliberately hide modules from a program even "
"though they are installed. This is mostly useful for testing modules that "
"have a fallback when a certain dependency module is not installed."
msgstr ""

#. tumbleweed/perl-Test-YAML/summary
#. leap/perl-Test-YAML/summary
#, fuzzy
msgid "Testing Module for YAML Implementations"
msgstr "初期設定管理"

#. tumbleweed/perl-Test-YAML/description
#. leap/perl-Test-YAML/description
msgid ""
"the Test::YAML manpage is a subclass of the Test::Base manpage with YAML "
"specific support."
msgstr ""

#. tumbleweed/perl-Text-Aligner/summary
#. leap/perl-Text-Aligner/summary
msgid "Module to Align Text"
msgstr ""

#. tumbleweed/perl-Text-Aligner/description
#. leap/perl-Text-Aligner/description
msgid ""
"Text::Aligner exports a single function, align(), which is used to justify "
"strings to various alignment styles. The alignment specification is the "
"first argument, followed by any number of scalars which are subject to "
"alignment.\n"
"\n"
"The operation depends on context. In list context, a list of the justified "
"scalars is returned. In scalar context, the justified arguments are joined "
"into a single string with newlines appended. The original arguments remain "
"unchanged. In void context, in-place justification is attempted. In this "
"case, all arguments must be lvalues.\n"
"\n"
"Align() also does one level of scalar dereferencing. That is, whenever one "
"of the arguments is a scalar reference, the scalar pointed to is aligned "
"instead. Other references are simply stringified. An undefined argument is "
"interpreted as an empty string without complaint.\n"
"\n"
"Alignment respects colorizing escape sequences a la Term::ANSIColor which "
"means it knows that these sequences don't take up space on the screen."
msgstr ""

#. tumbleweed/perl-Text-Autoformat/summary
#. tumbleweed/perl-Text-Autoformat/description
#. leap/perl-Text-Autoformat/summary
#. leap/perl-Text-Autoformat/description
msgid "Automatic text wrapping and reformatting"
msgstr ""

#. tumbleweed/perl-Text-Brew/summary
#. leap/perl-Text-Brew/summary
#, fuzzy
msgid "An implementation of the Brew edit distance"
msgstr "SCGI プロトコルの Python 実装"

#. tumbleweed/perl-Text-Brew/description
#. leap/perl-Text-Brew/description
msgid ""
"This module implements the Brew edit distance that is very close to the "
"dynamic programming technique used for the Wagner-Fischer (and so for the "
"Levenshtein) edit distance. Please look at the module references below. For "
"more information about the Brew edit distance see: <http://ling.ohio-state."
"edu/~cbrew/795M/string-distance.html>\n"
"\n"
"The difference here is that you have separated costs for the DELetion and "
"INSertion operations (but with the default to 1 for both, you obtain the "
"Levenshtein edit distance). But the most interesting feature is that you can "
"obtain the description of the edits needed to transform the first string "
"into the second one (not vice versa: here DELetions are separated from "
"INSertions). The difference from the original algorithm by Chris Brew is "
"that I have added the SUBST operation, making it different from MATCH "
"operation.\n"
"\n"
"The symbols used here are:\n"
"\n"
" INITIAL that is the INITIAL operation (i.e. NO operation)  MATCH\t that is "
"the MATCH operation (0 is the default cost)  SUBST\t that is the "
"SUBSTitution operation (1 is the default cost)  DEL\t that is the DELetion "
"operation (1 is the default cost)  INS\t that is the INSertion operation (1 "
"is the default cost)\n"
"\n"
"and you can change the default costs (see below).\n"
"\n"
"You can make INS and DEL the same operation in a simple way:\n"
"\n"
" 1) give both the same cost  2) change the output string DEL to INS/DEL (o "
"whatever)  3) change the output string INS to INS/DEL (o whatever)"
msgstr ""

#. tumbleweed/perl-Text-CSV/summary
#. leap/perl-Text-CSV/summary
#, fuzzy
msgid "comma-separated values manipulator (using XS or PurePerl)"
msgstr "カンマ区切りの値を操作するルーチン"

#. tumbleweed/perl-Text-CSV/description
#. leap/perl-Text-CSV/description
#, fuzzy
msgid ""
"Text::CSV provides facilities for the composition and decomposition of comma-"
"separated values using the Text::CSV_XS manpage or its pure Perl version.\n"
"\n"
"An instance of the Text::CSV class can combine fields into a CSV string and "
"parse a CSV string into fields.\n"
"\n"
"The module accepts either strings or files as input and can utilize any user-"
"specified characters as delimiters, separators, and escapes so it is perhaps "
"better called ASV (anything separated values) rather than just CSV."
msgstr ""
"Text::CSV_XS は、カンマ区切りの値を組み立てたり分解したりすることができま"
"す。 Text:CSV_XS のインスタンスは、値を組み合わせて CSV 文字列を作成したり、 "
"CSV 文字列を値に変換したりすることができます。\n"
"\n"
"このモジュールは文字列やファイルを入力として受け取り、任意のユーザ指定の文字"
"を区切り文字やエスケープ文字として設定できるため、 CSV というよりは ASV "
"(anything separated values; 任意の文字で区切られた値) と表現したほうが正しい"
"ものになっています。"

#. tumbleweed/perl-Text-Capitalize/summary
#. leap/perl-Text-Capitalize/summary
msgid ""
"capitalize strings (\"to WORK AS titles\" becomes \"To Work as Titles\")"
msgstr ""

#. tumbleweed/perl-Text-Capitalize/description
#. leap/perl-Text-Capitalize/description
msgid ""
"Text::Capitalize provides some routines for *title-like* formatting of "
"strings.\n"
"\n"
"The simple *capitalize* function just makes the inital character of each "
"word uppercase, and forces the rest to lowercase.\n"
"\n"
"The *capitalize_title* function applies English title case rules (discussed "
"below) where only the \"important\" words are supposed to be capitalized. "
"There are also some customization features provided to allow the user to "
"choose variant rules.\n"
"\n"
"Comparing *capitalize* and *captialize_title*:\n"
"\n"
"  Input:             \"lost watches of splitsville\"   capitalize:        "
"\"Lost Watches Of Splitsville\"   capitalize_title:  \"Lost Watches of "
"Splitsville\"\n"
"\n"
"Some examples of formatting with *capitalize_title*:\n"
"\n"
"  Input:             \"KiLLiNG TiMe\"   capitalize_title:  \"Killing Time\"\n"
"\n"
"  Input:             \"we have come to wound the autumnal city\"   "
"capitalize_title:  \"We Have Come to Wound the Autumnal City\"\n"
"\n"
"  Input:             \"ask for whom they ask for\"   captialize_title:  "
"\"Ask for Whom They Ask For\"\n"
"\n"
"Text::Capitalize also provides some functions for special effects such as\n"
"*scramble_case*, which typically would be used for this sort of "
"transformation:\n"
"\n"
"  Input:            \"get whacky\"   scramble_case:    \"gET wHaCkY\"  (or "
"something similar)"
msgstr ""

#. tumbleweed/perl-Text-Diff/summary
#. leap/perl-Text-Diff/summary
msgid "Perform diffs on files and record sets"
msgstr "ファイルやレコードセットに対する差分検出"

#. tumbleweed/perl-Text-Diff/description
#, fuzzy
msgid ""
"'diff()' provides a basic set of services akin to the GNU 'diff' utility. It "
"is not anywhere near as feature complete as GNU 'diff', but it is better "
"integrated with Perl and available on all platforms. It is often faster than "
"shelling out to a system's 'diff' executable for small files, and generally "
"slower on larger files.\n"
"\n"
"Relies on Algorithm::Diff for, well, the algorithm. This may not produce the "
"same exact diff as a system's local 'diff' executable, but it will be a "
"valid diff and comprehensible by 'patch'. We haven't seen any differences "
"between Algorithm::Diff's logic and GNU diff's, but we have not examined "
"them to make sure they are indeed identical.\n"
"\n"
"*Note*: If you don't want to import the 'diff' function, do one of the "
"following:\n"
"\n"
"   use Text::Diff ();\n"
"\n"
"   require Text::Diff;\n"
"\n"
"That's a pretty rare occurence, so 'diff()' is exported by default.\n"
"\n"
"If you pass a filename, but the file can't be read, then 'diff()' will "
"'croak'."
msgstr ""
"\"diff()\" は GNU \"diff\" ユーティリティに似た仕組みを提供する基本サービス集"
"です。 GNU \"diff\" との完全な機能互換はありませんが、 Perl との統合をより便"
"利な仕組みで提供していて、全てのプラットフォームで動作します。また、システム"
"の \"diff\" プログラムを実行する場合に比べて、小さなファイルの場合はより高速"
"に、大きなファイルの場合は一般に遅く動作します。\n"
"\n"
"差分抽出の仕組みは Algorithm::Diff のものに依存しています。そのため、システム"
"内に存在するローカルの \"diff\" プログラムとは、出力が完全に一致するとは限り"
"ませんが、 diff の形式としては正しく、 \"patch\" プログラムからも利用できる形"
"式が出力できます。 Algorithm::Diff と GNU diff との違いを確認しているわけでは"
"ありませんが、確実に等価なものであるかどうかは確認されていないことに注意して"
"ください。"

#. tumbleweed/perl-Text-German/summary
#. tumbleweed/perl-Text-German/description
#. leap/perl-Text-German/summary
#. leap/perl-Text-German/description
#, fuzzy
msgid "Text::German Perl module"
msgstr "Bit::Vector Perl モジュール"

#. tumbleweed/perl-Text-Glob/summary
msgid "Match Globbing Patterns Against Text"
msgstr ""

#. tumbleweed/perl-Text-Glob/description
#. leap/perl-Text-Glob/description
msgid ""
"Text::Glob implements glob(3) style matching that can be used to match "
"against text, rather than fetching names from a filesystem. If you want to "
"do full file globbing use the File::Glob module instead."
msgstr ""

#. tumbleweed/perl-Text-Markdown/summary
#. leap/perl-Text-Markdown/summary
msgid "Convert Markdown syntax to (X)HTML"
msgstr ""

#. tumbleweed/perl-Text-Markdown/description
#. leap/perl-Text-Markdown/description
msgid ""
"Markdown is a text-to-HTML filter; it translates an easy-to-read / easy-to-"
"write structured text format into HTML. Markdown's text format is most "
"similar to that of plain text email, and supports features such as headers, "
"*emphasis*, code blocks, blockquotes, and links.\n"
"\n"
"Markdown's syntax is designed not as a generic markup language, but "
"specifically to serve as a front-end to (X)HTML. You can use span-level HTML "
"tags anywhere in a Markdown document, and you can use block level HTML tags "
"(like <div> and <table> as well)."
msgstr ""

#. tumbleweed/perl-Text-Patch/summary
#. leap/perl-Text-Patch/summary
msgid "Patches text with given patch"
msgstr ""

#. tumbleweed/perl-Text-Patch/description
#. leap/perl-Text-Patch/description
msgid ""
"Text::Patch combines source text with given diff (difference) data. Diff "
"data is produced by Text::Diff module or by the standard diff utility (man "
"diff, see -u option).\n"
"\n"
"* patch( $source, $diff, options... )\n"
"\n"
"  First argument is source (original) text. Second is the diff data. Third   "
"argument can be either hash reference with options or all the rest   "
"arguments will be considered patch options:\n"
"\n"
"      $output = patch( $source, $diff, STYLE => \"Unified\", ... );\n"
"\n"
"      $output = patch( $source, $diff, { STYLE => \"Unified\", ... } );\n"
"\n"
"  Options are:\n"
"\n"
"    STYLE => 'Unified'\n"
"\n"
"  STYLE can be \"Unified\", \"Context\" or \"OldStyle\".\n"
"\n"
"  The 'Unified' diff format looks like this:\n"
"\n"
"    @@ -1,7 +1,6 @@     -The Way that can be told of is not the eternal "
"Way;     -The name that can be named is not the eternal name.      The "
"Nameless is the origin of Heaven and Earth;     -The Named is the mother of "
"all things.     +The named is the mother of all things.     +      Therefore "
"let there always be non-being,        so we may see their subtlety,      And "
"let there always be being,     @@ -9,3 +8,6 @@      The two are the "
"same,      But after they are produced,        they have different "
"names.     +They both may be called deep and profound.     +Deeper and more "
"profound,     +The door of all subtleties!"
msgstr ""

#. tumbleweed/perl-Text-RecordParser/summary
#. leap/perl-Text-RecordParser/summary
msgid "Read Record-Oriented Files"
msgstr ""

#. tumbleweed/perl-Text-RecordParser/description
#. leap/perl-Text-RecordParser/description
msgid ""
"This module is for reading record-oriented data in a delimited text file. "
"The most common example have records separated by newlines and fields "
"separated by commas or tabs, but this module aims to provide a consistent "
"interface for handling sequential records in a file however they may be "
"delimited. Typically this data lists the fields in the first line of the "
"file, in which case you should call 'bind_header' to bind the field name (or "
"not, and it will be called implicitly). If the first line contains data, you "
"can still bind your own field names via 'bind_fields'. Either way, you can "
"then use many methods to get at the data as arrays or hashes."
msgstr ""

#. tumbleweed/perl-Text-Reform/summary
#. leap/perl-Text-Reform/summary
msgid "Manual text wrapping and reformatting"
msgstr ""

#. tumbleweed/perl-Text-Reform/description
#. leap/perl-Text-Reform/description
msgid ""
"The module supplies a re-entrant, highly configurable replacement for the "
"built-in Perl format() mechanism.\n"
"\n"
"Author:\n"
"-------         Damian Conway <damian@conway.org>"
msgstr ""

#. tumbleweed/perl-Text-Roman/summary
#. leap/perl-Text-Roman/summary
msgid "Allows conversion between Roman and Arabic algarisms."
msgstr ""

#. tumbleweed/perl-Text-Roman/description
#. leap/perl-Text-Roman/description
msgid ""
"This package supports both conventional Roman algarisms (which range from "
"_1_ to _3999_) and Milhar Romans, a variation which uses a bar across the "
"algarism to indicate multiplication by _1_000_. For the purposes of this "
"module, acceptable syntax consists of an underscore suffixed to the algarism "
"e.g. IV_V = _4_005_. The term Milhar apparently derives from the Portuguese "
"word for \"thousands\" and the range of this notation extends the range of "
"Roman numbers to _3999 * 1000 + 3999 = 4_002_999_.\n"
"\n"
"Note: the functions in this package treat Roman algarisms in a case-"
"insensitive manner such that \"VI\" == \"vI\" == \"Vi\" == \"vi\".\n"
"\n"
"The following functions may be imported into the caller package by name:"
msgstr ""

#. tumbleweed/perl-Text-SpellChecker/summary
#. leap/perl-Text-SpellChecker/summary
msgid "OO interface for spell-checking a block of text"
msgstr ""

#. tumbleweed/perl-Text-SpellChecker/description
#. leap/perl-Text-SpellChecker/description
msgid ""
"This module is a thin layer above either Text::Aspell or Text::Hunspell "
"(preferring the latter if available), and allows one to spellcheck a body of "
"text.\n"
"\n"
"Whereas Text::(Hu|A)spell deals with words, Text::Spellchecker deals with "
"blocks of text. For instance, we provide methods for iterating through the "
"text, serializing the object (thus remembering where we left off), and "
"highlighting the current misspelled word within the text."
msgstr ""

#. tumbleweed/perl-Text-Table/summary
#. leap/perl-Text-Table/summary
msgid "Organize Data in Tables"
msgstr ""

#. tumbleweed/perl-Text-Table/description
#. leap/perl-Text-Table/description
msgid ""
"Organization of data in table form is a time-honored and useful method of "
"data representation. While columns of data are trivially generated by "
"computer through formatted output, even simple tasks like keeping titles "
"aligned with the data columns are not trivial, and the one-shot solutions "
"one comes up with tend to be particularly hard to maintain. Text::Table "
"allows you to create and maintain tables that adapt to alignment "
"requirements as you use them."
msgstr ""

#. tumbleweed/perl-Text-TabularDisplay/summary
#. leap/perl-Text-TabularDisplay/summary
msgid "Display text in formatted table output"
msgstr ""

#. tumbleweed/perl-Text-TabularDisplay/description
#. leap/perl-Text-TabularDisplay/description
msgid ""
"Text::TabularDisplay simplifies displaying textual data in a table. The "
"output is identical to the columnar display of query results in the mysql "
"text monitor. For example, this data:\n"
"\n"
"    1, \"Tom Jones\", \"(666) 555-1212\"     2, \"Barnaby Jones\", \"(666) "
"555-1213\"     3, \"Bridget Jones\", \"(666) 555-1214\"\n"
"\n"
"Used like so:\n"
"\n"
"    my $t = Text::TabularDisplay->new(qw(id name phone));     $t->add(1, "
"\"Tom Jones\", \"(666) 555-1212\");     $t->add(2, \"Barnaby Jones\", "
"\"(666) 555-1213\");     $t->add(3, \"Bridget Jones\", \"(666) "
"555-1214\");     print $t->render;\n"
"\n"
"Produces:\n"
"\n"
"    +----+---------------+----------------+     | id | name          | "
"phone          |     +----+---------------+----------------+     | 1  | Tom "
"Jones     | (666) 555-1212 |     | 2  | Barnaby Jones | (666) 555-1213 |     "
"| 3  | Bridget Jones | (666) 555-1214 |     +----+---------------"
"+----------------+"
msgstr ""

#. tumbleweed/perl-Text-Template/summary
#. leap/perl-Text-Template/summary
msgid "Expand template text with embedded Perl"
msgstr ""

#. tumbleweed/perl-Text-Template/description
#. leap/perl-Text-Template/description
msgid ""
"This is a library for generating form letters, building HTML pages, or "
"filling in templates generally. A `template' is a piece of text that has "
"little Perl programs embedded in it here and there. When you `fill in' a "
"template, you evaluate the little programs and replace them with their "
"values.\n"
"\n"
"You can store a template in a file outside your program. People can modify "
"the template without modifying the program. You can separate the formatting "
"details from the main code, and put the formatting parts of the program into "
"the template. That prevents code bloat and encourages functional separation."
msgstr ""

#. tumbleweed/perl-Text-Unidecode/summary
#. leap/perl-Text-Unidecode/summary
msgid "Plain Ascii Transliterations of Unicode Text"
msgstr "Unicode テキストの純粋 ASCII 変換"

#. tumbleweed/perl-Text-Unidecode/description
#. leap/perl-Text-Unidecode/description
#, fuzzy
msgid ""
"It often happens that you have non-Roman text data in Unicode, but you can't "
"display it-- usually because you're trying to show it to a user via an "
"application that doesn't support Unicode, or because the fonts you need "
"aren't accessible. You could represent the Unicode characters as \"???????\" "
"or \"\\15BA\\15A0\\1610...\", but that's nearly useless to the user who "
"actually wants to read what the text says.\n"
"\n"
"What Text::Unidecode provides is a function, 'unidecode(...)' that takes "
"Unicode data and tries to represent it in US-ASCII characters (i.e., the "
"universally displayable characters between 0x00 and 0x7F). The "
"representation is almost always an attempt at _transliteration_-- i.e., "
"conveying, in Roman letters, the pronunciation expressed by the text in some "
"other writing system. (See the example in the synopsis.)\n"
"\n"
"NOTE:\n"
"\n"
"To make sure your perldoc/Pod viewing setup for viewing this page is "
"working: The six-letter word \"résumé\" should look like \"resume\" with an "
"\"/\" accent on each \"e\".\n"
"\n"
"For further tests, and help if that doesn't work, see below, A POD ENCODING "
"TEST."
msgstr ""
"非ローマ文字のテキストデータが Unicode で記述されている場合、 Unicode に対応"
"していないアプリケーションを利用していたり、対応するフォントをインストールし"
"ていないような場合には、それらを表示することができません。表示できない "
"Unicode 文字は \"???????\" や \"\\15BA\\15A0\\1610...\" のように表示されます"
"が、テキストを読みたいユーザにとって、そのような表示は意味がありません。\n"
"\n"
"Text::Unidecode は関数 'unidecode(...)' を提供しています。これは Unicode の"
"データを受け取って US-ASCII 文字 (0x00 から 0x7F までの一般的に表示可能な文"
"字) で表そうとしてくれる関数です。表記は常にほとんど音訳の形で表され、そのテ"
"キストの発音に最も近いローマ文字になります (添付の例をお読みください) 。\n"
"\n"
"注意:\n"
"\n"
"このページが正しく動作するかどうかお使いの perldoc/Pod の表示設定を確認したい"
"場合、 6 文字の単語 \"résumé\" が \"resume\" に似た表示になっているかどうかを"
"ご確認ください。 2, 6 文字目は \"e\" のアクセント表記です。\n"
"\n"
"さらに詳しいテストをしたい場合は、ヘルプではなく /A POD ENCODING TEST のマ"
"ニュアルページをお読みください。"

#. tumbleweed/perl-Text-WrapI18N/summary
#. leap/perl-Text-WrapI18N/summary
#, fuzzy
msgid "Line Wrapping Module"
msgstr "汎用設定モジュール"

#. tumbleweed/perl-Text-WrapI18N/description
#. leap/perl-Text-WrapI18N/description
msgid ""
"Line wrapping module with support for multibyte, fullwidth, and combining "
"characters and languages without whitespaces between words."
msgstr ""

#. tumbleweed/perl-Text-Wrapper/summary
#. leap/perl-Text-Wrapper/summary
msgid "Word wrap text by breaking long lines"
msgstr "長い行を改行するワードラップ機能"

#. tumbleweed/perl-Text-Wrapper/description
#. leap/perl-Text-Wrapper/description
msgid ""
"Text::Wrapper provides simple word wrapping. It breaks long lines, but does "
"not alter spacing or remove existing line breaks. If you're looking for more "
"sophisticated text formatting, try the the Text::Format manpage module.\n"
"\n"
"Reasons to use Text::Wrapper instead of Text::Format:\n"
"\n"
"* *\n"
"\n"
"  Text::Wrapper is significantly smaller.\n"
"\n"
"* *\n"
"\n"
"  It does not alter existing whitespace or combine short lines. It only   "
"breaks long lines.\n"
"\n"
"Again, if Text::Wrapper doesn't meet your needs, try Text::Format."
msgstr ""
"Text::Wrapper はシンプルなワードラップ機能を提供します。 1 行が長い場合は分割"
"するものの、スペースを置き換えたり既存の改行を削除したりはしません。より洗練"
"されたテキスト整形機能をご希望の場合は、 Text::Format モジュールをお使いくだ"
"さい。\n"
"\n"
"Text::Format の代替として Text::Wrapper を使うべき理由:\n"
"\n"
"* *\n"
"\n"
"  Text::Wrapper は著しく小さいです。\n"
"\n"
"* *\n"
"\n"
"  既存のホワイトスペースを削除したり、短い行を組み合わせたりすることがありま"
"せん。長い行を分割するだけです。\n"
"\n"
"これでも Text::Wrapper が要件に合わない場合は、 Text::Format をご利用くださ"
"い。"

#. tumbleweed/perl-Throwable/summary
#. leap/perl-Throwable/summary
msgid "Role for Classes That Can Be Thrown"
msgstr ""

#. tumbleweed/perl-Throwable/description
#. leap/perl-Throwable/description
msgid ""
"Throwable is a role for classes that are meant to be thrown as exceptions to "
"standard program flow. It is very simple and does only two things: saves any "
"previous value for '$@' and calls 'die $self'.\n"
"\n"
"Throwable is implemented with the Moo manpage, so you can stick to Moo or "
"use the Moose manpage, as you prefer."
msgstr ""

#. tumbleweed/perl-Tie-Cache/summary
#. leap/perl-Tie-Cache/summary
msgid "LRU Cache in Memory"
msgstr "メモリ内 LRU キャッシュ"

#. tumbleweed/perl-Tie-Cache/description
#. leap/perl-Tie-Cache/description
msgid ""
"This module implements a least recently used (LRU) cache in memory through a "
"tie interface. Any time data is stored in the tied hash, that key/value pair "
"has an entry time associated with it, and as the cache fills up, those "
"members of the cache that are the oldest are removed to make room for new "
"entries.\n"
"\n"
"So, the cache only \"remembers\" the last written entries, up to the size of "
"the cache. This can be especially useful if you access great amounts of "
"data, but only access a minority of the data a majority of the time.\n"
"\n"
"The implementation is a hash, for quick lookups, overlaying a doubly linked "
"list for quick insertion and deletion. On a WinNT PII 300, writes to the "
"hash were done at a rate 3100 per second, and reads from the hash at 6300 "
"per second. Work has been done to optimize refreshing cache entries that are "
"frequently read from, code like $cache{entry}, which moves the entry to the "
"end of the linked list internally."
msgstr ""
"このモジュールは、メモリ内に Least Recently Used (LRU) 型のキャッシュを実装す"
"る仕組みです。時刻のデータはタイハッシュ内に保存されていて、キーと値の対でそ"
"れぞれの項目を保存しています。キャッシュが満杯になると、最も古いキャッシュが"
"廃棄され、新しい項目に置き換えられます。\n"
"\n"
"また、キャッシュはそのサイズの上限まで、最後に書き込んだ項目のみを \"記憶\" "
"します。これは特に、大量のデータにアクセスするような場合で、僅かなデータのア"
"クセスに長い時間を要する場合に便利な仕組みです。\n"
"\n"
"実装は参照を素早く行なうためにハッシュを使用しているほか、挿入や削除を素早く"
"行なうため、 2 重リンクのリストを使用しています。 WinNT PII 300 の環境では、"
"ハッシュへの書き込みは毎秒 3100 個程度、読み出しは毎秒 6300 個程度の性能に"
"なっています。処理はよく読み込まれる項目の更新 (たとえば $cache{entry} のよう"
"なコード) を最適化するため、内部的に対象の項目を末尾に移動させています。"

#. tumbleweed/perl-Tie-Cycle/summary
msgid "Cycle through a list of values via a scalar"
msgstr ""

#. tumbleweed/perl-Tie-Cycle/description
#. leap/perl-Tie-Cycle/description
msgid ""
"You use 'Tie::Cycle' to go through a list over and over again. Once you get "
"to the end of the list, you go back to the beginning. You don't have to "
"worry about any of this since the magic of tie does that for you.\n"
"\n"
"The tie takes an array reference as its third argument. The tie should "
"succeed unless the argument is not an array reference. Previous versions "
"required you to use an array that had more than one element (what's the "
"pointing of looping otherwise?), but I've removed that restriction since the "
"number of elements you want to use may change depending on the situation.\n"
"\n"
"During the tie, this module makes a shallow copy of the array reference. If "
"the array reference contains references, and those references are changed "
"after the tie, the elements of the cycle will change as well. See the "
"included _test.pl_ script for an example of this effect."
msgstr ""

#. tumbleweed/perl-Tie-Hash-DBD/summary
#. leap/perl-Tie-Hash-DBD/summary
msgid "Tie plain hashes to DBI interface"
msgstr ""

#. tumbleweed/perl-Tie-Hash-DBD/description
#. leap/perl-Tie-Hash-DBD/description
msgid ""
"This module has been created to act as a drop-in replacement for modules "
"that tie straight perl hashes to disk, like 'DB_File'. When the running "
"system does not have enough memory to hold large hashes, and disk-tieing "
"won't work because there is not enough space, it works quite well to tie the "
"hash to a database, which preferable runs on a different server.\n"
"\n"
"This module ties a hash to a database table using *only* a 'key' and a "
"'value' field. If no tables specification is passed, this will create a "
"temporary table with 'h_key' for the key field and a 'h_value' for the value "
"field.\n"
"\n"
"I think it would make sense to merge the functionality that this module "
"provides into 'Tie::DBI'."
msgstr ""

#. tumbleweed/perl-Tie-IxHash/summary
#. leap/perl-Tie-IxHash/summary
msgid "ordered associative arrays for Perl"
msgstr "Perl 向け順序維持型連想配列"

#. tumbleweed/perl-Tie-IxHash/description
#. leap/perl-Tie-IxHash/description
msgid ""
"This Perl module implements Perl hashes that preserve the order in which the "
"hash elements were added. The order is not affected when values "
"corresponding to existing keys in the IxHash are changed. The elements can "
"also be set to any arbitrary supplied order. The familiar perl array "
"operations can also be performed on the IxHash."
msgstr ""
"この Perl モジュールは、要素の追加順序を保持する Perl ハッシュ機能を実装して"
"います。なお、 IxHash 内の既存のキーに対する値を変更した場合も、順序は影響を"
"受けません。要素は任意の提供順序で設定することができます。 Perl 配列操作に慣"
"れていれば、 IxHash を利用するのも容易です。"

#. tumbleweed/perl-Tie-RefHash-Weak/summary
#. leap/perl-Tie-RefHash-Weak/summary
msgid "A Tie::RefHash subclass with weakened references in the keys."
msgstr ""

#. tumbleweed/perl-Tie-RefHash-Weak/description
#. leap/perl-Tie-RefHash-Weak/description
msgid ""
"The the Tie::RefHash manpage module can be used to access hashes by "
"reference. This is useful when you index by object, for example.\n"
"\n"
"The problem with the Tie::RefHash manpage, and cross indexing, is that "
"sometimes the index should not contain strong references to the objecs. the "
"Tie::RefHash manpage's internal structures contain strong references to the "
"key, and provide no convenient means to make those references weak.\n"
"\n"
"This subclass of the Tie::RefHash manpage has weak keys, instead of strong "
"ones. The values are left unaltered, and you'll have to make sure there are "
"no strong references there yourself."
msgstr ""

#. tumbleweed/perl-Tie-Simple/summary
#. leap/perl-Tie-Simple/summary
msgid "Variable ties made easier: much, much, much easier.."
msgstr ""

#. tumbleweed/perl-Tie-Simple/description
#. leap/perl-Tie-Simple/description
msgid ""
"This module adds the ability to quickly create new types of tie objects "
"without creating a complete class. It does so in such a way as to try and "
"make the programmers life easier when it comes to single-use ties that I "
"find myself wanting to use from time-to-time.\n"
"\n"
"The 'Tie::Simple' package is actually a front-end to other classes which "
"really do all the work once tied, but this package does the dwimming to "
"automatically figure out what you're trying to do.\n"
"\n"
"I've tried to make this as intuitive as possible and dependent on other bits "
"of Perl where I can to minimize the need for documentation and to make this "
"extra, extra spiffy."
msgstr ""

#. tumbleweed/perl-Tie-ToObject/summary
#. leap/perl-Tie-ToObject/summary
msgid "Tie to an existing object."
msgstr ""

#. tumbleweed/perl-Tie-ToObject/description
#. leap/perl-Tie-ToObject/description
msgid ""
"While the perldoc/tie manpage allows tying to an arbitrary object, the class "
"in question must support this in it's implementation of 'TIEHASH', "
"'TIEARRAY' or whatever.\n"
"\n"
"This class provides a very tie constructor that simply returns the object it "
"was given as it's first argument.\n"
"\n"
"This way side effects of calling '$object->TIEHASH' are avoided.\n"
"\n"
"This is used in the Data::Visitor manpage in order to tie a variable to an "
"already existing object. This is also useful for cloning, when you want to "
"clone the internal state object instead of going through the tie interface "
"for that variable."
msgstr ""

#. tumbleweed/perl-Time-Clock/summary
#. leap/perl-Time-Clock/summary
msgid "Twenty-four hour clock object with nanosecond precision."
msgstr ""

#. tumbleweed/perl-Time-Clock/description
#. leap/perl-Time-Clock/description
msgid ""
"A the Time::Clock manpage object is a twenty-four hour clock with nanosecond "
"precision and wrap-around. It is a clock only; it has absolutely no concept "
"of dates. Vagaries of date/time such as leap seconds and daylight savings "
"time are unsupported.\n"
"\n"
"When a the Time::Clock manpage object hits 23:59:59.999999999 and at least "
"one more nanosecond is added, it will wrap around to 00:00:00.000000000. "
"This works in reverse when time is subtracted.\n"
"\n"
"the Time::Clock manpage objects automatically stringify to a user-definable "
"format."
msgstr ""

#. tumbleweed/perl-Time-Duration/summary
#. leap/perl-Time-Duration/summary
msgid "Rounded or Exact English Expression of Durations"
msgstr "曖昧な／正確な英語での範囲表記"

#. tumbleweed/perl-Time-Duration/description
#. leap/perl-Time-Duration/description
msgid ""
"This module provides functions for expressing durations in rounded or exact "
"terms.\n"
"\n"
"In the first example in the Synopsis, using duration($interval_seconds):\n"
"\n"
"If the 'time() - $start_time' is 3 seconds, this prints \"Runtime: *3 "
"seconds*.\". If it's 0 seconds, it's \"Runtime: *0 seconds*.\". If it's 1 "
"second, it's \"Runtime: *1 second*.\". If it's 125 seconds, you get "
"\"Runtime:\n"
"*2 minutes and 5 seconds*.\". If it's 3820 seconds (which is exactly 1h, 3m, "
"40s), you get it rounded to fit within two expressed units: \"Runtime: *1 "
"hour and 4 minutes*.\". Using duration_exact instead would return "
"\"Runtime:\n"
"*1 hour, 3 minutes, and 40 seconds*\".\n"
"\n"
"In the second example in the Synopsis, using ago($interval_seconds):\n"
"\n"
"If the $age is 3 seconds, this prints \"_file_ was modified *3 seconds ago*"
"\". If it's 0 seconds, it's \"_file_ was modified *just now*\", as a special "
"case. If it's 1 second, it's \"from *1 second ago*\". If it's 125 seconds, "
"you get \"_file_ was modified *2 minutes and 5 seconds ago*\". If it's 3820 "
"seconds (which is exactly 1h, 3m, 40s), you get it rounded to fit within two "
"expressed units: \"_file_ was modified *1 hour and 4 minutes ago*\". Using "
"ago_exact instead would return \"_file_ was modified *1 hour, 3 minutes, and "
"40 seconds ago*\". And if the file's modtime is, surprisingly, three seconds "
"into the future, $age is -3, and you'll get the equally and appropriately "
"surprising \"_file_ was modified *3 seconds from now*.\""
msgstr ""
"このモジュールは、おおよそあるいは正確な表現で、時間間隔を表現するための関数"
"集を提供します。\n"
"\n"
"概要内にある最初の例では、 duration($interval_seconds) を使用しています:\n"
"\n"
"もしも 'time() - $start_time' が 3 秒であった場合、このスクリプトは "
"\"Runtime: *3 seconds*.\" と表示します。 0 秒の場合は \"Runtime: *0 seconds*."
"\" と、 1 秒の場合は \"Runtime: *1 second*.\" となります。また、たとえば 125 "
"秒であった場合は、 \"Runtime: *2 minutes and 5 seconds*.\" となり、 3820 秒で"
"あった場合 (正確には 1 時間 3 分 40 秒) は、 \"Runtime: *1 hour and 4 "
"minutes*.\" として、丸めた形で表示されます。 \"Runtime:\" を正確に表示させた"
"い場合は、 duration_exact をお使いください。この場合は、 \"Runtime: *1 hour, "
"3 minutes, and 40 seconds*\" となります。\n"
"\n"
"概要内にある 2 つめの例では、 ago($interval_seconds) を使用しています:\n"
"\n"
"$age が 3 秒であった場合は \"_file_ was modified *3 seconds ago*\" と表示さ"
"れ、 0 秒であった場合は特別に \"_file_ was modified *just now*\" と表示されま"
"す。また、 1 秒であった場合は \"from *1 second ago*\" と、 125 秒であった場合"
"は \"_file_ was modified *2 minutes and 5 seconds ago*\" と表示されます。 "
"3820 秒であった場合 (正確には 1 時間 3 分 40 秒) は、 2 つの表記単位を使用し"
"て \"_file_ was modified *1 hour and 4 minutes ago*\" と丸めた表示を行ないま"
"す。この場合、 ago_exact を使用すると \"_file_ was modified *1 hour, 3 "
"minutes, and 40 seconds ago*\" と表示させることができます。また、通常ではあり"
"得ませんが、ファイルの更新日時が 3 秒だけ未来であった場合、 $age は -3 となり"
"ますが、\"_file_ was modified *3 seconds from now*.\" のように表示されます。"

#. tumbleweed/perl-Time-Duration-Parse/summary
#. leap/perl-Time-Duration-Parse/summary
msgid "Parse string that represents time duration"
msgstr ""

#. tumbleweed/perl-Time-Duration-Parse/description
#. leap/perl-Time-Duration-Parse/description
msgid ""
"Time::Duration::Parse is a module to parse human readable duration strings "
"like _2 minutes and 3 seconds_ to seconds.\n"
"\n"
"It does the opposite of _duration_exact_ function in Time::Duration and is "
"roundtrip safe. So, the following is always true.\n"
"\n"
"  use Time::Duration::Parse;   use Time::Duration;\n"
"\n"
"  my $seconds = int rand 100000;   "
"is( parse_duration(duration_exact($seconds)), $seconds );"
msgstr ""

#. tumbleweed/perl-Time-Mock/summary
#. tumbleweed/perl-Time-Mock/description
#. leap/perl-Time-Mock/summary
#. leap/perl-Time-Mock/description
msgid "shift and scale time"
msgstr ""

#. tumbleweed/perl-Time-Out/summary
#. leap/perl-Time-Out/summary
msgid "Easily timeout long running operations"
msgstr ""

#. tumbleweed/perl-Time-Out/description
#. leap/perl-Time-Out/description
msgid ""
"'Time::Out' provides an easy interface to _alarm(2)_ based timeouts. Nested "
"timeouts are supported."
msgstr ""

#. tumbleweed/perl-Time-Period/summary
#. leap/perl-Time-Period/summary
msgid "A Perl module to deal with time periods."
msgstr "時間範囲を扱うための Perl モジュール"

#. tumbleweed/perl-Time-Period/description
#. leap/perl-Time-Period/description
msgid ""
"The *inPeriod* function determines if a given time falls within a given "
"period. *inPeriod* returns *1* if the time does fall within the given "
"period, *0* if not, and *-1* if *inPeriod* detects a malformed time or "
"period."
msgstr ""
"*inPeriod* 関数は、指定した時間が指定した範囲内に存在するかどうかを判断しま"
"す。 *inPeriod* は指定した時間が範囲内にある場合は *1* を返し、そうでない場合"
"は *0* を返します。また、時間や範囲の指定が正しくない場合には、 *-1* を返しま"
"す。"

#. tumbleweed/perl-Time-Tiny/summary
msgid "Time Object, with As Little Code As Possible"
msgstr ""

#. tumbleweed/perl-Time-Tiny/description
msgid ""
"*Time::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a time, "
"without any time data."
msgstr ""

#. tumbleweed/perl-TimeDate/summary
#. leap/perl-TimeDate/summary
msgid "Parse date strings into time values"
msgstr "日付の文字列を値に変換するモジュール"

#. tumbleweed/perl-TimeDate/description
#. leap/perl-TimeDate/description
msgid ""
" Date::Parse provides two routines for parsing date strings into time "
"values.\n"
"\n"
" str2time(DATE [, ZONE])\n"
"\n"
"    str2time parses DATE and returns a unix time value, or undef upon "
"failure.      ZONE, if given, specifies the timezone to assume when parsing "
"if the date      string does not specify a timezome.\n"
"\n"
" strptime(DATE [, ZONE])\n"
"\n"
"    strptime takes the same arguments as str2time but returns an array of "
"values      ($ss,$mm,$hh,$day,$month,$year,$zone). Elements are only defined "
"if they      could be extracted from the date string. The $zone element is "
"the timezone      offset in seconds from GMT. An empty array is returned "
"upon failure."
msgstr ""
" Date::Parse は日付の文字列を解釈して値として取り込む機能のある、 2 種類の"
"ルーチンを提供しています。\n"
"\n"
" str2time(DATE [, ZONE])\n"
"\n"
"    str2time は DATE に書かれた日付を解釈し、 Unix 時刻の値に変換します。変換"
"に失敗した場合は undef が返却されます。    ZONE を指定すると、 文字列にタイム"
"ゾーン情報が含まれていない場合、タイムゾーンとして解釈する値を指定します。\n"
"\n"
" strptime(DATE [, ZONE])\n"
"\n"
"    strptime は str2time と同じパラメータを指定することができますが、返り値"
"が ($ss,$mm,$hh,$day,$month,$year,$zone)    のように配列であるところが異なり"
"ます。それぞれの要素は日付の文字列から取り出すことができた場合にのみ設定され"
"ます。    $zone はタイムゾーン部分を示すもので、 GMT からの差を秒単位で表わし"
"た値が書き込まれます。失敗時には空の配列が    返却されます。"

#. tumbleweed/perl-Tk-Clock/summary
#. leap/perl-Tk-Clock/summary
msgid "Clock widget with analog and digital display"
msgstr ""

#. tumbleweed/perl-Tk-Clock/description
#. leap/perl-Tk-Clock/description
msgid ""
"This module implements a Canvas-based clock widget for perl-Tk with lots of "
"options to change the appearance.\n"
"\n"
"Both analog and digital clocks are implemented."
msgstr ""

#. tumbleweed/perl-Tree-DAG_Node/summary
#. leap/perl-Tree-DAG_Node/summary
msgid "An N-ary tree"
msgstr ""

#. tumbleweed/perl-Tree-DAG_Node/description
#. leap/perl-Tree-DAG_Node/description
msgid ""
"This class encapsulates/makes/manipulates objects that represent nodes in a "
"tree structure. The tree structure is not an object itself, but is emergent "
"from the linkages you create between nodes. This class provides the methods "
"for making linkages that can be used to build up a tree, while preventing "
"you from ever making any kinds of linkages which are not allowed in a tree "
"(such as having a node be its own mother or ancestor, or having a node have "
"two mothers).\n"
"\n"
"This is what I mean by a \"tree structure\", a bit redundantly stated:\n"
"\n"
"* o A tree is a special case of an acyclic directed graph\n"
"\n"
"* o A tree is a network of nodes where there's exactly one root node\n"
"\n"
"  Also, the only primary relationship between nodes is the mother-daughter   "
"relationship.\n"
"\n"
"* o No node can be its own mother, or its mother's mother, etc\n"
"\n"
"* o Each node in the tree has exactly one parent\n"
"\n"
"  Except for the root of course, which is parentless.\n"
"\n"
"* o Each node can have any number (0 .. N) daughter nodes\n"
"\n"
"  A given node's daughter nodes constitute an _ordered_ list.\n"
"\n"
"  However, you are free to consider this ordering irrelevant. Some   "
"applications do need daughters to be ordered, so I chose to consider this   "
"the general case.\n"
"\n"
"* o A node can appear in only one tree, and only once in that tree\n"
"\n"
"  Notably (notable because it doesn't follow from the two above points), a   "
"node cannot appear twice in its mother's daughter list.\n"
"\n"
"* o There's an idea of up versus down\n"
"\n"
"  Up means towards to the root, and down means away from the root (and   "
"towards the leaves).\n"
"\n"
"* o There's an idea of left versus right\n"
"\n"
"  Left is toward the start (index 0) of a given node's daughter list, and   "
"right is toward the end of a given node's daughter list.\n"
"\n"
"Trees as described above have various applications, among them: representing "
"syntactic constituency, in formal linguistics; representing contingencies in "
"a game tree; representing abstract syntax in the parsing of any computer "
"language -- whether in expression trees for programming languages, or "
"constituency in the parse of a markup language document. (Some of these "
"might not use the fact that daughters are ordered.)\n"
"\n"
"(Note: B-Trees are a very special case of the above kinds of trees, and are "
"best treated with their own class. Check CPAN for modules encapsulating B-"
"Trees; or if you actually want a database, and for some reason ended up "
"looking here, go look at the AnyDBM_File manpage.)\n"
"\n"
"Many base classes are not usable except as such -- but 'Tree::DAG_Node' can "
"be used as a normal class. You can go ahead and say:\n"
"\n"
"\tuse Tree::DAG_Node; \tmy $root = Tree::DAG_Node->new(); \t$root-"
">name(\"I'm the tops\"); \t$new_daughter = Tree::DAG_Node->new(); \t"
"$new_daughter->name(\"More\"); \t$root->add_daughter($new_daughter);\n"
"\n"
"and so on, constructing and linking objects from 'Tree::DAG_Node' and making "
"useful tree structures out of them."
msgstr ""

#. tumbleweed/perl-Try-Tiny/summary
#. leap/perl-Try-Tiny/summary
msgid "Minimal Try/Catch with Proper Preservation of $@"
msgstr ""

#. tumbleweed/perl-Try-Tiny/description
#. leap/perl-Try-Tiny/description
msgid ""
"This module provides bare bones 'try'/'catch'/'finally' statements that are "
"designed to minimize common mistakes with eval blocks, and NOTHING else.\n"
"\n"
"This is unlike TryCatch which provides a nice syntax and avoids adding "
"another call stack layer, and supports calling 'return' from the 'try' block "
"to return from the parent subroutine. These extra features come at a cost of "
"a few dependencies, namely Devel::Declare and Scope::Upper which are "
"occasionally problematic, and the additional catch filtering uses Moose type "
"constraints which may not be desirable either.\n"
"\n"
"The main focus of this module is to provide simple and reliable error "
"handling for those having a hard time installing TryCatch, but who still "
"want to write correct 'eval' blocks without 5 lines of boilerplate each "
"time.\n"
"\n"
"It's designed to work as correctly as possible in light of the various "
"pathological edge cases (see BACKGROUND) and to be compatible with any style "
"of error values (simple strings, references, objects, overloaded objects, "
"etc).\n"
"\n"
"If the 'try' block dies, it returns the value of the last statement executed "
"in the 'catch' block, if there is one. Otherwise, it returns 'undef' in "
"scalar context or the empty list in list context. The following examples all "
"assign '\"bar\"' to '$x':\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' blocks are always executed making them suitable for cleanup code "
"which cannot be handled using local. You can add as many 'finally' blocks to "
"a given 'try' block as you like.\n"
"\n"
"Note that adding a 'finally' block without a preceding 'catch' block "
"suppresses any errors. This behaviour is consistent with using a standalone "
"'eval', but it is not consistent with 'try'/'finally' patterns found in "
"other programming languages, such as Java, Python, Javascript or C#. If you "
"learnt the 'try'/'finally' pattern from one of these languages, watch out "
"for this."
msgstr ""

#. tumbleweed/perl-Type-Tiny/summary
#. leap/perl-Type-Tiny/summary
msgid "tiny, yet Moo(se)-compatible type constraint"
msgstr ""

#. tumbleweed/perl-Type-Tiny/description
#. leap/perl-Type-Tiny/description
msgid ""
"the Type::Tiny manpage is a tiny class for creating Moose-like type "
"constraint objects which are compatible with Moo, Moose and Mouse.\n"
"\n"
"Maybe now we won't need to have separate MooseX, MouseX and MooX versions of "
"everything? We can but hope...\n"
"\n"
"This documents the internals of the Type::Tiny manpage. the Type::Tiny::"
"Manual manpage is a better starting place if you're new."
msgstr ""

#. tumbleweed/perl-Types-Serialiser/summary
#. leap/perl-Types-Serialiser/summary
msgid "Simple data types for common serialisation formats"
msgstr "一般的なシリアライズ形式向けのシンプルなデータ型"

#. tumbleweed/perl-Types-Serialiser/description
#. leap/perl-Types-Serialiser/description
msgid ""
"This module provides some extra datatypes that are used by common "
"serialisation formats such as JSON or CBOR. The idea is to have a repository "
"of simple/small constants and containers that can be shared by different "
"implementations so they become interoperable between each other."
msgstr ""
"このモジュールは、 JSON や CBOR などの一般的なシリアライズ形式で使用される、"
"いくつかのデータ型を提供します。シンプルで小さな定数とコンテナのリポジトリを"
"持ち、異なる実装との間で共有されるコンテナを含むため、相互運用性が高まるよう"
"になっています。"

#. tumbleweed/perl-UNIVERSAL-can/summary
#. leap/perl-UNIVERSAL-can/summary
msgid "work around buggy code calling UNIVERSAL::can() as a function"
msgstr ""

#. tumbleweed/perl-UNIVERSAL-can/description
#. leap/perl-UNIVERSAL-can/description
msgid ""
"The UNIVERSAL class provides a few default methods so that all objects can "
"use them. Object orientation allows programmers to override these methods in "
"subclasses to provide more specific and appropriate behavior.\n"
"\n"
"Some authors call methods in the UNIVERSAL class on potential invocants as "
"functions, bypassing any possible overriding. This is wrong and you should "
"not do it. Unfortunately, not everyone heeds this warning and their bad code "
"can break your good code.\n"
"\n"
"This module replaces 'UNIVERSAL::can()' with a method that checks to see if "
"the first argument is a valid invocant has its own 'can()' method. If so, it "
"gives a warning and calls the overridden method, working around buggy code. "
"Otherwise, everything works as you might expect.\n"
"\n"
"Some people argue that you must call 'UNIVERSAL::can()' as a function "
"because you don't know if your proposed invocant is a valid invocant. That's "
"silly. Use 'blessed()' from the Scalar::Util manpage if you want to check "
"that the potential invocant is an object or call the method anyway in an "
"'eval' block and check for failure (though check the exception _returned_, "
"as a poorly-written 'can()' method could break Liskov and throw an exception "
"other than \"You can't call a method on this type of invocant\").\n"
"\n"
"Just don't break working code."
msgstr ""

#. tumbleweed/perl-UNIVERSAL-isa/summary
#. leap/perl-UNIVERSAL-isa/summary
msgid "Attempt to recover from people calling UNIVERSAL::isa as a function"
msgstr ""

#. tumbleweed/perl-UNIVERSAL-isa/description
#. leap/perl-UNIVERSAL-isa/description
msgid ""
"Whenever you use the UNIVERSAL/isa manpage as a function, a kitten using the "
"Test::MockObject manpage dies. Normally, the kittens would be helpless, but "
"if they use the UNIVERSAL::isa manpage (the module whose docs you are "
"reading), the kittens can live long and prosper.\n"
"\n"
"This module replaces 'UNIVERSAL::isa' with a version that makes sure that, "
"when called as a function on objects which override 'isa', 'isa' will call "
"the appropriate method on those objects\n"
"\n"
"In all other cases, the real 'UNIVERSAL::isa' gets called directly.\n"
"\n"
"*NOTE:* You should use this module only for debugging purposes. It does not "
"belong as a dependency in running code."
msgstr ""

#. tumbleweed/perl-UNIVERSAL-moniker/summary
#. leap/perl-UNIVERSAL-moniker/summary
msgid "UNIVERAL::moniker"
msgstr ""

#. tumbleweed/perl-UNIVERSAL-moniker/description
#. leap/perl-UNIVERSAL-moniker/description
msgid ""
"Class names in Perl often don't sound great when spoken, or look good when "
"written in prose. For this reason, we tend to say things like \"customer\" "
"or \"basket\" when we are referring to 'My::Site::User::Customer' or 'My::"
"Site::Shop::Basket'. We thought it would be nice if our classes knew what we "
"would prefer to call them.\n"
"\n"
"This module will add a 'moniker' (and 'plural_moniker') method to "
"'UNIVERSAL', and so to every class or module."
msgstr ""

#. tumbleweed/perl-UNIVERSAL-require/summary
#. leap/perl-UNIVERSAL-require/summary
#, fuzzy
msgid "require() modules from a variable"
msgstr "UNIVERSAL::require - 変数からの require() モジュール"

#. tumbleweed/perl-UNIVERSAL-require/description
#. leap/perl-UNIVERSAL-require/description
msgid ""
"If you've ever had to do this...\n"
"\n"
"    eval \"require $module\";\n"
"\n"
"to get around the bareword caveats on require(), this module is for you. It "
"creates a universal require() class method that will work with every Perl "
"module and its secure. So instead of doing some arcane eval() work, you can "
"do this:\n"
"\n"
"    $module->require;\n"
"\n"
"It doesn't save you much typing, but it'll make a lot more sense to someone "
"who's not a ninth level Perl acolyte."
msgstr ""

#. tumbleweed/perl-URI/summary
#. leap/perl-URI/summary
msgid "Uniform Resource Identifiers (absolute and relative)"
msgstr "Uniform Resource Identifiers (統一資源識別子; 絶対または相対)"

#. tumbleweed/perl-URI/description
msgid ""
"This module implements the 'URI' class. Objects of this class represent "
"\"Uniform Resource Identifier references\" as specified in RFC 2396 (and "
"updated by RFC 2732).\n"
"\n"
"A Uniform Resource Identifier is a compact string of characters that "
"identifies an abstract or physical resource. A Uniform Resource Identifier "
"can be further classified as either a Uniform Resource Locator (URL) or a "
"Uniform Resource Name (URN). The distinction between URL and URN does not "
"matter to the 'URI' class interface. A \"URI-reference\" is a URI that may "
"have additional information attached in the form of a fragment identifier.\n"
"\n"
"An absolute URI reference consists of three parts: a _scheme_, a _scheme-"
"specific part_ and a _fragment_ identifier. A subset of URI references share "
"a common syntax for hierarchical namespaces. For these, the scheme-specific "
"part is further broken down into _authority_, _path_ and _query_ components. "
"These URIs can also take the form of relative URI references, where the "
"scheme (and usually also the authority) component is missing, but implied by "
"the context of the URI reference. The three forms of URI reference syntax "
"are summarized as follows:\n"
"\n"
"  <scheme>:<scheme-specific-part>#<fragment>   <scheme>://<authority><path>?"
"<query>#<fragment>   <path>?<query>#<fragment>\n"
"\n"
"The components into which a URI reference can be divided depend on the "
"_scheme_. The 'URI' class provides methods to get and set the individual "
"components. The methods available for a specific 'URI' object depend on the "
"scheme."
msgstr ""
"このモジュールは 'URI' クラスを実装しています。このクラスのオブジェクトは "
"RFC 2396 (および更新版である RFC 2732) で規定されている \"Uniform Resource "
"Identifier references\" を表します。\n"
"\n"
"Uniform Resource Identifier は抽象的もしくは物理的な資源を識別するためのコン"
"パクトな文字列です。 Uniform Resource Identifier には Uniform Resource "
"Locator (URL) と Uniform Resource Name (URN) の 2 種類がありますが、 'URI' ク"
"ラスのインターフェイスでは URL も URN も同じになります。また、 \"URI-"
"reference\" とは追加の識別子情報が添付されている URI のことを指します。\n"
"\n"
"絶対 URI reference は 3 種類のパーツから構成されています。それぞれ _スキーム"
"_, _スキーム固有パーツ_, _追加情報_ です。 URI reference のサブセットでは階層"
"構造型のネームスペースのため、汎用的な文法を利用します。具体的には、 _スキー"
"ム固有パーツ_ は _オーソリティ情報_, _パス_, _クエリ_ の各パーツに分解するこ"
"とができます。 URI では相対表記にも対応していますが、この場合はスキーム (およ"
"びオーソリティ情報) を省略して表記します。このような仕組みから、 URI の書式に"
"は下記の 3 種類があることになります:\n"
"\n"
"  <スキーム>:<スキーム固有パーツ>#<追加情報>   <スキーム>://<オーソリティ情報"
"><パス>?<クエリ>#<追加情報>   <パス>?<クエリ>#<追加情報>\n"
"\n"
"URI reference が分解できるコンポーネントは、スキームによって異なります。 "
"'URI' クラスでは個別のコンポーネントに対して、設定と取得を行なうためのメソッ"
"ドを提供しています。メソッドはスキームに依存して固有の 'URI' オブジェクトで利"
"用できます。"

#. tumbleweed/perl-URI-Find/summary
#. leap/perl-URI-Find/summary
msgid "Find URIs in arbitrary text"
msgstr ""

#. tumbleweed/perl-URI-Find/description
msgid ""
"This module does one thing: Finds URIs and URLs in plain text. It finds them "
"quickly and it finds them *all* (or what URI.pm considers a URI to be.) It "
"only finds URIs which include a scheme (http:// or the like), for something "
"a bit less strict have a look at URI::Find::Schemeless.\n"
"\n"
"For a command-line interface, urifind is provided."
msgstr ""

#. tumbleweed/perl-Unicode-Stringprep/summary
msgid "Preparation of Internationalized Strings (S<RFC 3454>)"
msgstr ""

#. tumbleweed/perl-Unicode-Stringprep/description
msgid ""
"This module implements the _stringprep_ framework for preparing Unicode text "
"strings in order to increase the likelihood that string input and string "
"comparison work in ways that make sense for typical users throughout the "
"world. The _stringprep_ protocol is useful for protocol identifier values, "
"company and personal names, internationalized domain names, and other text "
"strings.\n"
"\n"
"The _stringprep_ framework does not specify how protocols should prepare "
"text strings. Protocols must create profiles of stringprep in order to fully "
"specify the processing options."
msgstr ""

#. tumbleweed/perl-WWW-Mechanize/summary
#. leap/perl-WWW-Mechanize/summary
msgid "Handy web browsing in a Perl object"
msgstr ""

#. tumbleweed/perl-WWW-Mechanize/description
#. leap/perl-WWW-Mechanize/description
msgid ""
"Perl module for stateful programmatic web browsing, used for automating "
"interaction with websites."
msgstr ""

#. tumbleweed/perl-WWW-PAUSE-CleanUpHomeDir/summary
#. leap/perl-WWW-PAUSE-CleanUpHomeDir/summary
msgid "the module to clean up old dists from your PAUSE home directory"
msgstr ""

#. tumbleweed/perl-WWW-PAUSE-CleanUpHomeDir/description
#. leap/perl-WWW-PAUSE-CleanUpHomeDir/description
msgid ""
"The module provides means to clean up your PAUSE home directory from old "
"distributions with ability to undelete files if you so prefer."
msgstr ""

#. tumbleweed/perl-WWW-Pastebin-PastebinCom-Create/summary
#. leap/perl-WWW-Pastebin-PastebinCom-Create/summary
msgid "Paste On Www.Pastebin.Com Without Api Keys"
msgstr ""

#. tumbleweed/perl-WWW-Pastebin-PastebinCom-Create/description
#. leap/perl-WWW-Pastebin-PastebinCom-Create/description
msgid ""
"This module provides the means to paste on the www.pastebin.com manpage "
"pastebin, without the need for http://pastebin.com/api. See the WARNING!!! "
"section above."
msgstr ""

#. tumbleweed/perl-WWW-RobotRules/summary
#. leap/perl-WWW-RobotRules/summary
msgid "database of robots.txt-derived permissions"
msgstr "robots.txt によるアクセス許可データベース"

#. tumbleweed/perl-WWW-RobotRules/description
#. leap/perl-WWW-RobotRules/description
msgid ""
"This module parses _/robots.txt_ files as specified in \"A Standard for "
"Robot Exclusion\", at <http://www.robotstxt.org/wc/norobots.html> Webmasters "
"can use the _/robots.txt_ file to forbid conforming robots from accessing "
"parts of their web site.\n"
"\n"
"The parsed files are kept in a WWW::RobotRules object, and this object "
"provides methods to check if access to a given URL is prohibited. The same "
"WWW::RobotRules object can be used for one or more parsed _/robots.txt_ "
"files on any number of hosts.\n"
"\n"
"The following methods are provided:\n"
"\n"
"* $rules = WWW::RobotRules->new($robot_name)\n"
"\n"
"  This is the constructor for WWW::RobotRules objects. The first argument   "
"given to new() is the name of the robot.\n"
"\n"
"* $rules->parse($robot_txt_url, $content, $fresh_until)\n"
"\n"
"  The parse() method takes as arguments the URL that was used to retrieve   "
"the _/robots.txt_ file, and the contents of the file.\n"
"\n"
"* $rules->allowed($uri)\n"
"\n"
"  Returns TRUE if this robot is allowed to retrieve this URL.\n"
"\n"
"* $rules->agent([$name])\n"
"\n"
"  Get/set the agent name. NOTE: Changing the agent name will clear the   "
"robots.txt rules and expire times out of the cache."
msgstr ""
"このモジュールは <http://www.robotstxt.org/wc/norobots.html> で公開されている"
"\"A Standard for Robot Exclusion\" で規定された _/robots.txt_ ファイルを処理"
"するモジュールです。 Webmaster は _/robots.txt_ ファイルを利用して、 Web サイ"
"ト内の特定箇所に対するロボットからのアクセスを、禁止することができます。\n"
"\n"
"処理されたファイルは WWW::RobotRules オブジェクトとして保管され、このオブジェ"
"クトが提供するメソッドを利用することで、特定の URL が禁止されているかどうかを"
"調べることができます。 WWW::RobotRules オブジェクトは、 1 つまたは複数のホス"
"トに対するルールを調べることもできます。\n"
"\n"
"下記のようなメソッドが用意されています:\n"
"\n"
"* $rules = WWW::RobotRules->new($robot_name)\n"
"\n"
"  これは WWW::RobotRules のコンストラクタです。最初のパラメータとして、ロボッ"
"トの名称を指定します。\n"
"\n"
"* $rules->parse($robot_txt_url, $content, $fresh_until)\n"
"\n"
"  parse() メソッドは、 _/robots.txt_ ファイルの取得元 (および実際のファイルが"
"存在する) URL を指定します。\n"
"\n"
"* $rules->allowed($uri)\n"
"\n"
"  指定した URL に対して、このロボットからのアクセスが許可されていれば TRUE を"
"返します。\n"
"\n"
"* $rules->agent([$name])\n"
"\n"
"  エージェント名を設定または取得します。注意: エージェント名を変更すると、 "
"robots.txt のルールが消去され、キャッシュも無効となります。"

#. tumbleweed/perl-WWW-Shorten/summary
#. leap/perl-WWW-Shorten/summary
msgid "Interface to URL shortening sites"
msgstr ""

#. tumbleweed/perl-WWW-Shorten/description
#. leap/perl-WWW-Shorten/description
msgid ""
"A Perl interface to various services that shorten URLs. These sites maintain "
"databases of long URLs, each of which has a unique identifier.\n"
"\n"
"\n"
"\n"
"The following shorten services have been deprecated as the endpoints no "
"longer exist or function:\n"
"\n"
"  * WWW::Shorten::LinkToolbot\n"
"\n"
"  * WWW::Shorten::Linkz\n"
"\n"
"  * WWW::Shorten::MakeAShorterLink\n"
"\n"
"  * WWW::Shorten::Metamark\n"
"\n"
"  * WWW::Shorten::TinyClick\n"
"\n"
"  * WWW::Shorten::Tinylink\n"
"\n"
"  * WWW::Shorten::Qurl\n"
"\n"
"  * WWW::Shorten::Qwer\n"
"\n"
"When version '3.100' is released, these deprecated services will not be part "
"of the distribution."
msgstr ""

#. tumbleweed/perl-Web-MREST/summary
#, fuzzy
msgid "Minimalistic REST server"
msgstr "マルチプラットフォーム対応のワードプロセッサ"

#. tumbleweed/perl-Web-MREST/description
msgid ""
"MREST stands for \"minimalistic\" or \"mechanical\" REST server. (Mechanical "
"because it relies on Web::Machine.)\n"
"\n"
"Web::MREST provides a fully functional REST server that can be started with "
"a simple command. Without modification, the server provides a set of "
"generalized resources that can be used to demonstrate how the REST server "
"works, or for testing.\n"
"\n"
"Developers can use Web::MREST as a platform for implementing their own REST "
"servers, as described below. App::Dochazka::REST is a \"real-world\" example "
"of such a server.\n"
"\n"
"For an introduction to REST and Web Services, see Web::MREST::"
"WebServicesIntro."
msgstr ""

#. tumbleweed/perl-Web-MREST-CLI/summary
#. leap/perl-Web-MREST-CLI/summary
msgid "CLI components for Web::MEST-based applications"
msgstr ""

#. tumbleweed/perl-Web-MREST-CLI/description
#. leap/perl-Web-MREST-CLI/description
msgid ""
"Top-level module of the the Web::MREST::CLI manpage distribution. Exports "
"some \"generalized\" functions that are used internally and might also be "
"useful for writing CLI clients in general."
msgstr ""

#. tumbleweed/perl-Web-Machine/summary
#. leap/perl-Web-Machine/summary
#, fuzzy
msgid "Perl port of Webmachine"
msgstr "Telepathy 向け IRC サポート"

#. tumbleweed/perl-Web-Machine/description
#. leap/perl-Web-Machine/description
msgid ""
"'Web::Machine' provides a RESTful web framework modeled as a state machine. "
"You define one or more resource classes. Each resource represents a single "
"RESTful URI end point, such as a user, an email, etc. The resource class can "
"also be the target for 'POST' requests to create a new user, email, etc.\n"
"\n"
"Each resource is a state machine, and each request for a resource is handled "
"by running the request through that state machine.\n"
"\n"
"'Web::Machine' is built on top of Plack, but it handles the full request and "
"response cycle.\n"
"\n"
"See Web::Machine::Manual for more details on using 'Web::Machine' in "
"general, and how 'Web::Machine' and Plack interact.\n"
"\n"
"This is a port of at https://github.com/basho/webmachine, actually it is "
"much closer to the Ruby version|https://github.com/seancribbs/webmachine-"
"ruby, with a little bit of at https://github.com/tautologistics/nodemachine "
"and even some of at https://github.com/benoitc/pywebmachine thrown in for "
"good measure.\n"
"\n"
"You can learn a bit about Web::Machine's history from the slides for my 2012 "
"YAPC::NA talk|https://speakerdeck.com/stevan_little/rest-from-the-trenches.\n"
"\n"
"To learn more about Webmachine, take a look at the links in the SEE ALSO "
"section."
msgstr ""

#. tumbleweed/perl-XML-CommonNS/summary
#. tumbleweed/perl-XML-CommonNS/description
#. leap/perl-XML-CommonNS/summary
#. leap/perl-XML-CommonNS/description
#, fuzzy
msgid "A list of commonly used namespaces"
msgstr "一般的に使用されるデータ構造を提供する GObject ベースのライブラリ"

#. tumbleweed/perl-XML-DOM/summary
msgid "Perl Module for Building Dom Level 1 Compliant Document Structures"
msgstr "DOM レベル 1 準拠の文書構造を構築するための Perl モジュール"

#. tumbleweed/perl-XML-DOM/description
msgid ""
"This module extends the XML::Parser module by Clark Cooper. The XML::Parser "
"module is built on top of XML::Parser::Expat, which is a lower level "
"interface to James Clark's expat library.\n"
"\n"
"XML::DOM::Parser is derived from XML::Parser. It parses XML strings or files "
"and builds a data structure that conforms to the API of the Document Object "
"Model as described at http://www.w3.org/TR/REC-DOM-Level-1. See the XML::"
"Parser manpage for other available features of the XML::DOM::Parser class. "
"Note that the 'Style' property should not be used (it is set internally.)\n"
"\n"
"The XML::Parser _NoExpand_ option is more or less supported, in that it will "
"generate EntityReference objects whenever an entity reference is encountered "
"in character data. I'm not sure how useful this is. Any comments are "
"welcome.\n"
"\n"
"As described in the synopsis, when you create an XML::DOM::Parser object, "
"the parse and parsefile methods create an _XML::DOM::Document_ object from "
"the specified input. This Document object can then be examined, modified and "
"written back out to a file or converted to a string.\n"
"\n"
"When using XML::DOM with XML::Parser version 2.19 and up, setting the XML::"
"DOM::Parser option _KeepCDATA_ to 1 will store CDATASections in CDATASection "
"nodes, instead of converting them to Text nodes. Subsequent CDATASection "
"nodes will be merged into one. Let me know if this is a problem.\n"
"\n"
"When using XML::Parser 2.27 and above, you can suppress expansion of "
"parameter entity references (e.g. %pent;) in the DTD, by setting "
"_ParseParamEnt_ to 1 and _ExpandParamEnt_ to 0. See /_Hidden_Nodes_ for "
"details.\n"
"\n"
"A Document has a tree structure consisting of _Node_ objects. A Node may "
"contain other nodes, depending on its type. A Document may have Element, "
"Text, Comment, and CDATASection nodes. Element nodes may have Attr, Element, "
"Text, Comment, and CDATASection nodes. The other nodes may not have any "
"child nodes.\n"
"\n"
"This module adds several node types that are not part of the DOM spec (yet.) "
"These are: ElementDecl (for <!ELEMENT ...> declarations), AttlistDecl (for <!"
"ATTLIST ...> declarations), XMLDecl (for <?xml ...?> declarations) and "
"AttDef (for attribute definitions in an AttlistDecl.)"
msgstr ""
"このモジュールは Clark Cooper 氏による XML::Parser モジュールの拡張です。 "
"XML::Parser モジュールは XML::Parser::Expat 上に構築されていますが、こちらは "
"James Clark 氏の expat ライブラリに対する低レベルインターフェイスになっていま"
"す。\n"
"\n"
"XML::DOM::Parser は XML::Parser の派生クラスです。 XML の文字列やファイルを>"
"処理して、 http://www.w3.org/TR/REC-DOM-Level-1 で定義されている Document "
"Object Model の API に準拠したデータ構造を構築します。 XML::DOM::Parser クラ"
"スでほかに利用することのできる機能は、 XML::Parser のマニュアルページをお読み"
"ください。なお、 'Style' プロパティは使用すべきではありません (内部で設定され"
"ます) 。\n"
"\n"
"XML::Parser の _NoExpand_ オプションは少なくともサポートされている状況にあり"
"ますが、文字データ内にエンティティ参照が見つかると、常に EntityReference オブ"
"ジ>ェクトを生成します。これがどのように有用なのかはわかりません。コメントを歓"
"迎します。\n"
"\n"
"概要にも示している通り、 XML::DOM::Parser オブジェクトを作成すると、 parse, "
"parsefile メソッドは指定した入力から _XML::DOM::Document_ オブジェクトを作成"
"します。この Document オブジェクトは参照や修正を行なうことができるほか、ファ"
"イルに保存したり文字列に変換したりすることもできます。\n"
"\n"
"XML::Parser バージョン 2.19 もしくはそれ以降で XML::DOM を使用すると、 XML::"
"DOM::Parser のオプションである _KeepCDATA_ が 1 に設定され、 CDATASections を"
"テキストノードに変換せずに CDATASection に保存するようになります。その後の "
"CDATASection ノードは、 1 つにまとめられます。何か問題があれば教えてくださ"
"い。\n"
"\n"
"また、 XML::Parser 2.27 もしくはそれ以降を使用し、 _ParseParamEnt_ を 1 に、 "
"_ExpandParamEnt_ を 0 に設定すると、 DTD 内にあるエンティティ参照 (例: "
"%pent;) のパラメータ展開を省略することができるようになります。詳しくは /"
"_Hidden_Nodes_ をお読みください。\n"
"\n"
"Document には _Node_ オブジェクトを含むツリー構造が含まれています。 Node はそ"
"の種類によって他の Node を含むことができます。 Document には Element, Text, "
"Comment, CDATASection の各ノードを含みます。また、 Element は Attr, Element, "
"Text, Comment, CDATASection の各ノードを含みます。他のノードの場合は、子ノー"
"ドを含むことができない場合があります。\n"
"\n"
"このモジュールは DOM の仕様にはまだ含まれていない、いくつかのノードタイプに>"
"も対応しています。たとえば ElementDecl (<!ELEMENT ...> 宣言) や AttlistDecl "
"(<!ATTLIST ...> 宣言) 、そして XMLDecl (<?xml ...?> 宣言) や AttDef "
"(AttlistDecl 内での属性定義) などがあります。"

#. tumbleweed/perl-XML-DOM-XPath/summary
#. leap/perl-XML-DOM-XPath/summary
msgid ""
"Perl extension to add XPath support to XML::DOM, using XML::XPath engine"
msgstr ""

#. tumbleweed/perl-XML-DOM-XPath/description
#. leap/perl-XML-DOM-XPath/description
msgid ""
"XML::DOM::XPath allows you to use XML::XPath methods to query a DOM. This is "
"often much easier than relying only on getElementsByTagName."
msgstr ""

#. tumbleweed/perl-XML-Filter-BufferText/summary
#. leap/perl-XML-Filter-BufferText/summary
msgid "Filter to put all characters() in one event"
msgstr ""

#. tumbleweed/perl-XML-Filter-BufferText/description
#. leap/perl-XML-Filter-BufferText/description
msgid ""
"This is a very simple filter. One common cause of grief (and programmer "
"error) is that XML parsers aren't required to provide character events in "
"one chunk. They can, but are not forced to, and most don't. This filter does "
"the trivial but oft-repeated task of putting all characters into a single "
"event.\n"
"\n"
"Note that this won't help you cases such as:\n"
"\n"
"  <foo> blah <!-- comment --> phubar </foo>\n"
"\n"
"In the above case, given the interleaving comment, there will be two "
"'character()' events. This may be worked around in the future if there is "
"demand for it.\n"
"\n"
"An interesting way to use this filter, instead of telling users to use it, "
"is to return it from your handler's constructor, already configured and all. "
"That'll make the buffering totally transparent to them ('XML::SAX::Writer' "
"does that)."
msgstr ""

#. tumbleweed/perl-XML-Generator-PerlData/summary
#. leap/perl-XML-Generator-PerlData/summary
#, fuzzy
msgid ""
"Perl extension for generating SAX2 events from nested Perl data structures"
msgstr "LALR パーサを生成して使用するための Perl 拡張"

#. tumbleweed/perl-XML-Generator-PerlData/description
#. leap/perl-XML-Generator-PerlData/description
msgid ""
"XML::Generator::PerlData provides a simple way to generate SAX2 events from "
"nested Perl data structures, while providing finer-grained control over the "
"resulting document streams.\n"
"\n"
"Processing comes in two flavors: *Simple Style* and *Stream Style*:\n"
"\n"
"In a nutshell, 'simple style' is best used for those cases where you have a "
"a single Perl data structure that you want to convert to XML as quickly and "
"painlessly as possible. 'Stream style' is more useful for cases where you "
"are receiving chunks of data (like from a DBI handle) and you want to "
"process those chunks as they appear. See *PROCESSING METHODS* for more info "
"about how each style works."
msgstr ""

#. tumbleweed/perl-XML-Handler-YAWriter/summary
#. leap/perl-XML-Handler-YAWriter/summary
msgid "Yet another Perl SAX XML Writer"
msgstr ""

#. tumbleweed/perl-XML-Handler-YAWriter/description
#. leap/perl-XML-Handler-YAWriter/description
msgid ""
"YAWriter implements Yet Another XML::Handler::Writer. The reasons for this "
"one are that I needed a flexible escaping technique, and want some kind of "
"pretty printing. If an instance of YAWriter is created without any options, "
"the default behavior is to produce an array of strings containing the XML "
"in :\n"
"\n"
"  @{$ya->{Strings}}"
msgstr ""

#. tumbleweed/perl-XML-LibXML-Simple/summary
#. leap/perl-XML-LibXML-Simple/summary
msgid "XML::LibXML clone of XML::Simple::XMLin()"
msgstr ""

#. tumbleweed/perl-XML-LibXML-Simple/description
#. leap/perl-XML-LibXML-Simple/description
msgid ""
"This module is a blunt rewrite of XML::Simple (by Grant McLean) to use the "
"XML::LibXML parser for XML structures, where the original uses plain Perl or "
"SAX parsers."
msgstr ""

#. tumbleweed/perl-XML-Namespace/summary
#. leap/perl-XML-Namespace/summary
#, fuzzy
msgid "Simple support for XML Namespaces"
msgstr "Banshee 向け GStreamer エンジンサポート"

#. tumbleweed/perl-XML-Namespace/description
#. leap/perl-XML-Namespace/description
msgid ""
"This module implements a simple object for representing XML Namespaces in "
"Perl. It provides little more than some syntactic sugar for your Perl "
"programs, saving you the bother of typing lots of long-winded URIs. It was "
"inspired by the Class::RDF::NS module distributed as part of Class::RDF."
msgstr ""

#. tumbleweed/perl-XML-NamespaceFactory/summary
#. leap/perl-XML-NamespaceFactory/summary
msgid "Simple factory objects for SAX namespaced names."
msgstr ""

#. tumbleweed/perl-XML-NamespaceFactory/description
#. leap/perl-XML-NamespaceFactory/description
msgid ""
"Simply create a new XML::NamespaceFactory object with the namespace you wish "
"to use as its single parameter. If you wish to use the empty namespace, "
"simply pass in an empty string (but undef will not do).\n"
"\n"
"Then, when you want to get a JClark name, call a method on that object the "
"name of which is the local name you wish to have. It'll return the JClark "
"notation for that local name in your namespace.\n"
"\n"
"Unfortunately, some local names legal in XML are not legal in Perl. To "
"circumvent this, you can use the hash notation in which you access a key on "
"the object the name of which is the local name you wish to have. This will "
"work just as the method call name but will accept more characters. Note that "
"it does not check that the name you ask for is a valid XML name. This form "
"is more general but slower.\n"
"\n"
"If this is not clear, hopefully the SYNOPSIS should help :)"
msgstr ""

#. tumbleweed/perl-XML-Parser-Lite/summary
#. leap/perl-XML-Parser-Lite/summary
msgid "Lightweight pure-perl XML Parser (based on regexps)"
msgstr ""

#. tumbleweed/perl-XML-Parser-Lite/description
#. leap/perl-XML-Parser-Lite/description
msgid ""
"This module implements an XML parser with a interface similar to the XML::"
"Parser manpage. Though not all callbacks are supported, you should be able "
"to use it in the same way you use XML::Parser. Due to using experimental "
"regexp features it'll work only on Perl 5.6 and above and may behave "
"differently on different platforms.\n"
"\n"
"Note that you cannot use regular expressions or split in callbacks. This is "
"due to a limitation of perl's regular expression implementation (which is "
"not re-entrant)."
msgstr ""

#. tumbleweed/perl-XML-RegExp/summary
#. leap/perl-XML-RegExp/summary
msgid "Regular expressions for XML tokens"
msgstr "XML トークン向けの正規表現"

#. tumbleweed/perl-XML-RegExp/description
#. leap/perl-XML-RegExp/description
msgid ""
"This package contains regular expressions for the following XML tokens: "
"BaseChar, Ideographic, Letter, Digit, Extender, CombiningChar, NameChar, "
"EntityRef, CharRef, Reference, Name, NmToken, and AttValue.\n"
"\n"
"The definitions of these tokens were taken from the XML spec (Extensible "
"Markup Language 1.0) at the http://www.w3.org/TR/REC-xml manpage.\n"
"\n"
"Also contains the regular expressions for the following tokens from the XML "
"Namespaces spec at the http://www.w3.org/TR/REC-xml-names manpage: "
"NCNameChar, NCName, QName, Prefix and LocalPart."
msgstr ""
"このパッケージには、 XML トークンを追跡するための正規表現が含まれています: "
"BaseChar, Ideographic, Letter, Digit, Extender, CombiningChar, NameChar, "
"EntityRef, CharRef, Reference, Name, NmToken, AttValue\n"
"\n"
"これらのトークンの定義は、 http://www.w3.org/TR/REC-xml で公開されているXML "
"仕様 (Extensible Markup Language 1.0) からとられたものです。\n"
"\n"
"また、 http://www.w3.org/TR/REC-xml-names で規定されている、 XML ネームスペー"
"ス仕様が提供するトークンに対する正規表現も含まれています: NCNameChar, "
"NCName, QName, Prefix, LocalPart"

#. tumbleweed/perl-XML-SAX-Base/summary
#. leap/perl-XML-SAX-Base/summary
msgid "Base class SAX Drivers and Filters"
msgstr "SAX ドライバやフィルタ向けのベースクラス"

#. tumbleweed/perl-XML-SAX-Base/description
#. leap/perl-XML-SAX-Base/description
msgid ""
"This module has a very simple task - to be a base class for PerlSAX drivers "
"and filters. Its default behavior is to pass the input directly to the "
"output unchanged. It can be useful to use this module as a base class so you "
"don't have to, for example, implement the characters() callback.\n"
"\n"
"The main advantages that it provides are easy dispatching of events the "
"right way (i.e., it takes care for you of checking that the handler has "
"implemented that method, or has defined an AUTOLOAD), and the guarantee that "
"filters will pass along events that they aren't implementing to handlers "
"downstream that might nevertheless be interested in them."
msgstr ""
"このモジュールでは非常にシンプルな作業を行ないます。それは、 PerlSAX ドライバ"
"やフィルタに対するベースクラスとして機能することです。既定の動作では、入力さ"
"れたものを何も操作せず出力に流すだけですが、このモジュールをベースクラスとし"
"て使用することで、たとえば文字入力のコールバックなどの機能を追加することがで"
"きるようになります。\n"
"\n"
"このクラスの主な利点としては、イベントを正しい方法で (ハンドラがそのようなメ"
"ソッドを実装しているか、もしくは AUTOLOAD を定義しているかなどのチェックを実"
"施して)簡単に発信できるという点があります。またフィルタ側で、必要であるにも関"
"わらずハンドラが実装されていないような場合にも、イベントを渡す保証を行ないま"
"す。"

#. tumbleweed/perl-XML-SAX-Expat/summary
#. leap/perl-XML-SAX-Expat/summary
msgid "SAX2 Driver for Expat (XML::Parser)"
msgstr "Expat (XML::Parser) 向け SAX2 ドライバ"

#. tumbleweed/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from the http://perl-xml."
"sourceforge.net/perl-sax/ manpage.\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""
"このモジュールは Expat (XML::Parser) 上で動作する SAX2 ドライバの実装で、 "
"Ken MacLeod が perl-xml に投稿し、その後更新されたモジュールです。\n"
"\n"
"このモジュールは今もなお不完全なものでありますが、 SAX2 の基本イベントについ"
"ては利用可能な状態にあります。 SAX2 の仕様は現在、 http://perl-xml."
"sourceforge.net/perl-sax/ のマニュアルページにあります。\n"
"\n"
"よりわかりやすい URL と仕様の POD 文書は、現在準備中です。"

#. tumbleweed/perl-XML-SAX-Writer/summary
#. tumbleweed/perl-XML-SAX-Writer/description
msgid "SAX2 XML Writer"
msgstr ""

#. tumbleweed/perl-XML-SemanticDiff/summary
#. leap/perl-XML-SemanticDiff/summary
#, fuzzy
msgid "Perl extension for comparing XML documents."
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-XML-SemanticDiff/description
#. leap/perl-XML-SemanticDiff/description
msgid ""
"XML::SematicDiff provides a way to compare the contents and structure of two "
"XML documents. By default, it returns a list of hashrefs where each hashref "
"describes a single difference between the two docs."
msgstr ""

#. tumbleweed/perl-XML-Simple/summary
msgid "An API for simple XML files"
msgstr ""

#. tumbleweed/perl-XML-Simple/description
msgid ""
"The XML::Simple module provides a simple API layer on top of an underlying "
"XML parsing module (either XML::Parser or one of the SAX2 parser modules). "
"Two functions are exported: 'XMLin()' and 'XMLout()'. Note: you can "
"explicitly request the lower case versions of the function names: 'xml_in()' "
"and 'xml_out()'.\n"
"\n"
"The simplest approach is to call these two functions directly, but an "
"optional object oriented interface (see \"OPTIONAL OO INTERFACE\" below) "
"allows them to be called as methods of an *XML::Simple* object. The object "
"interface can also be used at either end of a SAX pipeline."
msgstr ""

#. tumbleweed/perl-XML-SimpleObject-LibXML/summary
#. leap/perl-XML-SimpleObject-LibXML/summary
#, fuzzy
msgid ""
"Perl extension allowing a simple(r) object representation of an XML::Lib[cut]"
msgstr ""
"XML::LibXML DOM オブジェクトをシンプルなオブジェクト表現で表わす Perl 拡張"

#. tumbleweed/perl-XML-SimpleObject-LibXML/description
#. leap/perl-XML-SimpleObject-LibXML/description
msgid ""
"This is a short and simple class allowing simple object access to a parsed "
"XML::LibXML tree, with methods for fetching children and attributes in as "
"clean a manner as possible. My apologies for further polluting the XML:: "
"space; this is a small and quick module, with easy and compact usage. Some "
"will rightfully question placing another interface over the DOM methods "
"provided by XML::LibXML, but my experience is that people appreciate the "
"total simplicity provided by this module, despite its limitations. These "
"limitations include a minor loss of speed compared to the DOM, loss of "
"control over node types, and protection (aka lack of knowledge) about the "
"DOM. I encourage those who want more control and understanding over the DOM "
"to study XML::LibXML; this module's source can be instructive, too."
msgstr ""

#. tumbleweed/perl-XML-Stream/summary
#. leap/perl-XML-Stream/summary
msgid "Creates an XML Stream connection and parses return data"
msgstr ""
"XML ストリーム接続を作成して送信し、返却されたデータを処理するモジュール"

#. tumbleweed/perl-XML-Stream/description
#. leap/perl-XML-Stream/description
msgid ""
"This module provides the user with methods to connect to a remote server, "
"send a stream of XML to the server, and receive/parse an XML stream from the "
"server. It is primarily based work for the Etherx XML router developed by "
"the Jabber Development Team. For more information about this project visit "
"http://xmpp.org/protocols/streams/.\n"
"\n"
"XML::Stream gives the user the ability to define a central callback that "
"will be used to handle the tags received from the server. These tags are "
"passed in the format defined at instantiation time. the closing tag of an "
"object is seen, the tree is finished and passed to the call back function. "
"What the user does with it from there is up to them.\n"
"\n"
"For a detailed description of how this module works, and about the data "
"structure that it returns, please view the source of Stream.pm and look at "
"the detailed description at the end of the file.\n"
"\n"
"NOTE: The parser that XML::Stream::Parser provides, as are most Perl "
"parsers, is synchronous. If you are in the middle of parsing a packet and "
"call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as we all know threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""
"このモジュールはユーザに対して、リモートのサーバに接続して XML を送信し、サー"
"バから返却された XML のデータを受信および解釈するためのメソッドを提供します。"
"主に Jabber 開発チームが開発している Etherx XML ルータ向けに作られた仕組みで"
"す。このプロジェクトについて、詳しくはhttp://xmpp.org/protocols/streams/ をお"
"読みください。\n"
"\n"
"XML::Stream はユーザに対して、サーバから返却され受信されたタグを、処理するた"
"めの中央コールバックを定義する機能を提供します。これらのタグは、インスタンス"
"化の時点で定義した書式で受け渡されます。オブジェクトの閉じタグが見つかると、"
"ツリーは終了したものと見なされ、コールバック関数に渡されます。その後の処理は"
"自由に設定することができます。\n"
"\n"
"このモジュールの動作に関する詳しい説明や、返却されるデータの構造について、詳"
"しくは Stream.pm のソースコード、もしくはそのファイルの末尾にある詳細な説明文"
"をお読みください。\n"
"\n"
"注意: XML::Stream::Parser で提供するパーサはほぼ Perl で作成された仕組みで、"
"同期処理として実行されます。パケットの処理に介入する場合や、ユーザ定義のコー"
"ルバックなどを使用した場合は、それらのコールバックが終わるまで処理が止まって"
"しまいます。言い換えると、パケットを非同期に処理することはできず、他のパケッ"
"トの送信が終わったあとは、その応答を待つことになりますので、ご注意ください。"
"スレッド処理によって解決することもできますが、 Perl のスレッド処理は OS のも"
"のと同等ではないことに注意してください。この問題は、将来的に変更される可能性"
"もあります。"

#. tumbleweed/perl-XML-Twig/summary
msgid "Perl Module for Processing Huge Xml Documents in Tree Mode"
msgstr "巨大な XML ドキュメントをツリーモードで解析するための Perl モジュール"

#. tumbleweed/perl-XML-Twig/description
#. leap/perl-XML-Twig/description
msgid ""
"This module provides a way to process XML documents. It is build on top of "
"'XML::Parser'.\n"
"\n"
"The module offers a tree interface to the document, while allowing you to "
"output the parts of it that have been completely processed.\n"
"\n"
"It allows minimal resource (CPU and memory) usage by building the tree only "
"for the parts of the documents that need actual processing, through the use "
"of the 'the twig_roots manpage ' and 'the twig_print_outside_roots manpage ' "
"options. The 'the finish manpage ' and 'the finish_print manpage ' methods "
"also help to increase performances.\n"
"\n"
"XML::Twig tries to make simple things easy so it tries its best to takes "
"care of a lot of the (usually) annoying (but sometimes necessary) features "
"that come with XML and XML::Parser."
msgstr ""
"このモジュールは、 XML ドキュメントを処理する機能を提供します。このモジュール"
"は'XML::Parser' 上で構築されています。\n"
"\n"
"このモジュールは、ドキュメントに対するツリー構造のインターフェイスを提供しま"
"す。これにより、処理済みの形式で各パーツにアクセスすることができます。\n"
"\n"
"このモジュールは、実際の処理作業に必要なドキュメントのパーツに対してのみツ"
"リー構造を構築するため、最小限のリソース (CPU およびメモリ) で処理できるよう"
"になっています。それぞれ 'twig_roots' や 'twig_print_outside_roots' のオプ"
"ションをお読みください。また、 'finish' や 'finish_print' メソッドを利用する"
"ことで、性能を高めることもできます。\n"
"\n"
"XML::Twig はできるかぎりシンプルな処理を行ない、 XML や XML::Parser が提供す"
"る各種の厄介な (だが時によっては必要な) 機能をうまく処理するようにしていま"
"す。"

#. tumbleweed/perl-XML-Writer/summary
msgid "Perl extension for writing XML documents"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. tumbleweed/perl-XML-Writer/description
#. leap/perl-XML-Writer/description
msgid ""
"XML::Writer is a helper module for Perl programs that write an XML document. "
"The module handles all escaping for attribute values and character data and "
"constructs different types of markup, such as tags, comments, and processing "
"instructions.\n"
"\n"
"By default, the module performs several well-formedness checks to catch "
"errors during output. This behaviour can be extremely useful during "
"development and debugging, but it can be turned off for production-grade "
"code.\n"
"\n"
"The module can operate either in regular mode in or Namespace processing "
"mode. In Namespace mode, the module will generate Namespace Declarations "
"itself, and will perform additional checks on the output.\n"
"\n"
"Additional support is available for a simplified data mode with no mixed "
"content: newlines are automatically inserted around elements and elements "
"can optionally be indented based as their nesting level."
msgstr ""
"XML::Writer は Perl プログラムに対するヘルパーモジュールで、 XML 文書を書き込"
"む際に使用します。このモジュールは属性値内や文字データ内にあるすべてのエス"
"ケープ文字を処理することができ、タグやコメント、処理命令などの異なるマーク"
"アップを扱うことができます。\n"
"\n"
"既定では、このモジュールはいくつかの形式チェックを行ない、出力時にエラーをと"
"らえることができるようになっています。この動作は開発やデバッグの際には便利で"
"すが、本番用途のコードでは無効化することもできます。\n"
"\n"
"このモジュールは通常モードでの処理のほか、ネームスペース処理モードで動作させ"
"ることもできます。ネームスペースモードの場合、モジュールはネームスペース自身"
"の定義を生成したあと、出力に対する追加チェックを行ないます。\n"
"\n"
"また、単純化データモードとして、混在コンテンツのないモードにも対応しています:"
"必要であれば要素の間には自動的に改行を入れ、入れ子レベルに応じて自動的に字下"
"げを行なったりすることもできます。"

#. tumbleweed/perl-XML-XPath/summary
msgid "Parse and evaluate XPath statements"
msgstr ""

#. tumbleweed/perl-XML-XPath/description
msgid ""
"This module aims to comply exactly to the XPath specification at http://www."
"w3.org/TR/xpath and yet allow extensions to be added in the form of "
"functions.Modules such as XSLT and XPointer may need to do this as they "
"support functionality beyond XPath."
msgstr ""

#. tumbleweed/perl-XML-XPathEngine/summary
#. leap/perl-XML-XPathEngine/summary
msgid "Re-usable XPath engine for DOM-like trees"
msgstr "DOM のようなツリー構造向けの再利用可能な XPath エンジン"

#. tumbleweed/perl-XML-XPathEngine/description
#. leap/perl-XML-XPathEngine/description
msgid ""
"This module provides an XPath engine, that can be re-used by other module/"
"classes that implement trees.\n"
"\n"
"In order to use the XPath engine, nodes in the user module need to mimick "
"DOM nodes. The degree of similitude between the user tree and a DOM dictates "
"how much of the XPath features can be used. A module implementing all of the "
"DOM should be able to use this module very easily (you might need to add the "
"cmp method on nodes in order to get ordered result sets).\n"
"\n"
"This code is a more or less direct copy of the the XML::XPath manpage module "
"by Matt Sergeant. I only removed the XML processing part to remove the "
"dependency on XML::Parser, applied a couple of patches, renamed a whole lot "
"of methods to make Pod::Coverage happy, and changed the docs.\n"
"\n"
"The article eXtending XML XPath, http://www.xmltwig.com/article/"
"extending_xml_xpath/ should give authors who want to use this module enough "
"background to do so.\n"
"\n"
"Otherwise, my email is below ;--)\n"
"\n"
"*WARNING*: while the underlying code is rather solid, this module mostly "
"lacks docs. As they say, \"patches welcome\"..."
msgstr ""
"このモジュールは XPath エンジンを提供しています。ツリー構造を実装する他のモ"
"ジュールやクラスで再利用することもできます。\n"
"\n"
"XPath エンジンを利用するには、ユーザモジュール内のノードが DOM ノードを擬似す"
"る必要があります。ユーザツリーと DOM の間での疑似度合いによって、利用可能な "
"XPath 機能の多さが決まります。すべての DOM 機能を実装するモジュールであれば、"
"このモジュールはとても簡単に扱うことができます(結果セットの順序を制御するた"
"め、 cmp メソッドを追加する必要があるはずです) 。\n"
"\n"
"このコードは多かれ少なかれ、 Matt Sergeant 氏が作成する XML::Path モジュール"
"の直接コピーになっています。 XML::Parser との依存関係を削除する目的で、XML 処"
"理パートの部分のみ削除し、複数のパッチを適用して Pod::Coverage をうまく動作さ"
"せるために多数のメソッドの名称を変更し、ドキュメントを変更しています。\n"
"\n"
"XML XPath の拡張に関する記事 (http://www.xmltwig.com/article/"
"extending_xml_xpath/) では、このモジュールを利用するプログラムの作者向けに十"
"分な背景情報を提供しています。\n"
"\n"
"上記でも不十分な場合は、メールて知らせてください ;--)\n"
"\n"
"*警告*: 裏側のコードは比較的完全なものではありますが、このモジュールは多くの"
"部分でドキュメンテーションを欠いています。つまりは \"パッチ歓迎\"ということで"
"す..."

#. tumbleweed/perl-YAML/summary
#. leap/perl-YAML/summary
msgid "YAML Ain't Markup Language™"
msgstr "YAML - マークアップ言語以外のもの (tm)"

#. tumbleweed/perl-YAML/description
#, fuzzy
msgid ""
"The YAML.pm module implements a YAML Loader and Dumper based on the YAML 1.0 "
"specification. http://www.yaml.org/spec/\n"
"\n"
"YAML is a generic data serialization language that is optimized for human "
"readability. It can be used to express the data structures of most modern "
"programming languages. (Including Perl!!!)\n"
"\n"
"For information on the YAML syntax, please refer to the YAML specification."
msgstr ""
"YAML.pm は YAML 1.0 仕様をベースにした YML ローダ／ダンパーです。詳しくは"
"http://www.yaml.org/spec/ をお読みください。\n"
"\n"
"YAML は人間の可読性に最適化されているデータ直列化言語です。 Perl を含む多くの"
"近代的プログラミング言語のデータ構造を表現するのに使用することができます。\n"
"\n"
"YAML の文法について、詳しくは YAML 仕様をお読みください。"

#. tumbleweed/perl-YAML-Perl/summary
#. leap/perl-YAML-Perl/summary
#, fuzzy
msgid "Pure Perl YAML Implementation"
msgstr "初期設定管理"

#. tumbleweed/perl-YAML-Perl/description
#. leap/perl-YAML-Perl/description
msgid ""
"PyYAML is the most robust and correct YAML module for a dynamic language. It "
"is (obviously) written in/for Python. This module is a complete port of "
"PyYAML to Perl."
msgstr ""

#. tumbleweed/perl-YAML-Tiny/summary
#. leap/perl-YAML-Tiny/summary
msgid "Read/Write YAML files with as little code as possible"
msgstr ""

#. tumbleweed/perl-YAML-Tiny/description
#. leap/perl-YAML-Tiny/description
msgid ""
"*YAML::Tiny* is a perl class for reading and writing YAML-style files, "
"written with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules. The *::Tiny* family of modules is specifically intended to "
"provide an ultralight and zero-dependency alternative to many more-thorough "
"standard modules.\n"
"\n"
"This module is primarily for reading human-written files (like simple config "
"files) and generating very simple human-readable files. Note that I said "
"*human-readable* and not *geek-readable*. The sort of files that your "
"average manager or secretary should be able to look at and make sense of.\n"
"\n"
"the YAML::Tiny manpage does not generate comments, it won't necessarily "
"preserve the order of your hashes, and it will normalise if reading in and "
"writing out again.\n"
"\n"
"It only supports a very basic subset of the full YAML specification.\n"
"\n"
"Usage is targeted at files like Perl's META.yml, for which a small and "
"easily-embeddable module is extremely attractive.\n"
"\n"
"Features will only be added if they are human readable, and can be written "
"in a few lines of code. Please don't be offended if your request is refused. "
"Someone has to draw the line, and for YAML::Tiny that someone is me.\n"
"\n"
"If you need something with more power move up to the YAML manpage (7 "
"megabytes of memory overhead) or the YAML::XS manpage (6 megabytes memory "
"overhead and requires a C compiler).\n"
"\n"
"To restate, the YAML::Tiny manpage does *not* preserve your comments, "
"whitespace, or the order of your YAML data. But it should round-trip from "
"Perl structure to file and back again just fine."
msgstr ""

#. tumbleweed/perl-aliased/summary
#. leap/perl-aliased/summary
msgid "Use shorter versions of class names"
msgstr ""

#. tumbleweed/perl-aliased/description
#. leap/perl-aliased/description
msgid ""
"'aliased' is simple in concept but is a rather handy module. It loads the "
"class you specify and exports into your namespace a subroutine that returns "
"the class name. You can explicitly alias the class to another name or, if "
"you prefer, you can do so implicitly. In the latter case, the name of the "
"subroutine is the last part of the class name. Thus, it does something "
"similar to the following:\n"
"\n"
"  \n"
"\n"
"  use Some::Annoyingly::Long::Module::Name::Customer;   sub Customer "
"{     return 'Some::Annoyingly::Long::Module::Name::Customer';   }   my "
"$cust = Customer->new;\n"
"\n"
"This module is useful if you prefer a shorter name for a class. It's also "
"handy if a class has been renamed.\n"
"\n"
"(Some may object to the term \"aliasing\" because we're not aliasing one "
"namespace to another, but it's a handy term. Just keep in mind that this is "
"done with a subroutine and not with typeglobs and weird namespace munging.)\n"
"\n"
"Note that this is *only* for 'use'ing OO modules. You cannot use this to "
"load procedural modules. See the the Why OO Only? manpage section. Also, "
"don't let the version number fool you. This code is ridiculously simple and "
"is just fine for most use."
msgstr ""

#. tumbleweed/perl-asa/summary
#. leap/perl-asa/summary
msgid "Lets your class/object say it works like something else"
msgstr ""

#. tumbleweed/perl-asa/description
#. leap/perl-asa/description
msgid ""
"Perl 5 doesn't natively support Java-style interfaces, and it doesn't "
"support Perl 6 style roles either.\n"
"\n"
"You can get both of these things in half a dozen different ways via various "
"CPAN modules, but they usually require that you buy into \"their way\" of "
"implementing your code.\n"
"\n"
"Other have turned to \"duck typing\".\n"
"\n"
"This is, for the most part, a fairly naive check that says \"can you do this "
"method\", under the \"if it looks like a duck, and quacks like a duck, then "
"it must be a duck\".\n"
"\n"
"It assumes that if you have a '->quack' method, then they will treat you as "
"a duck, because doing things like adding 'Duck' to your '@ISA' array means "
"you are also forced to take their implementation.\n"
"\n"
"There is, of course, a better way.\n"
"\n"
"For better or worse, Perl's '->isa' functionality to determine if something "
"is or is not a particular class/object is defined as a *method*, not a "
"function, and so that means that as well as adding something to you '@ISA' "
"array, so that Perl's 'UNIVERSAL::isa' method can work with it, you are also "
"allowed to simply overload your own 'isa' method and answer directly whether "
"or not you are something.\n"
"\n"
"The simplest form of the idiom looks like this.\n"
"\n"
"  sub isa {       return 1 if $_[1] eq 'Duck';       shift->SUPER::"
"isa(@_);   }\n"
"\n"
"This reads \"Check my type as normal, but if anyone wants to know if I'm a "
"duck, then tell them yes\".\n"
"\n"
"Now, there are a few people that have argued that this is \"lying\" about "
"your class, but this argument is based on the idea that '@ISA' is somehow "
"more \"real\" than using the method directly.\n"
"\n"
"It also assumes that what you advertise you implement needs to be in sync "
"with the method resolution for any given function. But in the best and "
"cleanest implementation of code, the API is orthogonal (although most often "
"related) to the implementation.\n"
"\n"
"And although '@ISA' is about implementation *and* API, overloading 'isa' to "
"let you change your API is not at all bad when seen in this light."
msgstr ""

#. tumbleweed/perl-boolean/summary
#. leap/perl-boolean/summary
#, fuzzy
msgid "Boolean support for Perl"
msgstr "SWP 向け OpenSSL サポート"

#. tumbleweed/perl-boolean/description
#. leap/perl-boolean/description
msgid ""
"Most programming languages have a native 'Boolean' data type. Perl does "
"not.\n"
"\n"
"Perl has a simple and well known Truth System. The following scalar values "
"are false:\n"
"\n"
"    $false1 = undef;     $false2 = 0;     $false3 = 0.0;     $false4 = "
"'';     $false5 = '0';\n"
"\n"
"Every other scalar value is true.\n"
"\n"
"This module provides basic Boolean support, by defining two special objects: "
"'true' and 'false'."
msgstr ""

#. tumbleweed/perl-checkbot/summary
#. leap/perl-checkbot/summary
msgid "WWW Link Verifier"
msgstr "WWW リンク検証ツール"

#. tumbleweed/perl-checkbot/description
#. leap/perl-checkbot/description
msgid ""
"Checkbot is a perl5 script which can verify links within a region of the "
"World Wide Web. It checks all pages within an identified region, and all "
"links within that region. After checking all links within the region, it "
"will also check all links which point outside of the region, and then stop.\n"
"\n"
"Checkbot regularly writes reports on its findings, including all servers "
"found in the region, and all links with problems on those servers.\n"
"\n"
"Checkbot was written originally to check a number of servers at once. This "
"has implied some design decisions, so you might want to keep that in mind "
"when making suggestions. Speaking of which, be sure to check the to do file "
"on the website for things which have been suggested for Checkbot."
msgstr ""
"Checkbot は Perl5 のスクリプトで、特定の範囲の World Wide Web のリンクを検証"
"することができる仕組みです。認識した範囲内ですべてのページをチェックすること"
"ができるほか、指定した範囲の全リンクを検証することができます。指定した範囲に"
"あるすべてのリンク検証が完了すると、範囲外の全リンクに対しても検証を行ない、"
"それが完了すると停止します。\n"
"\n"
"Checkbot は検出した内容を定期的に報告する機能を備えています。たとえば範囲内に"
"あるすべてのサーバのほか、これらのサーバ内でのリンク問題なども報告します。\n"
"\n"
"Checkbot はもともと、複数のサーバのコンテンツを同時にチェックするのに作られた"
"仕組みです。これはいくつかの設計上の意図を意味するもので、これを念頭に置いて"
"使用する必要があります。 Web サイト上のファイルに対してチェックを行なう場合"
"は、 Checkbot でのチェックが有効でしょう。"

#. tumbleweed/perl-constant-boolean/summary
#. leap/perl-constant-boolean/summary
msgid "Define TRUE and FALSE constants."
msgstr ""

#. tumbleweed/perl-constant-boolean/description
#. leap/perl-constant-boolean/description
msgid ""
"Defines 'TRUE' and 'FALSE' constants in caller's namespace. You could use "
"simple values like empty string or zero for false, or any non-empty and non-"
"zero string value as true, but the 'TRUE' and 'FALSE' constants are more "
"descriptive.\n"
"\n"
"It is virtually the same as:\n"
"\n"
"     use constant TRUE => !! 1;   use constant FALSE => !! '';\n"
"\n"
"The constants exported by 'constant::boolean' are not reported by the Test::"
"Pod::Coverage manpage, so it is more convenient to use this module than to "
"define 'TRUE' and 'FALSE' constants by yourself.\n"
"\n"
"The constants can be removed from class API with 'no constant::boolean' "
"pragma or some universal tool like the namespace::clean manpage."
msgstr ""

#. tumbleweed/perl-constant-defer/summary
#. leap/perl-constant-defer/summary
msgid "Constant Subs with Deferred Value Calculation"
msgstr ""

#. tumbleweed/perl-constant-defer/description
#. leap/perl-constant-defer/description
msgid ""
"'constant::defer' creates a subroutine which on the first call runs given "
"code to calculate its value, and on any subsequent calls just returns that "
"value, like a constant. The value code is discarded once run, allowing it to "
"be garbage collected.\n"
"\n"
"Deferring a calculation is good if it might take a lot of work or produce a "
"big result but is only needed sometimes or only well into a program run. If "
"it's never needed then the value code never runs.\n"
"\n"
"A deferred constant is generally not inlined or folded (see the perlop/"
"Constant Folding manpage) since it's not a single scalar value. In the "
"current implementation a deferred constant becomes a plain constant after "
"the first use, so may inline etc in code compiled after that (see the /"
"IMPLEMENTATION manpage below).\n"
"\n"
"See _examples/simple.pl_ in the constant-defer source code for a complete "
"sample program."
msgstr ""

#. tumbleweed/perl/perl-doc/summary
#. leap/perl/perl-doc/summary
msgid "Perl Documentation"
msgstr "Perl ドキュメンテーション"

#. tumbleweed/perl/perl-doc/description
#. leap/perl/perl-doc/description
msgid "Perl man pages and pod files."
msgstr "Perl のマニュアルページと pod ファイルです。"

#. tumbleweed/perl-experimental/summary
#. leap/perl-experimental/summary
msgid "Experimental features made easy"
msgstr ""

#. tumbleweed/perl-experimental/description
#. leap/perl-experimental/description
msgid ""
"This pragma provides an easy and convenient way to enable or disable "
"experimental features.\n"
"\n"
"Every version of perl has some number of features present but considered "
"\"experimental.\" For much of the life of Perl 5, this was only a "
"designation found in the documentation. Starting in Perl v5.10.0, and more "
"aggressively in v5.18.0, experimental features were placed behind pragmata "
"used to enable the feature and disable associated warnings.\n"
"\n"
"The 'experimental' pragma exists to combine the required incantations into a "
"single interface stable across releases of perl. For every experimental "
"feature, this should enable the feature and silence warnings for the "
"enclosing lexical scope:\n"
"\n"
"  use experimental 'feature-name';\n"
"\n"
"To disable the feature and, if applicable, re-enable any warnings, use:\n"
"\n"
"  no experimental 'feature-name';\n"
"\n"
"The supported features, documented further below, are:\n"
"\n"
"\tarray_base    - allow the use of $[ to change the starting index of @array "
"\tautoderef     - allow push, each, keys, and other built-ins on references "
"\tlexical_topic - allow the use of lexical $_ via \"my $_\" \tpostderef     "
"- allow the use of postfix dereferencing expressions, including "
"\t                in interpolating strings \trefaliasing   - allow aliasing "
"via \\$x = \\$y \tregex_sets    - allow extended bracketed character classes "
"in regexps \tsignatures    - allow subroutine signatures (for named "
"arguments) \tsmartmatch    - allow the use of ~~ \tswitch        - allow the "
"use of ~~, given, and when"
msgstr ""

#. tumbleweed/perl-libwww-perl/summary
#. tumbleweed/perl-libwww-perl/description
msgid "The World-Wide Web library for Perl"
msgstr "Perl 向け World-Wide Web (www) ライブラリ"

#. tumbleweed/perl-mousex-getopt/summary
msgid "A Mouse role for processing command line options"
msgstr ""

#. tumbleweed/perl-mousex-getopt/description
msgid ""
"A Mouse role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line."
msgstr ""

#. tumbleweed/perl-namespace-autoclean/summary
#. leap/perl-namespace-autoclean/summary
msgid "Keep imports out of your namespace"
msgstr ""

#. tumbleweed/perl-namespace-autoclean/description
#. leap/perl-namespace-autoclean/description
msgid ""
"When you import a function into a Perl package, it will naturally also be "
"available as a method.\n"
"\n"
"The 'namespace::autoclean' pragma will remove all imported symbols at the "
"end of the current package's compile cycle. Functions called in the package "
"itself will still be bound by their name, but they won't show up as methods "
"on your class or instances.\n"
"\n"
"This module is very similar to namespace::clean, except it will clean all "
"imported functions, no matter if you imported them before or after you "
"'use'd the pragma. It will also not touch anything that looks like a "
"method.\n"
"\n"
"If you're writing an exporter and you want to clean up after yourself (and "
"your peers), you can use the '-cleanee' switch to specify what package to "
"clean:\n"
"\n"
"  package My::MooseX::namespace::autoclean;   use strict;\n"
"\n"
"  use namespace::autoclean (); # no cleanup, just load\n"
"\n"
"  sub import {       namespace::autoclean->import(         -cleanee => "
"scalar(caller),       );   }"
msgstr ""

#. tumbleweed/perl-namespace-clean/summary
#. tumbleweed/perl-namespace-clean/description
#. leap/perl-namespace-clean/summary
#. leap/perl-namespace-clean/description
msgid "Keep imports and functions out of your namespace"
msgstr "ネームスペース外のインポートと関数の維持"

#. tumbleweed/perl-strictures/summary
#. leap/perl-strictures/summary
msgid "Turn On Strict and Make Most Warnings Fatal"
msgstr ""

#. tumbleweed/perl-strictures/description
#. leap/perl-strictures/description
msgid ""
"I've been writing the equivalent of this module at the top of my code for "
"about a year now. I figured it was time to make it shorter.\n"
"\n"
"Things like the importer in 'use Moose' don't help me because they turn "
"warnings on but don't make them fatal -- which from my point of view is "
"useless because I want an exception to tell me my code isn't warnings-"
"clean.\n"
"\n"
"Any time I see a warning from my code, that indicates a mistake.\n"
"\n"
"Any time my code encounters a mistake, I want a crash -- not spew to STDERR "
"and then unknown (and probably undesired) subsequent behaviour.\n"
"\n"
"I also want to ensure that obvious coding mistakes, like indirect object "
"syntax (and not so obvious mistakes that cause things to accidentally "
"compile as such) get caught, but not at the cost of an XS dependency and not "
"at the cost of blowing things up on another machine.\n"
"\n"
"Therefore, strictures turns on additional checking, but only when it thinks "
"it's running in a test file in a VCS checkout -- although if this causes "
"undesired behaviour this can be overridden by setting the "
"'PERL_STRICTURES_EXTRA' environment variable.\n"
"\n"
"If additional useful author side checks come to mind, I'll add them to the "
"'PERL_STRICTURES_EXTRA' code path only -- this will result in a minor "
"version increase (e.g. 1.000000 to 1.001000 (1.1.0) or similar). Any fixes "
"only to the mechanism of this code will result in a sub-version increase (e."
"g. 1.000000 to 1.000001 (1.0.1))."
msgstr ""

#. tumbleweed/perl-syntax/summary
#. leap/perl-syntax/summary
msgid "Activate syntax extensions"
msgstr ""

#. tumbleweed/perl-syntax/description
#. leap/perl-syntax/description
msgid ""
"This module activates community provided syntax extensions to Perl. You pass "
"it a feature name, and optionally a scalar with arguments, and the "
"dispatching system will load and install the extension in your package.\n"
"\n"
"The import arguments are parsed with the Data::OptList manpage. There are no "
"standardised options. Please consult the documentation for the specific "
"syntax feature to find out about possible configuration options.\n"
"\n"
"The passed in feature names are simply transformed: 'function' becomes the "
"Syntax::Feature::Function manpage and 'foo_bar' would become 'Syntax::"
"Feature::FooBar'."
msgstr ""

#. leap/perl-AnyEvent-HTTP/description
msgid ""
"This module is an the AnyEvent manpage user, you need to make sure that you "
"use and run a supported event loop.\n"
"\n"
"This module implements a simple, stateless and non-blocking HTTP client. It "
"supports GET, POST and other request methods, cookies and more, all on a "
"very low level. It can follow redirects, supports proxies, and automatically "
"limits the number of connections to the values specified in the RFC.\n"
"\n"
"It should generally be a \"good client\" that is enough for most HTTP tasks. "
"Simple tasks should be simple, but complex tasks should still be possible as "
"the user retains control over request and response headers.\n"
"\n"
"The caller is responsible for authentication management, cookies (if the "
"simplistic implementation in this module doesn't suffice), referer and other "
"high-level protocol details for which this module offers only limited "
"support."
msgstr ""

#. leap/perl-App-CELL/description
msgid ""
"This is the top-level module of App::CELL, the Configuration, Error-"
"handling, Localization, and Logging framework for applications (or scripts) "
"written in Perl.\n"
"\n"
"For details, read the POD in the the App::CELL manpage distro. For an "
"introduction, read the App::CELL::Guide manpage."
msgstr ""

#. leap/perl-App-Cmd/description
msgid ""
"App::Cmd is intended to make it easy to write complex command-line "
"applications without having to think about most of the annoying things "
"usually involved.\n"
"\n"
"For information on how to start using App::Cmd, see the App::Cmd::Tutorial "
"manpage."
msgstr ""

#. leap/perl-App-Dochazka-CLI/description
msgid ""
"the App::Dochazka::CLI manpage is the Command Line Interface (CLI) component "
"of the Dochazka Attendance & Time Tracking system.\n"
"\n"
"In order to work, the CLI must be pointed at a running the App::Dochazka::"
"REST manpage (i.e., Dochazka REST server) instance by setting the "
"'MREST_CLI_URI_BASE' site configuration parameter.\n"
"\n"
"Detailed documentation covering configuration, deployment, and the commands "
"that can be used with the CLI can be found in the App::Dochazka::CLI::Guide "
"manpage.\n"
"\n"
"This module is used to store some \"global\" package variables that are used "
"throughout the CLI code base."
msgstr ""

#. leap/perl-App-Dochazka-Common/description
msgid ""
"This distro contains modules that are used by both the server the App::"
"Dochazka::REST manpage and the command-line client the App::Dochazka::CLI "
"manpage."
msgstr ""

#. leap/perl-Business-ISBN-Data/summary
msgid "data pack for Business::ISBN"
msgstr ""

#. leap/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. 'Business::ISBN' "
"will load it when it loads.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. You can retrieve this yourself at the http://www.isbn-"
"international.org/agency?rmxml=1 manpage. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/RangeMessage."
"xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data is "
"likely to be older data.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""

#. leap/perl-CPAN-Meta/description
msgid ""
"Software distributions released to the CPAN include a _META.json_ or, for "
"older distributions, _META.yml_, which describes the distribution, its "
"contents, and the requirements for building and installing the distribution. "
"The data structure stored in the _META.json_ file is described in the CPAN::"
"Meta::Spec manpage.\n"
"\n"
"CPAN::Meta provides a simple class to represent this distribution metadata "
"(or _distmeta_), along with some helpful methods for interrogating that "
"data.\n"
"\n"
"The documentation below is only for the methods of the CPAN::Meta object. "
"For information on the meaning of individual fields, consult the spec."
msgstr ""

#. leap/perl-Carp-Clan/summary
msgid "Carp::Clan Perl module"
msgstr "Carp::Clan Perl モジュール"

#. leap/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, etcetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one.\n"
"\n"
"Forcing a Stack Trace     As a debugging aid, you can force \"'Carp::Clan'\" "
"to treat a \"croak\" as     a \"confess\" and a \"carp\" as a \"cluck\". In "
"other words, force a detailed     stack trace to be given. This can be very "
"helpful when trying to     understand why, or from where, a warning or error "
"is being generated.\n"
"\n"
"    This feature is enabled either by \"importing\" the non-existent "
"symbol     'verbose', or by setting the global variable \"'$Carp::Clan::"
"Verbose'\"     to a true value.\n"
"\n"
"    You would typically enable it by saying\n"
"\n"
"        use Carp::Clan qw(verbose);\n"
"\n"
"    Note that you can both specify a \"family pattern\" and the string     "
"\"verbose\" inside the \"'qw()'\" term (or argument list) of the \"use\"     "
"statement, but consider that a pattern of packages to skip is pointless     "
"when \"verbose\" causes a full stack trace anyway."
msgstr ""
"このモジュールは Perl 5.005_03 における \"'Carp.pm'\" をベースにしたモジュー"
"ルです。 \"use\" ステートメント内の \"'qw()'\" 句 (またはパラメータリスト) "
"で、パターンに該当するすべてのパッケージを飛ばす (スキップする) ように修正さ"
"れています。\n"
"\n"
"たとえば \"Pack::A\", \"Pack::B\" 等のモジュールやクラスがあるものと仮定する"
"と、それらのそれぞれで \"'Carp::Clan qw(^Pack::);'\" を使用している場合があり"
"ます (もしくは、それらのうちのいずれかでエラーや例外が発生した場合を想定しま"
"す) 。\n"
"\n"
"このとき、たとえば \"tool.pl\" というスクリプトが \"Pack::A\" モジュールを呼"
"び出し、 \"Pack::A\" が \"Pack::B\" を呼び出しているとすると、未修正の "
"\"'Carp.pm'\" では、 \"Pack::B\" 内で発生した例外は、 \"tool.pl\" 内の "
"\"Pack::A\" が呼び出された箇所を示す形になり、 \"Pack::B\" を呼び出していた "
"\"Pack::A\" を示すことはありません。\n"
"\n"
"これはたとえば、 \"Pack::B\" が \"Pack::C\" を呼び出していて、その中で例外が"
"発生した場合も同様になります。\n"
"\n"
"これは、言い換えれば \"'Pack::*'\" モジュール内で発生したすべてのエラーが "
"\"tool.pl\" のエラー (つまりあなたの間違い) として報告されることになりま"
"す。\n"
"\n"
"パターンを指定して、パッケージ内の該当する箇所 (またはファミリ) を飛ばすこと"
"は、これらのモジュールが互いに派生関係にない場合に必要となります (そしてこの"
"理由から、(元々の \"'Carp.pm'\" にあるような) '@ISA' を解釈してしまっては解決"
"しません) 。\n"
"\n"
"このモジュールの目的とメリットは、互いにうまく動作するような \"集合\" である"
"ことにあり、様々な場所で例外が発生した場合でも呼び出しの階層構造を表示し、一"
"枚岩のブロックとして見える (それらが単一のモジュールであるかのように) ことを"
"目指しています。\n"
"\n"
"\"'use Carp::Clan'\" を設定していて、単純に特定のモジュール内で発生したすべて"
"のエラーメッセージについて、これらをすべて受け流すようにしたい場合、つまりエ"
"ラーメッセージや警告メッセージ (\"die\" または \"warn\") で表示される場所が、"
"モジュールを呼び出した場所ではなく実際に発生した場所であって欲しい場合 (通常"
"は \"'use Carp;'\" を使用しますが) は、パターンを設定する必要はなく、モジュー"
"ルは自動的に正しい情報を提供します。\n"
"\n"
"これは何もパラメータを指定せずに \"'use Carp::Clan;'\" だけを使用し、 \"carp"
"\" や\"croak\" を適切に使用していれば、警告やエラーのメッセージは自動的に元の"
"場所を示すようになるということです。\n"
"\n"
"これをさらに言い換えれば、パターンは特定のモジュールだけに対して動作させたい"
"場合にのみ指定するものであると言えます。\n"
"\n"
"デバッグ目的でスタックトレースを強制する場合、 \"'Carp::Clan'\" で強制的に"
"\"croak\" を \"confess\" として扱い、 \"carp\" を \"cluck\" として扱うように"
"設定することもできます。これは詳細なスタックトレースを強制する意味になりま"
"す。これは警告やエラーの発生元を特定するのに便利です。\n"
"\n"
"この機能は存在していないシンボル 'verbose' を \"インポート\" することによって"
"有効化できるほか、 \"'$Carp::Clan::Verbose'\" を true に設定しても実現できま"
"す。\n"
"\n"
"一般的には下記のように指定して有効化します:\n"
"\n"
"        use Carp::Clan qw(verbose);\n"
"\n"
"ただし、 \"use\" ステートメント内の \"'qw()'\" の表現には、 \"ファミリパター"
"ン\" と \"verbose\" の両方を (パラメータリストとして) 指定できますが、スキッ"
"プすべきパターンは \"verbose\" を指定してしまうと無視されることに注意してくだ"
"さい。"

#. leap/perl-Class-Load/summary
msgid "a working (require \"Class::Name\") and more"
msgstr "動的なクラス読み込み (require \"Class::Name\")"

#. leap/perl-Class-Singleton/description
msgid ""
"This is the \"Class::Singleton\" module. A Singleton describes an object "
"class that can have only one instance in any system. An example of a "
"Singleton might be a print spooler or system registry. This module "
"implements a Singleton class from which other classes can be derived. By "
"itself, the \"Class::Singleton\" module does very little other than manage "
"the instantiation of a single object. In deriving a class from \"Class::"
"Singleton\", your module will inherit the Singleton instantiation method and "
"can implement whatever specific functionality is required.\n"
"\n"
"For a description and discussion of the Singleton class, see \"Design "
"Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2.\n"
"\n"
"Author: Andy Wardley <abw@wardley.org>"
msgstr ""
"これは \"Class::Singleton\" モジュールです。シングルトンとは、システム内で1 "
"つだけのインスタンスを保持できるクラスのことを指します。シングルトンのオブ"
"ジェクトとしては、たとえば印刷用のスプールシステムや、システムのレジストリな"
"どが挙げられます。このモジュールは、そのようなシングルトンを他のクラスから派"
"生する形で作成することができます。なお、 \"Class::Singleton\" モジュールは、"
"単一のオブジェクトに対するインスタンス化を管理するよりも、非常に小さな処理し"
"か行ないません。 \"Class::Singleton\" からクラスを派生させて作成することで、"
"シングルトンのインスタンス化方式を継承し、必要な機能を実装することができるよ"
"うになります。\n"
"\n"
"シングルトンクラスに関する説明や議論について、詳しくは \"デザインパターン"
"\" (Gamma et al, Addison-Wesley, 1995, 原文 ISBN 0-201-63361-2, 日本語訳  "
"ISBN-10: 4797311126 ISBN-13: 978-4797311129) をお読みください。\n"
"\n"
"作者: Andy Wardley <abw@wardley.org>"

#. leap/perl-Class-Tiny/description
msgid ""
"This module offers a minimalist class construction kit in around 120 lines "
"of code. Here is a list of features:\n"
"\n"
"  * defines attributes via import arguments\n"
"\n"
"  * generates read-write accessors\n"
"\n"
"  * supports lazy attribute defaults\n"
"\n"
"  * supports custom accessors\n"
"\n"
"  * superclass provides a standard 'new' constructor\n"
"\n"
"  * 'new' takes a hash reference or list of key/value pairs\n"
"\n"
"  * 'new' supports providing 'BUILDARGS' to customize constructor options\n"
"\n"
"  * 'new' calls 'BUILD' for each class from parent to child\n"
"\n"
"  * superclass provides a 'DESTROY' method\n"
"\n"
"  * 'DESTROY' calls 'DEMOLISH' for each class from child to parent\n"
"\n"
"Multiple-inheritance is possible, with superclass order determined via mro::"
"get_linear_isa|mro/Functions.\n"
"\n"
"It uses no non-core modules for any recent Perl. On Perls older than v5.10 "
"it requires MRO::Compat. On Perls older than v5.14, it requires Devel::"
"GlobalDestruction."
msgstr ""

#. leap/perl-Config-AutoConf/summary
msgid "A module to implement some of AutoConf macros in pure perl"
msgstr ""

#. leap/perl-Config-AutoConf/description
msgid "A module to implement some of AutoConf macros in pure perl."
msgstr ""

#. leap/perl-Config-IniFiles/summary
msgid "A module for reading .ini-style configuration files."
msgstr "ini 形式の設定ファイルを読み込むためのモジュール"

#. leap/perl-Data-Compare/summary
#, fuzzy
msgid "Compare perl data structures"
msgstr "データ構造のみやすい表示"

#. leap/perl-Data-Dump/description
msgid ""
"This module provide a few functions that traverse their argument and "
"produces a string as its result. The string contains Perl code that, when "
"'eval'ed, produces a deep copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read.\n"
"\n"
"The following functions are provided (only the dd* functions are exported by "
"default):\n"
"\n"
"* dump( ... )"
msgstr ""
"このモジュールは、パラメータで指定した変数を詳しく読み込み、結果を文字列で返"
"却する機能を提供します。文字列には Perl コードが含まれていて、これを 'eval' "
"することで、元の変数に対するディープコピーを生成することができます。\n"
"\n"
"このモジュールの主な機能として、指定したパラメータを読みやすく出力する機能が"
"あげられます。たとえば下記のようになります:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"上記のコードを実行すると、下記のようになります:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"小規模なデータを出力する場合、出力は 1 行内に収まります。複雑なデータや多数の"
"データが含まれる場合は、自動的に改行が入れられて、読みやすくなるようにしてい"
"ます。\n"
"\n"
"なお、下記の関数が公開されています (既定では dd* 関数のみが公開されていま"
"す):\n"
"\n"
"* dump( ... )"

#. leap/perl-Data-OptList/summary
msgid "parse and validate simple name/value option pairs"
msgstr "シンプルな名前／値の対を処理／検証するモジュール"

#. leap/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Since many other date/time modules exist, some of which may do the specific "
"operation(s) you need faster, be sure to read the section SHOULD I USE DATE::"
"MANIP in the Date::Manip::Misc document before deciding which of the Date "
"and Time modules from CPAN is for you. However, if you want one module to do "
"it all, Date::Manip is the one to use.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data.\n"
"\n"
"* *dates*\n"
"\n"
"  The word date is used extensively here and is somewhat misleading. In   "
"Date::Manip, a date consists of three pieces of information: a calendar   "
"date, a time of day, and time zone information. Calendar dates and times   "
"are fully handled. Time zones are handled as well, but depending on how   "
"you use Date::Manip, there may be some limitations as discussed below.\n"
"\n"
"* *delta*\n"
"\n"
"  A delta is an amount of time (i.e. the amount of time between two   "
"different dates). A delta refers only to an amount of time. It includes   no "
"information about a starting or ending date/time. Most people will   think "
"of a delta as an amount of time, but the term 'time' is already   used so "
"much in this module that I didn't want to use it here in order to   avoid "
"confusion.\n"
"\n"
"* *recurrence*\n"
"\n"
"  A recurring event is something which occurs on a regular recurring basis.\n"
"\n"
"* *holidays* and *events*\n"
"\n"
"  Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to:\n"
"\n"
"* ***\n"
"\n"
"  Enter a date in practically any format you choose.\n"
"\n"
"* ***\n"
"\n"
"  Compare two dates, entered in widely different formats to determine "
"which   is earlier.\n"
"\n"
"* ***\n"
"\n"
"  Extract any information you want from a date using a format string   "
"similar to the Unix date command.\n"
"\n"
"* ***\n"
"\n"
"  Determine the amount of time between two dates, or add an amount of time   "
"to a date to get a second date.\n"
"\n"
"* ***\n"
"\n"
"  Work with dates with dates using international formats (foreign month   "
"names, 12/10/95 referring to October rather than December, etc.).\n"
"\n"
"* ***\n"
"\n"
"  To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""
"Date::Manip は、一般的な日付／時刻操作を簡単に行なうために設計されたモジュー"
"ル集です。操作としては 2 つの時刻に対する比較のほか、一方と他方の時刻の差を計"
"算や協定世界時の処理などを、簡単に行なうことができます。時刻はグレゴリオ暦(現"
"在使用されている暦のうちの 1 つ) として扱う仕組みで、サマータイムなどの調整に"
"も完全対応しています。\n"
"\n"
"開発当初の段階から、  Date::Manip は必要な日付／時刻処理を簡単に行なうことが"
"できるようになっています。既にある他の多くのモジュールは、これらの処理をより"
"素早く、効率的に処理できる仕組みを備えていますが、これらは Date::Manip にある"
"ような処理の全てを実行できわけではありません。\n"
"\n"
"既に他の多くの日付／時刻モジュールが存在していて、それらは場合によっては高速"
"に処理できる仕組みを備えていることから、事前に Date::Manip::Misc ドキュメント"
"をお読みになり、 CPAN から提供されるモジュールのうちのどのモジュールが適切な"
"のかを判断してからお使いください。全ての作業を単一のモジュールで扱いたい場合"
"には、本モジュールがお勧めです。\n"
"\n"
"Date::Manip には様々な種類のデータを処理するための機能が備わっています。\n"
"\n"
"* *日付*\n"
"\n"
"  日付という言葉は幅広い意味で使用されているもので、よく間違えられる用語でも"
"あります。 Date::Manip では、日付には 3 種類の情報が含まれています: カレン"
"ダーの日付、時刻、タイムゾーン情報です。カレンダーの日付と時刻は完全に処理す"
"ることができます。タイムゾーンについても同様ですが、Date::Manip の使い方に"
"よっては、下記に示すとおりいくつかの制限があります。\n"
"\n"
"* *差分*\n"
"\n"
"  差分とは時刻の量を表わした数値 (2 つの異なる日付の差) を意味します。差分は"
"時刻の量のみを意味する言葉で、開始や終了の日時を持たない値になっています。多"
"くの人々にとって、差分とは時刻の量を意味するものですが、 '時刻' という用語は"
"既にそのモジュール内で多数使用されているため、混乱を防ぐために別の言葉を用意"
"して説明しています。\n"
"\n"
"* *繰り返し*\n"
"\n"
"  一定の周期で発生するイベントを意味します。\n"
"\n"
"* *祝日* と *イベント*\n"
"\n"
"  祝日とイベントは、日付と周期に名前が付けられたものを意味します。\n"
"\n"
"それ以外にも、 Date::Manip では下記のようなことを実施することができます:\n"
"\n"
"* ***\n"
"\n"
"  事実上、ほぼ全ての書式で自由に日付入力を行なうことができます。\n"
"\n"
"* ***\n"
"\n"
"  それぞれ大きく異なる書式の 2 つの日付を比較し、どちらが先の日付なのかを判断"
"することができます。\n"
"\n"
"* ***\n"
"\n"
"  Unix の date コマンドのように、書式文字列を利用して、日付から必要な情報を抽"
"出することができます。\n"
"\n"
"* ***\n"
"\n"
"  2 つの日付の差を計算することができるほか、時刻に値を足してもう 1 つの日付を"
"作成することができます。\n"
"\n"
"* ***\n"
"\n"
"  国際化された書式による日付処理 (月名称を含む。 12/10/95 は 12 月ではなく "
"10 月を意味するものとして扱います) 。\n"
"\n"
"* ***\n"
"\n"
"  繰り返しイベントが発生する日付の一覧表示\n"
"\n"
"パッケージ内では、それぞれの処理は平凡な (多くても数行程度) 記述で作成されて"
"います。"

#. leap/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the DateTime::Locale::Base documentation."
msgstr ""
"DateTime::Locale は主に様々なロケールサブクラス向けのファクトリとなるクラスで"
"す。利用可能なすべてのロケールに対して、情報を取得するためのいくつかの関数が"
"提供されています。\n"
"\n"
"ロケールオブジェクトでどのようなメソッドを利用できるのかについては、 "
"DateTime::Locale::Base のドキュメンテーションをお読みください。"

#. leap/perl-DateTime-Tiny/summary
msgid "A date object, with as little code as possible"
msgstr ""

#. leap/perl-DateTime-Tiny/description
msgid ""
"*DateTime::Tiny* is a most prominent member of the the DateTime::Tiny "
"manpage suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a datetime.\n"
"\n"
"The Tiny Mandate     Many CPAN modules which provide the best implementation "
"of a certain     concepts are very large. For some reason, this generally "
"seems to be     about 3 megabyte of ram usage to load the module.\n"
"\n"
"    For a lot of the situations in which these large and comprehensive     "
"implementations exist, some people will only need a small fraction of     "
"the functionality, or only need this functionality in an ancillary     "
"role.\n"
"\n"
"    The aim of the Tiny modules is to implement an alternative to the "
"large     module that implements a useful subset of their functionality, "
"using as     little code as possible.\n"
"\n"
"    Typically, this means a module that implements between 50% and 80% "
"of     the features of the larger module (although this is just a "
"guideline),     but using only 100 kilobytes of code, which is about 1/30th "
"of the     larger module.\n"
"\n"
"The Concept of Tiny Date and Time     Due to the inherent complexity, Date "
"and Time is intrinsically very     difficult to implement properly.\n"
"\n"
"    The arguably *only* module to implement it completely correct is the     "
"DateTime manpage. However, to implement it properly the DateTime     manpage "
"is quite slow and requires 3-4 megabytes of memory to load.\n"
"\n"
"    The challenge in implementing a Tiny equivalent to DateTime is to do "
"so     without making the functionality critically flawed, and to "
"carefully     select the subset of functionality to implement.\n"
"\n"
"    If you look at where the main complexity and cost exists, you will "
"find     that it is relatively cheap to represent a date or time as an "
"object,     but much much more expensive to modify, manipulate or convert "
"the     object.\n"
"\n"
"    As a result, *DateTime::Tiny* provides the functionality required to     "
"represent a date as an object, to stringify the date and to parse it     "
"back in, but does *not* allow you to modify the dates.\n"
"\n"
"    The purpose of this is to allow for date object representations in     "
"situations like log parsing and fast real-time type work.\n"
"\n"
"    The problem with this is that having no ability to modify date "
"limits     the usefulness greatly.\n"
"\n"
"    To make up for this, *if* you have the DateTime manpage installed, "
"any     *DateTime::Tiny* module can be inflated into the equivalent the     "
"DateTime manpage as needing, loading the DateTime manpage on the fly if     "
"necesary.\n"
"\n"
"    This is somewhat similar to DateTime::LazyInit, but unlike that "
"module     *DateTime::Tiny* is not modifiable.\n"
"\n"
"    For the purposes of date/time logic, all *DateTime::Tiny* objects "
"exist     in the \"C\" locale, and the \"floating\" time zone. This may be "
"improved     in the future if a suitably tiny way of handling timezones is "
"found.\n"
"\n"
"    When converting up to full the DateTime manpage objects, these local     "
"and time zone settings will be applied (although an ability is provided     "
"to override this).\n"
"\n"
"    In addition, the implementation is strictly correct and is intended "
"to     be very easily to sub-class for specific purposes of your own."
msgstr ""

#. leap/perl-Devel-Confess/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when warn()ing or die()ing. Unlike "
"other similar modules (e.g. the Carp::Always manpage), it includes stack "
"traces even when exception objects are thrown.\n"
"\n"
"The stack traces are generated using the Carp manpage, and will look work "
"for all types of errors. the Carp manpage's 'carp' and 'confess' functions "
"will also be made to include stack traces.\n"
"\n"
"     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh "
"at -e line 1.           main::f() called at -e line 1           main::g() "
"called at -e line 1\n"
"\n"
"     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                                         -e 'sub g { f(undef) }; g'   Use "
"of uninitialized value $a in array dereference at -e line 1.           main::"
"f(undef) called at -e line 2           main::g() called at -e line 2\n"
"\n"
"Internally, this is implemented with '$SIG{__WARN__}' and '$SIG{__DIE__}' "
"hooks.\n"
"\n"
"Stack traces are also included if raw non-object references are thrown."
msgstr ""

#. leap/perl-Devel-Symdump/summary
msgid "Dump symbol names or the symbol table"
msgstr "シンボル名やシンボルテーブルをダンプするツール"

#. leap/perl-Encode-Locale/description
msgid ""
"In many applications it's wise to let Perl use Unicode for the strings it "
"processes. Most of the interfaces Perl has to the outside world are still "
"byte based. Programs therefore need to decode byte strings that enter the "
"program from the outside and encode them again on the way out.\n"
"\n"
"The POSIX locale system is used to specify both the language conventions "
"requested by the user and the preferred character set to consume and output. "
"The 'Encode::Locale' module looks up the charset and encoding (called a "
"CODESET in the locale jargon) and arranges for the the Encode manpage module "
"to know this encoding under the name \"locale\". It means bytes obtained "
"from the environment can be converted to Unicode strings by calling 'Encode::"
"encode(locale => $bytes)' and converted back again with 'Encode::"
"decode(locale => $string)'.\n"
"\n"
"Where file systems interfaces pass file names in and out of the program we "
"also need care. The trend is for operating systems to use a fixed file "
"encoding that don't actually depend on the locale; and this module "
"determines the most appropriate encoding for file names. The the Encode "
"manpage module will know this encoding under the name \"locale_fs\". For "
"traditional Unix systems this will be an alias to the same encoding as "
"\"locale\".\n"
"\n"
"For programs running in a terminal window (called a \"Console\" on some "
"systems) the \"locale\" encoding is usually a good choice for what to expect "
"as input and output. Some systems allows us to query the encoding set for "
"the terminal and 'Encode::Locale' will do that if available and make these "
"encodings known under the 'Encode' aliases \"console_in\" and \"console_out"
"\". For systems where we can't determine the terminal encoding these will be "
"aliased as the same encoding as \"locale\". The advice is to use \"console_in"
"\" for input known to come from the terminal and \"console_out\" for output "
"known to go from the terminal.\n"
"\n"
"In addition to arranging for various Encode aliases the following functions "
"and variables are provided:\n"
"\n"
"* decode_argv( )\n"
"\n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  This will decode the command line arguments to perl (the '@ARGV' array)   "
"in-place.\n"
"\n"
"  The function will by default replace characters that can't be decoded by   "
"\"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  Any argument provided is passed as CHECK to underlying Encode::decode()   "
"call. Pass the value 'Encode::FB_CROAK' to have the decoding croak if not   "
"all the command line arguments can be decoded. See the Encode/\"Handling   "
"Malformed Data\" manpage for details on other options for CHECK.\n"
"\n"
"* env( $uni_key )\n"
"\n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  Interface to get/set environment variables. Returns the current value as   "
"a Unicode string. The $uni_key and $uni_value arguments are expected to   be "
"Unicode strings as well. Passing 'undef' as $uni_value deletes the   "
"environment variable named $uni_key.\n"
"\n"
"  The returned value will have the characters that can't be decoded   "
"replaced by \"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  There is no interface to request alternative CHECK behavior as for   "
"decode_argv(). If you need that you need to call encode/decode yourself.   "
"For example:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK);\n"
"\n"
"* reinit( )\n"
"\n"
"* reinit( $encoding )\n"
"\n"
"  Reinitialize the encodings from the locale. You want to call this   "
"function if you changed anything in the environment that might influence   "
"the locale.\n"
"\n"
"  This function will croak if the determined encoding isn't recognized by   "
"the Encode module.\n"
"\n"
"  With argument force $ENCODING_... variables to set to the given value.\n"
"\n"
"* $ENCODING_LOCALE\n"
"\n"
"  The encoding name determined to be suitable for the current locale. the   "
"Encode manpage know this encoding as \"locale\".\n"
"\n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  The encoding name determined to be suiteable for file system interfaces   "
"involving file names. the Encode manpage know this encoding as   \"locale_fs"
"\".\n"
"\n"
"* $ENCODING_CONSOLE_IN\n"
"\n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  The encodings to be used for reading and writing output to the a "
"console.   the Encode manpage know these encodings as \"console_in\" and   "
"\"console_out\"."
msgstr ""
"多くのアプリケーションでは、 Perl での文字列操作に Unicode を使用するのがよい"
"ものとされています。ただし Perl 以外の多くのインターフェイスでは現在もバイト"
"ベースのものが利用されているため、 Perl のプログラム側ではバイト文字列をデ"
"コードして取り込み、エンコードして取り出す作業が必要になります。\n"
"\n"
"POSIX のロケールシステムは、ユーザから要求のあった言語仕様と入出力に利用する"
"文字セットの間で使用するものです。 'Encode::Locale' モジュールは文字セット(ロ"
"ケール用語では CODESET とも言います) を参照してエンコードを行ない、このエン"
"コードを \"ロケール\" の名称で知るために Encode のモジュールを配置します。こ"
"れにより、この環境から取得できるバイトは、 'Encode::encode(locale => "
"$bytes)'で Unicode 文字列を変換したり、 'Encode::decode(locale => "
"$string)'で Unicode 文字列に戻したりすることができるようになります。\n"
"\n"
"ファイルシステムのインターフェイスでは、プログラムとのファイル名入出力に際し"
"てこのような処理を行なう必要があります。オペレーティングシステム側では一般"
"に、ロケールには依存しない固定のファイル名エンコーディングを行なうため、この"
"モジュールではファイル名に対して最も適切なエンコーディングを判断することがで"
"きます。Encode のマニュアルページでは、ファイル名用に最も適切なエンコーディン"
"グが\"locale_fs\" として書かれています。従来の Unix システムでは、 \"locale"
"\" と同じエンコーディングになっています。\n"
"\n"
"端末ウインドウ内で動作するプログラム (\"コンソール\" プログラムとも呼びます)"
"の場合、 \"locale\" エンコーディングは入出力に期待するものを判断するための材"
"料として利用することができます。システムによっては、端末側にエンコーディング"
"セットを問い合わせることができるものもあり、 'Encode::Locale' では可能な限り"
"これを使用して\"console_in\" と \"console_out\" の別名で 'Encode' 内のエン"
"コーディングを判断します。端末のエンコーディングを判断できないシステムの場合"
"は、 \"locale\" と同じエンコーディングを使用します。端末から入力されるデータ"
"に対しては \"console_in\" を使用し、端末に出力するデータに対しては "
"\"console_out\" を使用することをお勧めします。\n"
"\n"
"様々なエンコーディング別名を配置することができるほか、下記のような関数や変数"
"が提供されています:\n"
"\n"
"* decode_argv( )\n"
"\n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  上記の関数は、コマンドラインパラメータ ('@ARGV' 配列) を Perl に取り込む"
"際、デコード処理を行ないます。\n"
"\n"
"  この関数は、既定ではデコードできない文字を \"\\x{FFFD}\" (Unicode の未定義"
"扱い文字) に置き換えます。\n"
"\n"
"  指定されるパラメータは Encode::decode() を呼び出すことで CHECK (チェック) "
"が行なわれます。すべてのコマンドラインパラメータがデコードできない場合"
"は、'Encode::FB_CROAK' の値を渡すことで、デコード用の制御を行ないます。 "
"CHECK に対するその他のオプションについて、詳しくはEncode/\"Handling "
"Malformed Data\" のマニュアルページをお読みください。\n"
"\n"
"* env( $uni_key )\n"
"\n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  環境変数を設定したり取得したりするインターフェイスです。現在の値を Unicode "
"文字列として返却します。 $uni_key と $uni_value の値は、それぞれ Unicode 文字"
"列で指定します。また、 $uni_value に 'undef' を指定すると、 $uni_key で指定し"
"た環境変数を削除します。\n"
"\n"
"  返却された値のうち、デコードできない文字は \"\\x{FFFD}\" (Unicode の未定義"
"扱い  文字) に置き換えられます。\n"
"\n"
"  decode_argv() では、代替のチェック動作を要求するインターフェイスはありませ"
"ん。自分自身でエンコード／デコードを呼び出したい場合は、下記のようにします:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK);\n"
"\n"
"* reinit( )\n"
"\n"
"* reinit( $encoding )\n"
"\n"
"  ロケール情報からエンコーディングを再初期化します。ロケールに影響する設定を"
"変更したりしたような場合に、この関数を呼び出してください。\n"
"\n"
"  また、この関数は判断したエンコーディングが Encode モジュールで認識されない"
"場合にも使用します。\n"
"\n"
"  指定したロケールに変更したい場合は、 $ENCODING_... 変数をお使いください。\n"
"\n"
"* $ENCODING_LOCALE\n"
"\n"
"  現在のロケールに適切であると判断されたエンコーディング名が含まれます。"
"Encode のマニュアルページでは \"locale\" としてこのエンコーディングが書かれて"
"います。\n"
"\n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  ファイル名を含むファイルシステムのインターフェイスに対して、適切であると判"
"断されたエンコーディング名が含まれます。Encode のマニュアルページでは "
"\"locale\" としてこのエンコーディングが書かれています。\n"
"\n"
"* $ENCODING_CONSOLE_IN\n"
"\n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  コンソールとの入出力に使用されるエンコーディングです。Encode のマニュアル"
"ページでは \"locale\" としてこのエンコーディングが書かれています。"

#. leap/perl-ExtUtils-Config/description
msgid "ExtUtils::Config is an abstraction around the %Config hash."
msgstr ""

#. leap/perl-File-ShareDir-Install/description
msgid ""
"File::ShareDir::Install allows you to install read-only data files from a "
"distribution. It is a companion module to the File::ShareDir manpage, which "
"allows you to locate these files after installation.\n"
"\n"
"It is a port of the Module::Install::Share manpage to the ExtUtils::"
"MakeMaker manpage with the improvement of only installing the files you "
"want; '.svn', '.git' and other source-control junk will be ignored.\n"
"\n"
"Please note that this module installs read-only data files; empty "
"directories will be ignored."
msgstr ""

#. leap/perl-File-pushd/summary
msgid "change directory temporarily for a limited scope"
msgstr ""

#. leap/perl-File-pushd/description
msgid ""
"File::pushd does a temporary 'chdir' that is easily and automatically "
"reverted, similar to 'pushd' in some Unix command shells. It works by "
"creating an object that caches the original working directory. When the "
"object is destroyed, the destructor calls 'chdir' to revert to the original "
"working directory. By storing the object in a lexical variable with a "
"limited scope, this happens automatically at the end of the scope.\n"
"\n"
"This is very handy when working with temporary directories for tasks like "
"testing; a function is provided to streamline getting a temporary directory "
"from the File::Temp manpage.\n"
"\n"
"For convenience, the object stringifies as the canonical form of the "
"absolute pathname of the directory entered.\n"
"\n"
"*Warning*: if you create multiple 'pushd' objects in the same lexical scope, "
"their destruction order is not guaranteed and you might not wind up in the "
"directory you expect."
msgstr ""

#. leap/perl-Future/description
msgid ""
"A 'Future' object represents an operation that is currently in progress, or "
"has recently completed. It can be used in a variety of ways to manage the "
"flow of control, and data, through an asynchronous program.\n"
"\n"
"Some futures represent a single operation and are explicitly marked as ready "
"by calling the 'done' or 'fail' methods. These are called \"leaf\" futures "
"here, and are returned by the 'new' constructor.\n"
"\n"
"Other futures represent a collection of sub-tasks, and are implicitly marked "
"as ready depending on the readiness of their component futures as required. "
"These are called \"convergent\" futures here as they converge control and "
"data-flow back into one place. These are the ones returned by the various "
"'wait_*' and 'need_*' constructors.\n"
"\n"
"It is intended that library functions that perform asynchronous operations "
"would use future objects to represent outstanding operations, and allow "
"their calling programs to control or wait for these operations to complete. "
"The implementation and the user of such an interface would typically make "
"use of different methods on the class. The methods below are documented in "
"two sections; those of interest to each side of the interface.\n"
"\n"
"It should be noted however, that this module does not in any way provide an "
"actual mechanism for performing this asynchronous activity; it merely "
"provides a way to create objects that can be used for control and data flow "
"around those operations. It allows such code to be written in a neater, "
"forward-reading manner, and simplifies many common patterns that are often "
"involved in such situations.\n"
"\n"
"See also the Future::Utils manpage which contains useful loop-constructing "
"functions, to run a future-returning function repeatedly in a loop.\n"
"\n"
"Unless otherwise noted, the following methods require at least version "
"_0.08_."
msgstr ""

#. leap/perl-GnuPG-Interface/summary
msgid "Perl interface to GnuPG"
msgstr "GnuPG に対する Perl インターフェイス"

#. leap/perl-GnuPG-Interface/description
msgid ""
"GnuPG::Interface and its associated modules are designed to provide an "
"object-oriented method for interacting with GnuPG, being able to perform "
"functions such as but not limited to encrypting, signing, decryption, "
"verification, and key-listing parsing."
msgstr ""

#. leap/perl-HTML-TableExtract/description
msgid ""
"HTML::TableExtract is a subclass of HTML::Parser that serves to extract the "
"information from tables of interest contained within an HTML document. The "
"information from each extracted table is stored in table objects. Tables can "
"be extracted as text, HTML, or HTML::ElementTable structures (for in-place "
"editing or manipulation).\n"
"\n"
"There are currently four constraints available to specify which tables you "
"would like to extract from a document: _Headers_, _Depth_, _Count_, and "
"_Attributes_.\n"
"\n"
"_Headers_, the most flexible and adaptive of the techniques, involves "
"specifying text in an array that you expect to appear above the data in the "
"tables of interest. Once all headers have been located in a row of that "
"table, all further cells beneath the columns that matched your headers are "
"extracted. All other columns are ignored: think of it as vertical slices "
"through a table. In addition, TableExtract automatically rearranges each row "
"in the same order as the headers you provided. If you would like to disable "
"this, set _automap_ to 0 during object creation, and instead rely on the "
"column_map() method to find out the order in which the headers were found. "
"Furthermore, TableExtract will automatically compensate for cell span issues "
"so that columns are really the same columns as you would visually see in a "
"browser. This behavior can be disabled by setting the _gridmap_ parameter to "
"0. HTML is stripped from the entire textual content of a cell before header "
"matches are attempted -- unless the _keep_html_ parameter was enabled.\n"
"\n"
"_Depth_ and _Count_ are more specific ways to specify tables in relation to "
"one another. _Depth_ represents how deeply a table resides in other tables. "
"The depth of a top-level table in the document is 0. A table within a top-"
"level table has a depth of 1, and so on. Each depth can be thought of as a "
"layer; tables sharing the same depth are on the same layer. Within each of "
"these layers, _Count_ represents the order in which a table was seen at that "
"depth, starting with 0. Providing both a _depth_ and a _count_ will uniquely "
"specify a table within a document.\n"
"\n"
"_Attributes_ match based on the attributes of the html <table> tag, for "
"example, boder widths or background color.\n"
"\n"
"Each of the _Headers_, _Depth_, _Count_, and _Attributes_ specifications are "
"cumulative in their effect on the overall extraction. For instance, if you "
"specify only a _Depth_, then you get all tables at that depth (note that "
"these could very well reside in separate higher- level tables throughout the "
"document since depth extends across tables). If you specify only a _Count_, "
"then the tables at that _Count_ from all depths are returned (i.e., the "
"_n_th occurrence of a table at each depth). If you only specify _Headers_, "
"then you get all tables in the document containing those column headers. If "
"you have specified multiple constraints of _Headers_, _Depth_, _Count_, and "
"_Attributes_, then each constraint has veto power over whether a particular "
"table is extracted.\n"
"\n"
"If no _Headers_, _Depth_, _Count_, or _Attributes_ are specified, then all "
"tables match.\n"
"\n"
"When extracting only text from tables, the text is decoded with HTML::"
"Entities by default; this can be disabled by setting the _decode_ parameter "
"to 0."
msgstr ""
"HTML::TableExtract は HTML::Parser のサブクラスで、 HTML 文書内にある表 (テー"
"ブル)について、その中に含まれる情報を取り出すために使用します。それぞれ取り出"
"した情報は表オブジェクト内に保存されます。表はテキストとして取り出すことがで"
"きるほか、HTML や HTML::ElementTable の構造 (その場での操作や編集のため) とし"
"て取り出すことができます。\n"
"\n"
"文書から情報を取り出す表を指定するにあたっては、下記の 4 つの制約条件を指定す"
"ることができます: _Headers_, _Depth_, _Count_, _Attributes_.\n"
"\n"
"_Headers_ (ヘッダ) は、最も柔軟で他の技術との親和性が高い方法で、配列内にテキ"
"ストを指定することで、データを取り出す対象を指定します。該当の表に対する全て"
"のヘッダ行にアクセスすると、該当列の残りのセルを取り出すことができる仕組みで"
"す。つまり、表を縦に分断して取り出す方式です。それに加えて、 TableExtract は"
"指定した順序に並ぶように列を入れ替えます。この入れ替え処理を無効化したい場合"
"は、オブジェクト生成時 _automap_ に 0 を指定してください。この場合は "
"column_map() メソッドに依存して、ヘッダの順序が決められます。それに加えて、 "
"TableExtract ではセルの長さに関する問題を解決することができます。これにより、"
"ブラウザ内で見えているとおりにデータを取り出すことができます。この動作は "
"_gridmap_ パラメータを 0 にすることで無効化できます。なお、ヘッダの適合処理が"
"行なわれる前に HTML が解釈されることに注意してください。これは _keep_html_ パ"
"ラメータを有効にすることで回避できます。\n"
"\n"
"_Depth_ と _Count_ は 2 つの表の関連性をより厳密に指定できる方法です。 "
"_Depth_ は他の表内で対象の表がどれだけ深いものであるのかを指定します。文書内"
"でのトップレベルの (一番外側の) 表は 0 になります。トップレベル内にある表は "
"1 、その中にある表は 2 のようになります。それぞれの深さはレイヤ (層) としても"
"考えられるもので、同じ深さの表は同じレイヤにある表と言えます。このようなレイ"
"ヤの仕組みの中で、_Count_ は同じ深さの中での順序を指定します。これは 0 から始"
"まる値で、 _Depth_ と _Count_ を指定することで、文書内の表を厳密に指定するこ"
"とができます。\n"
"\n"
"_Attributes_ でのマッチングは、 html の <table> タグにおける属性 (アトリ"
"ビュート)を基準にして行なうものです。たとえば枠線の幅や背景色などです。\n"
"\n"
"_Headers_, _Depth_, _Count_, _Attributes_ の各指定は、組み合わせて指定するこ"
"ともできます。たとえば _Depth_ だけを指定した場合は、その深さの表全てを対象と"
"することになります (ただしそれぞれの親となる表が文書内でどこにあるのかをきち"
"んと把握しておく必要があります) 。また _Count_ だけを指定した場合、全ての深さ"
"にある表のうち、その位置 (順番) のものだけが返されます。 _Headers_ だけを指定"
"した場合も同様で、指定した列ヘッダのものだけを取り出します。 _Headers_, "
"_Depth_, _Count_, _Attributes_ を組み合わせて指定すると複数の組み合わせ条件と"
"なり、指定した条件全てに該当するものだけが返されます。\n"
"\n"
"逆に _Headers_, _Depth_, _Count_, _Attributes_ のいずれも指定しない場合は、全"
"ての表が該当することになります。\n"
"\n"
"表からテキストだけを取り出す場合、既定ではテキストは HTML::Entities でデコー"
"ドされます。これは _decode_ パラメータを 0 にすることで無効化できます。"

#. leap/perl-HTML-Tree/summary
msgid "Build and scan parse-trees of HTML"
msgstr "HTML ツリー構造の構築とスキャン"

#. leap/perl-HTML-Tree/description
msgid ""
"HTML-Tree is a suite of Perl modules for making parse trees out of HTML "
"source. It consists of mainly two modules, whose documentation you should "
"refer to: HTML::TreeBuilder and HTML::Element.\n"
"\n"
"HTML::TreeBuilder is the module that builds the parse trees. (It uses HTML::"
"Parser to do the work of breaking the HTML up into tokens.)\n"
"\n"
"The tree that TreeBuilder builds for you is made up of objects of the class "
"HTML::Element.\n"
"\n"
"If you find that you do not properly understand the documentation for HTML::"
"TreeBuilder and HTML::Element, it may be because you are unfamiliar with "
"tree-shaped data structures, or with object-oriented modules in general. "
"Sean Burke has written some articles for _The Perl Journal_ ('www.tpj.com') "
"that seek to provide that background. The full text of those articles is "
"contained in this distribution, as:\n"
"\n"
"* HTML::Tree::AboutObjects\n"
"\n"
"  \"User's View of Object-Oriented Modules\" from TPJ17.\n"
"\n"
"* HTML::Tree::AboutTrees\n"
"\n"
"  \"Trees\" from TPJ18\n"
"\n"
"* HTML::Tree::Scanning\n"
"\n"
"  \"Scanning HTML\" from TPJ19\n"
"\n"
"Readers already familiar with object-oriented modules and tree-shaped data "
"structures should read just the last article. Readers without that "
"background should read the first, then the second, and then the third.\n"
"\n"
"new     Redirects to HTML::TreeBuilder::new\n"
"\n"
"new_from_file     Redirects to HTML::TreeBuilder::new_from_file\n"
"\n"
"new_from_content     Redirects to HTML::TreeBuilder::new_from_content"
msgstr ""
"HTML-Tree は、 HTML ソースを解釈し、その解釈結果をツリー構造に仕立てることのできる Perl モジュール集です。このモジュール集は主に "
"2 つのモジュールから構成され、それぞれ HTML::TreeBuilder と HTML::Element という名称です。\n"
"\n"
"HTML::TreeBuilder は処理ツリーを構成するモジュールです (このモジュールは HTML::Parser を利用して、 HTML "
"を部品ごとに分解しています) 。\n"
"\n"
"TreeBuilder におけるツリーは、複数の HTML::Element クラスのオブジェクトから構成されています。\n"
"\n"
"HTML::TreeBuilder や HTML::Element "
"のドキュメンテーションを読んでもうまく理解できない場合、それはツリー型のデータ構造やオブジェクト指向の構造に慣れていないためであると思われます。 "
"Sean Burke 氏は _The Perl Journal_ ('www.tpj.com') "
"向けにいくつかの記事を作成していて、そこで詳しい解説を行なっています。この記事の全文は下記の配布物に含まれています:\n"
"\n"
"* HTML::Tree::AboutObjects\n"
"\n"
"  TPJ17: \"User's View of Object-Oriented Modules\" "
"(オブジェクト指向のモジュールに関するユーザからの見た目)\n"
"\n"
"* HTML::Tree::AboutTrees\n"
"\n"
"  TPJ18: \"Trees\" (ツリー構造)\n"
"\n"
"* HTML::Tree::Scanning\n"
"\n"
"  TPJ19: \"Scanning HTML\" (HTML のスキャン)\n"
"\n"
"オブジェクト指向のモジュールやツリー構造のデータに慣れている場合は、最後の記事のみをお読みになるのがよいでしょう。慣れていない場合は最初の記事から順に読ん"
"でいくと良いでしょう。\n"
"\n"
"new     HTML::TreeBuilder::new へのリダイレクト\n"
"\n"
"new_from_file     HTML::TreeBuilder::new_from_file へのリダイレクト\n"
"\n"
"new_from_content     HTML::TreeBuilder::new_from_content へのリダイレクト"

#. leap/perl-HTTP-Message/description
msgid "An 'HTTP::Message' object contains some headers and a content body."
msgstr ""
"'HTTP::Message' オブジェクトにはいくつかのヘッダとコンテンツが含まれていま"
"す。"

#. leap/perl-IO-Digest/description
#, fuzzy
msgid ""
"This module allows you to calculate digests while reading or writing file "
"handles. This avoids the case you need to reread the same content to compute "
"the digests after written a file."
msgstr ""
"このモジュールは、ファイルハンドルに対する読み込みや書き込みの際にダイジェス"
"ト値を計算することができるものです。このモジュールを利用することで、ファイル"
"への書き込み後に再度読み出しを行なってダイジェスト値を計算したりする手間を省"
"くことができます。"

#. leap/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.1 of the draft standard.\n"
"\n"
"The algorithm as implemented here is:\n"
"\n"
"* 1.\n"
"\n"
"  If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE,   "
"or UTF-8, then that is the encoding.\n"
"\n"
"* 2.\n"
"\n"
"  If the first 1024 bytes of the file contain a '<meta>' tag that "
"indicates   the charset, and Encode recognizes the specified charset name, "
"then that   is the encoding. (This portion of the algorithm is implemented "
"by   'find_charset_in'.)\n"
"\n"
"  The '<meta>' tag can be in one of two formats:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  The search is case-insensitive, and the order of attributes within the   "
"tag is irrelevant. Any additional attributes of the tag are ignored. The   "
"first matching tag with a recognized encoding ends the search.\n"
"\n"
"* 3.\n"
"\n"
"  If the first 1024 bytes of the file are valid UTF-8 (with at least 1   non-"
"ASCII character), then the encoding is UTF-8.\n"
"\n"
"* 4.\n"
"\n"
"  If all else fails, use the default character encoding. The HTML5 "
"standard   suggests the default encoding should be locale dependent, but "
"currently   it is always 'cp1252' unless you set '$IO::HTML::"
"default_encoding' to a   different value. Note: 'sniff_encoding' does not "
"apply this step; only   'html_file' does that."
msgstr ""
"IO::HTML は HTML を含むファイルを開くための簡単な方法で、エンコード方式を自動"
"的に判別することができます。 HTML5 のドラフト標準内のセクション 8.2.2.1 で規"
"定されたエンコード検出アルゴリズムを利用しています。\n"
"\n"
"アルゴリズムは下記のように実装されています:\n"
"\n"
"* 1.\n"
"\n"
"  ファイルの冒頭が UTF-16LE, UTF-16BE, UTF-8 の各バイトオーダーマークであった"
"場合は、そのエンコード方式を採用する。\n"
"\n"
"* 2.\n"
"\n"
"  ファイルの冒頭 1024 バイト内に '<meta>' タグが含まれていて、そこにキャラク"
"タセットと対応するエンコード方式が書かれている場合、そのエンコード方式を採用"
"する (アルゴリズムのうち、この部分は 'find_charset_in' で実装しています) 。\n"
"\n"
"  '<meta>' タグは下記の 2 つのうちのいずれかの形式であるものとする:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  検索時、大文字と小文字は区別しないほか、タグ内での属性出現順序は気にしない"
"ものとする。また、タグに付けられたその他の属性は無視するものとする。エンコー"
"ドを認識可能な最初のタグが見つかった場合は、その時点で検索を終了する。\n"
"\n"
"* 3.\n"
"\n"
"  ファイルの冒頭 1024 バイトが UTF-8 として正当なものである (少なくとも 1 文"
"字以上の非 ASCII 文字がある) 場合、エンコード方式を UTF-8 とする。\n"
"\n"
"* 4.\n"
"\n"
"  これまでの処理のすべてが失敗した場合は、既定の文字エンコード方式を利用す"
"る。HTML5 標準では既定のエンコード方式はロケール依存であるが、 '$IO::HTML::"
"default_encoding' で異なる値を指定していない限り、エンコード方式は常に "
"'cp1252' であるものとみなされる。注意: 'sniff_encoding' は上記までの手順を実"
"施せず、'html_file' のみが上記の手順を実施することに注意すること。"

#. leap/perl-IO-Socket-IP/summary
msgid "Family-neutral IP socket supporting both IPv4 and IPv6"
msgstr "IPv4, IPv6 の両方に対応したアドレスファミリに中立な IP ソケット"

#. leap/perl-IO-Socket-IP/description
msgid ""
"This module provides a protocol-independent way to use IPv4 and IPv6 "
"sockets, intended as a replacement for the IO::Socket::INET manpage. Most "
"constructor arguments and methods are provided in a backward-compatible way. "
"For a list of known differences, see the 'IO::Socket::INET' INCOMPATIBILITES "
"section below.\n"
"\n"
"It uses the 'getaddrinfo(3)' function to convert hostnames and service names "
"or port numbers into sets of possible addresses to connect to or listen on. "
"This allows it to work for IPv6 where the system supports it, while still "
"falling back to IPv4-only on systems which don't."
msgstr ""

#. leap/perl-IO-Socket-SSL/summary
msgid "Nearly transparent SSL encapsulation for IO::Socket::INET."
msgstr "IO::Socket::INET に対するほぼ透過的な SSL カプセル化です。"

#. leap/perl-IO-Socket-SSL/description
msgid ""
"This module provides an interface to SSL sockets, similar to other IO::"
"Socket modules. Because of that, it can be used to make existing programs "
"using IO::Socket::INET or similar modules to provide SSL encryption without "
"much effort. IO::Socket::SSL supports all the extra features that one needs "
"to write a full-featured SSL client or server application: multiple SSL "
"contexts, cipher selection, certificate verification, Server Name Indication "
"(SNI), Next Protocol Negotiation (NPN), SSL version selection and more.\n"
"\n"
"If you have never used SSL before, you should read the appendix labelled "
"'Using SSL' before attempting to use this module.\n"
"\n"
"If you want to use SSL with non-blocking sockets and/or within an event loop "
"please read very carefully the sections about non-blocking I/O and polling "
"of SSL sockets.\n"
"\n"
"If you are trying to use it with threads see the BUGS section."
msgstr ""
"このモジュールは他の IO::Socket に似たモジュールで、 SSL ソケットに対するイン"
"ターフェイスを提供します。このような構造であるため、 IO::Socket::INET や類似"
"モジュールを使用する既存のプログラムをほとんどそのまま利用して、 SSL の暗号化"
"を行なうことができるようになっています。 IO::Socket::SSL では、完全機能の "
"SSL クライアントやサーバアプリケーションに必要な、すべての追加機能を提供して"
"います。たとえば複数の SSL コンテキストへの対応や暗号方式の選択、証明書の検証"
"やサーバ名認識 (SNI) 、次世代プロトコルネゴシエーション (NPN) や SSL バージョ"
"ン選択などを行なうことができます。\n"
"\n"
"SSL を今まで使ったことがない場合は、このモジュールを使用する前に付録 'Using "
"SSL' をお読みください。\n"
"\n"
"SSL で非ブロック型のソケットを使用したい場合、もしくはイベントループを利用し"
"たい場合は、 SSL ソケットの non-blocking I/O や polling に関する章を良くお読"
"みください。\n"
"\n"
"また、スレッドと共に使用する場合は、 BUGS セクションをお読みください。"

#. leap/perl-Lingua-EN-Sentence/summary
msgid "Module for splitting text into sentences"
msgstr "テキストを文賞に分解するためのモジュール"

#. leap/perl-Lingua-EN-Sentence/description
msgid ""
"The 'Lingua::EN::Sentence' module contains the function get_sentences, which "
"splits text into its constituent sentences, based on a regular expression "
"and a list of abbreviations (built in and given).\n"
"\n"
"Certain well know exceptions, such as abreviations, may cause incorrect "
"segmentations. But some of them are already integrated into this code and "
"are being taken care of. Still, if you see that there are words causing the "
"get_sentences() to fail, you can add those to the module, so it notices them."
msgstr ""
"'Lingua::EN::Sentence' モジュールでは、 get_sentences と呼ばれる関数が提供さ"
"れています。この関数は、正規表現と略称一覧 (内蔵のものを使用することができる"
"ほか、指定することもできます) を利用して、テキストを文章ごとに分割することが"
"できます。\n"
"\n"
"このようなモジュールは、略称などがあるとうまく動作せず、正しくない分割などが"
"行なわれてしまうことが知られていますが、これらのうちのいくつかは既にコード内"
"で対応済みで、配慮されるようになっています。ただし、場合によっては "
"get_sentences()で失敗することがありますので、モジュールに対して追加することで"
"対応できるようになっています。"

#. leap/perl-List-AllUtils/summary
msgid "Combines List::Util and List::MoreUtils in one bite-sized package"
msgstr ""

#. leap/perl-List-AllUtils/description
msgid ""
"Are you sick of trying to remember whether a particular helper is defined in "
"'List::Util' or 'List::MoreUtils'? I sure am. Now you don't have to "
"remember. This module will export all of the functions that either of those "
"two modules defines.\n"
"\n"
"Note that all function documentation has been shamelessly copied from the "
"List::Util manpage and <List::MoreUtils>."
msgstr ""

#. leap/perl-Log-Dispatchouli/summary
msgid "a simple wrapper around Log::Dispatch"
msgstr ""

#. leap/perl-Log-Dispatchouli/description
msgid ""
"Log::Dispatchouli is a thin layer above the Log::Dispatch manpage and meant "
"to make it dead simple to add logging to a program without having to think "
"much about categories, facilities, levels, or things like that. It is meant "
"to make logging just configurable enough that you can find the logs you want "
"and just easy enough that you will actually log things.\n"
"\n"
"Log::Dispatchouli can log to syslog (if you specify a facility), standard "
"error or standard output, to a file, or to an array in memory. That last one "
"is mostly useful for testing.\n"
"\n"
"In addition to providing as simple a way to get a handle for logging "
"operations, Log::Dispatchouli uses the String::Flogger manpage to process "
"the things to be logged, meaning you can easily log data structures. "
"Basically: strings are logged as is, arrayrefs are taken as (sprintf format, "
"args), and subroutines are called only if needed. For more information read "
"the the String::Flogger manpage docs."
msgstr ""

#. leap/perl-Log-Log4perl/description
msgid ""
"Log::Log4perl lets you remote-control and fine-tune the logging behaviour of "
"your system from the outside. It implements the widely popular (Java-based) "
"Log4j logging package in pure Perl.\n"
"\n"
"*For a detailed tutorial on Log::Log4perl usage, please read*\n"
"\n"
"    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"Logging beats a debugger if you want to know what's going on in your code "
"during runtime. However, traditional logging packages are too static and "
"generate a flood of log messages in your log files that won't help you.\n"
"\n"
"'Log::Log4perl' is different. It allows you to control the number of logging "
"messages generated at three different levels:\n"
"\n"
"* *\n"
"\n"
"  At a central location in your system (either in a configuration file or   "
"in the startup code) you specify _which components_ (classes, functions)   "
"of your system should generate logs.\n"
"\n"
"* *\n"
"\n"
"  You specify how detailed the logging of these components should be by   "
"specifying logging _levels_.\n"
"\n"
"* *\n"
"\n"
"  You also specify which so-called _appenders_ you want to feed your log   "
"messages to (\"Print it to the screen and also append it to /tmp/my.log\")   "
"and which format (\"Write the date first, then the file name and line   "
"number, and then the log message\") they should be in.\n"
"\n"
"This is a very powerful and flexible mechanism. You can turn on and off your "
"logs at any time, specify the level of detail and make that dependent on the "
"subsystem that's currently executed.\n"
"\n"
"Let me give you an example: You might find out that your system has a "
"problem in the 'MySystem::Helpers::ScanDir' component. Turning on detailed "
"debugging logs all over the system would generate a flood of useless log "
"messages and bog your system down beyond recognition. With 'Log::Log4perl', "
"however, you can tell the system: \"Continue to log only severe errors to "
"the log file. Open a second log file, turn on full debug logs in the "
"'MySystem::Helpers::ScanDir' component and dump all messages originating "
"from there into the new log file\". And all this is possible by just "
"changing the parameters in a configuration file, which your system can re-"
"read even while it's running!"
msgstr ""
"Log::Log4perl は、お使いのシステムにおけるログ動作を、ソースコードの外側から"
"リモート制御／調整することのできるモジュールです。よく知られた (Java ベース"
"の)log4j ログパッケージを、純粋な Perl のみで作成したものといえます。\n"
"\n"
"*Log::Log4perl の使用方法について、詳しくは下記をお読みください*\n"
"\n"
"    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"ログ機能はデバッガにも匹敵する機能で、お使いのコードを実行する際、何が起こっ"
"ているのかを知ることができる機能です。従来のログパッケージは、あまりにも柔軟"
"性がなく、ログファイル内に大量のメッセージを出力してしまい、あまり助けにはな"
"りませんでした。\n"
"\n"
"'Log::Log4perl' はこのようなものではありません。 3 種類のレベルを用意し、生成"
"されるログメッセージの量を制御することができます。\n"
"\n"
"* *\n"
"\n"
"お使いのシステムにおける中枢となる場所 (設定ファイルまたは起動時のコード) "
"で、どのコンポーネント (クラス、関数) からのログを記録するのかを設定すること"
"ができます。\n"
"\n"
"* *\n"
"\n"
"また、ログレベルを設定することで、これらのコンポーネントから、どれだけ詳細な"
"ログを出力するのかを指定することもできます。\n"
"\n"
"* *\n"
"\n"
"これ以外にも、アペンダと呼ばれる仕組みを指定することもできます。これはログ"
"メッセージの出力先を指定する (\"画面に表示するのか、もしくは /tmp/my.log のよ"
"うなファイルに追記するのかなど\") ほか、書式 (\"日付を先に書いて、ファイル名"
"と行番号、メッセージなどが続く\") を指定することもできます。\n"
"\n"
"これはとてもパワフルで柔軟な仕組みです。任意の時点でログ機能を有効／無効に切"
"り替えることができるほか、ログの詳細さを指定したり、現在実行中のサブサブシス"
"テムを設定することもできます。\n"
"\n"
"たとえば下記のような例を考えてみます: お使いのシステムで、 'MySystem::"
"Helpers::ScanDir' というコンポーネントに問題があるものの、詳細なログ機能を有"
"効にしてしまうと、不要なログが大量に生成されてしまい、その問題について調べる"
"前にシステムをダウンさせてしまうような状況です。 'Log::Log4perl' を使用すれ"
"ば、システムに対して \"通常のログファイルには重大なエラーのみを記録するものと"
"する。 2 つめのログファイルには、 'MySystem::Helpers::ScanDir'コンポーネント"
"に関する完全なデバッグログを出力し、これを発生元とするメッセージはすべて新し"
"いログファイルに書き込む\" のような指定を行なうことができます。これらの設定は"
"すべて設定ファイルから行なうことができるほか、設定ファイルは実行中でも読み込"
"み直すように指示することができます。"

#. leap/perl-Mail-SPF/description
msgid ""
"Mail::SPF is an object-oriented implementation of Sender Policy Framework "
"(SPF). See http://www.openspf.org for more information about SPF.\n"
"\n"
"This class collection aims to fully conform to the SPF specification (RFC "
"4408) so as to serve both as a production quality SPF implementation and as "
"a reference for other developers of SPF implementations."
msgstr ""
"Mail::SPF は Sender Policy Framework (SPF) に対するオブジェクト指向の実装で"
"す。 SPF について、詳しくは http://www.openspf.org をお読みください。\n"
"\n"
"このクラス集は、 SPF 仕様 (RFC 4408) に完全準拠し、商用品質の SPF 実装として"
"利用するだけでなく、他の開発者に対する SPF のリファレンス実装としても利用でき"
"るものです。"

#. leap/perl-Minion/description
msgid ""
"Minion is a job queue for the at http://mojolicious.org real-time web "
"framework, with support for multiple named queues, priorities, delayed jobs, "
"job dependencies, job results, retries with backoff, statistics, distributed "
"workers, parallel processing, autoscaling, resource leak protection and "
"multiple backends (such as at http://www.postgresql.org).\n"
"\n"
"Job queues allow you to process time and/or computationally intensive tasks "
"in background processes, outside of the request/response lifecycle. Among "
"those tasks you'll commonly find image resizing, spam filtering, HTTP "
"downloads, building tarballs, warming caches and basically everything else "
"you can imagine that's not super fast.\n"
"\n"
"  use Mojolicious::Lite;\n"
"\n"
"  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
"\n"
"     app->minion->add_task(poke_mojo => sub {     my $job = shift;     $job-"
">app->ua->get('mojolicious.org');     $job->app->log->debug('We have poked "
"mojolicious.org for a visitor');   });\n"
"\n"
"     get '/' => sub {     my $c = shift;     $c->minion-"
">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious.org "
"for you soon.');   };\n"
"\n"
"  app->start;\n"
"\n"
"Background worker processes are usually started with the command Minion::"
"Command::minion::worker, which becomes automatically available when an "
"application loads the plugin Mojolicious::Plugin::Minion.\n"
"\n"
"  $ ./myapp.pl minion worker\n"
"\n"
"Jobs can be managed right from the command line with Minion::Command::"
"minion::job.\n"
"\n"
"  $ ./myapp.pl minion job\n"
"\n"
"Every job can fail or succeed, but not get lost, the system is eventually "
"consistent and will preserve job results for as long as you like, depending "
"on \"remove_after\". While individual workers can fail in the middle of "
"processing a job, the system will detect this and ensure that no job is left "
"in an uncertain state, depending on \"missing_after\"."
msgstr ""

#. leap/perl-Module-CPANfile/description
msgid ""
"Module::CPANfile is a tool to handle the cpanfile manpage format to load "
"application specific dependencies, not just for CPAN distributions."
msgstr ""

#. leap/perl-Module-Runtime/description
msgid ""
"The functions exported by this module deal with runtime handling of Perl "
"modules, which are normally handled at compile time. This module avoids "
"using any other modules, so that it can be used in low-level "
"infrastructure.\n"
"\n"
"The parts of this module that work with module names apply the same syntax "
"that is used for barewords in Perl source. In principle this syntax can vary "
"between versions of Perl, and this module applies the syntax of the Perl on "
"which it is running. In practice the usable syntax hasn't changed yet, but "
"there's a good chance of it changing in Perl 5.18.\n"
"\n"
"The functions of this module whose purpose is to load modules include "
"workarounds for three old Perl core bugs regarding 'require'. These "
"workarounds are applied on any Perl version where the bugs exist, except for "
"a case where one of the bugs cannot be adequately worked around in pure Perl."
msgstr ""
"このモジュールが提供する関数は、 Perl モジュールの実行時処理を取り扱うもので"
"す。 Perl のモジュールは通常コンパイル時に処理されるもので、このモジュールは"
"一切のモジュールと依存関係を持たない仕組みになっていることから、低レベルな構"
"造になっています。\n"
"\n"
"本モジュール内の部品のうち、モジュール名での処理を行なうものは、 Perl ソース"
"内で使用していた元々のものと同じ文法になっています。また、この文法は一般に、"
"Perl のバージョン間で異なる構造になっているため、このモジュールでは実行中の"
"Perl のバージョンに合わせて文法が変わる仕組みになっています。実際に使用する文"
"法が変わったりしていることはありませんが、 Perl 5.18 は変更するのにちょうどよ"
"いタイミングであると考えています。\n"
"\n"
"このモジュールの機能は、古い Perl コアに存在していた 3 種類の 'require' まわ"
"りのバグに回避策を設定してモジュールを読み込むことにあります。これらの回避策"
"は、バグの存在する全てのバージョンに対して適用されますが、純粋な Perl では簡"
"単に解決できないバグは除外されています。"

#. leap/perl-Mojolicious/description
msgid "Take a look at our excellent documentation in Mojolicious::Guides!"
msgstr ""

#. leap/perl-Mojolicious-Plugin-Bootstrap3/summary
msgid "Mojolicious + http://getbootstrap.com/"
msgstr ""

#. leap/perl-Mojolicious-Plugin-Bootstrap3/description
msgid ""
"the Mojolicious::Plugin::Bootstrap3 manpage is used to include the http://"
"getbootstrap.com/ manpage CSS and JavaScript files into your project.\n"
"\n"
"This is done with the help of the Mojolicious::Plugin::AssetPack manpage and "
"http://sass-lang.com/.\n"
"\n"
"See the Mojolicious::Plugin::AssetPack::Preprocessor::Sass/DESCRIPTION "
"manpage on how to intall Sass."
msgstr ""

#. leap/perl-MooseX-AttributeHelpers/summary
msgid "Extend your attribute interfaces (deprecated)"
msgstr ""

#. leap/perl-MooseX-AttributeHelpers/description
msgid ""
"*This distribution is deprecated. The features it provides have been added "
"to the Moose core code as the Moose::Meta::Attribute::Native manpage. This "
"distribution should not be used by any new code.*\n"
"\n"
"While the Moose manpage attributes provide you with a way to name your "
"accessors, readers, writers, clearers and predicates, this library provides "
"commonly used attribute helper methods for more specific types of data.\n"
"\n"
"As seen in the the /SYNOPSIS manpage, you specify the extension via the "
"'metaclass' parameter. Available meta classes are:"
msgstr ""

#. leap/perl-MooseX-Role-Parameterized/summary
#, fuzzy
msgid "Roles with Composition Parameters"
msgstr "メソッド／関数のパラメータを確認する仕組み"

#. leap/perl-MooseX-Role-Parameterized/description
msgid ""
"Your parameterized role consists of two new things: parameter declarations "
"and a 'role' block.\n"
"\n"
"Parameters are declared using the the /parameter manpage keyword which very "
"much resembles the Moose/has manpage. You can use any option that the Moose/"
"has manpage accepts. The default value for the 'is' option is 'ro' as that's "
"a very common case. Use 'is => 'bare'' if you want no accessor. These "
"parameters will get their values when the consuming class (or role) uses the "
"Moose/with manpage. A parameter object will be constructed with these "
"values, and passed to the 'role' block.\n"
"\n"
"The 'role' block then uses the usual the Moose::Role manpage keywords to "
"build up a role. You can shift off the parameter object to inspect what the "
"consuming class provided as parameters. You use the parameters to customize "
"your role however you wish.\n"
"\n"
"There are many possible implementations for parameterized roles (hopefully "
"with a consistent enough API); I believe this to be the easiest and most "
"flexible design. Coincidentally, Pugs originally had an eerily similar "
"design.\n"
"\n"
"See the MooseX::Role::Parameterized::Extending manpage for some tips on how "
"to extend this module."
msgstr ""

#. leap/perl-Net-HTTP/description
msgid ""
"The 'Net::HTTP' class is a low-level HTTP client. An instance of the 'Net::"
"HTTP' class represents a connection to an HTTP server. The HTTP protocol is "
"described in RFC 2616. The 'Net::HTTP' class supports 'HTTP/1.0' and "
"'HTTP/1.1'.\n"
"\n"
"'Net::HTTP' is a sub-class of 'IO::Socket::INET'. You can mix the methods "
"described below with reading and writing from the socket directly. This is "
"not necessary a good idea, unless you know what you are doing."
msgstr ""
"'Net::HTTP' クラスは低レベルの HTTP クライアントです。 'Net::HTTP' クラスのイ"
"ンスタンスは、 HTTP サーバへの接続を表すものになります。 HTTP プロトコルは "
"RFC 2616 で規定されるもので、 'HTTP/1.0' と 'HTTP/1.1' にそれぞれ対応していま"
"す。\n"
"\n"
"'Net::HTTP' は 'IO::Socket::INET' のサブクラスです。そのため、ソケットに対し"
"て直接読み書きを行なうような処理を利用することもできます。これらの機能は、そ"
"れが何を意味するのかをよく理解しない限り、使用しないことをお勧めします。"

#. leap/perl-Net-XMPP/description
msgid ""
"Net::XMPP is a convenient tool to use for any perl script that would like to "
"utilize the XMPP Instant Messaging protocol.  While not a client in and of "
"itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible  and easy to use.  Net::XMPP is "
"a wrapper around the rest of the  official Net::XMPP::xxxxxx packages."
msgstr ""
"Net::XMPP は XMPP インスタントメッセージングプロトコルを扱う  Perl スクリプト"
"を作成するためのツールです。 これ自身をクライアントとして使用してログイン／ロ"
"グオフすることができるだけでなく、 CGI クライアントやコマンドライン Perl クラ"
"イアントを作成するのに必要な、 全てのバックエンド機能を備えた十分かつ使いやす"
"いツールです。 Net::Jabber は、残りの公式 Net::XMPP::xxxxxx パッケージに 対す"
"るラッパーです。"

#. leap/perl-PAR/description
msgid ""
"This module lets you use special zip files, called *P*erl *Ar*chives, as "
"libraries from which Perl modules can be loaded.\n"
"\n"
"It supports loading XS modules by overriding *DynaLoader* bootstrapping "
"methods; it writes shared object file to a temporary file at the time it is "
"needed.\n"
"\n"
"A _.par_ file is mostly a zip of the _blib/_ directory after the build "
"process of a CPAN distribution. To generate a _.par_ file yourself, all you "
"have to do is compress the modules under _arch/_ and _lib/_, e.g.:\n"
"\n"
"    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
"arch/ lib/\n"
"\n"
"Afterward, you can just use _mymodule.par_ anywhere in your '@INC', use\n"
"*PAR*, and it will Just Work. Support for generating _.par_ files is going "
"to be in the next (beyond 0.2805) release of Module::Build.\n"
"\n"
"For convenience, you can set the 'PERL5OPT' environment variable to '-MPAR' "
"to enable 'PAR' processing globally (the overhead is small if not used); "
"setting it to '-MPAR=/path/to/mylib.par' will load a specific PAR file. "
"Alternatively, consider using the _par.pl_ utility bundled with the the PAR::"
"Packer manpage distribution, or using the self-contained _parl_ utility "
"which is also distributed with the PAR::Packer manpage on machines without "
"PAR.pm installed.\n"
"\n"
"Note that self-containing scripts and executables created with _par.pl_ and "
"_pp_ may also be used as _.par_ archives:\n"
"\n"
"    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
"Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % perl "
"-MPAR -Ipacked.exe other.pl  # ditto\n"
"\n"
"Please see the /SYNOPSIS manpage for most typical use cases."
msgstr ""

#. leap/perl-Parse-CPAN-Meta/summary
msgid "Parse META.yml and META.json CPAN metadata files"
msgstr ""

#. leap/perl-Parse-CPAN-Meta/description
msgid ""
"*Parse::CPAN::Meta* is a parser for _META.json_ and _META.yml_ files, using "
"the JSON::PP manpage and/or the CPAN::Meta::YAML manpage.\n"
"\n"
"*Parse::CPAN::Meta* provides three methods: 'load_file', 'load_json_string', "
"and 'load_yaml_string'. These will read and deserialize CPAN metafiles, and "
"are described below in detail.\n"
"\n"
"*Parse::CPAN::Meta* provides a legacy API of only two functions, based on "
"the YAML functions of the same name. Wherever possible, identical calling "
"semantics are used. These may only be used with YAML sources.\n"
"\n"
"All error reporting is done with exceptions (die'ing).\n"
"\n"
"Note that META files are expected to be in UTF-8 encoding, only. When "
"converted string data, it must first be decoded from UTF-8."
msgstr ""

#. leap/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""

#. leap/perl-Plack/description
msgid ""
"Plack is a set of tools for using the PSGI stack. It contains middleware "
"components, a reference server and utilities for Web application frameworks. "
"Plack is like Ruby's Rack or Python's Paste for WSGI.\n"
"\n"
"See the PSGI manpage for the PSGI specification and the PSGI::FAQ manpage to "
"know what PSGI and Plack are and why we need them."
msgstr ""

#. leap/perl-RPC-XML/summary
msgid "A set of classes for core data, message and XML handling"
msgstr "コアデータ、メッセージ、 XML 処理向けのクラスセット"

#. leap/perl-RPC-XML/description
msgid ""
"The *RPC::XML* package is an implementation of the *XML-RPC* standard.\n"
"\n"
"The package provides a set of classes for creating values to pass to the "
"constructors for requests and responses. These are lightweight objects, most "
"of which are implemented as tied scalars so as to associate specific type "
"information with the value. Classes are also provided for requests, "
"responses, faults (errors) and a parser based on the the XML::Parser manpage "
"package from CPAN.\n"
"\n"
"This module does not actually provide any transport implementation or server "
"basis. For these, see the RPC::XML::Client manpage and the RPC::XML::Server "
"manpage, respectively."
msgstr ""
"*RPC::XML* パッケージは、 *XML-RPC* 標準の実装です。\n"
"\n"
"このパッケージは、リクエストや応答に対するコンストラクタに渡すための値を作成"
"するクラス集です。これらは軽量なオブジェクトであるほか、これらのうちの多くは"
"スカラー参照の bless として実装されているため、特定のタイプ情報を値に結び付け"
"ることができます。クラスはリクエストと要求のほか、失敗 (エラー) に対しても提"
"供されています。\n"
"\n"
"このモジュールでは、実際の転送機能やサーバ機能の実装などは提供されていませ"
"ん。これらの用途に対しては RPC::XML::Client や RPC::XML::Server のパッケージ"
"をお使いください。"

#. leap/perl-Regexp-Common/description
msgid ""
"By default, this module exports a single hash ('%RE') that stores or "
"generates commonly needed regular expressions (see the \"List of available "
"patterns\" manpage).\n"
"\n"
"There is an alternative, subroutine-based syntax described in the "
"\"Subroutine-based interface\" manpage."
msgstr ""

#. leap/perl-String-Errf/summary
msgid "a simple sprintf-like dialect"
msgstr ""

#. leap/perl-String-Errf/description
msgid ""
"String::Errf provides 'errf', a simple string formatter that works something "
"like 'perlfunc/sprintf'. It is implemented using the String::Formatter "
"manpage and the Sub::Exporter manpage. Their documentation may be useful in "
"understanding or extending String::Errf. The 'errf' subroutine is only "
"available when imported. Calling the String::Errf::errf manpage will not do "
"what you want."
msgstr ""

#. leap/perl-Sub-Exporter-Progressive/description
msgid ""
"the Sub::Exporter manpage is an incredibly powerful module, but with that "
"power comes great responsibility, er- as well as some runtime penalties. "
"This module is a 'Sub::Exporter' wrapper that will let your users just use "
"the Exporter manpage if all they are doing is picking exports, but use 'Sub::"
"Exporter' if your users try to use 'Sub::Exporter''s more advanced features, "
"like renaming exports, if they try to use them.\n"
"\n"
"Note that this module will export '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' "
"package variables for 'Exporter' to work. Additionally, if your package uses "
"advanced 'Sub::Exporter' features like currying, this module will only ever "
"use 'Sub::Exporter', so you might as well use it directly."
msgstr ""
"Sub::Exporter は非常にパワフルなモジュールですが、このパワーには実行時の不利"
"など、大きな代償が伴います。このモジュールはたとえば、単に関数の公開のみを行"
"ないたいような場合で、 'Sub::Exporter' に用意された高度な機能 (たとえば公開関"
"数の名前変更など) を行ないたいような場合に役立つ、 'Sub::Exporter' に対する"
"ラッパーです。\n"
"\n"
"なお、このモジュールは '@EXPORT', '@EXPORT_OK', '%EXPORT_TAGS' の各パッケージ"
"を、 'Exporter' に対して公開して動作することに注意してください。また、お使い"
"のパッケージで 'Sub::Exporter' でカリーイングなど高度な機能を利用している場合"
"は、'Sub::Exporter' を直接利用したほうが適切です。"

#. leap/perl-Switch/summary
msgid "A switch statement for Perl"
msgstr ""

#. leap/perl-Switch/description
msgid ""
"The Switch.pm module implements a generalized case mechanism that covers "
"most (but not all) of the numerous possible combinations of switch and case "
"values described above.\n"
"\n"
"The module augments the standard Perl syntax with two new control "
"statements: 'switch' and 'case'. The 'switch' statement takes a single "
"scalar argument of any type, specified in parentheses. 'switch' stores this "
"value as the current switch value in a (localized) control variable. The "
"value is followed by a block which may contain one or more Perl statements "
"(including the 'case' statement described below). The block is "
"unconditionally executed once the switch value has been cached."
msgstr ""

#. leap/perl-Task-Kensho-Async/summary
#. leap/perl-Task-Kensho-Async/description
msgid "A Glimpse at an Enlightened Perl (Async)"
msgstr ""

#. leap/perl-Task-Kensho-Config/summary
msgid "A Glimpse at an Enlightened Perl: Config Modules"
msgstr ""

#. leap/perl-Task-Kensho-Config/description
#. leap/perl-Task-Kensho-Dates/description
#. leap/perl-Task-Kensho-Testing/description
msgid ""
"From the http://en.wikipedia.org/wiki/Kensho manpage:\n"
"\n"
"    Kenshō (見性) (C. Wu) is a Japanese term for enlightenment experiences "
"-     most commonly used within the confines of Zen Buddhism - literally     "
"meaning \"seeing one's nature\"[1] or \"true self.\"[2] It generally     "
"\"refers to the realization of nonduality of subject and object.\"[3]\n"
"\n"
"the Task::Kensho manpage is a list of recommended modules for Enlightened "
"Perl development. CPAN is wonderful, but there are too many wheels and you "
"have to pick and choose amongst the various competing technologies.\n"
"\n"
"The plan is for the Task::Kensho manpage to be a rough testing ground for "
"ideas that go into among other things the Enlightened Perl Organisation "
"Extended Core (EPO-EC).\n"
"\n"
"The modules that are bundled by the Task::Kensho manpage are broken down "
"into several categories and are still being considered. They are all taken "
"from various top 100 most used perl modules lists and from discussions with "
"various subject matter experts in the Perl Community. That said, this bundle "
"does _not_ follow the guidelines established for the EPO-EC for peer review "
"via industry advisers.\n"
"\n"
"Starting in 2011, the Task::Kensho manpage split its sub-groups of modules "
"into individually-installable tasks. Each the Task::Kensho manpage sub-task "
"is listed at the beginning of its section in this documentation.\n"
"\n"
"When installing the Task::Kensho manpage itself, you will be asked to "
"install each sub-task in turn, or you can install individual tasks "
"separately. These individual tasks will always install all their modules by "
"default. This facilitates the ease and simplicity the distribution aims to "
"achieve."
msgstr ""

#. leap/perl-Task-Kensho-Dates/summary
msgid "A Glimpse at an Enlightened Perl: Date Modules"
msgstr ""

#. leap/perl-Task-Kensho-Testing/summary
msgid "A Glimpse at an Enlightened Perl: Testing"
msgstr ""

#. leap/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At it's simplest it compares two structures "
"by going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures"
msgstr ""

#. leap/perl-Test-Harness/summary
msgid "Run Perl standard test scripts with statistics"
msgstr ""

#. leap/perl-Test-Harness/description
msgid ""
"Although, for historical reasons, the the Test::Harness manpage distribution "
"takes its name from this module it now exists only to provide the TAP::"
"Harness manpage with an interface that is somewhat backwards compatible with "
"the Test::Harness manpage 2.xx. If you're writing new code consider using "
"the TAP::Harness manpage directly instead.\n"
"\n"
"Emulation is provided for 'runtests' and 'execute_tests' but the pluggable "
"'Straps' interface that previous versions of the Test::Harness manpage "
"supported is not reproduced here. Straps is now available as a stand alone "
"module: the Test::Harness::Straps manpage.\n"
"\n"
"See the TAP::Parser manpage, the TAP::Harness manpage for the main "
"documentation for this distribution."
msgstr ""

#. leap/perl-Test-Pod/summary
msgid "check for POD errors in files"
msgstr "ファイル内の POD エラーの確認"

#. leap/perl-Test-Pod-Coverage/summary
#. leap/perl-Test-Pod-Coverage/description
msgid "Test::Pod::Coverage Perl module"
msgstr "Test::Pod::Coverage Perl モジュール"

#. leap/perl-Test-Script/description
msgid ""
"The intent of this module is to provide a series of basic tests for 80% of "
"the testing you will need to do for scripts in the script (or bin as is also "
"commonly used) paths of your Perl distribution.\n"
"\n"
"Author:\n"
"-------      Adam Kennedy <adamk@cpan.org>"
msgstr ""
"このモジュールの目的は、スクリプトに対するテスト要件のうち、 80% までを占める"
"基礎テストの機能を提供することにあります。これらは、 Perl 配布物のパス内にあ"
"るスクリプト (またはよく使用されるバイナリ) を利用します。\n"
"\n"
"作者:\n"
"-----      Adam Kennedy <adamk@cpan.org>"

#. leap/perl-Test-Simple/summary
#, fuzzy
msgid "Basic utilities for writing tests."
msgstr "デスクトップファイルの操作ユーティリティ"

#. leap/perl-Test-Simple/description
msgid ""
"** If you are unfamiliar with testing *read Test::Tutorial* first! **\n"
"\n"
"This is an extremely simple, extremely basic module for writing tests "
"suitable for CPAN modules and other pursuits. If you wish to do more "
"complicated testing, use the Test::More module (a drop-in replacement for "
"this one).\n"
"\n"
"The basic unit of Perl testing is the ok. For each thing you want to test "
"your program will print out an \"ok\" or \"not ok\" to indicate pass or "
"fail. You do this with the ok() function (see below).\n"
"\n"
"The only other constraint is you must pre-declare how many tests you plan to "
"run. This is in case something goes horribly wrong during the test and your "
"test program aborts, or skips a test or whatever. You do this like so:\n"
"\n"
"    use Test::Simple tests => 23;\n"
"\n"
"You must have a plan.\n"
"\n"
"* *ok*\n"
"\n"
"    ok( $foo eq $bar, $name );     ok( $foo eq $bar );\n"
"\n"
"  ok() is given an expression (in this case '$foo eq $bar'). If it's true,   "
"the test passed. If it's false, it didn't. That's about it.\n"
"\n"
"  ok() prints out either \"ok\" or \"not ok\" along with a test number (it   "
"keeps track of that for you).\n"
"\n"
"         ok( get_temperature($hell) > 0, 'Hell not yet frozen over' );\n"
"\n"
"  If you provide a $name, that will be printed along with the \"ok/not ok"
"\"   to make it easier to find your test when if fails (just search for "
"the   name). It also makes it easier for the next guy to understand what "
"your   test is for. It's highly recommended you use test names.\n"
"\n"
"  All tests are run in scalar context. So this:\n"
"\n"
"      ok( @stuff, 'I have some stuff' );\n"
"\n"
"  will do what you mean (fail if stuff is empty)\n"
"\n"
"Test::Simple will start by printing number of tests run in the form \"1..M"
"\" (so \"1..5\" means you're going to run 5 tests). This strange format lets "
"Test::Harness know how many tests you plan on running in case something goes "
"horribly wrong.\n"
"\n"
"If all your tests passed, Test::Simple will exit with zero (which is "
"normal). If anything failed it will exit with how many failed. If you run "
"less (or more) tests than you planned, the missing (or extras) will be "
"considered failures. If no tests were ever run Test::Simple will throw a "
"warning and exit with 255. If the test died, even after having successfully "
"completed all its tests, it will still be considered a failure and will exit "
"with 255.\n"
"\n"
"So the exit codes are...\n"
"\n"
"    0                   all tests successful     255                 test "
"died or all passed but wrong # of tests run     any other number    how many "
"failed (including missing or extras)\n"
"\n"
"If you fail more than 254 tests, it will be reported as 254.\n"
"\n"
"This module is by no means trying to be a complete testing system. It's just "
"to get you started. Once you're off the ground its recommended you look at "
"the Test::More manpage."
msgstr ""

#. leap/perl-Test-Tester/summary
msgid "Ease testing test modules built with Test::Builder"
msgstr ""

#. leap/perl-Test-Tester/description
msgid ""
"If you have written a test module based on Test::Builder then Test::Tester "
"allows you to test it with the minimum of effort."
msgstr ""

#. leap/perl-Test-use-ok/summary
msgid "Alternative to Test::More::use_ok"
msgstr ""

#. leap/perl-Test-use-ok/description
msgid ""
"According to the *Test::More* documentation, it is recommended to run "
"'use_ok()' inside a 'BEGIN' block, so functions are exported at compile-time "
"and prototypes are properly honored.\n"
"\n"
"That is, instead of writing this:\n"
"\n"
"    use_ok( 'Some::Module' );     use_ok( 'Other::Module' );\n"
"\n"
"One should write this:\n"
"\n"
"    BEGIN { use_ok( 'Some::Module' ); }     BEGIN { use_ok( 'Other::"
"Module' ); }\n"
"\n"
"However, people often either forget to add 'BEGIN', or mistakenly group "
"'use_ok' with other tests in a single 'BEGIN' block, which can create subtle "
"differences in execution order.\n"
"\n"
"With this module, simply change all 'use_ok' in test scripts to 'use ok', "
"and they will be executed at 'BEGIN' time. The explicit space after 'use' "
"makes it clear that this is a single compile-time action."
msgstr ""

#. leap/perl-Text-ASCIITable/summary
msgid "Create a nice formatted table using ASCII characters"
msgstr "アスキー文字を使用した見やすい表の作成"

#. leap/perl-Text-ASCIITable/description
msgid ""
"Pretty nifty if you want to output dynamic text to your console or other "
"fixed-size-font displays, and at the same time it will display it in a nice "
"human-readable, or \"cool\" way."
msgstr ""

#. leap/perl-Text-Diff/description
msgid ""
"'diff()' provides a basic set of services akin to the GNU 'diff' utility. It "
"is not anywhere near as feature complete as GNU 'diff', but it is better "
"integrated with Perl and available on all platforms. It is often faster than "
"shelling out to a system's 'diff' executable for small files, and generally "
"slower on larger files.\n"
"\n"
"Relies on the Algorithm::Diff manpage for, well, the algorithm. This may not "
"produce the same exact diff as a system's local 'diff' executable, but it "
"will be a valid diff and comprehensible by 'patch'. We haven't seen any "
"differences between Algorithm::Diff's logic and GNU diff's, but we have not "
"examined them to make sure they are indeed identical."
msgstr ""
"\"diff()\" は GNU \"diff\" ユーティリティに似た仕組みを提供する基本サービス集"
"です。 GNU \"diff\" との完全な機能互換はありませんが、 Perl との統合をより便"
"利な仕組みで提供していて、全てのプラットフォームで動作します。また、システム"
"の \"diff\" プログラムを実行する場合に比べて、小さなファイルの場合はより高速"
"に、大きなファイルの場合は一般に遅く動作します。\n"
"\n"
"差分抽出の仕組みは Algorithm::Diff のものに依存しています。そのため、システム"
"内に存在するローカルの \"diff\" プログラムとは、出力が完全に一致するとは限り"
"ませんが、 diff の形式としては正しく、 \"patch\" プログラムからも利用できる形"
"式が出力できます。 Algorithm::Diff と GNU diff との違いを確認しているわけでは"
"ありませんが、確実に等価なものであるかどうかは確認されていないことに注意して"
"ください。"

#. leap/perl-Tie-Cycle/summary
msgid "Cycle through a list of values via a scalar."
msgstr ""

#. leap/perl-Time-Tiny/summary
msgid "A time object, with as little code as possible"
msgstr ""

#. leap/perl-Time-Tiny/description
msgid ""
"*Time::Tiny* is a member of the the DateTime::Tiny manpage suite of time "
"modules.\n"
"\n"
"It implements an extremely lightweight object that represents a time, "
"without any time data.\n"
"\n"
"The Tiny Mandate     Many CPAN modules which provide the best implementation "
"of a concept     can be very large. For some reason, this generally seems to "
"be about 3     megabyte of ram usage to load the module.\n"
"\n"
"    For a lot of the situations in which these large and comprehensive     "
"implementations exist, some people will only need a small fraction of     "
"the functionality, or only need this functionality in an ancillary     "
"role.\n"
"\n"
"    The aim of the Tiny modules is to implement an alternative to the "
"large     module that implements a subset of the functionality, using as "
"little     code as possible.\n"
"\n"
"    Typically, this means a module that implements between 50% and 80% "
"of     the features of the larger module, but using only 100 kilobytes "
"of     code, which is about 1/30th of the larger module.\n"
"\n"
"The Concept of Tiny Date and Time     Due to the inherent complexity, Date "
"and Time is intrinsically very     difficult to implement properly.\n"
"\n"
"    The arguably *only* module to implement it completely correct is the     "
"DateTime manpage. However, to implement it properly the DateTime     manpage "
"is quite slow and requires 3-4 megabytes of memory to load.\n"
"\n"
"    The challenge in implementing a Tiny equivalent to DateTime is to do "
"so     without making the functionality critically flawed, and to "
"carefully     select the subset of functionality to implement.\n"
"\n"
"    If you look at where the main complexity and cost exists, you will "
"find     that it is relatively cheap to represent a date or time as an "
"object,     but much much more expensive to modify or convert the object.\n"
"\n"
"    As a result, *Time::Tiny* provides the functionality required to     "
"represent a date as an object, to stringify the date and to parse it     "
"back in, but does *not* allow you to modify the dates.\n"
"\n"
"    The purpose of this is to allow for date object representations in     "
"situations like log parsing and fast real-time work.\n"
"\n"
"    The problem with this is that having no ability to modify date "
"limits     the usefulness greatly.\n"
"\n"
"    To make up for this, *if* you have the DateTime manpage installed, "
"any     *Time::Tiny* module can be inflated into the equivalent the "
"DateTime     manpage as needing, loading the DateTime manpage on the fly "
"if     necesary.\n"
"\n"
"    For the purposes of date/time logic, all *Time::Tiny* objects exist "
"in     the \"C\" locale, and the \"floating\" time zone (although obviously "
"in a     pure date context, the time zone largely doesn't matter).\n"
"\n"
"    When converting up to full the DateTime manpage objects, these local     "
"and time zone settings will be applied (although an ability is provided     "
"to override this).\n"
"\n"
"    In addition, the implementation is strictly correct and is intended "
"to     be very easily to sub-class for specific purposes of your own."
msgstr ""

#. leap/perl-URI/description
msgid ""
"This module implements the URI class. Objects of this class represent "
"\"Uniform Resource Identifier references\" as specified in RFC 2396 (and "
"updated by RFC 2732).\n"
"\n"
"URI objects can be used to access and manipulate the various components that "
"make up these strings.  There are also methods to combine URIs in various "
"ways."
msgstr ""
"このモジュールは URI クラスを実装しています。このクラスのオブジェクトは、 "
"RFC 2396 (および RFC 2732 で更新された) \"Uniform Resource Identifier "
"references\" を表します。\n"
"\n"
"URI オブジェクトは、これらの文字列を利用する様々なコンポーネントに対して、ア"
"クセスや操作の機能を提供します。様々な方法で URI を組み合わせるメソッドも用意"
"されています。"

#. leap/perl-URI-Find/description
msgid ""
"This module does one thing: Finds URIs and URLs in plain text. It finds them "
"quickly and it finds them *all* (or what URI.pm considers a URI to be.) It "
"only finds URIs which include a scheme (http:// or the like), for something "
"a bit less strict have a look at URI::Find::Schemeless.\n"
"\n"
"For a command-line interface, the urifind manpage is provided."
msgstr ""

#. leap/perl-XML-DOM/summary
msgid "Perl module for building DOM Level 1 compliant document structures"
msgstr "DOM レベル 1 準拠の文書構造を構築するための Perl モジュール"

#. leap/perl-XML-DOM/description
msgid ""
"This module extends the XML::Parser module by Clark Cooper. The XML::Parser "
"module is built on top of XML::Parser::Expat, which is a lower level "
"interface to James Clark's expat library."
msgstr ""
"このモジュールは Clark Cooper 氏が作成した XML::Parser モジュールの拡張版で"
"す。 XML::Parser モジュールは XML::Parser::Expat 上に構築されたモジュール"
"で、 James Clark 氏による expat ライブラリの低レベルインターフェイスを提供し"
"ます。"

#. leap/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from http://cvs.sourceforge."
"net/cgi-bin/viewcvs.cgi/~checkout~/perl-xml/libxml-p erl/doc/sax-2.0.html?"
"rev=HEAD&content-type=text/html\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""
"このモジュールは Expat (XML::Parser) 上で動作する SAX2 ドライバの実装で、 "
"Ken MacLeod 氏が perl-xml に投稿し、その後更新されたモジュールです。\n"
"\n"
"このモジュールは今もなお不完全なものでありますが、 SAX2 の基本イベントについ"
"ては利用可能な状態にあります。 SAX2 の仕様は現在、 http://cvs.sourceforge."
"net/cgi-bin/viewcvs.cgi/~checkout~/perl-xml/libxml-p erl/doc/sax-2.0.html?"
"rev=HEAD&content-type=text/html のマニュアルページにあります。\n"
"\n"
"よりわかりやすい URL と仕様の POD 文書は、現在準備中です。"

#. leap/perl-XML-SAX-Writer/summary
msgid "SAX2 Writer"
msgstr ""

#. leap/perl-XML-SAX-Writer/description
msgid ""
"Why yet another XML Writer ?\n"
"\n"
"A new XML Writer was needed to match the SAX2 effort because quite naturally "
"no existing writer understood SAX2. My first intention had been to start "
"patching XML::Handler::YAWriter as it had previously been my favourite "
"writer in the SAX1 world.\n"
"\n"
"However the more I patched it the more I realised that what I thought was "
"going to be a simple patch (mostly adding a few event handlers and changing "
"the attribute syntax) was turning out to be a rewrite due to various ideas "
"I`d been collecting along the way. Besides, I couldn`t find a way to "
"elegantly make it work with SAX2 without breaking the SAX1 compatibility "
"which people are probably still using. There are of course ways to do that, "
"but most require user interaction which is something I wanted to avoid.\n"
"\n"
"So in the end there was a new writer. I think it`s in fact better this way "
"as it helps keep SAX1 and SAX2 separated.\n"
"\n"
"  Author: Robin Berjon  <robin@knowscape.com>"
msgstr ""

#. leap/perl-XML-Simple/summary
msgid "Easily read/write XML (esp config files)"
msgstr "XML (特に設定ファイル) を読み書きするための簡易 API"

#. leap/perl-XML-Simple/description
msgid ""
"The XML::Simple module provides a simple API layer on top of an underlying "
"XML parsing module (either XML::Parser or one of the SAX2 parser modules). "
"Two functions are exported: 'XMLin()' and 'XMLout()'. Note: you can "
"explicity request the lower case versions of the function names: 'xml_in()' "
"and 'xml_out()'.\n"
"\n"
"The simplest approach is to call these two functions directly, but an "
"optional object oriented interface (see the \"OPTIONAL OO INTERFACE\" "
"manpage below) allows them to be called as methods of an *XML::Simple* "
"object. The object interface can also be used at either end of a SAX "
"pipeline."
msgstr ""
"XML::Simple モジュールは、 XML 処理モジュール (XML::Partse もしくは SAX2 パーサモジュールのうちのいずれか) "
"上で動作する、シンプルな API レイヤです。2 つの関数が公開されています: 'XMLin()' と 'XMLout()' 。注意: "
"小文字版の関数名を利用することもできます: 'xml_in()', 'xml_out()'\n"
"\n"
"これら 2 つの関数を直接呼び出すのが最もシンプルなアプローチですが、必要であればオブジェクト指向のインターフェイス (マニュアルページ内の \""
"OPTIONAL OO INTERFACE\" をお読みください) を利用することで、 *XML::Simple* "
"オブジェクトのメソッドを呼び出すこともできます。オブジェクト指向のインターフェイスは、 SAX パイプラインの末尾でも利用することができます。"

#. leap/perl-XML-Twig/summary
msgid "A perl module for processing huge XML documents in tree mode."
msgstr "巨大な XML ドキュメントをツリーモードで処理するための Perl モジュール"

#. leap/perl-XML-Writer/summary
msgid "Perl extension for writing XML documents."
msgstr "XML ドキュメントを書き込むための Perl 拡張です。"

#. leap/perl-YAML/description
msgid ""
"The YAML.pm module implements a YAML Loader and Dumper based on the YAML 1.0 "
"specification. the http://www.yaml.org/spec/ manpage\n"
"\n"
"YAML is a generic data serialization language that is optimized for human "
"readability. It can be used to express the data structures of most modern "
"programming languages. (Including Perl!!!)\n"
"\n"
"For information on the YAML syntax, please refer to the YAML specification."
msgstr ""
"YAML.pm は YAML 1.0 仕様をベースにした YML ローダ／ダンパーです。詳しくは"
"http://www.yaml.org/spec/ をお読みください。\n"
"\n"
"YAML は人間の可読性に最適化されているデータ直列化言語です。 Perl を含む多くの"
"近代的プログラミング言語のデータ構造を表現するのに使用することができます。\n"
"\n"
"YAML の文法について、詳しくは YAML 仕様をお読みください。"

#. leap/perl-libwww-perl/summary
msgid "The World-Wide-Web library for Perl"
msgstr "Perl 向け World-Wide Web ライブラリ"

#. leap/perl-libwww-perl/description
msgid ""
"The libwww-perl collection is a set of Perl modules which provides a simple "
"and consistent application programming interface to the World-Wide Web.  The "
"main focus of the library is to provide classes and functions that allow you "
"to write WWW clients. The library also contain modules that are of more "
"general use and even classes that help you implement simple HTTP servers."
msgstr ""
"libwww-perl コレクションは、 World-Wide Web に対するシンプルで安定したアプリ"
"ケーションプログラミングインターフェイスを提供するための、 Perl モジュール集"
"です。このライブラリは、 WWW クライアントを作成するためのクラスや関数を提供す"
"るために作成されています。また、このライブラリには汎用用途のモジュールも含ま"
"れていて、これらはシンプルな HTTP サーバを作成するのに便利です。"

#. leap/perl-AnyEvent/description
msgid ""
"the AnyEvent manpage provides a uniform interface to various event loops. "
"This allows module authors to use event loop functionality without forcing "
"module users to use a specific event loop implementation (since more than "
"one event loop cannot coexist peacefully).\n"
"\n"
"The interface itself is vaguely similar, but not identical to the the Event "
"manpage module.\n"
"\n"
"During the first call of any watcher-creation method, the module tries to "
"detect the currently loaded event loop by probing whether one of the "
"following modules is already loaded: the EV manpage, the AnyEvent::Loop "
"manpage, the Event manpage, the Glib manpage, the Tk manpage, the Event::Lib "
"manpage, the Qt manpage, the POE manpage. The first one found is used. If "
"none are detected, the module tries to load the first four modules in the "
"order given; but note that if the EV manpage is not available, the pure-perl "
"the AnyEvent::Loop manpage should always work, so the other two are not "
"normally tried.\n"
"\n"
"Because AnyEvent first checks for modules that are already loaded, loading "
"an event model explicitly before first using AnyEvent will likely make that "
"model the default. For example:\n"
"\n"
"   use Tk;    use AnyEvent;\n"
"\n"
"   \n"
"\n"
"The _likely_ means that, if any module loads another event model and starts "
"using it, all bets are off - this case should be very rare though, as very "
"few modules hardcode event loops without announcing this very loudly.\n"
"\n"
"The pure-perl implementation of AnyEvent is called 'AnyEvent::Loop'. Like "
"other event modules you can load it explicitly and enjoy the high "
"availability of that event loop :)"
msgstr ""

#. leap/perl-B-Hooks-OP-PPAddr/description
msgid ""
"This module provides a c api for XS modules to hook into the execution of "
"perl opcodes."
msgstr ""

#. leap/perl-Class-C3-XS/description
msgid ""
"This contains XS performance enhancers for Class::C3 version 0.16 and "
"higher. The main Class::C3 package will use this package automatically if it "
"can find it. Do not use this package directly, use Class::C3 instead.\n"
"\n"
"This module won't do anything for you if you're running a version of Class::"
"C3 older than 0.16. (It's not a dependency because it would be circular with "
"the optional dep from that package to this one)."
msgstr ""

#. leap/perl-DBD-ODBC/description
msgid ""
"This module is needed to access ODBC databases from within Perl. The module "
"uses the unixODBC manager to connect to the database."
msgstr ""
"このモジュールは、 Perl から ODBC データベースにアクセスするために必要となる"
"ものです。 データベースへの接続にあたっては unixODBC マネージャを使用します。"

#. leap/perl-DBD-mysql/description
msgid ""
"DBD::mysql is the Perl5 Database Interface driver for the MySQL database. In "
"other words: DBD::mysql is an interface between the Perl programming "
"language and the MySQL programming API that comes with the MySQL relational "
"database management system. Most functions provided by this programming API "
"are supported. Some rarely used functions are missing, mainly because noone "
"ever requested them. :-)"
msgstr ""
"DBD::mysql は、 MySQL データベース向けの Perl5 データベースインターフェイスド"
"ライバです。言い換えれば、 DBD::mysql は Perl プログラミング言語と MySQL リ"
"レーショナルデータベース管理システムのプログラミング API の間に立って、仲介を"
"行なうインターフェイスです。 MySQL 側の API で提供されているほとんどの機能に"
"対応してますが、ごく少数の未対応機能があります。これは主に必要とする人がいな"
"かったことによるものです :-)"

#. leap/perl-DBI/description
msgid ""
"The DBI is a database access module for the Perl programming language. It "
"defines a set of methods, variables, and conventions that provide a "
"consistent database interface, independent of the actual database being "
"used.\n"
"\n"
"It is important to remember that the DBI is just an interface. The DBI is a "
"layer of \"glue\" between an application and one or more database _driver_ "
"modules. It is the driver modules which do most of the real work. The DBI "
"provides a standard interface and framework for the drivers to operate "
"within.\n"
"\n"
"This document often uses terms like _references_, _objects_, _methods_. If "
"you're not familiar with those terms then it would be a good idea to read at "
"least the following perl manuals first: the perlreftut manpage, the perldsc "
"manpage, the perllol manpage, and the perlboot manpage."
msgstr ""
"DBI は Perl プログラミング言語向けのデータベースアクセスモジュールです。複数"
"のメソッドや変数、決まり事などを定義して、実際に使用するデータベースシステム"
"とは別に一貫したインターフェイスを提供します。\n"
"\n"
"DBI は単なるインターフェイスであることにご注意ください。 DBI はアプリケーショ"
"ンと複数のデータベース _ドライバ_ モジュールとの間を仲介するものであり、実際"
"の処理のほとんどはドライバモジュール側で行ないます。 DBI は、ドライバに対して"
"標準インターフェイスとフレームワークを提供し、内部処理を規定しています。\n"
"\n"
"本文書では、 _参照_, _オブジェクト_, _メソッド_ などの用語をしばしば使用して"
"います。これらの用語に詳しくない場合は、まず下記に示す Perl マニュアルをお読"
"みになることをお勧めします: perlreftut マニュアルページ, perldsc マニュアル"
"ページ, perllol マニュアルページ, perlboot マニュアルページ"

#. leap/perl-Data-Dump-Streamer/summary
msgid "Accurately serialize a data structure as Perl code."
msgstr ""

#. leap/perl-Date-Calc/summary
msgid "Perl Date-Calc Module"
msgstr "Perl 日付計算モジュール"

#. leap/perl-Date-Calc/description
msgid ""
"This package consists of a C library and a Perl module (which uses the C "
"library, internally) for all kinds of date calculations based on the "
"Gregorian calendar (the one used in all western countries today), thereby "
"complying with all relevant norms and standards: ISO/R 2015-1971, DIN 1355 "
"and, to some extent, ISO 8601 (where applicable).\n"
"\n"
"(See also http://www.engelschall.com/u/sb/download/Date-Calc/DIN1355/ for a "
"scan of part of the \"DIN 1355\" document (in German)).\n"
"\n"
"The module of course handles year numbers of 2000 and above correctly "
"(\"Year 2000\" or \"Y2K\" compliance) -- actually all year numbers from 1 to "
"the largest positive integer representable on your system (which is at least "
"32767) can be dealt with.\n"
"\n"
"Note that this package EXTRAPOLATES the Gregorian calendar BACK until the "
"year 1 A.D. -- even though the Gregorian calendar was only adopted in 1582 "
"by most (not all) European countries, in obedience to the corresponding "
"decree of catholic pope Gregor I in that year.\n"
"\n"
"Some (mainly protestant) countries continued to use the Julian calendar "
"(used until then) until as late as the beginning of the 20th century.\n"
"\n"
"Finally, note that this package is not intended to do everything you could "
"ever imagine automagically for you; it is rather intended to serve as a "
"toolbox (in the best of UNIX spirit and traditions) which should, however, "
"always get you where you want to go."
msgstr ""
"このパッケージは C ライブラリと Perl モジュール (内部的に C ライブラリを使用"
"しています) から成り、グレゴリオ暦 (全ての西欧諸国で今日使用されています) を"
"ベースとした全種類の日付計算 に対応しています。 また、このパッケージは関連す"
"る全ての標準や基準に対応しています: ISO/R 2015-1971, DIN 1355 といくつかの拡"
"張, ISO 8601 (適用可能であれば)\n"
"\n"
"(\"DIN 1355\" ドキュメント (ドイツ語) の一部分のスキャンについて、詳細は "
"http://www.engelschall.com/u/sb/download/Date-Calc/DIN1355/ をお読みくださ"
"い)\n"
"\n"
"もちろん、このモジュールは 2000 年以降に正しく対応しています (\"2000 年問題"
"\" とか \"Y2K\" 準拠などとも呼ばれます) -- 実際には 1 より大きい年から、 お使"
"いのシステムで利用可能な最大の整数まで (少なくとも 32767 年まで) を扱うことが"
"できます。\n"
"\n"
"なお、本パッケージはグレゴリオ暦で西暦 1 年までを推定しています\n"
"-- ただし、グレゴリオ暦は多くの (全てではありませんが) ヨーロッパ諸国で 1582 "
"年に採用されたもので、その年のカトリック教皇 Gregor I の布告に 従うことで成立"
"したものです。\n"
"\n"
"いくつかの (主にプロテスタント) 諸国は、遅くとも 20 世紀初頭まではユリウス歴"
"を 使用していました。\n"
"\n"
"最後に、このパッケージは想像するほど魔法のような何かをしてくれるようなもので"
"はありません; これは主にツールボックス (UNIX の精神と伝統の最もよいものです"
"が) となることを 目指しています。つまり、やりたいことをやれる、という意味で"
"す。"

#. leap/perl-Date-Tiny/summary
msgid "A date object with as little code as possible"
msgstr ""

#. leap/perl-Date-Tiny/description
msgid ""
"Date::Tiny is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a date, "
"without any time data."
msgstr ""

#. leap/perl-DateTime/summary
msgid "A date and time object for Perl"
msgstr "Perl 向け日時オブジェクト"

#. leap/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project. For details on this project please see "
"the http://datetime.perl.org/ manpage. The DateTime site has a FAQ which may "
"help answer many \"how do I do X?\" questions. The FAQ is at the http://"
"datetime.perl.org/wiki/datetime/page/FAQ manpage.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""
"DateTime は日付と時刻の組み合わせを表現するためのクラスで、 Perl の DateTime "
"プロジェクトの一部です。このプロジェクトの詳細については、 http://datetime."
"perl.org/ をご覧ください。 DateTime のサイトには、 \"これをやるにはどうすれ"
"ば？\" のような質問を含む FAQ が公開されています。 FAQ は http://datetime."
"perl.org/wiki/datetime/page/FAQ にあります。\n"
"\n"
"このクラスはグレゴリオ暦を表しているものですが、その暦が作られる (1582 年) よ"
"りも前の日時も表現することができます。これは \"先発グレゴリオ暦\" としても知"
"られています。この暦では、カレンダーの最初の日は西暦 1 年の最初の日となり、こ"
"れはイエスキリストの誕生日として (間違って) 信じられてきた日にあたります。\n"
"\n"
"なお、この暦には西暦 0 年も規定されていますが、 \"BCE/CE\" や \"BC/AD\" を利"
"用した日付形式とは異なるものになります。\n"
"\n"
"無制限の日付表現については DateTime::Infinite モジュールをご覧ください。"

#. leap/perl-File-ShareDir/description
msgid ""
"The intent of File::ShareDir is to provide a companion to Class::Inspector "
"and File::HomeDir, modules that take a process that is well-known by "
"advanced Perl developers but gets a little tricky, and make it more "
"available to the larger Perl community.\n"
"\n"
"Quite often you want or need your Perl module (CPAN or otherwise) to have "
"access to a large amount of read-only data that is stored on the file-system "
"at run-time.\n"
"\n"
"On a linux-like system, this would be in a place such as /usr/share, however "
"Perl runs on a wide variety of different systems, and so the use of any one "
"location is unreliable.\n"
"\n"
"Perl provides a little-known method for doing this, but almost nobody is "
"aware that it exists. As a result, module authors often go through some very "
"strange ways to make the data available to their code.\n"
"\n"
"The most common of these is to dump the data out to an enormous Perl data "
"structure and save it into the module itself. The result are enormous multi-"
"megabyte .pm files that chew up a lot of memory needlessly.\n"
"\n"
"Author:\n"
"-------     Adam Kennedy <adamk@cpan.org>"
msgstr ""
"File::ShareDir の目的は、 Class::Inspector や File::HomeDir に対する手引きと"
"なることです。これらのモジュールは Perl を利用する熟練した開発者がよく知るも"
"のですが、少し奇妙な仕組みであるため、より広い Perl のコミュニティに向けて作"
"られています。\n"
"\n"
"ファイルシステム内に保存された巨大なデータファイルに対して、読み込みのみの高"
"速なアクセスを行なう Perl モジュール (CPAN など) は、よく必要とされるもので"
"す。\n"
"\n"
"Linux 系のシステムでは、これらは /usr/share などのディレクトリに配置されます"
"が、Perl は幅広いシステムで使用されるものであるため、このディレクトリをそのま"
"ま利用することはできません。\n"
"\n"
"Perl はこれを行なうために少し知られた機能を提供していますが、それが存在してい"
"ることはあまり知られていません。結果として、モジュールの作者はコード内からそ"
"れらの共有データを使用する際、奇妙な方法を実装して実現している状況です。\n"
"\n"
"よくあるやり方としてのは、主に巨大な Perl のデータ構造を出力し、モジュール内"
"に保存するようなやり方です。出力結果は巨大な .pm ファイルになるため、不要なメ"
"モリを対象に消費することになってしまいます。\n"
"\n"
"作者:\n"
"-----     Adam Kennedy <adamk@cpan.org>"

#. leap/perl-HTML-Parser/description
msgid ""
"Objects of the HTML::Parser class will recognize markup and separate it from "
"plain text (alias data content) in HTML documents. As different kinds of "
"markup and text are recognized, the corresponding event handlers are "
"invoked.\n"
"\n"
"HTML::Parser is not a generic SGML parser. We have tried to make it able to "
"deal with the HTML that is actually \"out there\", and it normally parses as "
"closely as possible to the way the popular web browsers do it instead of "
"strictly following one of the many HTML specifications from W3C. Where there "
"is disagreement, there is often an option that you can enable to get the "
"official behaviour.\n"
"\n"
"The document to be parsed may be supplied in arbitrary chunks. This makes on-"
"the-fly parsing as documents are received from the network possible.\n"
"\n"
"If event driven parsing does not feel right for your application, you might "
"want to use HTML::PullParser. This is an HTML::Parser subclass that allows a "
"more conventional program structure."
msgstr ""
"HTML::Parser のクラスオブジェクトは、 HTML ドキュメント内に書かれているマーク"
"アップを認識して、それらを純粋なテキストデータに分割することができます。複数"
"種類のマークアップとテキストを解釈できるようにするため、それぞれ関連付けられ"
"たイベントハンドラを呼び出す形式になっています。\n"
"\n"
"HTML::Parser は汎用の SGML パーサーではありません。まさに \"向こう側\" の存在"
"である HTML を取り扱うことができるようにするために努力を重ね、 W3C が提供する"
"多数の HTML 仕様に厳密に準拠するのではなく、有名な Webブラウザが行なう方法に"
"できる限り近い結果を出すようにしてあります。そのため各種の不適合性が存在しま"
"すが、それは本来の動作を行なうようにするオプションで提供しています。\n"
"\n"
"ドキュメントは任意の長さのブロックに分割されます。これにより、ネットワークか"
"ら受信してその場でドキュメントを解釈することもできる仕組みになっています。\n"
"\n"
"イベント駆動型の仕組みがお使いのアプリケーションには合わないとお感じの場合"
"は、 HTML::PullParser をお使いください。これは HTML::Parser のサブクラスで、"
"より便利なプログラム構造を提供しています。"

#. leap/perl-IO-CaptureOutput/description
msgid ""
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. system(), fork()) and from XS or C "
"modules."
msgstr ""

#. leap/perl-Net-DNS/summary
msgid "Perl interface to the Domain Name System"
msgstr "ドメインネームシステムに対する Perl インターフェイス"

#. leap/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of 'gethostbyname' and 'gethostbyaddr'.\n"
"\n"
"The programmer should be somewhat familiar with the format of a DNS packet "
"and its various sections. See RFC 1035 or _DNS and BIND_ (Albitz & Liu) for "
"details."
msgstr ""
"Net::DNS はドメインネームシステム (DNS) の解決器として動作する Perl モジュー"
"ルです。プログラマに対して DNS の問い合わせ機能を提供し、 'gethostbyname' や "
"'gethostbyaddr' が提供する以上のことを行なうことができます。\n"
"\n"
"なお、プログラムを記述する際には DNS パケットの書式とセクションに関する幾分か"
"の知識が必要となります。詳しくは RFC 1035 または _DNS and BIND_ (Albitz & "
"Liu 著作) をお読みください。"

#. leap/perl-Net-SSLeay/description
msgid ""
"There is a related module called Net::SSLeay::Handle included in this "
"distribution that you might want to use instead. It has its own pod "
"documentation."
msgstr ""
"この配布物には、 Net::SSLeay::Handle と呼ばれる代用のための関連モジュールが含"
"まれています。詳しくは POD ドキュメンテーションをお読みください。"

#. leap/perl-PlRPC/summary
msgid "Perl Extension for Writing PlRPC Servers"
msgstr "PlRPC サーバに書き込むための Perl 拡張"

#. leap/perl-PlRPC/description
msgid ""
"PlRPC (Perl RPC) is a package for implementing servers and clients that are "
"entirely written in Perl. The name is borrowed from Sun's RPC (Remote "
"Procedure Call), but it could as well be RMI like Java's Remote Method "
"Interface, because PlRPC gives you the complete power of Perl's OO framework "
"in a very simple manner."
msgstr ""
"PlRPC (Perl RPC) は、全てを Perl で記述することのできるサーバやクライアントを"
"実装するためのパッケージです。名称は Sun の RPC (Remote Procedure Call) から"
"取られていますが、 PlRPC はとてもシンプルな方法で Perl のオブジェクト指向を用"
"いた能力を発揮しますので、 Java の Remote Method Interface (RMI) としても動作"
"することができます。"

#. leap/perl-Sub-Name/summary
msgid "(re)name a sub"
msgstr "サブルーチンの名前 (変更)"

#. leap/perl-Test-Differences/description
msgid "Test strings and data structures and show differences if not ok."
msgstr ""

#. leap/perl-Text-Glob/summary
msgid "Tools for working with paths and file specs across platforms"
msgstr ""

#. leap/perl-Unicode-Collate/summary
#, fuzzy
msgid "Unicode Collation Algorithm"
msgstr "UPnP 仕様の Python 実装"

#. leap/perl-Unicode-Collate/description
msgid ""
"This module is an implementation of Unicode Technical Standard #10 (a.k.a. "
"UTS #10) - Unicode Collation Algorithm (a.k.a. UCA)."
msgstr ""

#. leap/perl-Unicode-String/summary
msgid "String of Unicode characters (UCS2/UTF16)"
msgstr "Unicode 文字列 (UCS2/UTF16)"

#. leap/perl-Unicode-String/description
msgid ""
"A Unicode::String object represents a sequence of Unicode characters. The "
"Unicode Standard is a fixed-width, uniform encoding scheme for written "
"characters and text. This encoding treats alphabetic characters, ideographic "
"characters, and symbols identically, which means that they can be used in "
"any mixture and with equal facility. Unicode is modeled on the ASCII "
"character set, but uses a 16-bit encoding to support full multilingual text."
msgstr ""
"Unicode::String オブジェクトは、 Unicode 文字の並びを表わします。 Unicode 標"
"準は、その文字やテキストに対する固定幅で不変のコード体系を持っています。 この"
"コード体系はアルファベットや表意文字、記号などの文字を扱います。 これにより、"
"これらを混在させて 同一の手段で使うことができるようになります。 Unicode は "
"ASCII キャラクタセットをモデルにしていますが、完全な多言語テキストに対応する"
"のに 16 ビットエンコードを使用しています。"

#. leap/perl-Variable-Magic/description
msgid ""
"Magic is Perl's way of enhancing variables. This mechanism lets the user add "
"extra data to any variable and hook syntactical operations (such as access, "
"assignment or destruction) that can be applied to it. With this module, you "
"can add your own magic to any variable without having to write a single line "
"of XS.\n"
"\n"
"You'll realize that these magic variables look a lot like tied variables. It "
"is not surprising, as tied variables are implemented as a special kind of "
"magic, just like any 'irregular' Perl variable : scalars like '$!', '$(' or "
"'$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' and "
"'substr()' lvalues, the threads::shared manpage variables... They all share "
"the same underlying C API, and this module gives you direct access to it."
msgstr ""
"Magic とは変数を拡張するための Perl の仕組みです。これはユーザに対して、任意"
"の変数内に追加データを設定し、スクリプト内での操作 (たとえばアクセスや代入、"
"破壊など) をフックできるようになります。このモジュールを利用することで、XS の"
"単一行を記述したりすることなく、独自の Magic を任意の変数に設定することができ"
"ます。\n"
"\n"
"これらの Magic 変数はタイ変数によく似た仕組みであることがわかるはずです。これ"
"は驚くようなことではありません。タイ変数も Magic の特殊系として実装されている"
"からです。たとえば下記のような 'イレギュラー' な Perl 変数があります: '$!', "
"'$(', '$^W' のようなスカラー変数や '%ENV' と '%SIG' のようなハッシュ、 "
"'@ISA' のような配列や 'vec()' と 'substr()' のような lvalue 、 threads::"
"shared の変数など。これらはすべて同じ C 言語 API をベースにしていて、このモ"
"ジュールからそれらに直接アクセスできるようになります。"

#. leap/perl-XML-LibXML/description
msgid ""
"This module implements a Perl interface to the Gnome libxml2 library which "
"provides interfaces for parsing and manipulating XML files. This module "
"allows Perl programmers to make use of the highly capable validating XML "
"parser and the high performance DOM implementation."
msgstr ""
"このモジュールは、 XML ファイルを処理したり操作したりするためのインターフェイ"
"スを提供する、 GNOME libxml2 ライブラリに対する Perl のインターフェイスを実装"
"しています。このモジュールは Perl プログラマに対して、高度な検証機能や高性能"
"な DOM 実装を持つ XML パーサを提供します。"

#. leap/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of  "
"XML::Parser::Expat, which is a lower level interface to James Clark's expat  "
"library. Each call to one of the parsing methods creates a new instance of  "
"XML::Parser::Expat which is then used to parse the document. Expat options "
"may  be provided when the XML::Parser object is created. These options are "
"then  passed on to the Expat object on each parse call. They can also be "
"given as  extra arguments to the parse methods, in which case they override "
"options  given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by \"Style\" and/or "
"\"Handlers\"  options, or by \"setHandlers\" method. These all provide "
"mechanisms for  XML::Parser to set the handlers needed by XML::Parser::"
"Expat. If neither  Style nor Handlers are specified, then parsing just "
"checks the document  for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter  "
"the Expat object, not the Parser object.\n"
"\n"
"You will find examples in /usr/share/doc/packages/perl-XML-Parser/samples.  "
"For documentation read the XML::Parser and XML::Parser::Expat man pages."
msgstr ""
"このモジュールは XML ドキュメントを処理する手段を提供しています。 XML::"
"Parser::Expat と呼ばれる James Clark 氏が開発したexpat ライブラリをベースに作"
"成されています。 XML の解析メソッドのうちのいずれかを呼び出すと XML::Parser::"
"Expat に対する新しいインスタンスが作成され、そこからドキュメントの解析が始ま"
"ります。 expat オプションは XML::Parser オブジェクトが作成された際に設定でき"
"るようになります。これらのオプションは各解析処理の呼び出しの際に、 expat オブ"
"ジェクトに渡されます。オプションは解析メソッドのパラメータとして渡すこともで"
"き、この際に渡したパラメータは XML::Parser のインスタンスを作成した際に指定し"
"たオプションを上書きします。\n"
"\n"
"解析処理の振る舞いは、それぞれ \"スタイル\" や \"ハンドラ\" と呼ばれるオプ"
"ションで制御することができるほか、 \"setHandlers\"メソッドでも制御することが"
"できます。これらすべては XML::Parser に対してメカニズムを提供するもので、 "
"XML::Parser::Expat が必要とするハンドラを設定するためのものです。スタイルやハ"
"ンドラを何も指定しない場合は、ドキュメントが正しい形式になっているかどうかを"
"単純にチェックするだけの動作をします。\n"
"\n"
"設定したハンドラが呼び出されると、ハンドラ側では最初のパラメータとして "
"Parser のオブジェクトではなく、expat のオブジェクトを受け取ります。\n"
"\n"
"サンプルについては /usr/share/doc/packages/perl-XML-Parser/samples を、ドキュ"
"メンテーションについては XML::Parser, XML::Parser::Expat の各マニュアルページ"
"をお読みください。"

#. leap/perl-XML-Structured/summary
msgid "Simple conversion API from XML to perl structures and back"
msgstr ""

#. leap/perl-XML-Structured/description
msgid ""
"Provides a way to convert xml data into a predefined perl data structure and "
"back to xml. Unlike with modules like XML::Simple it is an error if the xml "
"data does not match the provided skeleton (the \"dtd\"). Another advantage "
"is that the order of the attributes and elements is taken from the dtd when "
"converting back to xml."
msgstr ""

#. leap/perl-XML-XPath/summary
msgid "A set of modules for parsing and evaluating XPath statements"
msgstr "XPath ステートメントの処理と評価のモジュールセット"

#. leap/perl-XML-XPath/description
msgid ""
"This module aims to comply exactly to the XPath specification at http://www."
"w3.org/TR/xpath and yet allow extensions to be added in the form of "
"functions. Modules such as XSLT and XPointer may need to do this as they "
"support functionality beyond XPath."
msgstr ""
"このモジュールは、 XPath 仕様 (http://www.w3.org/TR/xpath) に正しく準拠するこ"
"とを目指していて、関数の形態で拡張を追加することもできるようになっています。 "
"XSLT や XPointer のようなモジュールは、 XPath を除く機能をサポートするにあ"
"たって、本モジュールが必要になる場合があります。"

#. leap/perl-YAML-LibYAML/summary
msgid "YAML::LibYAML Perl module"
msgstr "YAML::LibYAML Perl モジュール"

#. leap/perl-YAML-LibYAML/description
msgid ""
"Kirill Siminov's libyaml is arguably the best YAML implementation. The C "
"library is written precisely to the YAML 1.1 specification. It was "
"originally bound to Python and was later bound to Ruby.\n"
"\n"
"This module is a Perl XS binding to libyaml which offers Perl the best YAML "
"support to date.\n"
"\n"
"This module exports the functions Dump and Load. These functions are "
"intended to work exactly like YAML.pm's corresponding functions."
msgstr ""
"Kirill Siminov 氏作成の libyaml は、 YAML の最適な実装です。 C 言語ライブラリ"
"は YAML 1.1 仕様を正確に記述しています。元々は Python にバインドするために作"
"成されましたが、 Ruby にもバインドできるようになりました。\n"
"\n"
"このモジュールは Perl XS バインディングで、 Perl に対して最良かつ最新の YAML "
"サポートを提供します。\n"
"\n"
"このモジュールは Dump, Load の各関数を公開しています。これらの関数は YAML.pm "
"で対応する関数のように正確に動作します。"

#. leap/perl-autobox/description
msgid ""
"The autobox pragma allows methods to be called on integers, floats, strings, "
"arrays, hashes, and code references in exactly the same manner as blessed "
"references.\n"
"\n"
"The autoboxing is transparent: boxed values are not blessed into their (user-"
"defined) implementation class (unless the method elects to bestow such a "
"blessing) - they simply use its methods as though they are.\n"
"\n"
"The classes (packages) into which the native types are boxed are fully "
"configurable. By default, a method invoked on a non-object value is assumed "
"to be defined in a class whose name corresponds to the 'ref()' type of that "
"value - or SCALAR if the value is a non-reference."
msgstr ""
"autobox pragma は整数や浮動小数、文字列や配列、ハッシュやコード参照などをブレ"
"スと全く同じやり方で呼び出すことができます。\n"
"\n"
"autobox は透過的に動作します: ボックス内の値はそれらの (ユーザ定義の) 実装ク"
"ラス内にブレスされることはなく (メソッドがそのようなブレス処理を意図的に選択"
"しない限り) 、単にメソッドを呼び出すだけの処理にすることができます。\n"
"\n"
"ネイティブな型がボックス化されているクラス (パッケージ) は、全てを設定するこ"
"とができます。既定では非オブジェクト値で実行されたメソッドは、その値の "
"'ref()' 型の関係づけられた名前のクラスで定義されているものと判断します。それ"
"以外の場合は、値は非参照のスカラとして呼び出されます。"

#. leap/perl-autovivification/summary
msgid "Lexically disable autovivification."
msgstr ""

#. leap/perl-gettext/summary
msgid "Message handling functions"
msgstr "メッセージ処理関数"

#. leap/perl-gettext/description
msgid ""
"The gettext module permits access from perl to the gettext() family of "
"functions for retrieving message strings from databases constructed to "
"internationalize software.\n"
"\n"
"gettext(), dgettext(), and dcgettext() attempt to retrieve a string matching "
"their 'msgid' parameter within the context of the current locale. "
"dcgettext() takes the message's category and the text domain as parameters "
"while dcgettext() defaults to the LC_MESSAGES category and gettext() "
"defaults to LC_MESSAGES and uses the current text domain. If the string is "
"not found in the database, then 'msgid' is returned.\n"
"\n"
"textdomain() sets the current text domain and returns the previously active "
"domain.\n"
"\n"
"_bindtextdomain(domain, dirname)_ instructs the retrieval functions to look "
"for the databases belonging to domain 'domain' in the directory 'dirname'"
msgstr ""
"gettext モジュールは Perl のコードから gettext() ファミリの関数を呼び出し、国"
"際化ソフトウエア向けに構築されたデータベースから文字列を取得する機能を提供し"
"ます。\n"
"\n"
"gettext(), dgettext(), dcgettext() はいずれも、 'msgid' パラメータに該当する"
"文字列を現在のロケールに対して取得するためのものです。 dcgettext() はメッセー"
"ジの分類とテキスト領域をパラメータとして受け取るもので、 dcgettext() は既定で"
"は LC_MESSAGESの分類を、 gettext() は LC_MESSAGES と現在のテキスト領域を対象"
"にして取得します。データベース内に該当の文字列が見つからない場合は、 'msgid' "
"がそのまま返されます。\n"
"\n"
"textdomain() は現在のテキスト領域を設定し、それまで有効だった領域を返却しま"
"す。\n"
"\n"
"_bindtextdomain(domain, dirname)_ は取得関数に対して、ディレクトリ "
"'dirname'内の領域 'domain' に属するものを参照するように指定します。"

#. leap/perl-indirect/description
msgid ""
"When enabled, this pragma warns about indirect method calls that are present "
"in your code.\n"
"\n"
"The indirect syntax is now considered harmful, since its parsing has many "
"quirks and its use is error prone : when the subroutine 'foo' has not been "
"declared in the current package, 'foo $x' actually compiles to '$x->foo', "
"and 'foo { key => 1 }' to ''key'->foo(1)'. Please refer to the the /"
"REFERENCES manpage section for a more complete list of reasons for avoiding "
"this construct.\n"
"\n"
"This pragma currently does not warn for core functions ('print', 'say', "
"'exec' or 'system'). This may change in the future, or may be added as "
"optional features that would be enabled by passing options to 'unimport'.\n"
"\n"
"This module is *not* a source filter."
msgstr ""

#. leap/perl-libintl-perl/summary
msgid "Internationalization Library for Perl"
msgstr "Perl 向け国際化ライブラリ"

#, fuzzy
#~ msgid "Fast, lightweight YAML loader and dumper"
#~ msgstr "軽量 GTK+ クリップボードマネージャ"

#~ msgid ""
#~ "Highly Customizable Perl App for Reading and Writing Meta Information in "
#~ "Files"
#~ msgstr ""
#~ "ファイル内のメタデータを読み書きするための、高度にカスタマイズ可能な Perl "
#~ "スクリプト"

#~ msgid ""
#~ "*Apache::AuthCookie* allows you to intercept a user's first "
#~ "unauthenticated access to a protected document. The user will be "
#~ "presented with a custom form where they can enter authentication "
#~ "credentials. The credentials are posted to the server where AuthCookie "
#~ "verifies them and returns a session key.\n"
#~ "\n"
#~ "The session key is returned to the user's browser as a cookie. As a "
#~ "cookie, the browser will pass the session key on every subsequent "
#~ "accesses. AuthCookie will verify the session key and re-authenticate the "
#~ "user.\n"
#~ "\n"
#~ "All you have to do is write a custom module that inherits from "
#~ "AuthCookie. Your module is a class which implements two methods:\n"
#~ "\n"
#~ "* 'authen_cred()'\n"
#~ "\n"
#~ "  Verify the user-supplied credentials and return a session key. The   "
#~ "session key can be any string - often you'll use some string containing   "
#~ "username, timeout info, and any other information you need to determine   "
#~ "access to documents, and append a one-way hash of those values together   "
#~ "with some secret key.\n"
#~ "\n"
#~ "* 'authen_ses_key()'\n"
#~ "\n"
#~ "  Verify the session key (previously generated by 'authen_cred()', "
#~ "possibly   during a previous request) and return the user ID. This user "
#~ "ID will be   fed to '$r->connection->user()' to set Apache's idea of "
#~ "who's logged in.\n"
#~ "\n"
#~ "By using AuthCookie versus Apache's built-in AuthBasic you can design "
#~ "your own authentication system. There are several benefits.\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  The client doesn't *have* to pass the user credentials on every   "
#~ "subsequent access. If you're using passwords, this means that the   "
#~ "password can be sent on the first request only, and subsequent requests   "
#~ "don't need to send this (potentially sensitive) information. This is   "
#~ "known as \"ticket-based\" authentication.\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  When you determine that the client should stop using the   credentials/"
#~ "session key, the server can tell the client to delete the   cookie. "
#~ "Letting users \"log out\" is a notoriously impossible-to-solve   problem "
#~ "of AuthBasic.\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  AuthBasic dialog boxes are ugly. You can design your own HTML login "
#~ "forms   when you use AuthCookie.\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  You can specify the domain of a cookie using PerlSetVar commands. For   "
#~ "instance, if your AuthName is 'WhatEver', you can put the command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverDomain .yourhost.com\n"
#~ "\n"
#~ "  into your server setup file and your access cookies will span all "
#~ "hosts   ending in '.yourhost.com'.\n"
#~ "\n"
#~ "* 5.\n"
#~ "\n"
#~ "  You can optionally specify the name of your cookie using the "
#~ "'CookieName'   directive. For instance, if your AuthName is 'WhatEver', "
#~ "you can put the   command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverCookieName MyCustomName\n"
#~ "\n"
#~ "  into your server setup file and your cookies for this AuthCookie "
#~ "realm   will be named MyCustomName. Default is AuthType_AuthName.\n"
#~ "\n"
#~ "* 6.\n"
#~ "\n"
#~ "  By default users must satisfy ALL of the 'require' directives. If you   "
#~ "want authentication to succeed if ANY 'require' directives are met, use   "
#~ "the 'Satisfy' directive. For instance, if your AuthName is 'WhatEver',   "
#~ "you can put the command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverSatisfy Any\n"
#~ "\n"
#~ "  into your server startup file and authentication for this realm will   "
#~ "succeed if ANY of the 'require' directives are met.\n"
#~ "\n"
#~ "This is the flow of the authentication handler, less the details of the "
#~ "redirects. Two REDIRECT's are used to keep the client from displaying the "
#~ "user's credentials in the Location field. They don't really change "
#~ "AuthCookie's model, but they do add another round-trip request to the "
#~ "client.\n"
#~ "\n"
#~ " (-----------------------)     +---------------------------------+  "
#~ "( Request a protected   )     | AuthCookie sets custom error    |  "
#~ "( page, but user hasn't )---->| document and returns            |  "
#~ "( authenticated (no     )     | FORBIDDEN. Apache abandons      |  "
#~ "( session key cookie)   )     | current request and creates sub |  "
#~ "(-----------------------)     | request for the error document. |<-"
#~ "+                                | Error document is a script that |  "
#~ "|                                | generates a form where the user |  "
#~ "|                  return        | enters authentication           |  "
#~ "|           ^------------------->| credentials (login & password). |  "
#~ "|          / \\      False        +---------------------------------+  "
#~ "|         /   \\                                   |                   "
#~ "|        /     \\                                  |                   "
#~ "|       /       \\                                 V                   "
#~ "|      /         \\               +---------------------------------+  "
#~ "|     /   Pass    \\              | User's client submits this form |  "
#~ "|    /   user's    \\             | to the LOGIN URL, which calls   |  "
#~ "|    | credentials |<------------| AuthCookie->login().            |  "
#~ "|    \\     to      /             +---------------------------------+  "
#~ "|     \\authen_cred/                                                   "
#~ "|      \\ function/                                                    "
#~ "|       \\       /                                                     "
#~ "|        \\     /                                                      "
#~ "|         \\   /            +------------------------------------+     "
#~ "|          \\ /   return    | Authen cred returns a session      |  +--"
#~ "+           V------------->| key which is opaque to AuthCookie.*|  "
#~ "|                 True     +------------------------------------+  "
#~ "|                                               |                  "
#~ "|                +--------------------+         |      +---------------"
#~ "+                |                    |         |      | If we had a   "
#~ "|                V                    |         V      | cookie, add   "
#~ "|   +----------------------------+  r |         ^      | a Set-Cookie  "
#~ "|   | If we didn't have a session|  e |T       / \\     | header to     "
#~ "|   | key cookie, add a          |  t |r      /   \\    | override the  "
#~ "|   | Set-Cookie header with this|  u |u     /     \\   | invalid "
#~ "cookie|   | session key. Client then   |  r |e    /       \\  "
#~ "+---------------+   | returns session key with   |  n |    /  pass   "
#~ "\\               ^   | successive requests        |    |   /  session  "
#~ "\\              |   +----------------------------+    |  /   key to    "
#~ "\\    return   |                |                    +-| "
#~ "authen_ses_key|------------+                V                       "
#~ "\\             /     False   +-----------------------------------+ "
#~ "\\           /   | Tell Apache to set Expires header,|  \\         /   | "
#~ "set user to user ID returned by   |   \\       /   | authen_ses_key, set "
#~ "authentication|    \\     /   | to our type (e.g. AuthCookie).    |     "
#~ "\\   /   +-----------------------------------+      "
#~ "\\ /                                               V          "
#~ "(---------------------)              ^          ( Request a "
#~ "protected )              |          ( page, user has a    )--------------"
#~ "+          ( session key cookie  )          (---------------------)\n"
#~ "\n"
#~ "  *  The session key that the client gets can be anything you want.  "
#~ "For     example, encrypted information about the user, a hash of the     "
#~ "username and password (similar in function to Digest     authentication), "
#~ "or the user name and password in plain text     (similar in function to "
#~ "HTTP Basic authentication).\n"
#~ "\n"
#~ "    The only requirement is that the authen_ses_key function that you     "
#~ "create must be able to determine if this session_key is valid and     map "
#~ "it back to the originally authenticated user ID."
#~ msgstr ""
#~ "*Apache::AuthCookie* は、アクセス認証の必要なドキュメントに最初にアクセス"
#~ "した際、そのアクセスに対する割り込み機能を提供します。ユーザ側には認証情報"
#~ "を入力することのできるカスタム名フォームが提示され、その認証情報がサーバ側"
#~ "に送信されると、 AuthCookie がそれを検証し、セッション鍵を返却します。\n"
#~ "\n"
#~ "セッション鍵はユーザ側のブラウザに対して、 Cookie として返されます。 "
#~ "Cookie はブラウザ側に保存され、後続のアクセスが行なわれるたびに送信される"
#~ "ことになります。AuthCookie ではそこで送信されるセッション鍵を検証し、必要"
#~ "であれば再認証を求める動作をします。\n"
#~ "\n"
#~ "アプリケーション側で行なうべきことは、 AuthCookie を継承したカスタムなモ"
#~ "ジュールを作成することだけです。そのモジュールは、 2 つのメソッドを実装し"
#~ "たクラスとなります:\n"
#~ "\n"
#~ "* 'authen_cred()'\n"
#~ "\n"
#~ "  ユーザ側が提示した認証情報を検証し、セッション鍵を返すメソッドです。セッ"
#~ "ション鍵には、任意の文字列を指定することができ、たとえばユーザ名やタイムア"
#~ "ウト、そしてドキュメントに対するアクセス権限などの情報が含まれます。また、"
#~ "機密鍵と一方向関数を利用したハッシュ文字列も追加すべきものです。\n"
#~ "\n"
#~ "* 'authen_ses_key()'\n"
#~ "\n"
#~ "  セッション鍵 ('authen_cred()' で以前に生成したもの。おそらくは直前のアク"
#~ "セスで取得したもの) を検証し、ユーザ ID を返却します。ユーザ ID は Apache "
#~ "側で、誰がログインしたのかを記録するのに使用します ('$r->connection-"
#~ ">user()') 。\n"
#~ "\n"
#~ "AuthCookie を使用することで、 Apache に内蔵された AuthBasic と同等の認証シ"
#~ "ステムを構築することができます。 AuthCookie にはいくつかの利点がありま"
#~ "す。\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  クライアント側から、それぞれのアクセスで認証情報を送信する必要が無くなり"
#~ "ます。たとえばパスワードについては、最初のリクエストの際にのみ送信され、そ"
#~ "の後のアクセスではそれら (潜在的な機密情報) を送信する必要がありません。こ"
#~ "れは \"チケットベース\"の認証としても知られた仕組みです。\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  認証情報／セッション鍵の使用終了時には、サーバ側で Cookie を削除するよう"
#~ "に指示することができます。ユーザの \"ログアウト\" は、 AuthBasic の実装で"
#~ "は実現不可能な仕組みです。\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  AuthBasic のダイアログボックスは非常に見にくく、 AuthCookie のように独自"
#~ "の HTML ログイン画面を設計できたほうが、デザイン上の自由度が高くなりま"
#~ "す。\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  PerlSetVar コマンドを利用して、 Cookie の適用範囲を指定できます。たとえ"
#~ "ば AuthName が 'WhatEver' であった場合、下記のコマンドをサーバの設定ファイ"
#~ "ル内に追加すると、 '.yourhost.com' で終わる全てのホストに対して、 Cookie "
#~ "を使い回すことができます。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverDomain .yourhost.com\n"
#~ "\n"
#~ "* 5.\n"
#~ "\n"
#~ "  必要であれば、 'CookieName' ディレクティブを利用して Cookie の名前を指定"
#~ "することもできます。たとえば AuthName が 'WhatEver' であった場合、下記のコ"
#~ "マンドを指定して名前を設定することができます。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverCookieName MyCustomName\n"
#~ "\n"
#~ "これをサーバの設定ファイルに追加すると、 AuthCookie の領域情報が "
#~ "MyCustomName という名前になります。既定値は AuthType_AuthName です。\n"
#~ "\n"
#~ "* 6.\n"
#~ "\n"
#~ "  規定では、ユーザは 'require' ディレクティブの全てを満たさなければなりま"
#~ "せん。'require' で書かれた条件のいずれかに該当することで認証を許可したい場"
#~ "合は、'Satisfy' ディレクティブを使用します。たとえば AuthName が "
#~ "'WhatEver' であった場合、下記のコマンドをサーバの設定ファイルに追加する"
#~ "と、 'require' ディレクティブのいずれかの条件を満たすことで、アクセスでき"
#~ "るようになります。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverSatisfy Any\n"
#~ "\n"
#~ "下記は認証ハンドラのフローを示した図です。リダイレクトについては詳細を略し"
#~ "ています。 2 つの REDIRECT によって、 Location フィールドでのユーザ認証情"
#~ "報表示を制御しています。これらは AuthCookie の仕組みを変更するものではな"
#~ "く、クライアントに対してもう 1 つの要求／応答を追加しています。\n"
#~ "\n"
#~ " (-----------------------)     +---------------------------------+  "
#~ "( Request a protected   )     | AuthCookie sets custom error    |  "
#~ "( page, but user hasn't )---->| document and returns            |  "
#~ "( authenticated (no     )     | FORBIDDEN. Apache abandons      |  "
#~ "( session key cookie)   )     | current request and creates sub |  "
#~ "(-----------------------)     | request for the error document. |<-"
#~ "+                                | Error document is a script that |  "
#~ "|                                | generates a form where the user |  "
#~ "|                  return        | enters authentication           |  "
#~ "|           ^------------------->| credentials (login & password). |  "
#~ "|          / \\      False        +---------------------------------+  "
#~ "|         /   \\                                   |                   "
#~ "|        /     \\                                  |                   "
#~ "|       /       \\                                 V                   "
#~ "|      /         \\               +---------------------------------+  "
#~ "|     /   Pass    \\              | User's client submits this form |  "
#~ "|    /   user's    \\             | to the LOGIN URL, which calls   |  "
#~ "|    | credentials |<------------| AuthCookie->login().            |  "
#~ "|    \\     to      /             +---------------------------------+  "
#~ "|     \\authen_cred/                                                   "
#~ "|      \\ function/                                                    "
#~ "|       \\       /                                                     "
#~ "|        \\     /                                                      "
#~ "|         \\   /            +------------------------------------+     "
#~ "|          \\ /   return    | Authen cred returns a session      |  +--"
#~ "+           V------------->| key which is opaque to AuthCookie.*|  "
#~ "|                 True     +------------------------------------+  "
#~ "|                                               |                  "
#~ "|                +--------------------+         |      +---------------"
#~ "+                |                    |         |      | If we had a   "
#~ "|                V                    |         V      | cookie, add   "
#~ "|   +----------------------------+  r |         ^      | a Set-Cookie  "
#~ "|   | If we didn't have a session|  e |T       / \\     | header to     "
#~ "|   | key cookie, add a          |  t |r      /   \\    | override the  "
#~ "|   | Set-Cookie header with this|  u |u     /     \\   | invalid "
#~ "cookie|   | session key. Client then   |  r |e    /       \\  "
#~ "+---------------+   | returns session key with   |  n |    /  pass   "
#~ "\\               ^   | successive requests        |    |   /  session  "
#~ "\\              |   +----------------------------+    |  /   key to    "
#~ "\\    return   |                |                    +-| "
#~ "authen_ses_key|------------+                V                       "
#~ "\\             /     False   +-----------------------------------+ "
#~ "\\           /   | Tell Apache to set Expires header,|  \\         /   | "
#~ "set user to user ID returned by   |   \\       /   | authen_ses_key, set "
#~ "authentication|    \\     /   | to our type (e.g. AuthCookie).    |     "
#~ "\\   /   +-----------------------------------+      "
#~ "\\ /                                               V          "
#~ "(---------------------)              ^          ( Request a "
#~ "protected )              |          ( page, user has a    )--------------"
#~ "+          ( session key cookie  )          (---------------------)\n"
#~ "\n"
#~ "  * クライアントが取得するセッション鍵が全ての仕組みのベースになっていま"
#~ "す。セッション鍵は、たとえばユーザ情報を暗号化したものや、ユーザ名とパス"
#~ "ワードをハッシュ化 (Digest 認証のように) したもの、もしくはユーザ名とパス"
#~ "ワードをそのまま保存したもの (Basic 認証のように) さえもセッション鍵となり"
#~ "えます。\n"
#~ "\n"
#~ "    ただ 1 つの要件は、作成した authen_ses_key でセッション鍵の有効性を検"
#~ "証することができ、かつ元々のユーザ ID を割り出すことができることだけです。"

#~ msgid ""
#~ "The Archive::Zip module allows a Perl program to create, manipulate, "
#~ "read, and write Zip archive files.\n"
#~ "\n"
#~ "Zip archives can be created, or you can read from existing zip files.\n"
#~ "\n"
#~ "Once created, they can be written to files, streams, or strings. Members "
#~ "can be added, removed, extracted, replaced, rearranged, and enumerated. "
#~ "They can also be renamed or have their dates, comments, or other "
#~ "attributes queried or modified. Their data can be compressed or "
#~ "uncompressed as needed.\n"
#~ "\n"
#~ "Members can be created from members in existing Zip files, or from "
#~ "existing directories, files, or strings.\n"
#~ "\n"
#~ "This module uses the the Compress::Raw::Zlib manpage library to read and "
#~ "write the compressed streams inside the files.\n"
#~ "\n"
#~ "One can use the Archive::Zip::MemberRead manpage to read the zip file "
#~ "archive members as if they were files."
#~ msgstr ""
#~ "Archive::Zip モジュールは、 Perl プログラムから Zip 形式のアーカイブを作成"
#~ "したり、操作したり読み書きしたりすることができるものです。\n"
#~ "\n"
#~ "Zip アーカイブを作成することができるほか、既存の zip ファイルを読み込むこ"
#~ "ともできます。\n"
#~ "\n"
#~ "いったん Zip を作成すると、それらをファイルやストリーム、文字列などに書き"
#~ "込むことができます。内容を追加したり削除したり、取り出したり置き換えたり、"
#~ "再配置したり列挙したりすることもできます。それ以外にも、中身のファイル名を"
#~ "変更したり、日付やコメント、その他の属性を問い合わせたり修正したりすること"
#~ "もできます。また、 Zip は圧縮／非圧縮の両方に対応しています。\n"
#~ "\n"
#~ "メンバーは既存の Zip ファイルから作成することもできるほか、既存のディレク"
#~ "トリやファイル、文字列からも作成することができます。\n"
#~ "\n"
#~ "このモジュールは、ファイル内の圧縮ストリームを読み込むのに Compress::Raw::"
#~ "Zlibライブラリを使用しています。\n"
#~ "\n"
#~ "zip ファイルのアーカイブメンバーに対して、それらをファイルとして扱う場合"
#~ "は、Archive::Zip::MemberRead を使用することもできます。"

#~ msgid ""
#~ "This module offers a minimalist class construction kit in around 120 "
#~ "lines of code."
#~ msgstr ""
#~ "このモジュールは、 120 行のコードで作られた最小限のクラス構築キットです。"

#~ msgid ""
#~ "This class is the base class for all time zone objects. A time zone is "
#~ "represented internally as a set of observances, each of which describes "
#~ "the offset from GMT for a given time period.\n"
#~ "\n"
#~ "Note that without the the DateTime manpage module, this module does not "
#~ "do much. It's primary interface is through a the DateTime manpage object, "
#~ "and most users will not need to directly use 'DateTime::TimeZone' methods."
#~ msgstr ""
#~ "このクラスはすべてのタイムゾーンオブジェクトに対するベースクラスです。タイ"
#~ "ムゾーンは内部的には慣例集として表されるもので、各時刻を GMT からのオフ"
#~ "セットとして表記しています。\n"
#~ "\n"
#~ "なお、 DateTime モジュールがない場合、本モジュールは多くのことを実現できま"
#~ "せん。主なインターフェイスは DateTime オブジェクトを通して利用する仕組みで"
#~ "あるため、多くのユーザは 'DateTime::TimeZone' のメソッドを直接使用する必要"
#~ "はないはずです。"

#~ msgid ""
#~ "The 'Devel::StackTrace' module contains two classes, C,Devel::StackTrace> "
#~ "and the Devel::StackTrace::Frame manpage. These objects encapsulate the "
#~ "information that can retrieved via Perl's 'caller()' function, as well as "
#~ "providing a simple interface to this data.\n"
#~ "\n"
#~ "The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::"
#~ "Frame' objects, one for each level of the stack. The frames contain all "
#~ "the data available from 'caller()'.\n"
#~ "\n"
#~ "This code was created to support my the Exception::Class::Base manpage "
#~ "class (part of the Exception::Class manpage) but may be useful in other "
#~ "contexts."
#~ msgstr ""
#~ "'Devel::StackTrace' モジュールには 2 つのクラスが含まれています。それぞれ "
#~ "Devel::StackTrace, Devel::StackTrace::Frame というクラスで、これらのオブ"
#~ "ジェクトは Perl の'caller()' 関数を介して取得することができる情報をカプセ"
#~ "ル化し、このデータに対するシンプルなインターフェイスを提供します。\n"
#~ "\n"
#~ "'Devel::StackTrace' オブジェクトには、各スタックのレベルに対応した "
#~ "'Devel::StackTrace::Frame' オブジェクトが複数個含まれています。フレーム内"
#~ "には、 'caller()' で提供されるすべてのデータが含まれています。\n"
#~ "\n"
#~ "このコードは、私が作成している Exception::Class::Base クラス (Exception::"
#~ "Class の一部) に対応するために作ったものですが、他の箇所でも便利に使用する"
#~ "ことができます。"

#, fuzzy
#~ msgid "lightweight exporting of functions and variables"
#~ msgstr "軽量 LXDE 端末"

#~ msgid ""
#~ "This module tries to make it easy to build Perl extensions that use "
#~ "functions and typemaps provided by other perl extensions. This means that "
#~ "a perl extension is treated like a shared library that provides also a C "
#~ "and an XS interface besides the perl one.\n"
#~ "\n"
#~ "This works as long as the base extension is loaded with the RTLD_GLOBAL "
#~ "flag (usually done with a\n"
#~ "\n"
#~ "\tsub dl_load_flags {0x01}\n"
#~ "\n"
#~ "in the main .pm file) if you need to use functions defined in the "
#~ "module.\n"
#~ "\n"
#~ "The basic scheme of operation is to collect information about a module in "
#~ "the instance, and then store that data in the Perl library where it may "
#~ "be retrieved later. The object can also reformat this information into "
#~ "the data structures required by ExtUtils::MakeMaker's WriteMakefile "
#~ "function.\n"
#~ "\n"
#~ "For information on how to make your module fit into this scheme, see the /"
#~ "\"hashref = ExtUtils::Depends::load (name)\" manpage.\n"
#~ "\n"
#~ "When creating a new Depends object, you give it a name, which is the name "
#~ "of the module you are building. You can also specify the names of modules "
#~ "on which this module depends. These dependencies will be loaded "
#~ "automatically, and their typemaps, header files, etc merged with your new "
#~ "object's stuff. When you store the data for your object, the list of "
#~ "dependencies are stored with it, so that another module depending on your "
#~ "needn't know on exactly which modules yours depends.\n"
#~ "\n"
#~ "For example:\n"
#~ "\n"
#~ "  Gtk2 depends on Glib\n"
#~ "\n"
#~ "  Gnome2::Canvas depends on Gtk2\n"
#~ "\n"
#~ "  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      this command "
#~ "automatically brings in all the stuff needed      for Glib, since Gtk2 "
#~ "depends on it.\n"
#~ "\n"
#~ "When the configuration information is saved, it also includes a class "
#~ "method called 'Inline', inheritable by your module. This allows you in "
#~ "your module to simply say at the top:\n"
#~ "\n"
#~ "  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit "
#~ "'Inline' method\n"
#~ "\n"
#~ "And users of 'Mymod' who want to write inline code (using the Inline "
#~ "manpage) will simply be able to write:\n"
#~ "\n"
#~ "  use Inline with => 'Mymod';\n"
#~ "\n"
#~ "And all the necessary header files, defines, and libraries will be added "
#~ "for them.\n"
#~ "\n"
#~ "The 'Mymod::Install::Files' will also implement a 'deps' method, which "
#~ "will return a list of any modules that 'Mymod' depends on - you will not "
#~ "normally need to use this:\n"
#~ "\n"
#~ "  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"
#~ msgstr ""
#~ "このモジュールは、他の Perl 拡張が提供する関数やタイプマップを使用した新し"
#~ "い Perl 拡張の作成を支援するモジュールです。つまり、この Perl 拡張はC 言語"
#~ "で提供されているような共有ライブラリとして動作するもので、 Perl では XS イ"
#~ "ンターフェイスと呼ばれています。\n"
#~ "\n"
#~ "モジュール内で定義されている関数を使用したい場合、基本部分の拡張を "
#~ "RTLD_GLOBAL フラグ付きで読み込むこと(通常はメインの .pm ファイル内に\n"
#~ "\n"
#~ "\tsub dl_load_flags {0x01}\n"
#~ "\n"
#~ "を書き込んで行ないます) で動作します。\n"
#~ "\n"
#~ "基本的な動作としては、インスタンス内のモジュールに関する情報を収集し、"
#~ "Perl ライブラリ内のデータをあとから採取できるように、データを保存します。"
#~ "オブジェクト側ではこの情報を再度データ構造に書式化し、 ExtUtils::"
#~ "MakeMaker のWriteMakefile 関数で必要な形にします。\n"
#~ "\n"
#~ "お使いのモジュールをこのスキームに合わせる方法について、詳しくは /"
#~ "\"hashref = ExtUtils::Depends::load (name)\" のマニュアルページをお読みく"
#~ "ださい。\n"
#~ "\n"
#~ "新しい Depends オブジェクトを作成すると、構築するモジュールの名前を設定し"
#~ "ます。また、このモジュールが必要とするモジュールについても名前を設定しま"
#~ "す。これらの依存関係は自動的に読み込まれ、タイプマップやヘッダファイルなど"
#~ "は新しいオブジェクトの要素として組み込まれます。そのオブジェクトに対して"
#~ "データを保存すると依存関係の一覧が保存され、どのようなモジュールに依存して"
#~ "いるのかを知ることなく依存先のモジュールで作業を行なうことができます。\n"
#~ "\n"
#~ "例:\n"
#~ "\n"
#~ "  Gtk2 は Glib に依存しています。\n"
#~ "\n"
#~ "  Gnome2::Canvas は Gtk2 に依存しています。\n"
#~ "\n"
#~ "  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2'); このように実行する"
#~ "と、 Glib に対して必要なもの全てが自動的に組み込まれます。\n"
#~ "設定情報を保存すると、 'Inline' という名前のクラスメソッドを含めることにな"
#~ "ります。これはお使いのモジュールで継承可能な仕組みであるため、お使いのモ"
#~ "ジュールの冒頭部で、下記のように定義することができるようになります:\n"
#~ "\n"
#~ "  package Mymod;   use parent 'Mymod::Install::Files'; # 'Inline' メソッド"
#~ "の継承\n"
#~ "また、インラインのコードを (Inline で) 記述したい 'Mymod' のユーザは、下記"
#~ "のように記述することができます:\n"
#~ "\n"
#~ "  use Inline with => 'Mymod';\n"
#~ "\n"
#~ "上記のようにすることで、必要なヘッダファイルや定義、ライブラリなどが追加さ"
#~ "れるようになります。\n"
#~ "\n"
#~ "'Mymod::Install::Files' では 'deps' メソッドを実装することもできます。これ"
#~ "は 'Mymod' が依存する任意のモジュールのリストを帰すもので、通常は不要な仕"
#~ "組みです:\n"
#~ "\n"
#~ "  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"

#, fuzzy
#~ msgid "cpanfile support for EUMM"
#~ msgstr "SWP 向け OpenSSL サポート"

#, fuzzy
#~ msgid "a module to read Mozilla URL history files"
#~ msgstr "TNEF ファイルを読み込む Perl モジュール"

#~ msgid "Random Access Reads of Sequential File or Scalar"
#~ msgstr ""
#~ "シーケンシャル形式のファイルやスカラ値をランダムアクセスするモジュール"

#~ msgid "Portable implementation of the `which' utility"
#~ msgstr "`which' ユーティリティの可搬性のある実装"

#~ msgid ""
#~ "File::Which was created to be able to get the paths to executable "
#~ "programs on systems under which the `which' program wasn't implemented in "
#~ "the shell."
#~ msgstr ""
#~ "File::Which は `which' プログラムがシェル内に実装されていないシステムで、"
#~ "実行プログラムの絶対パスファイル名を取得するのに使用します。"

#, fuzzy
#~ msgid "Run a subprocess with input/ouput redirection"
#~ msgstr "入出力の転送機能付きサブプロセス実行"

#~ msgid ""
#~ "ExifTool is a customizable set of Perl modules plus a full-featured "
#~ "application for reading and writing meta information in a wide variety of "
#~ "files, including the maker note information of many digital cameras by "
#~ "various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
#~ "Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/"
#~ "Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and "
#~ "Sony."
#~ msgstr ""
#~ "ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書"
#~ "きするアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応"
#~ "していて、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, "
#~ "コダック, Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パ"
#~ "ナソニック／ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サン"
#~ "ヨー, Sigma/Foveon, SONY などに対応しています。"

#~ msgid ""
#~ "'Module::Build' is a system for building, testing, and installing Perl "
#~ "modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
#~ "Developers may alter the behavior of the module through subclassing in a "
#~ "much more straightforward way than with 'MakeMaker'. It also does not "
#~ "require a 'make' on your system - most of the 'Module::Build' code is "
#~ "pure-perl and written in a very cross-platform way.\n"
#~ "\n"
#~ "See the \"MOTIVATIONS\" manpage for more comparisons between 'ExtUtils::"
#~ "MakeMaker' and 'Module::Build'.\n"
#~ "\n"
#~ "To install 'Module::Build', and any other module that uses 'Module::"
#~ "Build' for its installation process, do the following:\n"
#~ "\n"
#~ "  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
#~ "Build             # Need ./ to ensure we're using this \"Build\" "
#~ "script   ./Build test        # and not another one that happens to be in "
#~ "the PATH   ./Build install\n"
#~ "\n"
#~ "This illustrates initial configuration and the running of three "
#~ "'actions'. In this case the actions run are 'build' (the default action), "
#~ "'test', and 'install'. Other actions defined so far include:\n"
#~ "\n"
#~ "  build                          manifest   "
#~ "clean                          manifest_skip   "
#~ "code                           manpages   config_data                    "
#~ "pardist   diff                           ppd   "
#~ "dist                           ppmdist   distcheck                      "
#~ "prereq_data   distclean                      prereq_report   "
#~ "distdir                        pure_install   "
#~ "distinstall                    realclean   distmeta                       "
#~ "retest   distsign                       skipcheck   "
#~ "disttest                       test   docs                           "
#~ "testall   fakeinstall                    testcover   "
#~ "help                           testdb   html                           "
#~ "testpod   install                        testpodcoverage   "
#~ "installdeps                    versioninstall\n"
#~ "\n"
#~ "You can run the 'help' action for a complete list of actions."
#~ msgstr ""
#~ "'Module::Build' は Perl モジュールを構築し、テストし、インストールするため"
#~ "のシステムです。 'ExtUtils::MakeMaker' の代替となるべく開発されています。"
#~ "開発者は 'MakeMaker' よりもずっと直観的な方法で、モジュールの動作を変更す"
#~ "ることもできます。また、お使いのシステムには 'make' を必要としなくなりま"
#~ "す。それは、 'Module::Build' のほとんどのコードは純粋な Perl で作成されて"
#~ "いて、クロスプラットフォームな方法で書かれているためです。\n"
#~ "\n"
#~ "'ExtUtils::MakeMaker' と 'Module::Build' の比較について、詳しくは "
#~ "\"MOTIVATIONS\" のマニュアルページをお読みください。\n"
#~ "\n"
#~ "'Module::Build' やこれをインストール時に使用するモジュールをインストールす"
#~ "るには、下記のようにして行ないます:\n"
#~ "\n"
#~ "  perl Build.PL       # 'Build.PL' スクリプトが 'Build' スクリプトを作成し"
#~ "ます   ./Build             # カレントディレクトリにある \"Build\" スクリプ"
#~ "トを指定して実行します   ./Build test           ./Build install\n"
#~ "\n"
#~ "これは初期設定と 3 種類の 'アクション' を説明しているものです。この場合、 "
#~ "'build' (既定のアクション), 'test', 'install' の各処理を実行しています。そ"
#~ "の他のアクションには、下記のようなものがあります:\n"
#~ "\n"
#~ "  build                          manifest   "
#~ "clean                          manifest_skip   "
#~ "code                           manpages   config_data                    "
#~ "pardist   diff                           ppd   "
#~ "dist                           ppmdist   distcheck                      "
#~ "prereq_data   distclean                      prereq_report   "
#~ "distdir                        pure_install   "
#~ "distinstall                    realclean   distmeta                       "
#~ "retest   distsign                       skipcheck   "
#~ "disttest                       test   docs                           "
#~ "testall   fakeinstall                    testcover   "
#~ "help                           testdb   html                           "
#~ "testpod   install                        testpodcoverage   "
#~ "installdeps                    versioninstall\n"
#~ "\n"
#~ "動作の一覧について、詳しくは 'help' のセクションをお読みください。"

#~ msgid ""
#~ "This module provides conflicts checking for the Module::Runtime manpage, "
#~ "which had a recent release that broke some versions of the Moose manpage. "
#~ "It is called from the Moose::Conflicts manpage and 'moose-outdated'."
#~ msgstr ""
#~ "このモジュールは、 Module::Runtime モジュールに対して矛盾チェックの機能を"
#~ "提供します。これは、 Moose のバージョンによっては依存関係を壊してしまうリ"
#~ "リースが存在していたことによるものです。 Moose::Conflicts および 'moose-"
#~ "outdated' から呼び出されます。"

#, fuzzy
#~ msgid ""
#~ "'Path::Class' is a module for manipulation of file and directory "
#~ "specifications (strings describing their locations, like ''/home/ken/foo."
#~ "txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It "
#~ "supports pretty much every platform Perl runs on, including Unix, "
#~ "Windows, Mac, VMS, Epoc, Cygwin, OS/2, and NetWare.\n"
#~ "\n"
#~ "The well-known module the File::Spec manpage also provides this service, "
#~ "but it's sort of awkward to use well, so people sometimes avoid it, or "
#~ "use it in a way that won't actually work properly on platforms "
#~ "significantly different than the ones they've tested their code on.\n"
#~ "\n"
#~ "In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the "
#~ "unsightly details so you can concentrate on your application code. "
#~ "Whereas 'File::Spec' provides functions for some common path "
#~ "manipulations, 'Path::Class' provides an object-oriented model of the "
#~ "world of path specifications and their underlying semantics. 'File::Spec' "
#~ "doesn't create any objects, and its classes represent the different ways "
#~ "in which paths must be manipulated on various platforms (not a very "
#~ "intuitive concept). 'Path::Class' creates objects representing files and "
#~ "directories, and provides methods that relate them to each other. For "
#~ "instance, the following 'File::Spec' code:\n"
#~ "\n"
#~ " my $absolute = File::Spec-"
#~ ">file_name_is_absolute(                   File::Spec->catfile( @dirs, "
#~ "$file )                 );\n"
#~ "\n"
#~ "can be written using 'Path::Class' as\n"
#~ "\n"
#~ " my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
#~ "\n"
#~ "or even as\n"
#~ "\n"
#~ " my $absolute = file( @dirs, $file )->is_absolute;\n"
#~ "\n"
#~ "Similar readability improvements should happen all over the place when "
#~ "using 'Path::Class'.\n"
#~ "\n"
#~ "Using 'Path::Class' can help solve real problems in your code too - for "
#~ "instance, how many people actually take the \"volume\" (like 'C:' on "
#~ "Windows) into account when writing 'File::Spec'-using code? I thought "
#~ "not. But if you use 'Path::Class', your file and directory objects will "
#~ "know what volumes they refer to and do the right thing.\n"
#~ "\n"
#~ "The guts of the 'Path::Class' code live in the the Path::Class::File "
#~ "manpage and the Path::Class::Dir manpage modules, so please see those "
#~ "modules' documentation for more details about how to use them."
#~ msgstr ""
#~ "`Path::Class' は、ファイルやディレクトリの指定 (たとえば `'/home/ken/foo."
#~ "txt''  や `'C:\\Windows\\Foo.txt'' のようなそれらを指し示す文字列) につい"
#~ "て、プラットフォームに 依存しない仕様を提供するモジュールです。 Unix, "
#~ "Windows, Mac, VMS, Epoc, Cygwin, OS/2, NetWare など、 Perl の動作する環境"
#~ "であればどこでも動作します。\n"
#~ "\n"
#~ "よく知られた `File::Spec' モジュールでもこのサービスを提供していますが、 "
#~ "使用するには不便であるため、ユーザはこれらの使用を避けるか、もしくは作成し"
#~ "た 環境とは異なるプラットフォームでは動作しない方法を使ってしまいがちで"
#~ "す。\n"
#~ "\n"
#~ " 事実、 `Path::Class' は `File::Spec' を内部的に使用していますが、全ての見"
#~ "苦しい詳細は 隠蔽されるようになっていますので、アプリケーションコードの作"
#~ "成に集中することができます。 また、 `File::Spec' はいくつかのパス操作のた"
#~ "めの関数を提供していますが、 `Path::Class' は パス仕様とそれに伴う作業の分"
#~ "野についてオブジェクト指向のモデルを提供しています。 `File::Spec' はいかな"
#~ "るオブジェクトも作成しませんし、それらのクラスは 様々なプラットフォームで"
#~ "操作するにあたって別々の方法をとらなければなりません (あまり直感的とは言え"
#~ "ません) 。`Path::Class' はファイルやディレクトリを示す オブジェクトを作成"
#~ "し、それらから相対的に探るためのメソッドを提供しています。"

#~ msgid ""
#~ "This module makes the functionality of the perltidy utility available to "
#~ "perl scripts. Any or all of the input parameters may be omitted, in which "
#~ "case the @ARGV array will be used to provide input parameters as "
#~ "described in the perltidy(1) man page.\n"
#~ "\n"
#~ "For example, the perltidy script is basically just this:\n"
#~ "\n"
#~ "    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
#~ "\n"
#~ "The call to *perltidy* returns a scalar *$error_flag* which is TRUE if an "
#~ "error caused premature termination, and FALSE if the process ran to "
#~ "normal completion. Additional discuss of errors is contained below in the "
#~ "the ERROR HANDLING manpage section."
#~ msgstr ""
#~ "このモジュールは、 Perl スクリプトに対して提供されている perltidy ユーティ"
#~ "リティの機能を実装したものです。入力パラメータは自由に省略することができま"
#~ "すが、この場合は @ARGV 配列が入力パラメータを指すものとみなされます (詳し"
#~ "くは perltidy(1) のマニュアルページをお読みください。\n"
#~ "\n"
#~ "たとえば、 perltidy スクリプトは下記のようにして使用します:\n"
#~ "\n"
#~ "    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
#~ "\n"
#~ "*perltidy* はスカラー値の *$error_flag* を返します。この値が TRUE の場合、"
#~ "何らかの問題が発生してエラーになったことを表し、 FALSE の場合は問題がな"
#~ "かったことを表します。エラーに対する処理について、詳しくはマニュアルページ"
#~ "の ERROR HANDLING セクションをお読みください。"

#~ msgid ""
#~ "This module provides a few convenience methods for testing exception "
#~ "based code. It is built with the Test::Builder manpage and plays happily "
#~ "with the Test::More manpage and friends.\n"
#~ "\n"
#~ "If you are not already familiar with the Test::More manpage now would be "
#~ "the time to go take a look.\n"
#~ "\n"
#~ "You can specify the test plan when you 'use Test::Exception' in the same "
#~ "way as 'use Test::More'. See the Test::More manpage for details.\n"
#~ "\n"
#~ "NOTE: Test::Exception only checks for exceptions. It will ignore other "
#~ "methods of stopping program execution - including exit(). If you have an "
#~ "exit() in evalled code Test::Exception will not catch this with any of "
#~ "its testing functions.\n"
#~ "\n"
#~ "NOTE: This module uses the Sub::Uplevel manpage and relies on overriding "
#~ "'CORE::GLOBAL::caller' to hide your test blocks from the call stack. If "
#~ "this use of global overrides concerns you, the the Test::Fatal manpage "
#~ "module offers a more minimalist alternative.\n"
#~ "\n"
#~ "* *throws_ok*\n"
#~ "\n"
#~ "  Tests to see that a specific exception is thrown. throws_ok() has two   "
#~ "forms:\n"
#~ "\n"
#~ "    throws_ok BLOCK REGEX, TEST_DESCRIPTION     throws_ok BLOCK CLASS, "
#~ "TEST_DESCRIPTION\n"
#~ "\n"
#~ "  In the first form the test passes if the stringified exception "
#~ "matches   the give regular expression. For example:\n"
#~ "\n"
#~ "      throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
#~ "\n"
#~ "  If your perl does not support 'qr//' you can also pass a regex-like   "
#~ "string, for example:\n"
#~ "\n"
#~ "      throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
#~ "\n"
#~ "  The second form of throws_ok() test passes if the exception is of the   "
#~ "same class as the one supplied, or a subclass of that class. For "
#~ "example:\n"
#~ "\n"
#~ "      throws_ok { $foo->bar } \"Error::Simple\", 'simple error';\n"
#~ "\n"
#~ "  Will only pass if the 'bar' method throws an Error::Simple exception, "
#~ "or   a subclass of an Error::Simple exception.\n"
#~ "\n"
#~ "  You can get the same effect by passing an instance of the exception "
#~ "you   want to look for. The following is equivalent to the previous "
#~ "example:\n"
#~ "\n"
#~ "      my $SIMPLE = Error::Simple->new;       throws_ok { $foo->bar } "
#~ "$SIMPLE, 'simple error';\n"
#~ "\n"
#~ "  Should a throws_ok() test fail it produces appropriate diagnostic   "
#~ "messages. For example:\n"
#~ "\n"
#~ "      not ok 3 - simple error                     \n"
#~ "\n"
#~ "  Like all other Test::Exception functions you can avoid prototypes by   "
#~ "passing a subroutine explicitly:\n"
#~ "\n"
#~ "      throws_ok( sub {$foo->bar}, \"Error::Simple\", 'simple error' );\n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  A description of the exception being checked is used if no optional "
#~ "test   description is passed.\n"
#~ "\n"
#~ "  NOTE: Remember when you 'die $string_without_a_trailing_newline' perl   "
#~ "will automatically add the current script line number, input line "
#~ "number   and a newline. This will form part of the string that throws_ok "
#~ "regular   expressions match against.\n"
#~ "\n"
#~ "* *dies_ok*\n"
#~ "\n"
#~ "  Checks that a piece of code dies, rather than returning normally. For   "
#~ "example:\n"
#~ "\n"
#~ "      sub div {           my ( $a, $b ) = @_;           return $a / "
#~ "$b;       };\n"
#~ "\n"
#~ "      dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
#~ "\n"
#~ "             dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  Remember: This test will pass if the code dies for any reason. If you   "
#~ "care about the reason it might be more sensible to write a more "
#~ "specific   test using throws_ok().\n"
#~ "\n"
#~ "  The test description is optional, but recommended.\n"
#~ "\n"
#~ "* *lives_ok*\n"
#~ "\n"
#~ "  Checks that a piece of code doesn't die. This allows your test script "
#~ "to   continue, rather than aborting if you get an unexpected exception. "
#~ "For   example:\n"
#~ "\n"
#~ "      sub read_file {           my $file = shift;           local "
#~ "$/;           open my $fh, '<', $file or die \"open failed ($!)\\n"
#~ "\";           $file = <FILE>;           return $file;       };\n"
#~ "\n"
#~ "      my $file;       lives_ok { $file = read_file('test.txt') } 'file "
#~ "read';\n"
#~ "\n"
#~ "             lives_ok( sub { $file = read_file('test.txt') }, 'file "
#~ "read' );\n"
#~ "\n"
#~ "  Should a lives_ok() test fail it produces appropriate diagnostic   "
#~ "messages. For example:\n"
#~ "\n"
#~ "      not ok 1 - file read              \n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  The test description is optional, but recommended.\n"
#~ "\n"
#~ "* *lives_and*\n"
#~ "\n"
#~ "  Run a test that may throw an exception. For example, instead of doing:\n"
#~ "\n"
#~ "    my $file;     lives_ok { $file = read_file('answer.txt') } 'read_file "
#~ "worked';     is $file, \"42\", 'answer was 42';\n"
#~ "\n"
#~ "  You can use lives_and() like this:\n"
#~ "\n"
#~ "    lives_and { is read_file('answer.txt'), \"42\" } 'answer is "
#~ "42';          lives_and(sub {is read_file('answer.txt'), \"42\"}, 'answer "
#~ "is 42');\n"
#~ "\n"
#~ "  Which is the same as doing\n"
#~ "\n"
#~ "    is read_file('answer.txt'), \"42\\n\", 'answer is 42';\n"
#~ "\n"
#~ "  unless 'read_file('answer.txt')' dies, in which case you get the same   "
#~ "kind of error as lives_ok()\n"
#~ "\n"
#~ "    not ok 1 - answer is 42          \n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  The test description is optional, but recommended."
#~ msgstr ""
#~ "このモジュールは、例外ベースのコードをテストするのに便利なメソッドをいくつ"
#~ "か提供しています。 Test::Builder で構築され、 Test::More などのモジュール"
#~ "を併用しています。\\n\n"
#~ "\\n\n"
#~ "Test::More について詳しくない場合は、まず下記をお読みください。\\n\n"
#~ "\\n\n"
#~ "'use Test::More' と同じ方法で 'use Test::Exception' を利用して、テストプラ"
#~ "ンを指定します。詳しくは Test::More のマニュアルページをお読みくださ"
#~ "い。\\n\n"
#~ "\\n\n"
#~ "注意: Test::Exception は例外の身をチェックします。 exit() など、プログラム"
#~ "の実行を止める他の方法については、無視してしまいます。テスト対象のコード"
#~ "で exit() を利用している場合、 Test::Exception はこのようなテスト結果を捕"
#~ "捉することができません。\\n\n"
#~ "\\n\n"
#~ "注意: このモジュールは Sub::Uplevel を利用しているほか、コールスタックから"
#~ "テストブロックを隠ぺいするために 'CORE::GLOBAL::caller' をオーバーライドす"
#~ "る処理に依存しています。このようなグローバルオーバーライドの仕組みに問題が"
#~ "ある場合は、最小限の代替手段である Test::Fatal をお使いください。\\n\n"
#~ "\\n\n"
#~ "* *throws_ok*\\n\n"
#~ "\\n\n"
#~ "  指定した例外がスローされたかどうかをテストします。 throws_ok() は 2 種類"
#~ "の利用法があります:\\n\n"
#~ "\\n\n"
#~ "    throws_ok BLOCK REGEX, TEST_DESCRIPTION     throws_ok BLOCK CLASS, "
#~ "TEST_DESCRIPTION\\n\n"
#~ "\\n\n"
#~ "  1 つめの形式は、例外を文字列に変換した場合、指定した正規表現にマッチすれ"
#~ "ばテストが通るようになります。たとえば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\\n\n"
#~ "\\n\n"
#~ "  お使いの Perl が 'qr//' に対応していない場合は、正規表現に似た形式を指定"
#~ "することもできます。たとえば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\\n\n"
#~ "\\n\n"
#~ "  throws_ok() の 2 つめの形式は、例外が指定したクラスと同じか、そのクラス"
#~ "のサブクラスであった場合にテストが通るようになります。たとえば下記のように"
#~ "なります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { $foo->bar } \\\"Error::Simple\\\", 'simple error';\\n\n"
#~ "\\n\n"
#~ "  上記の例では、 'bar' メソッドが Error:Simple もしくはそのサブクラスの例"
#~ "外を投げた場合にのみテストが通ります。\\n\n"
#~ "\\n\n"
#~ "  なお、スローさせたい例外のインスタンスを渡しても同じ効果になります。下記"
#~ "の例は、以前の例と同じ意味になります:\\n\n"
#~ "\\n\n"
#~ "      my $SIMPLE = Error::Simple->new;       throws_ok { $foo->bar } "
#~ "$SIMPLE, 'simple error';\\n\n"
#~ "\\n\n"
#~ "  テストが失敗した場合は、適切な診断メッセージを生成します。たとえば下記の"
#~ "ようになります:\\n\n"
#~ "\\n\n"
#~ "      not ok 3 - simple error                     \\n\n"
#~ "\\n\n"
#~ "  その他の Test::Exception 関数と同様に、サブルーチンを明示的に渡してプロ"
#~ "トタイプ化を防ぐこともできます:\\n\n"
#~ "\\n\n"
#~ "      throws_ok( sub {$foo->bar}, \\\"Error::Simple\\\", 'simple error' );"
#~ "\\n\n"
#~ "\\n\n"
#~ "  テストが成功した場合は true 値が返され、それ以外の場合は false 値が返さ"
#~ "れます。終了時、 $@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明を指定しない場合は、チェック対象の例外の説明が設定されま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "  注意: 'die $string_without_a_trailing_newline' で終了した場合、 Perl は"
#~ "現在のスクリプトの行番号と入力の行番号、および改行を自動的に追加します。こ"
#~ "れにより、 throws_ok() の正規表現がマッチした箇所を示します。\\n\n"
#~ "\\n\n"
#~ "* *dies_ok*\\n\n"
#~ "\\n\n"
#~ "  コードが die() するかどうかをテストします。たとえば下記のようになります:"
#~ "\\n\n"
#~ "\\n\n"
#~ "      sub div {           my ( $a, $b ) = @_;           return $a / "
#~ "$b;       };\\n\n"
#~ "\\n\n"
#~ "      dies_ok { div( 1, 0 ) } 'divide by zero detected';\\n\n"
#~ "\\n\n"
#~ "             dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );"
#~ "\\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  注意: このテストは何らかの理由で die() した場合に通過するテストです。可"
#~ "能であれば throws_ok() を利用して、特定の例外時にのみテストが通るようにし"
#~ "たほうがよいでしょう。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めしま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "* *lives_ok*\\n\n"
#~ "\\n\n"
#~ "  コード内で die() しないことをテストします。これにより、テストスクリプト"
#~ "が不正な例外などで abort しないことを確認することができます。たとえば下記"
#~ "のようになります:\\n\n"
#~ "\\n\n"
#~ "      sub read_file {           my $file = shift;           local "
#~ "$/;           open my $fh, '<', $file or die \\\"open failed ($!)\\\\n\\"
#~ "\";           $file = <FILE>;           return $file;       };\\n\n"
#~ "\\n\n"
#~ "      my $file;       lives_ok { $file = read_file('test.txt') } 'file "
#~ "read';\\n\n"
#~ "\\n\n"
#~ "             lives_ok( sub { $file = read_file('test.txt') }, 'file "
#~ "read' );\\n\n"
#~ "\\n\n"
#~ "  何らかの診断メッセージが生成された場合、 lives_ok() は失敗します。たとえ"
#~ "ば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      not ok 1 - file read              \\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めしま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "* *lives_and*\\n\n"
#~ "\\n\n"
#~ "  例外をスローする可能性のあるテストを実施することができます。たとえば下記"
#~ "のようなコードがあるものとします:\\n\n"
#~ "\\n\n"
#~ "    my $file;     lives_ok { $file = read_file('answer.txt') } 'read_file "
#~ "worked';     is $file, \\\"42\\\", 'answer was 42';\\n\n"
#~ "\\n\n"
#~ "  上記のコードは、 lives_and() を利用すると下記のようにすることができます:"
#~ "\\n\n"
#~ "\\n\n"
#~ "    lives_and { is read_file('answer.txt'), \\\"42\\\" } 'answer is "
#~ "42';          lives_and(sub {is read_file('answer.txt'), \\\"42\\\"}, "
#~ "'answer is 42');\\n\n"
#~ "\\n\n"
#~ "  これは 'read_file('answer.txt')' が die() しない場合は下記と同じ意味にな"
#~ "ります:\\n\n"
#~ "\\n\n"
#~ "    is read_file('answer.txt'), \\\"42\\\\n\\\", 'answer is 42';\\n\n"
#~ "\\n\n"
#~ "  'read_file('answer.txt')' が die() した場合は lives_ok() と同じ種類のエ"
#~ "ラーになります。\\n\n"
#~ "\\n\n"
#~ "    not ok 1 - answer is 42          \\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めします。"

#, fuzzy
#~ msgid "Test::Exception simplified"
#~ msgstr "例外ベースのコードに対するテスト"

#~ msgid ""
#~ "It often happens that you have non-Roman text data in Unicode, but you "
#~ "can't display it-- usually because you're trying to show it to a user via "
#~ "an application that doesn't support Unicode, or because the fonts you "
#~ "need aren't accessible. You could represent the Unicode characters as "
#~ "\"???????\" or \"\\15BA\\15A0\\1610...\", but that's nearly useless to "
#~ "the user who actually wants to read what the text says.\n"
#~ "\n"
#~ "What Text::Unidecode provides is a function, 'unidecode(...)' that takes "
#~ "Unicode data and tries to represent it in US-ASCII characters (i.e., the "
#~ "universally displayable characters between 0x00 and 0x7F). The "
#~ "representation is almost always an attempt at _transliteration_-- i.e., "
#~ "conveying, in Roman letters, the pronunciation expressed by the text in "
#~ "some other writing system. (See the example in the synopsis.)\n"
#~ "\n"
#~ "NOTE:\n"
#~ "\n"
#~ "To make sure your perldoc/Pod viewing setup for viewing this page is "
#~ "working: The six-letter word \"résumé\" should look like \"resume\" with "
#~ "an \"/\" accent on each \"e\".\n"
#~ "\n"
#~ "For further tests, and help if that doesn't work, see below, the /A POD "
#~ "ENCODING TEST manpage."
#~ msgstr ""
#~ "非ローマ文字のテキストデータが Unicode で記述されている場合、 Unicode に対"
#~ "応していないアプリケーションを利用していたり、対応するフォントをインストー"
#~ "ルしていないような場合には、それらを表示することができません。表示できな"
#~ "い Unicode 文字は \"???????\" や \"\\15BA\\15A0\\1610...\" のように表示さ"
#~ "れますが、テキストを読みたいユーザにとって、そのような表示は意味がありませ"
#~ "ん。\n"
#~ "\n"
#~ "Text::Unidecode は関数 'unidecode(...)' を提供しています。これは Unicode "
#~ "のデータを受け取って US-ASCII 文字 (0x00 から 0x7F までの一般的に表示可能"
#~ "な文字) で表そうとしてくれる関数です。表記は常にほとんど音訳の形で表され、"
#~ "そのテキストの発音に最も近いローマ文字になります (添付の例をお読みくださ"
#~ "い) 。\n"
#~ "\n"
#~ "注意:\n"
#~ "\n"
#~ "このページが正しく動作するかどうかお使いの perldoc/Pod の表示設定を確認し"
#~ "たい場合、 6 文字の単語 \"résumé\" が \"resume\" に似た表示になっているか"
#~ "どうかをご確認ください。 2, 6 文字目は \"e\" のアクセント表記です。\n"
#~ "\n"
#~ "さらに詳しいテストをしたい場合は、ヘルプではなく /A POD ENCODING TEST のマ"
#~ "ニュアルページをお読みください。"

#~ msgid "Variable ties made easier: much, much, much easier..."
#~ msgstr "変数の tie 機能をとてもとても簡単にするモジュール"

#~ msgid ""
#~ "This module adds the ability to quickly create new types of tie objects "
#~ "without creating a complete class. It does so in such a way as to try and "
#~ "make the programmers life easier when it comes to single-use ties.\n"
#~ "\n"
#~ "The 'Tie::Simple' package is actually a front-end to other classes which "
#~ "really do all the work once tied, but this package does the work to "
#~ "automatically figure out what you're trying to do."
#~ msgstr ""
#~ "このモジュールは、クラスを作成したりすることなく新しいタイプのタイ・オブ"
#~ "ジェクトを素早く作成するための機能を提供します。これにより単一使用のタイを"
#~ "作成することができるため、プログラマの手間を省くことができます。\n"
#~ "\n"
#~ "'Tie::Simple' パッケージは実際には tie された他のクラスに対するフロントエ"
#~ "ンドですが、このパッケージは自動的に何をするのかを検出することができます。"

#~ msgid "Minimal try/catch with proper preservation of $@"
#~ msgstr "$@ に対して適切な保持機能を追加した最小限の try/catch 実装"

#~ msgid ""
#~ "This module provides bare bones 'try'/'catch'/'finally' statements that "
#~ "are designed to minimize common mistakes with eval blocks, and NOTHING "
#~ "else.\n"
#~ "\n"
#~ "This is unlike the TryCatch manpage which provides a nice syntax and "
#~ "avoids adding another call stack layer, and supports calling 'return' "
#~ "from the 'try' block to return from the parent subroutine. These extra "
#~ "features come at a cost of a few dependencies, namely the Devel::Declare "
#~ "manpage and the Scope::Upper manpage which are occasionally problematic, "
#~ "and the additional catch filtering uses the Moose manpage type "
#~ "constraints which may not be desirable either.\n"
#~ "\n"
#~ "The main focus of this module is to provide simple and reliable error "
#~ "handling for those having a hard time installing the TryCatch manpage, "
#~ "but who still want to write correct 'eval' blocks without 5 lines of "
#~ "boilerplate each time.\n"
#~ "\n"
#~ "It's designed to work as correctly as possible in light of the various "
#~ "pathological edge cases (see the /BACKGROUND manpage) and to be "
#~ "compatible with any style of error values (simple strings, references, "
#~ "objects, overloaded objects, etc).\n"
#~ "\n"
#~ "If the 'try' block dies, it returns the value of the last statement "
#~ "executed in the 'catch' block, if there is one. Otherwise, it returns "
#~ "'undef' in scalar context or the empty list in list context. The "
#~ "following examples all assign '\"bar\"' to '$x':\n"
#~ "\n"
#~ "  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
#~ "\" } || { \"bar\" };   my $x = (try { die \"foo\" }) // { \"bar\" };\n"
#~ "\n"
#~ "  my $x = eval { die \"foo\" } || \"bar\";\n"
#~ "\n"
#~ "You can add 'finally' blocks, yielding the following:\n"
#~ "\n"
#~ "  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
#~ "catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
#~ "\n"
#~ "'finally' blocks are always executed making them suitable for cleanup "
#~ "code which cannot be handled using local. You can add as many 'finally' "
#~ "blocks to a given 'try' block as you like."
#~ msgstr ""
#~ "このモジュールは、一般的な eval ブロックにおけるコーディングミスを排除する"
#~ "ため、'try'/'catch'/'finally' にあたるブロックの雛形を生成するだけの仕組み"
#~ "です。\n"
#~ "\n"
#~ "TryCatch のように見やすく、かつ他の呼び出し階層を追加したりすることもな"
#~ "く、'try' ブロック内からの 'return' や親サブルーチンからの return にも対応"
#~ "したTryCatch モジュールとは、異なる仕組みです。これらの追加機能は少ない依"
#~ "存関係で処理できる仕組みで、具体的には時々問題の元凶ともなりうる Devel::"
#~ "Declare と Scope::Upper を使用することになります。また、追加の catch フィ"
#~ "ルタリングを使用することで、あまり積極的には使われない Moose タイプ制約を"
#~ "使用することにもなります。\n"
#~ "\n"
#~ "このモジュールの主な目的は、 TryCatch をインストールするだけの手間暇をかけ"
#~ "ることはしたくないが、 'eval' で始まる 5 行の決まり文句を記述し続けたい人"
#~ "に対して、シンプルで信頼性の高いエラー処理機能を提供します。\n"
#~ "\n"
#~ "このモジュールは、様々な例外ケースをできる限り正しく処理できるように設計し"
#~ "ているもの (詳しくはマニュアルページ内の /BACKGROUND をお読みください) "
#~ "で、様々な形態のエラー値 (単純な文字列、参照、オブジェクト、オーバーロード"
#~ "されたオブジェクトなど) との互換性も確保されています。\n"
#~ "\n"
#~ "もしも 'try' ブロック内で何らかの例外 (die) が発生すると、 'catch' ブロッ"
#~ "ク内では最後に実行されたステートメントの値が返されます。例外が発生しない場"
#~ "合は、スカラーコンテキストの場合は 'undef' が、リストの場合は空のリストが"
#~ "返されます。下記の例は、いずれも '$x' に '\"bar\"' を代入します:\n"
#~ "\n"
#~ "  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
#~ "\" } || { \"bar\" };   my $x = (try { die \"foo\" }) // { \"bar\" };\n"
#~ "\n"
#~ "  my $x = eval { die \"foo\" } || \"bar\";\n"
#~ "\n"
#~ "下記のようにして 'finally' ブロックを追加することもできます。\n"
#~ "\n"
#~ "  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
#~ "catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
#~ "\n"
#~ "'finally' のブロックは、 local を利用して処理することのできない、後処理用"
#~ "のコードを作成するのに便利な仕組みです。必要に応じて複数の 'finally' ブ"
#~ "ロックを追加することもできます。"

#, fuzzy
#~ msgid "Interface to Url Shortening Sites"
#~ msgstr "Adobe フォントメトリックファイルへのインターフェイス"

#~ msgid "Persistent session data in CGI applications"
#~ msgstr "CGI アプリケーション内での永続セッションデータ"

#~ msgid ""
#~ "CGI-Session is a Perl5 library that provides an easy, reliable and "
#~ "modular session management system across HTTP requests. Persistency is a "
#~ "key feature for such applications as shopping carts, login/authentication "
#~ "routines, and application that need to carry data across HTTP requests. "
#~ "CGI::Session does that and many more."
#~ msgstr ""
#~ "CGI-Session は簡易で信頼性のある、モジュール型の HTTP セッション管理システ"
#~ "ムです。 永続性とはショッピングカートやログイン／認証ルーチン、その他 "
#~ "HTTP リクエストをまたがって 情報をやりとりしなければならない様々なアプリ"
#~ "ケーション向けの中心的な機能です。 CGI::Session はこれを実現しているほか、"
#~ "様々な追加機能も備えています。"

#~ msgid ""
#~ "The _Compress::Bzip2_ module provides a Perl interface to the *bzip2* "
#~ "compression library (see the /AUTHOR manpage for details about where to "
#~ "get _Bzip2_). A relevant subset of the functionality provided by _bzip2_ "
#~ "is available in _Compress::Bzip2_.\n"
#~ "\n"
#~ "All string parameters can either be a scalar or a scalar reference.\n"
#~ "\n"
#~ "The module can be split into two general areas of functionality, namely "
#~ "in-memory compression/decompression and read/write access to _bzip2_ "
#~ "files. Each of these areas will be discussed separately below.\n"
#~ "\n"
#~ "*NOTE*\n"
#~ "\n"
#~ "_Compress::Bzip2_ is just a simple _bzip2_ binding, comparable to the old "
#~ "the Compress::Zlib manpage library. It is not well integrated into "
#~ "PerlIO, use the preferred the IO::Compress::Bzip2 manpage instead."
#~ msgstr ""
#~ "_Compress::Bzip2_ モジュールは、 *bzip2* 圧縮ライブラリに対する Perl イン"
#~ "ターフェイスを提供しています (_Bzip2_ の取得方法についての詳細は、マニュア"
#~ "ルページ /AUTHOR をお読みください) 。 _bzip2_ で提供されているその他の機能"
#~ "についても、 _Compress::Bzip2_ で利用できます。\n"
#~ "\n"
#~ "全ての文字列パラメータは、スカラー値またはスカラー値の参照して指定すること"
#~ "ができます。\n"
#~ "\n"
#~ "このモジュールは、メモリ内での圧縮展開と _bzip2_ ファイルの読み書きアクセ"
#~ "スで大きく 2 つの機能に分けられます。それぞれの領域について、詳しくは説明"
#~ "文書をお読みください。\n"
#~ "\n"
#~ "*注意*\n"
#~ "\n"
#~ "_Compress::Bzip2_ はシンプルな _bzip2_ バインディングであり、古い "
#~ "Compress::Zlib ライブラリに似た仕組みです。 PerlIO とは十分に統合されてい"
#~ "ませんので、そのような目的の場合は IO::Compress::Bzip2 をお使いください。"

#~ msgid "Extract data from Macintosh BinHex files"
#~ msgstr "Macintosh BinHex ファイルからのデータ抽出"

#~ msgid ""
#~ "BinHex is a format used by Macintosh for transporting Mac files safely "
#~ "through electronic mail, as short-lined, 7-bit, semi-compressed data "
#~ "streams. This module provides a means of converting those data streams "
#~ "back into binary data."
#~ msgstr ""
#~ "BinHex は Macintosh で使用されるデータ形式で、電子メールを介して Mac の"
#~ "ファイルを安全にやりとりするためのものです。短い行で 7 ビットの、少し圧縮"
#~ "したデータストリームになっています。このモジュールは、これらのデータスト"
#~ "リームをバイナリデータに戻す処理を提供します。"

#~ msgid ""
#~ "SQLite is a public domain file-based relational database engine that you "
#~ "can find at the http://www.sqlite.org/ manpage.\n"
#~ "\n"
#~ "*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
#~ "thing in the distribution. So in order to get a fast transaction capable "
#~ "RDBMS working for your perl project you simply have to install this "
#~ "module, and *nothing* else.\n"
#~ "\n"
#~ "SQLite supports the following features:\n"
#~ "\n"
#~ "* Implements a large subset of SQL92\n"
#~ "\n"
#~ "  See the http://www.sqlite.org/lang.html manpage for details.\n"
#~ "\n"
#~ "* A complete DB in a single disk file\n"
#~ "\n"
#~ "  Everything for your database is stored in a single disk file, making "
#~ "it   easier to move things around than with the DBD::CSV manpage.\n"
#~ "\n"
#~ "* Atomic commit and rollback\n"
#~ "\n"
#~ "  Yes, *DBD::SQLite* is small and light, but it supports full "
#~ "transactions!\n"
#~ "\n"
#~ "* Extensible\n"
#~ "\n"
#~ "  User-defined aggregate or regular functions can be registered with "
#~ "the   SQL parser.\n"
#~ "\n"
#~ "There's lots more to it, so please refer to the docs on the SQLite web "
#~ "page, listed above, for SQL details. Also refer to the DBI manpage for "
#~ "details on how to use DBI itself. The API works like every DBI module "
#~ "does. However, currently many statement attributes are not implemented or "
#~ "are limited by the typeless nature of the SQLite database."
#~ msgstr ""
#~ "SQLite (http://www.sqlite.org/) はパブリックドメインで公開されているファイ"
#~ "ルベースのリレーショナルデータベースエンジンです。\n"
#~ "\n"
#~ "*DBD::SQLite* は SQLite 向けの Perl DBI ドライバで、配布物のすべてが含まれ"
#~ "ていますので、このモジュールをインストールするだけで、お使いの Perl プロ"
#~ "ジェクトを高速でトランザクションにも対応する RDBMS を利用できるようになり"
#~ "ます。\n"
#~ "\n"
#~ "SQLIte には下記のような機能があります:\n"
#~ "\n"
#~ "* SQL92 のラージサブセットに対応\n"
#~ "\n"
#~ "  詳しくは http://www.sqlite.org/lang.html をお読みください。\n"
#~ "\n"
#~ "* 単一のディスクファイルによる完全な DB\n"
#~ "\n"
#~ "  データベースに必要な情報すべてが単一のディスクファイルに記録されます。こ"
#~ "れにより、 DBD::CSV などよりも簡単に扱うことができるようになります。\n"
#~ "\n"
#~ "* アトミックなコミットとロールバック\n"
#~ "\n"
#~ "  *DBD::SQLite* は小さくて軽量ですが、トランザクションに完全対応していま"
#~ "す！\n"
#~ "\n"
#~ "* 拡張可能性\n"
#~ "\n"
#~ "  ユーザ定義の集計関数または通常関数を SQL パーサに登録することができま"
#~ "す。\n"
#~ "\n"
#~ "上記以外にも SQLite には様々な機能が用意されています。 SQL の詳細につい"
#~ "て、詳しくは上述の SQLite の Web ページをご覧ください。また、 DBI の使用方"
#~ "法については、 DBI のマニュアルページをお読みください。 API は DBI が提供"
#~ "する機能それぞれに対応していますが、多くのステートメント属性は未実装のまま"
#~ "であるほか、 SQLite が型を持たない仕組みであることによる制限もあることにご"
#~ "注意ください。"

#~ msgid "Provides Access to XBase Files"
#~ msgstr "XBase ファイルへのアクセス"

#~ msgid ""
#~ "Module XBase provides access to XBase (dBase, Fox*) database files, "
#~ "namely dbf, dbt, fpt, ndx, ntx, mdx, idx and cdx."
#~ msgstr ""
#~ "XBase モジュールは、 XBase (dBase, Fox*) データベースファイルへのアクセス"
#~ "を 提供します。 dbf, dbt, fpt, ndx, ntx, mdx, idx, cdx などの名前が付けら"
#~ "れている場合もあります。"

#~ msgid "Provides access to time-delayed stockquotes"
#~ msgstr "時間遅れの株価情報にアクセスするモジュール"

#~ msgid ""
#~ "Finance::Quote provides access to time-delayed stockquotes from a number "
#~ "of sources.  After you've installed the pacakage, try 'perldoc Finance::"
#~ "Quote' for full information.  Alternatively, you can 'perldoc lib/Finance/"
#~ "Quote.pm' before the install."
#~ msgstr ""
#~ "Finance::Quote は、複数の情報源から提供される遅延のある株価情報 にアクセス"
#~ "する手段を提供します。このパッケージをインストールしたあと、 'perldoc "
#~ "Finance::Quote' と入力することで完全なドキュメンテーションを参照することが"
#~ "できます。 また、インストール前であれば 'perldoc lib/Finance/Quote.pm' と"
#~ "入力しても参照できます。"

#~ msgid ""
#~ "*List::MoreUtils* provides some trivial but commonly needed functionality "
#~ "on lists which is not going to go into the List::Util manpage.\n"
#~ "\n"
#~ "All of the below functions are implementable in only a couple of lines of "
#~ "Perl code. Using the functions from this module however should give "
#~ "slightly better performance as everything is implemented in C. The pure-"
#~ "Perl implementation of these functions only serves as a fallback in case "
#~ "the C portions of this module couldn't be compiled on this machine."
#~ msgstr ""
#~ "*List::MoreUtils* は、リストに対する機能のうち List::Util には取り入れられ"
#~ "なかった、細かくも一般的に必要となるだろう機能が含まれています。\n"
#~ "\n"
#~ "下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、こ"
#~ "れらのモジュールが提供する機能は、全てを C 言語で実装した場合と同じくらい"
#~ "比較的高速に動作します。これらの機能の純粋な Perl 版は、このモジュールが対"
#~ "象のマシンでコンパイルできなかった場合のフォールバックとしてのみ動作しま"
#~ "す。"

#~ msgid ""
#~ "Moose is an extension of the Perl 5 object system.\n"
#~ "\n"
#~ "The main goal of Moose is to make Perl 5 Object Oriented programming "
#~ "easier, more consistent, and less tedious. With Moose you can think more "
#~ "about what you want to do and less about the mechanics of OOP.\n"
#~ "\n"
#~ "Additionally, Moose is built on top of the Class::MOP manpage, which is a "
#~ "metaclass system for Perl 5. This means that Moose not only makes "
#~ "building normal Perl 5 objects better, but it provides the power of "
#~ "metaclass programming as well."
#~ msgstr ""
#~ "Moose は Perl 5 のオブジェクトシステムに対する拡張です。\n"
#~ "\n"
#~ "Moose の主な目的は、 Perl 5 のオブジェクト志向プログラミングを、よりわかり"
#~ "やすくより一貫した仕組みにし、つまらなさを排除することにあります。 Moose "
#~ "を利用することで、やりたいことを明確にし、 OOP の仕組みそのものに対して心"
#~ "配する必要がなくなります。\n"
#~ "\n"
#~ "これに加えて、 Moose は Class::MOP 上で構築されています。これは Perl 5 向"
#~ "けのメタクラスシステムで、 Moose は通常のオブジェクトを簡単に構築できるだ"
#~ "けでなく、メタクラスプログラミングの利点をも享受できることになります。"

#~ msgid "allow easy manipulation of IPv4 and IPv6 addresses"
#~ msgstr "IPv4 および IPv6 アドレスの処理"

#~ msgid ""
#~ "Readonly.pm provides a facility for creating non-modifiable scalars, "
#~ "arrays, and hashes.\n"
#~ "\n"
#~ "Authors:     Eric J. Roode, roode@cpan.org"
#~ msgstr ""
#~ "Readonly.pm は修正することのできないスカラー値や配列、ハッシュなどの仕組み"
#~ "を提供します。\n"
#~ "\n"
#~ "作者:        Eric J. Roode, roode@cpan.org"
